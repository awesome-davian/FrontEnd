'use strict';

const defaultTo = require('lodash/defaultTo');
const Macro = require('./Macro');

class GeoPoint extends Macro {

	constructor(meta, options = {}) {
		super(meta, options);
		
		this.timeFrom = 0;
		this.timeTo = 0;
		this.lod = defaultTo(options.lod, 4);
		this.transform = data => {
			if (this.lod > 0) {
				const view = new DataView(data);
				const pointsByteLength = view.getUint32(0, true /* little endian */);
				const offsetsByteLength = view.getUint32(4, true  /* little endian */);
				const points = data.slice(8, 8+pointsByteLength);
				const offsets = data.slice(8+pointsByteLength, 8+pointsByteLength+offsetsByteLength);
				return {
					points: new Float32Array(points),
					offsets: new Uint32Array(offsets)
				};
			}
			return new Float32Array(data);
		};
	}

	hasUpdatedParameters() {
		return this.updatedParameters;
	}

	resetParameters() {
		this.updatedParameters = false;
	}

	setTimeFrom(timeFrom) {
		if (this.timeFrom !== timeFrom) {
			this.updatedParameters = true;
			this.timeFrom = timeFrom;
		}
	}

	setTimeTo(timeTo) {
		if (this.timeTo !== timeTo) {
			this.updatedParameters = true;
			this.timeTo = timeTo;
		}
	}

	setQueryWord(word) {
		if (this.word !== word) {
			this.updatedParameters == true;
			this.word = word;
		}
	}

	getTile(name = "geopoint") {
		const params = {
			xField: this.xField,
			yField: this.yField,
			left: this.left,
			right: this.right,
			bottom: this.bottom,
			top: this.top,
			resolution: this.resolution,
			lod: this.lod,
			timeFrom: this.timeFrom,
			timeTo: this.timeTo,
			word: this.word
		};
		const tile = {};
		tile[name] = params;
		return tile;
	}
}

module.exports = GeoPoint;