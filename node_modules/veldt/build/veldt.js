(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.veldt = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';var getNative=require('./_getNative'),root=require('./_root');/* Built-in method references that are verified to be native. */var DataView=getNative(root,'DataView');module.exports=DataView;

},{"./_getNative":57,"./_root":93}],2:[function(require,module,exports){
'use strict';var hashClear=require('./_hashClear'),hashDelete=require('./_hashDelete'),hashGet=require('./_hashGet'),hashHas=require('./_hashHas'),hashSet=require('./_hashSet');/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}// Add methods to `Hash`.
Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;module.exports=Hash;

},{"./_hashClear":63,"./_hashDelete":64,"./_hashGet":65,"./_hashHas":66,"./_hashSet":67}],3:[function(require,module,exports){
'use strict';var listCacheClear=require('./_listCacheClear'),listCacheDelete=require('./_listCacheDelete'),listCacheGet=require('./_listCacheGet'),listCacheHas=require('./_listCacheHas'),listCacheSet=require('./_listCacheSet');/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}// Add methods to `ListCache`.
ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;module.exports=ListCache;

},{"./_listCacheClear":74,"./_listCacheDelete":75,"./_listCacheGet":76,"./_listCacheHas":77,"./_listCacheSet":78}],4:[function(require,module,exports){
'use strict';var getNative=require('./_getNative'),root=require('./_root');/* Built-in method references that are verified to be native. */var Map=getNative(root,'Map');module.exports=Map;

},{"./_getNative":57,"./_root":93}],5:[function(require,module,exports){
'use strict';var mapCacheClear=require('./_mapCacheClear'),mapCacheDelete=require('./_mapCacheDelete'),mapCacheGet=require('./_mapCacheGet'),mapCacheHas=require('./_mapCacheHas'),mapCacheSet=require('./_mapCacheSet');/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}// Add methods to `MapCache`.
MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;module.exports=MapCache;

},{"./_mapCacheClear":79,"./_mapCacheDelete":80,"./_mapCacheGet":81,"./_mapCacheHas":82,"./_mapCacheSet":83}],6:[function(require,module,exports){
'use strict';var getNative=require('./_getNative'),root=require('./_root');/* Built-in method references that are verified to be native. */var Promise=getNative(root,'Promise');module.exports=Promise;

},{"./_getNative":57,"./_root":93}],7:[function(require,module,exports){
'use strict';var getNative=require('./_getNative'),root=require('./_root');/* Built-in method references that are verified to be native. */var Set=getNative(root,'Set');module.exports=Set;

},{"./_getNative":57,"./_root":93}],8:[function(require,module,exports){
'use strict';var MapCache=require('./_MapCache'),setCacheAdd=require('./_setCacheAdd'),setCacheHas=require('./_setCacheHas');/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}// Add methods to `SetCache`.
SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;module.exports=SetCache;

},{"./_MapCache":5,"./_setCacheAdd":94,"./_setCacheHas":95}],9:[function(require,module,exports){
'use strict';var ListCache=require('./_ListCache'),stackClear=require('./_stackClear'),stackDelete=require('./_stackDelete'),stackGet=require('./_stackGet'),stackHas=require('./_stackHas'),stackSet=require('./_stackSet');/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}// Add methods to `Stack`.
Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;module.exports=Stack;

},{"./_ListCache":3,"./_stackClear":97,"./_stackDelete":98,"./_stackGet":99,"./_stackHas":100,"./_stackSet":101}],10:[function(require,module,exports){
'use strict';var root=require('./_root');/** Built-in value references. */var _Symbol=root.Symbol;module.exports=_Symbol;

},{"./_root":93}],11:[function(require,module,exports){
'use strict';var root=require('./_root');/** Built-in value references. */var Uint8Array=root.Uint8Array;module.exports=Uint8Array;

},{"./_root":93}],12:[function(require,module,exports){
'use strict';var getNative=require('./_getNative'),root=require('./_root');/* Built-in method references that are verified to be native. */var WeakMap=getNative(root,'WeakMap');module.exports=WeakMap;

},{"./_getNative":57,"./_root":93}],13:[function(require,module,exports){
"use strict";/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}module.exports=arrayFilter;

},{}],14:[function(require,module,exports){
'use strict';var baseTimes=require('./_baseTimes'),isArguments=require('./isArguments'),isArray=require('./isArray'),isBuffer=require('./isBuffer'),isIndex=require('./_isIndex'),isTypedArray=require('./isTypedArray');/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
isIndex(key,length)))){result.push(key);}}return result;}module.exports=arrayLikeKeys;

},{"./_baseTimes":41,"./_isIndex":68,"./isArguments":113,"./isArray":114,"./isBuffer":116,"./isTypedArray":122}],15:[function(require,module,exports){
"use strict";/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}module.exports=arrayMap;

},{}],16:[function(require,module,exports){
"use strict";/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}module.exports=arrayPush;

},{}],17:[function(require,module,exports){
"use strict";/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}module.exports=arraySome;

},{}],18:[function(require,module,exports){
'use strict';var eq=require('./eq');/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return-1;}module.exports=assocIndexOf;

},{"./eq":108}],19:[function(require,module,exports){
"use strict";/**
 * The base implementation of `_.clamp` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to clamp.
 * @param {number} [lower] The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the clamped number.
 */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined){number=number<=upper?number:upper;}if(lower!==undefined){number=number>=lower?number:lower;}}return number;}module.exports=baseClamp;

},{}],20:[function(require,module,exports){
'use strict';var baseForOwn=require('./_baseForOwn'),createBaseEach=require('./_createBaseEach');/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */var baseEach=createBaseEach(baseForOwn);module.exports=baseEach;

},{"./_baseForOwn":22,"./_createBaseEach":48}],21:[function(require,module,exports){
'use strict';var createBaseFor=require('./_createBaseFor');/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */var baseFor=createBaseFor();module.exports=baseFor;

},{"./_createBaseFor":49}],22:[function(require,module,exports){
'use strict';var baseFor=require('./_baseFor'),keys=require('./keys');/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys);}module.exports=baseForOwn;

},{"./_baseFor":21,"./keys":123}],23:[function(require,module,exports){
'use strict';var castPath=require('./_castPath'),toKey=require('./_toKey');/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */function baseGet(object,path){path=castPath(path,object);var index=0,length=path.length;while(object!=null&&index<length){object=object[toKey(path[index++])];}return index&&index==length?object:undefined;}module.exports=baseGet;

},{"./_castPath":46,"./_toKey":103}],24:[function(require,module,exports){
'use strict';var arrayPush=require('./_arrayPush'),isArray=require('./isArray');/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}module.exports=baseGetAllKeys;

},{"./_arrayPush":16,"./isArray":114}],25:[function(require,module,exports){
'use strict';var _Symbol=require('./_Symbol'),getRawTag=require('./_getRawTag'),objectToString=require('./_objectToString');/** `Object#toString` result references. */var nullTag='[object Null]',undefinedTag='[object Undefined]';/** Built-in value references. */var symToStringTag=_Symbol?_Symbol.toStringTag:undefined;/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}module.exports=baseGetTag;

},{"./_Symbol":10,"./_getRawTag":58,"./_objectToString":91}],26:[function(require,module,exports){
"use strict";/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */function baseHasIn(object,key){return object!=null&&key in Object(object);}module.exports=baseHasIn;

},{}],27:[function(require,module,exports){
'use strict';var baseGetTag=require('./_baseGetTag'),isObjectLike=require('./isObjectLike');/** `Object#toString` result references. */var argsTag='[object Arguments]';/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}module.exports=baseIsArguments;

},{"./_baseGetTag":25,"./isObjectLike":120}],28:[function(require,module,exports){
'use strict';var baseIsEqualDeep=require('./_baseIsEqualDeep'),isObjectLike=require('./isObjectLike');/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}module.exports=baseIsEqual;

},{"./_baseIsEqualDeep":29,"./isObjectLike":120}],29:[function(require,module,exports){
'use strict';var Stack=require('./_Stack'),equalArrays=require('./_equalArrays'),equalByTag=require('./_equalByTag'),equalObjects=require('./_equalObjects'),getTag=require('./_getTag'),isArray=require('./isArray'),isBuffer=require('./isBuffer'),isTypedArray=require('./isTypedArray');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1;/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',objectTag='[object Object]';/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}module.exports=baseIsEqualDeep;

},{"./_Stack":9,"./_equalArrays":50,"./_equalByTag":51,"./_equalObjects":52,"./_getTag":60,"./isArray":114,"./isBuffer":116,"./isTypedArray":122}],30:[function(require,module,exports){
'use strict';var Stack=require('./_Stack'),baseIsEqual=require('./_baseIsEqual');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object==null){return!length;}object=Object(object);while(index--){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object)){return false;}}while(++index<length){data=matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(objValue===undefined&&!(key in object)){return false;}}else{var stack=new Stack();if(customizer){var result=customizer(objValue,srcValue,key,object,source,stack);}if(!(result===undefined?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):result)){return false;}}}return true;}module.exports=baseIsMatch;

},{"./_Stack":9,"./_baseIsEqual":28}],31:[function(require,module,exports){
'use strict';var isFunction=require('./isFunction'),isMasked=require('./_isMasked'),isObject=require('./isObject'),toSource=require('./_toSource');/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used for built-in method references. */var funcProto=Function.prototype,objectProto=Object.prototype;/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}module.exports=baseIsNative;

},{"./_isMasked":71,"./_toSource":104,"./isFunction":117,"./isObject":119}],32:[function(require,module,exports){
'use strict';var baseGetTag=require('./_baseGetTag'),isLength=require('./isLength'),isObjectLike=require('./isObjectLike');/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',funcTag='[object Function]',mapTag='[object Map]',numberTag='[object Number]',objectTag='[object Object]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',weakMapTag='[object WeakMap]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}module.exports=baseIsTypedArray;

},{"./_baseGetTag":25,"./isLength":118,"./isObjectLike":120}],33:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var baseMatches=require('./_baseMatches'),baseMatchesProperty=require('./_baseMatchesProperty'),identity=require('./identity'),isArray=require('./isArray'),property=require('./property');/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */function baseIteratee(value){// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
if(typeof value=='function'){return value;}if(value==null){return identity;}if((typeof value==='undefined'?'undefined':_typeof(value))=='object'){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}module.exports=baseIteratee;

},{"./_baseMatches":37,"./_baseMatchesProperty":38,"./identity":112,"./isArray":114,"./property":128}],34:[function(require,module,exports){
'use strict';var isPrototype=require('./_isPrototype'),nativeKeys=require('./_nativeKeys');/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}module.exports=baseKeys;

},{"./_isPrototype":72,"./_nativeKeys":88}],35:[function(require,module,exports){
'use strict';var isObject=require('./isObject'),isPrototype=require('./_isPrototype'),nativeKeysIn=require('./_nativeKeysIn');/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}module.exports=baseKeysIn;

},{"./_isPrototype":72,"./_nativeKeysIn":89,"./isObject":119}],36:[function(require,module,exports){
'use strict';var baseEach=require('./_baseEach'),isArrayLike=require('./isArrayLike');/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}module.exports=baseMap;

},{"./_baseEach":20,"./isArrayLike":115}],37:[function(require,module,exports){
'use strict';var baseIsMatch=require('./_baseIsMatch'),getMatchData=require('./_getMatchData'),matchesStrictComparable=require('./_matchesStrictComparable');/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */function baseMatches(source){var matchData=getMatchData(source);if(matchData.length==1&&matchData[0][2]){return matchesStrictComparable(matchData[0][0],matchData[0][1]);}return function(object){return object===source||baseIsMatch(object,source,matchData);};}module.exports=baseMatches;

},{"./_baseIsMatch":30,"./_getMatchData":56,"./_matchesStrictComparable":85}],38:[function(require,module,exports){
'use strict';var baseIsEqual=require('./_baseIsEqual'),get=require('./get'),hasIn=require('./hasIn'),isKey=require('./_isKey'),isStrictComparable=require('./_isStrictComparable'),matchesStrictComparable=require('./_matchesStrictComparable'),toKey=require('./_toKey');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}module.exports=baseMatchesProperty;

},{"./_baseIsEqual":28,"./_isKey":69,"./_isStrictComparable":73,"./_matchesStrictComparable":85,"./_toKey":103,"./get":110,"./hasIn":111}],39:[function(require,module,exports){
"use strict";/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */function baseProperty(key){return function(object){return object==null?undefined:object[key];};}module.exports=baseProperty;

},{}],40:[function(require,module,exports){
'use strict';var baseGet=require('./_baseGet');/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */function basePropertyDeep(path){return function(object){return baseGet(object,path);};}module.exports=basePropertyDeep;

},{"./_baseGet":23}],41:[function(require,module,exports){
"use strict";/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}module.exports=baseTimes;

},{}],42:[function(require,module,exports){
'use strict';var _Symbol=require('./_Symbol'),arrayMap=require('./_arrayMap'),isArray=require('./isArray'),isSymbol=require('./isSymbol');/** Used as references for various `Number` constants. */var INFINITY=1/0;/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined,symbolToString=symbolProto?symbolProto.toString:undefined;/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
if(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).
return arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}module.exports=baseToString;

},{"./_Symbol":10,"./_arrayMap":15,"./isArray":114,"./isSymbol":121}],43:[function(require,module,exports){
"use strict";/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */function baseUnary(func){return function(value){return func(value);};}module.exports=baseUnary;

},{}],44:[function(require,module,exports){
"use strict";/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function cacheHas(cache,key){return cache.has(key);}module.exports=cacheHas;

},{}],45:[function(require,module,exports){
'use strict';var identity=require('./identity');/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */function castFunction(value){return typeof value=='function'?value:identity;}module.exports=castFunction;

},{"./identity":112}],46:[function(require,module,exports){
'use strict';var isArray=require('./isArray'),isKey=require('./_isKey'),stringToPath=require('./_stringToPath'),toString=require('./toString');/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */function castPath(value,object){if(isArray(value)){return value;}return isKey(value,object)?[value]:stringToPath(toString(value));}module.exports=castPath;

},{"./_isKey":69,"./_stringToPath":102,"./isArray":114,"./toString":133}],47:[function(require,module,exports){
'use strict';var root=require('./_root');/** Used to detect overreaching core-js shims. */var coreJsData=root['__core-js_shared__'];module.exports=coreJsData;

},{"./_root":93}],48:[function(require,module,exports){
'use strict';var isArrayLike=require('./isArrayLike');/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection==null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index<length){if(iteratee(iterable[index],index,iterable)===false){break;}}return collection;};}module.exports=createBaseEach;

},{"./isArrayLike":115}],49:[function(require,module,exports){
"use strict";/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}module.exports=createBaseFor;

},{}],50:[function(require,module,exports){
'use strict';var SetCache=require('./_SetCache'),arraySome=require('./_arraySome'),cacheHas=require('./_cacheHas');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Assume cyclic values are equal.
var stacked=stack.get(array);if(stacked&&stack.get(other)){return stacked==other;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.
while(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).
if(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}module.exports=equalArrays;

},{"./_SetCache":8,"./_arraySome":17,"./_cacheHas":44}],51:[function(require,module,exports){
'use strict';var _Symbol=require('./_Symbol'),Uint8Array=require('./_Uint8Array'),eq=require('./eq'),equalArrays=require('./_equalArrays'),mapToArray=require('./_mapToArray'),setToArray=require('./_setToArray');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** `Object#toString` result references. */var boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',mapTag='[object Map]',numberTag='[object Number]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]';/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined,symbolValueOf=symbolProto?symbolProto.valueOf:undefined;/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.
// Invalid dates are coerced to `NaN`.
return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,
// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
// for more details.
return object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.
var stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}module.exports=equalByTag;

},{"./_Symbol":10,"./_Uint8Array":11,"./_equalArrays":50,"./_mapToArray":84,"./_setToArray":96,"./eq":108}],52:[function(require,module,exports){
'use strict';var getAllKeys=require('./_getAllKeys');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1;/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Assume cyclic values are equal.
var stacked=stack.get(object);if(stacked&&stack.get(other)){return stacked==other;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).
if(!(compared===undefined?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.
if(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}module.exports=equalObjects;

},{"./_getAllKeys":54}],53:[function(require,module,exports){
(function (global){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/** Detect free variable `global` from Node.js. */var freeGlobal=(typeof global==='undefined'?'undefined':_typeof(global))=='object'&&global&&global.Object===Object&&global;module.exports=freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],54:[function(require,module,exports){
'use strict';var baseGetAllKeys=require('./_baseGetAllKeys'),getSymbols=require('./_getSymbols'),keys=require('./keys');/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}module.exports=getAllKeys;

},{"./_baseGetAllKeys":24,"./_getSymbols":59,"./keys":123}],55:[function(require,module,exports){
'use strict';var isKeyable=require('./_isKeyable');/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}module.exports=getMapData;

},{"./_isKeyable":70}],56:[function(require,module,exports){
'use strict';var isStrictComparable=require('./_isStrictComparable'),keys=require('./keys');/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */function getMatchData(object){var result=keys(object),length=result.length;while(length--){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)];}return result;}module.exports=getMatchData;

},{"./_isStrictComparable":73,"./keys":123}],57:[function(require,module,exports){
'use strict';var baseIsNative=require('./_baseIsNative'),getValue=require('./_getValue');/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined;}module.exports=getNative;

},{"./_baseIsNative":31,"./_getValue":61}],58:[function(require,module,exports){
'use strict';var _Symbol=require('./_Symbol');/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */var nativeObjectToString=objectProto.toString;/** Built-in value references. */var symToStringTag=_Symbol?_Symbol.toStringTag:undefined;/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else{delete value[symToStringTag];}}return result;}module.exports=getRawTag;

},{"./_Symbol":10}],59:[function(require,module,exports){
'use strict';var arrayFilter=require('./_arrayFilter'),stubArray=require('./stubArray');/** Used for built-in method references. */var objectProto=Object.prototype;/** Built-in value references. */var propertyIsEnumerable=objectProto.propertyIsEnumerable;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeGetSymbols=Object.getOwnPropertySymbols;/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return[];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};module.exports=getSymbols;

},{"./_arrayFilter":13,"./stubArray":129}],60:[function(require,module,exports){
'use strict';var DataView=require('./_DataView'),Map=require('./_Map'),Promise=require('./_Promise'),Set=require('./_Set'),WeakMap=require('./_WeakMap'),baseGetTag=require('./_baseGetTag'),toSource=require('./_toSource');/** `Object#toString` result references. */var mapTag='[object Map]',objectTag='[object Object]',promiseTag='[object Promise]',setTag='[object Set]',weakMapTag='[object WeakMap]';var dataViewTag='[object DataView]';/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}module.exports=getTag;

},{"./_DataView":1,"./_Map":4,"./_Promise":6,"./_Set":7,"./_WeakMap":12,"./_baseGetTag":25,"./_toSource":104}],61:[function(require,module,exports){
"use strict";/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */function getValue(object,key){return object==null?undefined:object[key];}module.exports=getValue;

},{}],62:[function(require,module,exports){
'use strict';var castPath=require('./_castPath'),isArguments=require('./isArguments'),isArray=require('./isArray'),isIndex=require('./_isIndex'),isLength=require('./isLength'),toKey=require('./_toKey');/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */function hasPath(object,path,hasFunc){path=castPath(path,object);var index=-1,length=path.length,result=false;while(++index<length){var key=toKey(path[index]);if(!(result=object!=null&&hasFunc(object,key))){break;}object=object[key];}if(result||++index!=length){return result;}length=object==null?0:object.length;return!!length&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object));}module.exports=hasPath;

},{"./_castPath":46,"./_isIndex":68,"./_toKey":103,"./isArguments":113,"./isArray":114,"./isLength":118}],63:[function(require,module,exports){
'use strict';var nativeCreate=require('./_nativeCreate');/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}module.exports=hashClear;

},{"./_nativeCreate":87}],64:[function(require,module,exports){
"use strict";/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}module.exports=hashDelete;

},{}],65:[function(require,module,exports){
'use strict';var nativeCreate=require('./_nativeCreate');/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(data,key)?data[key]:undefined;}module.exports=hashGet;

},{"./_nativeCreate":87}],66:[function(require,module,exports){
'use strict';var nativeCreate=require('./_nativeCreate');/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);}module.exports=hashHas;

},{"./_nativeCreate":87}],67:[function(require,module,exports){
'use strict';var nativeCreate=require('./_nativeCreate');/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;return this;}module.exports=hashSet;

},{"./_nativeCreate":87}],68:[function(require,module,exports){
'use strict';/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER=9007199254740991;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */function isIndex(value,length){length=length==null?MAX_SAFE_INTEGER:length;return!!length&&(typeof value=='number'||reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}module.exports=isIndex;

},{}],69:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var isArray=require('./isArray'),isSymbol=require('./isSymbol');/** Used to match property names within property paths. */var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/;/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */function isKey(value,object){if(isArray(value)){return false;}var type=typeof value==='undefined'?'undefined':_typeof(value);if(type=='number'||type=='symbol'||type=='boolean'||value==null||isSymbol(value)){return true;}return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||object!=null&&value in Object(object);}module.exports=isKey;

},{"./isArray":114,"./isSymbol":121}],70:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */function isKeyable(value){var type=typeof value==='undefined'?'undefined':_typeof(value);return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}module.exports=isKeyable;

},{}],71:[function(require,module,exports){
'use strict';var coreJsData=require('./_coreJsData');/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */function isMasked(func){return!!maskSrcKey&&maskSrcKey in func;}module.exports=isMasked;

},{"./_coreJsData":47}],72:[function(require,module,exports){
'use strict';/** Used for built-in method references. */var objectProto=Object.prototype;/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}module.exports=isPrototype;

},{}],73:[function(require,module,exports){
'use strict';var isObject=require('./isObject');/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */function isStrictComparable(value){return value===value&&!isObject(value);}module.exports=isStrictComparable;

},{"./isObject":119}],74:[function(require,module,exports){
"use strict";/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */function listCacheClear(){this.__data__=[];this.size=0;}module.exports=listCacheClear;

},{}],75:[function(require,module,exports){
'use strict';var assocIndexOf=require('./_assocIndexOf');/** Used for built-in method references. */var arrayProto=Array.prototype;/** Built-in value references. */var splice=arrayProto.splice;/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}--this.size;return true;}module.exports=listCacheDelete;

},{"./_assocIndexOf":18}],76:[function(require,module,exports){
'use strict';var assocIndexOf=require('./_assocIndexOf');/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined:data[index][1];}module.exports=listCacheGet;

},{"./_assocIndexOf":18}],77:[function(require,module,exports){
'use strict';var assocIndexOf=require('./_assocIndexOf');/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}module.exports=listCacheHas;

},{"./_assocIndexOf":18}],78:[function(require,module,exports){
'use strict';var assocIndexOf=require('./_assocIndexOf');/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else{data[index][1]=value;}return this;}module.exports=listCacheSet;

},{"./_assocIndexOf":18}],79:[function(require,module,exports){
'use strict';var Hash=require('./_Hash'),ListCache=require('./_ListCache'),Map=require('./_Map');/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}module.exports=mapCacheClear;

},{"./_Hash":2,"./_ListCache":3,"./_Map":4}],80:[function(require,module,exports){
'use strict';var getMapData=require('./_getMapData');/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}module.exports=mapCacheDelete;

},{"./_getMapData":55}],81:[function(require,module,exports){
'use strict';var getMapData=require('./_getMapData');/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function mapCacheGet(key){return getMapData(this,key).get(key);}module.exports=mapCacheGet;

},{"./_getMapData":55}],82:[function(require,module,exports){
'use strict';var getMapData=require('./_getMapData');/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function mapCacheHas(key){return getMapData(this,key).has(key);}module.exports=mapCacheHas;

},{"./_getMapData":55}],83:[function(require,module,exports){
'use strict';var getMapData=require('./_getMapData');/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}module.exports=mapCacheSet;

},{"./_getMapData":55}],84:[function(require,module,exports){
"use strict";/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}module.exports=mapToArray;

},{}],85:[function(require,module,exports){
"use strict";/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */function matchesStrictComparable(key,srcValue){return function(object){if(object==null){return false;}return object[key]===srcValue&&(srcValue!==undefined||key in Object(object));};}module.exports=matchesStrictComparable;

},{}],86:[function(require,module,exports){
'use strict';var memoize=require('./memoize');/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}module.exports=memoizeCapped;

},{"./memoize":126}],87:[function(require,module,exports){
'use strict';var getNative=require('./_getNative');/* Built-in method references that are verified to be native. */var nativeCreate=getNative(Object,'create');module.exports=nativeCreate;

},{"./_getNative":57}],88:[function(require,module,exports){
'use strict';var overArg=require('./_overArg');/* Built-in method references for those with the same name as other `lodash` methods. */var nativeKeys=overArg(Object.keys,Object);module.exports=nativeKeys;

},{"./_overArg":92}],89:[function(require,module,exports){
"use strict";/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}module.exports=nativeKeysIn;

},{}],90:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var freeGlobal=require('./_freeGlobal');/** Detect free variable `exports`. */var freeExports=(typeof exports==='undefined'?'undefined':_typeof(exports))=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&(typeof module==='undefined'?'undefined':_typeof(module))=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();module.exports=nodeUtil;

},{"./_freeGlobal":53}],91:[function(require,module,exports){
"use strict";/** Used for built-in method references. */var objectProto=Object.prototype;/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */var nativeObjectToString=objectProto.toString;/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */function objectToString(value){return nativeObjectToString.call(value);}module.exports=objectToString;

},{}],92:[function(require,module,exports){
"use strict";/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */function overArg(func,transform){return function(arg){return func(transform(arg));};}module.exports=overArg;

},{}],93:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var freeGlobal=require('./_freeGlobal');/** Detect free variable `self`. */var freeSelf=(typeof self==='undefined'?'undefined':_typeof(self))=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();module.exports=root;

},{"./_freeGlobal":53}],94:[function(require,module,exports){
'use strict';/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}module.exports=setCacheAdd;

},{}],95:[function(require,module,exports){
"use strict";/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */function setCacheHas(value){return this.__data__.has(value);}module.exports=setCacheHas;

},{}],96:[function(require,module,exports){
"use strict";/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}module.exports=setToArray;

},{}],97:[function(require,module,exports){
'use strict';var ListCache=require('./_ListCache');/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */function stackClear(){this.__data__=new ListCache();this.size=0;}module.exports=stackClear;

},{"./_ListCache":3}],98:[function(require,module,exports){
'use strict';/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}module.exports=stackDelete;

},{}],99:[function(require,module,exports){
"use strict";/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */function stackGet(key){return this.__data__.get(key);}module.exports=stackGet;

},{}],100:[function(require,module,exports){
"use strict";/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */function stackHas(key){return this.__data__.has(key);}module.exports=stackHas;

},{}],101:[function(require,module,exports){
'use strict';var ListCache=require('./_ListCache'),Map=require('./_Map'),MapCache=require('./_MapCache');/** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}module.exports=stackSet;

},{"./_ListCache":3,"./_Map":4,"./_MapCache":5}],102:[function(require,module,exports){
'use strict';var memoizeCapped=require('./_memoizeCapped');/** Used to match property names within property paths. */var reLeadingDot=/^\./,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;/** Used to match backslashes in property paths. */var reEscapeChar=/\\(\\)?/g;/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */var stringToPath=memoizeCapped(function(string){var result=[];if(reLeadingDot.test(string)){result.push('');}string.replace(rePropName,function(match,number,quote,string){result.push(quote?string.replace(reEscapeChar,'$1'):number||match);});return result;});module.exports=stringToPath;

},{"./_memoizeCapped":86}],103:[function(require,module,exports){
'use strict';var isSymbol=require('./isSymbol');/** Used as references for various `Number` constants. */var INFINITY=1/0;/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */function toKey(value){if(typeof value=='string'||isSymbol(value)){return value;}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}module.exports=toKey;

},{"./isSymbol":121}],104:[function(require,module,exports){
'use strict';/** Used for built-in method references. */var funcProto=Function.prototype;/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return'';}module.exports=toSource;

},{}],105:[function(require,module,exports){
'use strict';var baseClamp=require('./_baseClamp'),toNumber=require('./toNumber');/**
 * Clamps `number` within the inclusive `lower` and `upper` bounds.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Number
 * @param {number} number The number to clamp.
 * @param {number} [lower] The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the clamped number.
 * @example
 *
 * _.clamp(-10, -5, 5);
 * // => -5
 *
 * _.clamp(10, -5, 5);
 * // => 5
 */function clamp(number,lower,upper){if(upper===undefined){upper=lower;lower=undefined;}if(upper!==undefined){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}module.exports=clamp;

},{"./_baseClamp":19,"./toNumber":132}],106:[function(require,module,exports){
'use strict';var isObject=require('./isObject'),now=require('./now'),toNumber=require('./toNumber');/** Error message constants. */var FUNC_ERROR_TEXT='Expected a function';/* Built-in method references for those with the same name as other `lodash` methods. */var nativeMax=Math.max,nativeMin=Math.min;/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
lastInvokeTime=time;// Start the timer for the trailing edge.
timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,result=wait-timeSinceLastCall;return maxing?nativeMin(result,maxWait-timeSinceLastInvoke):result;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
// trailing edge, the system time has gone backwards and we're treating
// it as the trailing edge, or we've hit the `maxWait` limit.
return lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}module.exports=debounce;

},{"./isObject":119,"./now":127,"./toNumber":132}],107:[function(require,module,exports){
"use strict";/**
 * Checks `value` to determine whether a default value should be returned in
 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
 * or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.14.0
 * @category Util
 * @param {*} value The value to check.
 * @param {*} defaultValue The default value.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * _.defaultTo(1, 10);
 * // => 1
 *
 * _.defaultTo(undefined, 10);
 * // => 10
 */function defaultTo(value,defaultValue){return value==null||value!==value?defaultValue:value;}module.exports=defaultTo;

},{}],108:[function(require,module,exports){
"use strict";/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */function eq(value,other){return value===other||value!==value&&other!==other;}module.exports=eq;

},{}],109:[function(require,module,exports){
'use strict';var baseFor=require('./_baseFor'),castFunction=require('./_castFunction'),keysIn=require('./keysIn');/**
 * Iterates over own and inherited enumerable string keyed properties of an
 * object and invokes `iteratee` for each property. The iteratee is invoked
 * with three arguments: (value, key, object). Iteratee functions may exit
 * iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forInRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forIn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
 */function forIn(object,iteratee){return object==null?object:baseFor(object,castFunction(iteratee),keysIn);}module.exports=forIn;

},{"./_baseFor":21,"./_castFunction":45,"./keysIn":124}],110:[function(require,module,exports){
'use strict';var baseGet=require('./_baseGet');/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */function get(object,path,defaultValue){var result=object==null?undefined:baseGet(object,path);return result===undefined?defaultValue:result;}module.exports=get;

},{"./_baseGet":23}],111:[function(require,module,exports){
'use strict';var baseHasIn=require('./_baseHasIn'),hasPath=require('./_hasPath');/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */function hasIn(object,path){return object!=null&&hasPath(object,path,baseHasIn);}module.exports=hasIn;

},{"./_baseHasIn":26,"./_hasPath":62}],112:[function(require,module,exports){
"use strict";/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */function identity(value){return value;}module.exports=identity;

},{}],113:[function(require,module,exports){
'use strict';var baseIsArguments=require('./_baseIsArguments'),isObjectLike=require('./isObjectLike');/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Built-in value references. */var propertyIsEnumerable=objectProto.propertyIsEnumerable;/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};module.exports=isArguments;

},{"./_baseIsArguments":27,"./isObjectLike":120}],114:[function(require,module,exports){
"use strict";/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */var isArray=Array.isArray;module.exports=isArray;

},{}],115:[function(require,module,exports){
'use strict';var isFunction=require('./isFunction'),isLength=require('./isLength');/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}module.exports=isArrayLike;

},{"./isFunction":117,"./isLength":118}],116:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var root=require('./_root'),stubFalse=require('./stubFalse');/** Detect free variable `exports`. */var freeExports=(typeof exports==='undefined'?'undefined':_typeof(exports))=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&(typeof module==='undefined'?'undefined':_typeof(module))=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Built-in value references. */var Buffer=moduleExports?root.Buffer:undefined;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeIsBuffer=Buffer?Buffer.isBuffer:undefined;/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */var isBuffer=nativeIsBuffer||stubFalse;module.exports=isBuffer;

},{"./_root":93,"./stubFalse":130}],117:[function(require,module,exports){
'use strict';var baseGetTag=require('./_baseGetTag'),isObject=require('./isObject');/** `Object#toString` result references. */var asyncTag='[object AsyncFunction]',funcTag='[object Function]',genTag='[object GeneratorFunction]',proxyTag='[object Proxy]';/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 9 which returns 'object' for typed arrays and other constructors.
var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}module.exports=isFunction;

},{"./_baseGetTag":25,"./isObject":119}],118:[function(require,module,exports){
'use strict';/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER=9007199254740991;/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}module.exports=isLength;

},{}],119:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */function isObject(value){var type=typeof value==='undefined'?'undefined':_typeof(value);return value!=null&&(type=='object'||type=='function');}module.exports=isObject;

},{}],120:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */function isObjectLike(value){return value!=null&&(typeof value==='undefined'?'undefined':_typeof(value))=='object';}module.exports=isObjectLike;

},{}],121:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var baseGetTag=require('./_baseGetTag'),isObjectLike=require('./isObjectLike');/** `Object#toString` result references. */var symbolTag='[object Symbol]';/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */function isSymbol(value){return(typeof value==='undefined'?'undefined':_typeof(value))=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}module.exports=isSymbol;

},{"./_baseGetTag":25,"./isObjectLike":120}],122:[function(require,module,exports){
'use strict';var baseIsTypedArray=require('./_baseIsTypedArray'),baseUnary=require('./_baseUnary'),nodeUtil=require('./_nodeUtil');/* Node.js helper references. */var nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;module.exports=isTypedArray;

},{"./_baseIsTypedArray":32,"./_baseUnary":43,"./_nodeUtil":90}],123:[function(require,module,exports){
'use strict';var arrayLikeKeys=require('./_arrayLikeKeys'),baseKeys=require('./_baseKeys'),isArrayLike=require('./isArrayLike');/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}module.exports=keys;

},{"./_arrayLikeKeys":14,"./_baseKeys":34,"./isArrayLike":115}],124:[function(require,module,exports){
'use strict';var arrayLikeKeys=require('./_arrayLikeKeys'),baseKeysIn=require('./_baseKeysIn'),isArrayLike=require('./isArrayLike');/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}module.exports=keysIn;

},{"./_arrayLikeKeys":14,"./_baseKeysIn":35,"./isArrayLike":115}],125:[function(require,module,exports){
'use strict';var arrayMap=require('./_arrayMap'),baseIteratee=require('./_baseIteratee'),baseMap=require('./_baseMap'),isArray=require('./isArray');/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,baseIteratee(iteratee,3));}module.exports=map;

},{"./_arrayMap":15,"./_baseIteratee":33,"./_baseMap":36,"./isArray":114}],126:[function(require,module,exports){
'use strict';var MapCache=require('./_MapCache');/** Error message constants. */var FUNC_ERROR_TEXT='Expected a function';/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */function memoize(func,resolver){if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache=cache.set(key,result)||cache;return result;};memoized.cache=new(memoize.Cache||MapCache)();return memoized;}// Expose `MapCache`.
memoize.Cache=MapCache;module.exports=memoize;

},{"./_MapCache":5}],127:[function(require,module,exports){
'use strict';var root=require('./_root');/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */var now=function now(){return root.Date.now();};module.exports=now;

},{"./_root":93}],128:[function(require,module,exports){
'use strict';var baseProperty=require('./_baseProperty'),basePropertyDeep=require('./_basePropertyDeep'),isKey=require('./_isKey'),toKey=require('./_toKey');/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */function property(path){return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);}module.exports=property;

},{"./_baseProperty":39,"./_basePropertyDeep":40,"./_isKey":69,"./_toKey":103}],129:[function(require,module,exports){
"use strict";/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */function stubArray(){return[];}module.exports=stubArray;

},{}],130:[function(require,module,exports){
"use strict";/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */function stubFalse(){return false;}module.exports=stubFalse;

},{}],131:[function(require,module,exports){
'use strict';var debounce=require('./debounce'),isObject=require('./isObject');/** Error message constants. */var FUNC_ERROR_TEXT='Expected a function';/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}module.exports=throttle;

},{"./debounce":106,"./isObject":119}],132:[function(require,module,exports){
'use strict';var isObject=require('./isObject'),isSymbol=require('./isSymbol');/** Used as references for various `Number` constants. */var NAN=0/0;/** Used to match leading and trailing whitespace. */var reTrim=/^\s+|\s+$/g;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Built-in method references without a dependency on `root`. */var freeParseInt=parseInt;/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=value.replace(reTrim,'');var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}module.exports=toNumber;

},{"./isObject":119,"./isSymbol":121}],133:[function(require,module,exports){
'use strict';var baseToString=require('./_baseToString');/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */function toString(value){return value==null?'':baseToString(value);}module.exports=toString;

},{"./_baseToString":42}],134:[function(require,module,exports){
'use strict';module.exports=LRUCache;// This will be a proper iterable 'Map' in engines that support it,
// or a fakey-fake PseudoMap in older versions.
var Map=require('pseudomap');var util=require('util');// A linked list to keep track of recently-used-ness
var Yallist=require('yallist');// use symbols if possible, otherwise just _props
var symbols={};var hasSymbol=typeof Symbol==='function';var makeSymbol;/* istanbul ignore if */if(hasSymbol){makeSymbol=function makeSymbol(key){return Symbol.for(key);};}else{makeSymbol=function makeSymbol(key){return'_'+key;};}function priv(obj,key,val){var sym;if(symbols[key]){sym=symbols[key];}else{sym=makeSymbol(key);symbols[key]=sym;}if(arguments.length===2){return obj[sym];}else{obj[sym]=val;return val;}}function naiveLength(){return 1;}// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
function LRUCache(options){if(!(this instanceof LRUCache)){return new LRUCache(options);}if(typeof options==='number'){options={max:options};}if(!options){options={};}var max=priv(this,'max',options.max);// Kind of weird to have a default max of Infinity, but oh well.
if(!max||!(typeof max==='number')||max<=0){priv(this,'max',Infinity);}var lc=options.length||naiveLength;if(typeof lc!=='function'){lc=naiveLength;}priv(this,'lengthCalculator',lc);priv(this,'allowStale',options.stale||false);priv(this,'maxAge',options.maxAge||0);priv(this,'dispose',options.dispose);this.reset();}// resize the cache when the max changes.
Object.defineProperty(LRUCache.prototype,'max',{set:function set(mL){if(!mL||!(typeof mL==='number')||mL<=0){mL=Infinity;}priv(this,'max',mL);trim(this);},get:function get(){return priv(this,'max');},enumerable:true});Object.defineProperty(LRUCache.prototype,'allowStale',{set:function set(allowStale){priv(this,'allowStale',!!allowStale);},get:function get(){return priv(this,'allowStale');},enumerable:true});Object.defineProperty(LRUCache.prototype,'maxAge',{set:function set(mA){if(!mA||!(typeof mA==='number')||mA<0){mA=0;}priv(this,'maxAge',mA);trim(this);},get:function get(){return priv(this,'maxAge');},enumerable:true});// resize the cache when the lengthCalculator changes.
Object.defineProperty(LRUCache.prototype,'lengthCalculator',{set:function set(lC){if(typeof lC!=='function'){lC=naiveLength;}if(lC!==priv(this,'lengthCalculator')){priv(this,'lengthCalculator',lC);priv(this,'length',0);priv(this,'lruList').forEach(function(hit){hit.length=priv(this,'lengthCalculator').call(this,hit.value,hit.key);priv(this,'length',priv(this,'length')+hit.length);},this);}trim(this);},get:function get(){return priv(this,'lengthCalculator');},enumerable:true});Object.defineProperty(LRUCache.prototype,'length',{get:function get(){return priv(this,'length');},enumerable:true});Object.defineProperty(LRUCache.prototype,'itemCount',{get:function get(){return priv(this,'lruList').length;},enumerable:true});LRUCache.prototype.rforEach=function(fn,thisp){thisp=thisp||this;for(var walker=priv(this,'lruList').tail;walker!==null;){var prev=walker.prev;forEachStep(this,fn,walker,thisp);walker=prev;}};function forEachStep(self,fn,node,thisp){var hit=node.value;if(isStale(self,hit)){del(self,node);if(!priv(self,'allowStale')){hit=undefined;}}if(hit){fn.call(thisp,hit.value,hit.key,self);}}LRUCache.prototype.forEach=function(fn,thisp){thisp=thisp||this;for(var walker=priv(this,'lruList').head;walker!==null;){var next=walker.next;forEachStep(this,fn,walker,thisp);walker=next;}};LRUCache.prototype.keys=function(){return priv(this,'lruList').toArray().map(function(k){return k.key;},this);};LRUCache.prototype.values=function(){return priv(this,'lruList').toArray().map(function(k){return k.value;},this);};LRUCache.prototype.reset=function(){if(priv(this,'dispose')&&priv(this,'lruList')&&priv(this,'lruList').length){priv(this,'lruList').forEach(function(hit){priv(this,'dispose').call(this,hit.key,hit.value);},this);}priv(this,'cache',new Map());// hash of items by key
priv(this,'lruList',new Yallist());// list of items in order of use recency
priv(this,'length',0);// length of items in the list
};LRUCache.prototype.dump=function(){return priv(this,'lruList').map(function(hit){if(!isStale(this,hit)){return{k:hit.key,v:hit.value,e:hit.now+(hit.maxAge||0)};}},this).toArray().filter(function(h){return h;});};LRUCache.prototype.dumpLru=function(){return priv(this,'lruList');};LRUCache.prototype.inspect=function(n,opts){var str='LRUCache {';var extras=false;var as=priv(this,'allowStale');if(as){str+='\n  allowStale: true';extras=true;}var max=priv(this,'max');if(max&&max!==Infinity){if(extras){str+=',';}str+='\n  max: '+util.inspect(max,opts);extras=true;}var maxAge=priv(this,'maxAge');if(maxAge){if(extras){str+=',';}str+='\n  maxAge: '+util.inspect(maxAge,opts);extras=true;}var lc=priv(this,'lengthCalculator');if(lc&&lc!==naiveLength){if(extras){str+=',';}str+='\n  length: '+util.inspect(priv(this,'length'),opts);extras=true;}var didFirst=false;priv(this,'lruList').forEach(function(item){if(didFirst){str+=',\n  ';}else{if(extras){str+=',\n';}didFirst=true;str+='\n  ';}var key=util.inspect(item.key).split('\n').join('\n  ');var val={value:item.value};if(item.maxAge!==maxAge){val.maxAge=item.maxAge;}if(lc!==naiveLength){val.length=item.length;}if(isStale(this,item)){val.stale=true;}val=util.inspect(val,opts).split('\n').join('\n  ');str+=key+' => '+val;});if(didFirst||extras){str+='\n';}str+='}';return str;};LRUCache.prototype.set=function(key,value,maxAge){maxAge=maxAge||priv(this,'maxAge');var now=maxAge?Date.now():0;var len=priv(this,'lengthCalculator').call(this,value,key);if(priv(this,'cache').has(key)){if(len>priv(this,'max')){del(this,priv(this,'cache').get(key));return false;}var node=priv(this,'cache').get(key);var item=node.value;// dispose of the old one before overwriting
if(priv(this,'dispose')){priv(this,'dispose').call(this,key,item.value);}item.now=now;item.maxAge=maxAge;item.value=value;priv(this,'length',priv(this,'length')+(len-item.length));item.length=len;this.get(key);trim(this);return true;}var hit=new Entry(key,value,len,now,maxAge);// oversized objects fall out of cache automatically.
if(hit.length>priv(this,'max')){if(priv(this,'dispose')){priv(this,'dispose').call(this,key,value);}return false;}priv(this,'length',priv(this,'length')+hit.length);priv(this,'lruList').unshift(hit);priv(this,'cache').set(key,priv(this,'lruList').head);trim(this);return true;};LRUCache.prototype.has=function(key){if(!priv(this,'cache').has(key))return false;var hit=priv(this,'cache').get(key).value;if(isStale(this,hit)){return false;}return true;};LRUCache.prototype.get=function(key){return get(this,key,true);};LRUCache.prototype.peek=function(key){return get(this,key,false);};LRUCache.prototype.pop=function(){var node=priv(this,'lruList').tail;if(!node)return null;del(this,node);return node.value;};LRUCache.prototype.del=function(key){del(this,priv(this,'cache').get(key));};LRUCache.prototype.load=function(arr){// reset the cache
this.reset();var now=Date.now();// A previous serialized cache has the most recent items first
for(var l=arr.length-1;l>=0;l--){var hit=arr[l];var expiresAt=hit.e||0;if(expiresAt===0){// the item was created without expiration in a non aged cache
this.set(hit.k,hit.v);}else{var maxAge=expiresAt-now;// dont add already expired items
if(maxAge>0){this.set(hit.k,hit.v,maxAge);}}}};LRUCache.prototype.prune=function(){var self=this;priv(this,'cache').forEach(function(value,key){get(self,key,false);});};function get(self,key,doUse){var node=priv(self,'cache').get(key);if(node){var hit=node.value;if(isStale(self,hit)){del(self,node);if(!priv(self,'allowStale'))hit=undefined;}else{if(doUse){priv(self,'lruList').unshiftNode(node);}}if(hit)hit=hit.value;}return hit;}function isStale(self,hit){if(!hit||!hit.maxAge&&!priv(self,'maxAge')){return false;}var stale=false;var diff=Date.now()-hit.now;if(hit.maxAge){stale=diff>hit.maxAge;}else{stale=priv(self,'maxAge')&&diff>priv(self,'maxAge');}return stale;}function trim(self){if(priv(self,'length')>priv(self,'max')){for(var walker=priv(self,'lruList').tail;priv(self,'length')>priv(self,'max')&&walker!==null;){// We know that we're about to delete this one, and also
// what the next least recently used key will be, so just
// go ahead and set it now.
var prev=walker.prev;del(self,walker);walker=prev;}}}function del(self,node){if(node){var hit=node.value;if(priv(self,'dispose')){priv(self,'dispose').call(this,hit.key,hit.value);}priv(self,'length',priv(self,'length')-hit.length);priv(self,'cache').delete(hit.key);priv(self,'lruList').removeNode(node);}}// classy, since V8 prefers predictable objects.
function Entry(key,value,length,now,maxAge){this.key=key;this.value=value;this.length=length;this.now=now;this.maxAge=maxAge||0;}

},{"pseudomap":135,"util":343,"yallist":139}],135:[function(require,module,exports){
(function (process){
'use strict';if(process.env.npm_package_name==='pseudomap'&&process.env.npm_lifecycle_script==='test')process.env.TEST_PSEUDOMAP='true';if(typeof Map==='function'&&!process.env.TEST_PSEUDOMAP){module.exports=Map;}else{module.exports=require('./pseudomap');}

}).call(this,require('_process'))

},{"./pseudomap":136,"_process":340}],136:[function(require,module,exports){
'use strict';var hasOwnProperty=Object.prototype.hasOwnProperty;module.exports=PseudoMap;function PseudoMap(set){if(!(this instanceof PseudoMap))// whyyyyyyy
throw new TypeError("Constructor PseudoMap requires 'new'");this.clear();if(set){if(set instanceof PseudoMap||typeof Map==='function'&&set instanceof Map)set.forEach(function(value,key){this.set(key,value);},this);else if(Array.isArray(set))set.forEach(function(kv){this.set(kv[0],kv[1]);},this);else throw new TypeError('invalid argument');}}PseudoMap.prototype.forEach=function(fn,thisp){thisp=thisp||this;Object.keys(this._data).forEach(function(k){if(k!=='size')fn.call(thisp,this._data[k].value,this._data[k].key);},this);};PseudoMap.prototype.has=function(k){return!!find(this._data,k);};PseudoMap.prototype.get=function(k){var res=find(this._data,k);return res&&res.value;};PseudoMap.prototype.set=function(k,v){set(this._data,k,v);};PseudoMap.prototype.delete=function(k){var res=find(this._data,k);if(res){delete this._data[res._index];this._data.size--;}};PseudoMap.prototype.clear=function(){var data=Object.create(null);data.size=0;Object.defineProperty(this,'_data',{value:data,enumerable:false,configurable:true,writable:false});};Object.defineProperty(PseudoMap.prototype,'size',{get:function get(){return this._data.size;},set:function set(n){},enumerable:true,configurable:true});PseudoMap.prototype.values=PseudoMap.prototype.keys=PseudoMap.prototype.entries=function(){throw new Error('iterators are not implemented in this version');};// Either identical, or both NaN
function same(a,b){return a===b||a!==a&&b!==b;}function Entry(k,v,i){this.key=k;this.value=v;this._index=i;}function find(data,k){for(var i=0,s='_'+k,key=s;hasOwnProperty.call(data,key);key=s+i++){if(same(data[key].key,k))return data[key];}}function set(data,k,v){for(var i=0,s='_'+k,key=s;hasOwnProperty.call(data,key);key=s+i++){if(same(data[key].key,k)){data[key].value=v;return;}}data.size++;data[key]=new Entry(k,v,key);}

},{}],137:[function(require,module,exports){
'use strict';module.exports=partialSort;// Floyd-Rivest selection algorithm:
// Rearrange items so that all items in the [left, k] range are smaller than all items in (k, right];
// The k-th element will have the (k - left + 1)th smallest value in [left, right]
function partialSort(arr,k,left,right,compare){left=left||0;right=right||arr.length-1;compare=compare||defaultCompare;while(right>left){if(right-left>600){var n=right-left+1;var m=k-left+1;var z=Math.log(n);var s=0.5*Math.exp(2*z/3);var sd=0.5*Math.sqrt(z*s*(n-s)/n)*(m-n/2<0?-1:1);var newLeft=Math.max(left,Math.floor(k-m*s/n+sd));var newRight=Math.min(right,Math.floor(k+(n-m)*s/n+sd));partialSort(arr,k,newLeft,newRight,compare);}var t=arr[k];var i=left;var j=right;swap(arr,left,k);if(compare(arr[right],t)>0)swap(arr,left,right);while(i<j){swap(arr,i,j);i++;j--;while(compare(arr[i],t)<0){i++;}while(compare(arr[j],t)>0){j--;}}if(compare(arr[left],t)===0)swap(arr,left,j);else{j++;swap(arr,j,right);}if(j<=k)left=j+1;if(k<=j)right=j-1;}}function swap(arr,i,j){var tmp=arr[i];arr[i]=arr[j];arr[j]=tmp;}function defaultCompare(a,b){return a<b?-1:a>b?1:0;}

},{}],138:[function(require,module,exports){
'use strict';module.exports=rbush;var quickselect=require('quickselect');function rbush(maxEntries,format){if(!(this instanceof rbush))return new rbush(maxEntries,format);// max entries in a node is 9 by default; min node fill is 40% for best performance
this._maxEntries=Math.max(4,maxEntries||9);this._minEntries=Math.max(2,Math.ceil(this._maxEntries*0.4));if(format){this._initFormat(format);}this.clear();}rbush.prototype={all:function all(){return this._all(this.data,[]);},search:function search(bbox){var node=this.data,result=[],toBBox=this.toBBox;if(!intersects(bbox,node))return result;var nodesToSearch=[],i,len,child,childBBox;while(node){for(i=0,len=node.children.length;i<len;i++){child=node.children[i];childBBox=node.leaf?toBBox(child):child;if(intersects(bbox,childBBox)){if(node.leaf)result.push(child);else if(contains(bbox,childBBox))this._all(child,result);else nodesToSearch.push(child);}}node=nodesToSearch.pop();}return result;},collides:function collides(bbox){var node=this.data,toBBox=this.toBBox;if(!intersects(bbox,node))return false;var nodesToSearch=[],i,len,child,childBBox;while(node){for(i=0,len=node.children.length;i<len;i++){child=node.children[i];childBBox=node.leaf?toBBox(child):child;if(intersects(bbox,childBBox)){if(node.leaf||contains(bbox,childBBox))return true;nodesToSearch.push(child);}}node=nodesToSearch.pop();}return false;},load:function load(data){if(!(data&&data.length))return this;if(data.length<this._minEntries){for(var i=0,len=data.length;i<len;i++){this.insert(data[i]);}return this;}// recursively build the tree with the given data from stratch using OMT algorithm
var node=this._build(data.slice(),0,data.length-1,0);if(!this.data.children.length){// save as is if tree is empty
this.data=node;}else if(this.data.height===node.height){// split root if trees have the same height
this._splitRoot(this.data,node);}else{if(this.data.height<node.height){// swap trees if inserted one is bigger
var tmpNode=this.data;this.data=node;node=tmpNode;}// insert the small tree into the large tree at appropriate level
this._insert(node,this.data.height-node.height-1,true);}return this;},insert:function insert(item){if(item)this._insert(item,this.data.height-1);return this;},clear:function clear(){this.data=createNode([]);return this;},remove:function remove(item,equalsFn){if(!item)return this;var node=this.data,bbox=this.toBBox(item),path=[],indexes=[],i,parent,index,goingUp;// depth-first iterative tree traversal
while(node||path.length){if(!node){// go up
node=path.pop();parent=path[path.length-1];i=indexes.pop();goingUp=true;}if(node.leaf){// check current node
index=findItem(item,node.children,equalsFn);if(index!==-1){// item found, remove the item and condense tree upwards
node.children.splice(index,1);path.push(node);this._condense(path);return this;}}if(!goingUp&&!node.leaf&&contains(node,bbox)){// go down
path.push(node);indexes.push(i);i=0;parent=node;node=node.children[0];}else if(parent){// go right
i++;node=parent.children[i];goingUp=false;}else node=null;// nothing found
}return this;},toBBox:function toBBox(item){return item;},compareMinX:compareNodeMinX,compareMinY:compareNodeMinY,toJSON:function toJSON(){return this.data;},fromJSON:function fromJSON(data){this.data=data;return this;},_all:function _all(node,result){var nodesToSearch=[];while(node){if(node.leaf)result.push.apply(result,node.children);else nodesToSearch.push.apply(nodesToSearch,node.children);node=nodesToSearch.pop();}return result;},_build:function _build(items,left,right,height){var N=right-left+1,M=this._maxEntries,node;if(N<=M){// reached leaf level; return leaf
node=createNode(items.slice(left,right+1));calcBBox(node,this.toBBox);return node;}if(!height){// target height of the bulk-loaded tree
height=Math.ceil(Math.log(N)/Math.log(M));// target number of root entries to maximize storage utilization
M=Math.ceil(N/Math.pow(M,height-1));}node=createNode([]);node.leaf=false;node.height=height;// split the items into M mostly square tiles
var N2=Math.ceil(N/M),N1=N2*Math.ceil(Math.sqrt(M)),i,j,right2,right3;multiSelect(items,left,right,N1,this.compareMinX);for(i=left;i<=right;i+=N1){right2=Math.min(i+N1-1,right);multiSelect(items,i,right2,N2,this.compareMinY);for(j=i;j<=right2;j+=N2){right3=Math.min(j+N2-1,right2);// pack each entry recursively
node.children.push(this._build(items,j,right3,height-1));}}calcBBox(node,this.toBBox);return node;},_chooseSubtree:function _chooseSubtree(bbox,node,level,path){var i,len,child,targetNode,area,enlargement,minArea,minEnlargement;while(true){path.push(node);if(node.leaf||path.length-1===level)break;minArea=minEnlargement=Infinity;for(i=0,len=node.children.length;i<len;i++){child=node.children[i];area=bboxArea(child);enlargement=enlargedArea(bbox,child)-area;// choose entry with the least area enlargement
if(enlargement<minEnlargement){minEnlargement=enlargement;minArea=area<minArea?area:minArea;targetNode=child;}else if(enlargement===minEnlargement){// otherwise choose one with the smallest area
if(area<minArea){minArea=area;targetNode=child;}}}node=targetNode||node.children[0];}return node;},_insert:function _insert(item,level,isNode){var toBBox=this.toBBox,bbox=isNode?item:toBBox(item),insertPath=[];// find the best node for accommodating the item, saving all nodes along the path too
var node=this._chooseSubtree(bbox,this.data,level,insertPath);// put the item into the node
node.children.push(item);extend(node,bbox);// split on node overflow; propagate upwards if necessary
while(level>=0){if(insertPath[level].children.length>this._maxEntries){this._split(insertPath,level);level--;}else break;}// adjust bboxes along the insertion path
this._adjustParentBBoxes(bbox,insertPath,level);},// split overflowed node into two
_split:function _split(insertPath,level){var node=insertPath[level],M=node.children.length,m=this._minEntries;this._chooseSplitAxis(node,m,M);var splitIndex=this._chooseSplitIndex(node,m,M);var newNode=createNode(node.children.splice(splitIndex,node.children.length-splitIndex));newNode.height=node.height;newNode.leaf=node.leaf;calcBBox(node,this.toBBox);calcBBox(newNode,this.toBBox);if(level)insertPath[level-1].children.push(newNode);else this._splitRoot(node,newNode);},_splitRoot:function _splitRoot(node,newNode){// split root node
this.data=createNode([node,newNode]);this.data.height=node.height+1;this.data.leaf=false;calcBBox(this.data,this.toBBox);},_chooseSplitIndex:function _chooseSplitIndex(node,m,M){var i,bbox1,bbox2,overlap,area,minOverlap,minArea,index;minOverlap=minArea=Infinity;for(i=m;i<=M-m;i++){bbox1=distBBox(node,0,i,this.toBBox);bbox2=distBBox(node,i,M,this.toBBox);overlap=intersectionArea(bbox1,bbox2);area=bboxArea(bbox1)+bboxArea(bbox2);// choose distribution with minimum overlap
if(overlap<minOverlap){minOverlap=overlap;index=i;minArea=area<minArea?area:minArea;}else if(overlap===minOverlap){// otherwise choose distribution with minimum area
if(area<minArea){minArea=area;index=i;}}}return index;},// sorts node children by the best axis for split
_chooseSplitAxis:function _chooseSplitAxis(node,m,M){var compareMinX=node.leaf?this.compareMinX:compareNodeMinX,compareMinY=node.leaf?this.compareMinY:compareNodeMinY,xMargin=this._allDistMargin(node,m,M,compareMinX),yMargin=this._allDistMargin(node,m,M,compareMinY);// if total distributions margin value is minimal for x, sort by minX,
// otherwise it's already sorted by minY
if(xMargin<yMargin)node.children.sort(compareMinX);},// total margin of all possible split distributions where each node is at least m full
_allDistMargin:function _allDistMargin(node,m,M,compare){node.children.sort(compare);var toBBox=this.toBBox,leftBBox=distBBox(node,0,m,toBBox),rightBBox=distBBox(node,M-m,M,toBBox),margin=bboxMargin(leftBBox)+bboxMargin(rightBBox),i,child;for(i=m;i<M-m;i++){child=node.children[i];extend(leftBBox,node.leaf?toBBox(child):child);margin+=bboxMargin(leftBBox);}for(i=M-m-1;i>=m;i--){child=node.children[i];extend(rightBBox,node.leaf?toBBox(child):child);margin+=bboxMargin(rightBBox);}return margin;},_adjustParentBBoxes:function _adjustParentBBoxes(bbox,path,level){// adjust bboxes along the given tree path
for(var i=level;i>=0;i--){extend(path[i],bbox);}},_condense:function _condense(path){// go through the path, removing empty nodes and updating bboxes
for(var i=path.length-1,siblings;i>=0;i--){if(path[i].children.length===0){if(i>0){siblings=path[i-1].children;siblings.splice(siblings.indexOf(path[i]),1);}else this.clear();}else calcBBox(path[i],this.toBBox);}},_initFormat:function _initFormat(format){// data format (minX, minY, maxX, maxY accessors)
// uses eval-type function compilation instead of just accepting a toBBox function
// because the algorithms are very sensitive to sorting functions performance,
// so they should be dead simple and without inner calls
var compareArr=['return a',' - b',';'];this.compareMinX=new Function('a','b',compareArr.join(format[0]));this.compareMinY=new Function('a','b',compareArr.join(format[1]));this.toBBox=new Function('a','return {minX: a'+format[0]+', minY: a'+format[1]+', maxX: a'+format[2]+', maxY: a'+format[3]+'};');}};function findItem(item,items,equalsFn){if(!equalsFn)return items.indexOf(item);for(var i=0;i<items.length;i++){if(equalsFn(item,items[i]))return i;}return-1;}// calculate node's bbox from bboxes of its children
function calcBBox(node,toBBox){distBBox(node,0,node.children.length,toBBox,node);}// min bounding rectangle of node children from k to p-1
function distBBox(node,k,p,toBBox,destNode){if(!destNode)destNode=createNode(null);destNode.minX=Infinity;destNode.minY=Infinity;destNode.maxX=-Infinity;destNode.maxY=-Infinity;for(var i=k,child;i<p;i++){child=node.children[i];extend(destNode,node.leaf?toBBox(child):child);}return destNode;}function extend(a,b){a.minX=Math.min(a.minX,b.minX);a.minY=Math.min(a.minY,b.minY);a.maxX=Math.max(a.maxX,b.maxX);a.maxY=Math.max(a.maxY,b.maxY);return a;}function compareNodeMinX(a,b){return a.minX-b.minX;}function compareNodeMinY(a,b){return a.minY-b.minY;}function bboxArea(a){return(a.maxX-a.minX)*(a.maxY-a.minY);}function bboxMargin(a){return a.maxX-a.minX+(a.maxY-a.minY);}function enlargedArea(a,b){return(Math.max(b.maxX,a.maxX)-Math.min(b.minX,a.minX))*(Math.max(b.maxY,a.maxY)-Math.min(b.minY,a.minY));}function intersectionArea(a,b){var minX=Math.max(a.minX,b.minX),minY=Math.max(a.minY,b.minY),maxX=Math.min(a.maxX,b.maxX),maxY=Math.min(a.maxY,b.maxY);return Math.max(0,maxX-minX)*Math.max(0,maxY-minY);}function contains(a,b){return a.minX<=b.minX&&a.minY<=b.minY&&b.maxX<=a.maxX&&b.maxY<=a.maxY;}function intersects(a,b){return b.minX<=a.maxX&&b.minY<=a.maxY&&b.maxX>=a.minX&&b.maxY>=a.minY;}function createNode(children){return{children:children,height:1,leaf:true,minX:Infinity,minY:Infinity,maxX:-Infinity,maxY:-Infinity};}// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
// combines selection algorithm with binary divide & conquer approach
function multiSelect(arr,left,right,n,compare){var stack=[left,right],mid;while(stack.length){right=stack.pop();left=stack.pop();if(right-left<=n)continue;mid=left+Math.ceil((right-left)/n/2)*n;quickselect(arr,mid,left,right,compare);stack.push(left,mid,mid,right);}}

},{"quickselect":137}],139:[function(require,module,exports){
'use strict';module.exports=Yallist;Yallist.Node=Node;Yallist.create=Yallist;function Yallist(list){var self=this;if(!(self instanceof Yallist)){self=new Yallist();}self.tail=null;self.head=null;self.length=0;if(list&&typeof list.forEach==='function'){list.forEach(function(item){self.push(item);});}else if(arguments.length>0){for(var i=0,l=arguments.length;i<l;i++){self.push(arguments[i]);}}return self;}Yallist.prototype.removeNode=function(node){if(node.list!==this){throw new Error('removing node which does not belong to this list');}var next=node.next;var prev=node.prev;if(next){next.prev=prev;}if(prev){prev.next=next;}if(node===this.head){this.head=next;}if(node===this.tail){this.tail=prev;}node.list.length--;node.next=null;node.prev=null;node.list=null;};Yallist.prototype.unshiftNode=function(node){if(node===this.head){return;}if(node.list){node.list.removeNode(node);}var head=this.head;node.list=this;node.next=head;if(head){head.prev=node;}this.head=node;if(!this.tail){this.tail=node;}this.length++;};Yallist.prototype.pushNode=function(node){if(node===this.tail){return;}if(node.list){node.list.removeNode(node);}var tail=this.tail;node.list=this;node.prev=tail;if(tail){tail.next=node;}this.tail=node;if(!this.head){this.head=node;}this.length++;};Yallist.prototype.push=function(){for(var i=0,l=arguments.length;i<l;i++){push(this,arguments[i]);}return this.length;};Yallist.prototype.unshift=function(){for(var i=0,l=arguments.length;i<l;i++){unshift(this,arguments[i]);}return this.length;};Yallist.prototype.pop=function(){if(!this.tail){return undefined;}var res=this.tail.value;this.tail=this.tail.prev;if(this.tail){this.tail.next=null;}this.length--;return res;};Yallist.prototype.shift=function(){if(!this.head){return undefined;}var res=this.head.value;this.head=this.head.next;if(this.head){this.head.prev=null;}this.length--;return res;};Yallist.prototype.forEach=function(fn,thisp){thisp=thisp||this;for(var walker=this.head,i=0;walker!==null;i++){fn.call(thisp,walker.value,i,this);walker=walker.next;}};Yallist.prototype.forEachReverse=function(fn,thisp){thisp=thisp||this;for(var walker=this.tail,i=this.length-1;walker!==null;i--){fn.call(thisp,walker.value,i,this);walker=walker.prev;}};Yallist.prototype.get=function(n){for(var i=0,walker=this.head;walker!==null&&i<n;i++){// abort out of the list early if we hit a cycle
walker=walker.next;}if(i===n&&walker!==null){return walker.value;}};Yallist.prototype.getReverse=function(n){for(var i=0,walker=this.tail;walker!==null&&i<n;i++){// abort out of the list early if we hit a cycle
walker=walker.prev;}if(i===n&&walker!==null){return walker.value;}};Yallist.prototype.map=function(fn,thisp){thisp=thisp||this;var res=new Yallist();for(var walker=this.head;walker!==null;){res.push(fn.call(thisp,walker.value,this));walker=walker.next;}return res;};Yallist.prototype.mapReverse=function(fn,thisp){thisp=thisp||this;var res=new Yallist();for(var walker=this.tail;walker!==null;){res.push(fn.call(thisp,walker.value,this));walker=walker.prev;}return res;};Yallist.prototype.reduce=function(fn,initial){var acc;var walker=this.head;if(arguments.length>1){acc=initial;}else if(this.head){walker=this.head.next;acc=this.head.value;}else{throw new TypeError('Reduce of empty list with no initial value');}for(var i=0;walker!==null;i++){acc=fn(acc,walker.value,i);walker=walker.next;}return acc;};Yallist.prototype.reduceReverse=function(fn,initial){var acc;var walker=this.tail;if(arguments.length>1){acc=initial;}else if(this.tail){walker=this.tail.prev;acc=this.tail.value;}else{throw new TypeError('Reduce of empty list with no initial value');}for(var i=this.length-1;walker!==null;i--){acc=fn(acc,walker.value,i);walker=walker.prev;}return acc;};Yallist.prototype.toArray=function(){var arr=new Array(this.length);for(var i=0,walker=this.head;walker!==null;i++){arr[i]=walker.value;walker=walker.next;}return arr;};Yallist.prototype.toArrayReverse=function(){var arr=new Array(this.length);for(var i=0,walker=this.tail;walker!==null;i++){arr[i]=walker.value;walker=walker.prev;}return arr;};Yallist.prototype.slice=function(from,to){to=to||this.length;if(to<0){to+=this.length;}from=from||0;if(from<0){from+=this.length;}var ret=new Yallist();if(to<from||to<0){return ret;}if(from<0){from=0;}if(to>this.length){to=this.length;}for(var i=0,walker=this.head;walker!==null&&i<from;i++){walker=walker.next;}for(;walker!==null&&i<to;i++,walker=walker.next){ret.push(walker.value);}return ret;};Yallist.prototype.sliceReverse=function(from,to){to=to||this.length;if(to<0){to+=this.length;}from=from||0;if(from<0){from+=this.length;}var ret=new Yallist();if(to<from||to<0){return ret;}if(from<0){from=0;}if(to>this.length){to=this.length;}for(var i=this.length,walker=this.tail;walker!==null&&i>to;i--){walker=walker.prev;}for(;walker!==null&&i>from;i--,walker=walker.prev){ret.push(walker.value);}return ret;};Yallist.prototype.reverse=function(){var head=this.head;var tail=this.tail;for(var walker=head;walker!==null;walker=walker.prev){var p=walker.prev;walker.prev=walker.next;walker.next=p;}this.head=tail;this.tail=head;return this;};function push(self,item){self.tail=new Node(item,self.tail,null,self);if(!self.head){self.head=self.tail;}self.length++;}function unshift(self,item){self.head=new Node(item,null,self.head,self);if(!self.tail){self.tail=self.head;}self.length++;}function Node(value,prev,next,list){if(!(this instanceof Node)){return new Node(value,prev,next,list);}this.list=list;this.value=value;if(prev){prev.next=this;this.prev=prev;}else{this.prev=null;}if(next){next.prev=this;this.next=next;}else{this.next=null;}}

},{}],140:[function(require,module,exports){
'use strict';/**
 * Class representing a set of bounds.
 */var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Bounds=function(){/**
	 * Instantiates a new Bounds object.
	 *
	 * @param {Number} left - The left bound.
	 * @param {Number} right - The right bound.
	 * @param {Number} bottom - The bottom bound.
	 * @param {Number} top - The top bound.
	 */function Bounds(left,right,bottom,top){_classCallCheck(this,Bounds);this.left=left;this.right=right;this.bottom=bottom;this.top=top;}/**
	 * Get the width of the bounds.
	 *
	 * @returns {Number} The width of the bounds.
	 */_createClass(Bounds,[{key:'width',value:function width(){return this.right-this.left;}/**
	 * Get the height of the bounds.
	 *
	 * @returns {Number} The height of the bounds.
	 */},{key:'height',value:function height(){return this.top-this.bottom;}/**
	 * Test if the bounds equals another.
	 *
	 * @param {Bounds} bounds - The bounds object to test.
	 *
	 * @returns {boolean} Whether or not the bounds objects are equal.
	 */},{key:'equals',value:function equals(bounds){return this.left===bounds.left&&this.right===bounds.right&&this.bottom===bounds.bottom&&this.top===bounds.top;}/**
	 * Test if the bounds overlaps another. Test is inclusive of edges.
	 *
	 * @param {Bounds} other - The bounds object to test.
	 *
	 * @returns {boolean} Whether or not the bounds overlap eachother.
	 */},{key:'overlaps',value:function overlaps(bounds){// NOTE: inclusive of edges
return!(this.left>bounds.right||this.right<bounds.left||this.top<bounds.bottom||this.bottom>bounds.top);}/**
	 * Return the intersection of the bounds. Test is inclusive of edges. If
	 * the bounds do not intersect, returns undefined.
	 *
	 * @param {Bounds} other - The bounds object to intersect.
	 *
	 * @returns {Bounds} The intersection of both bounds.
	 */},{key:'intersection',value:function intersection(bounds){// NOTE: inclusive of edges
if(!this.overlaps(bounds)){return undefined;}return new Bounds(Math.max(this.left,bounds.left),Math.min(this.right,bounds.right),Math.max(this.bottom,bounds.bottom),Math.min(this.top,bounds.top));}}]);return Bounds;}();module.exports=Bounds;

},{}],141:[function(require,module,exports){
'use strict';// https://github.com/arasatasaygin/is.js/blob/master/is.js
var userAgent=(navigator&&navigator.userAgent||'').toLowerCase();var vendor=(navigator&&navigator.vendor||'').toLowerCase();/**
 * Test if the browser is firefox.
 * @private
 *
 * @returns {Array} Whether or not the browser is firefox.
 */var isFirefox=function isFirefox(){return userAgent.match(/(?:firefox|fxios)\/(\d+)/);};/**
 * Test if the browser is chrome.
 * @private
 *
 * @returns {Array} Whether or not the browser is chrome.
 */var isChrome=function isChrome(){return /google inc/.test(vendor)?userAgent.match(/(?:chrome|crios)\/(\d+)/):null;};/**
 * Test if the browser is internet explorer.
 * @private
 *
 * @returns {Array} Whether or not the browser is internet explorer.
 */var isIE=function isIE(){return userAgent.match(/(?:msie |trident.+?; rv:)(\d+)/);};/**
 * Test if the browser is edge.
 * @private
 *
 * @returns {Array} Whether or not the browser is edge.
 */var isEdge=function isEdge(){return userAgent.match(/edge\/(\d+)/);};/**
 * Test if the browser is opera.
 * @private
 *
 * @returns {Array} Whether or not the browser is opera.
 */var isOpera=function isOpera(){return userAgent.match(/(?:^opera.+?version|opr)\/(\d+)/);};/**
 * Test if the browser is safari.
 * @private
 *
 * @returns {Array} Whether or not the browser is safari.
 */var isSafari=function isSafari(){return userAgent.match(/version\/(\d+).+?safari/);};module.exports={/**
	 * Whether or not the browser is firefox.
	 * @constant {boolean}
	 */firefox:!!isFirefox(),/**
	 * Whether or not the browser is chrome.
	 * @constant {boolean}
	 */chrome:!!isChrome(),/**
	 * Whether or not the browser is ie.
	 * @constant {boolean}
	 */ie:!!isIE(),/**
	 * Whether or not the browser is edge.
	 * @constant {boolean}
	 */edge:!!isEdge(),/**
	 * Whether or not the browser is opera.
	 * @constant {boolean}
	 */opera:!!isOpera(),/**
	 * Whether or not the browser is safari.
	 * @constant {boolean}
	 */safari:!!isSafari()};

},{}],142:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Bounds=require('./Bounds');// Private Methods
var mod=function mod(n,m){return(n%m+m)%m;};/**
 * Class representing a tile coordinate.
 */var Coord=function(){/**
	 * Instantiates a new Bounds object.
	 *
	 * @param {Number} z - The z component of the tile.
	 * @param {Number} x - The x component of the tile.
	 * @param {Number} y - The y component of the tile.
	 */function Coord(z,x,y){_classCallCheck(this,Coord);this.z=z;this.x=x;this.y=y;this.hash=this.z+':'+this.x+':'+this.y;}/**
	 * Returns the XYZ URL string.
	 *
	 * @returns {String} The XYZ URL string.
	 */_createClass(Coord,[{key:'xyz',value:function xyz(){var dim=Math.pow(2,this.z);return this.z+'/'+this.x+'/'+(dim-1-this.y);}/**
	 * Returns the TMS URL string.
	 *
	 * @returns {String} The TMS URL string.
	 */},{key:'tms',value:function tms(){return this.z+'/'+this.x+'/'+this.y;}/**
	 * Test if the bounds equals another.
	 *
	 * @param {Coord} coord - The coord object to test.
	 *
	 * @returns {boolean} Whether or not the coord objects are equal.
	 */},{key:'equals',value:function equals(coord){return this.z===coord.z&&this.x===coord.x&&this.y===coord.y;}/**
	 * Get the ancestor coord.
	 *
	 * @param {Number} offset - The offset of the ancestor from the coord. Optional.
	 *
	 * @returns {Coord} The ancestor coord.
	 */},{key:'getAncestor',value:function getAncestor(){var offset=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var scale=Math.pow(2,offset);return new Coord(this.z-offset,Math.floor(this.x/scale),Math.floor(this.y/scale));}/**
	 * Get the descendants of the coord.
	 *
	 * @param {Number} offset - The offset of the descendants from the coord. Optional.
	 *
	 * @returns {Array} The array of descendant coords.
	 */},{key:'getDescendants',value:function getDescendants(){var offset=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var scale=Math.pow(2,offset);var coords=[];for(var x=0;x<scale;x++){for(var y=0;y<scale;y++){coords.push(new Coord(this.z+offset,this.x*scale+x,this.y*scale+y));}}return coords;}/**
	 * Test if the coord is an ancestor of the provided coord.
	 *
	 * @param {Coord} coord - The coord object to test.
	 *
	 * @returns {boolean} Whether or not the provided coord is an ancestor.
	 */},{key:'isAncestorOf',value:function isAncestorOf(child){if(this.z>=child.z){return false;}var diff=child.z-this.z;var scale=Math.pow(2,diff);var x=Math.floor(child.x/scale);if(this.x!==x){return false;}var y=Math.floor(child.y/scale);return this.y===y;}/**
	 * Test if the coord is a descendant of the provided coord.
	 *
	 * @param {Coord} coord - The coord object to test.
	 *
	 * @returns {boolean} Whether or not the provided coord is a descendant.
	 */},{key:'isDescendantOf',value:function isDescendantOf(parent){return parent.isAncestorOf(this);}/**
	 * Returns the normalized coord.
	 *
	 * @returns {Coord} The normalized coord.
	 */},{key:'normalize',value:function normalize(){var dim=Math.pow(2,this.z);return new Coord(this.z,mod(this.x,dim),mod(this.y,dim));}/**
	 * Returns the pixel bounds of the coord. Bounds edges are inclusive.
	 *
	 * @param {Number} tileSize - The dimension of the tiles, in pixels.
	 * @param {Number} viewportZoom - The zoom of the viewport.
	 *
	 * @returns {Bounds} The pixel bounds of the viewport.
	 */},{key:'getPixelBounds',value:function getPixelBounds(tileSize){var viewportZoom=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.z;// NOTE: bounds are INCLUSIVE
// scale the pixel bounds depending on the viewportZoom
var scale=Math.pow(2,viewportZoom-this.z);var scaledTileSize=tileSize*scale;var scaledX=this.x*scaledTileSize;var scaledY=this.y*scaledTileSize;return new Bounds(Math.round(scaledX),Math.round(scaledX+scaledTileSize-1),Math.round(scaledY),Math.round(scaledY+scaledTileSize-1));}}]);return Coord;}();module.exports=Coord;

},{"./Bounds":140}],143:[function(require,module,exports){
'use strict';var keys={select:false,ctrl:false,meta:false};document.addEventListener('keydown',function(event){if(event.selectKey){keys.select=true;}if(event.ctrlKey){keys.ctrl=true;}if(event.metaKey){keys.meta=true;}});document.addEventListener('keyup',function(event){if(!event.selectKey){keys.select=false;}if(!event.ctrlKey){keys.ctrl=false;}if(!event.metaKey){keys.meta=false;}});module.exports={/**
	 * Poll if a modifier key is currently held down.
	 *
	 * @param {String} key - The key identifier.
	 *
	 * @returns {boolean} Whether or not the key is held down.
	 */poll:function poll(key){return keys[key]||false;}};

},{}],144:[function(require,module,exports){
'use strict';/**
 * Maximum safe integer.
 * @private
 * @constant {Number}
 */function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var MAX_SAFE_INT=Math.pow(2,53)-1;// Private Methods
var uid=1;var getUID=function getUID(){uid=(uid+1)%MAX_SAFE_INT;return uid;};/**
 * Class representing a tile.
 */var Tile=/**
	 * Instantiates a new Bounds object.
	 *
	 * @param {Coord} coord - The coord of the tile.
	 */function Tile(coord){_classCallCheck(this,Tile);this.coord=coord;this.uid=getUID();this.data=null;this.err=null;};module.exports=Tile;

},{}],145:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Event=require('./Event');var ClickEvent=function(_Event){_inherits(ClickEvent,_Event);function ClickEvent(target,button,viewPx,plotPx){var data=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;_classCallCheck(this,ClickEvent);var _this=_possibleConstructorReturn(this,(ClickEvent.__proto__||Object.getPrototypeOf(ClickEvent)).call(this));_this.target=target;_this.viewPx=viewPx;_this.plotPx=plotPx;_this.button=button;_this.data=data;return _this;}return ClickEvent;}(Event);module.exports=ClickEvent;

},{"./Event":147}],146:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Event=require('./Event');var DrawEvent=function(_Event){_inherits(DrawEvent,_Event);function DrawEvent(timestamp,tiles){_classCallCheck(this,DrawEvent);var _this=_possibleConstructorReturn(this,(DrawEvent.__proto__||Object.getPrototypeOf(DrawEvent)).call(this,timestamp));_this.tiles=tiles;return _this;}return DrawEvent;}(Event);module.exports=DrawEvent;

},{"./Event":147}],147:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Event=function Event(){var timestamp=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Date.now();_classCallCheck(this,Event);this.timestamp=timestamp;};module.exports=Event;

},{}],148:[function(require,module,exports){
'use strict';module.exports={/**
	 * Emitted when the plot is clicked.
	 * @constant {String}
	 */CLICK:'click',/**
	 * Emitted when the plot is double clicked.
	 * @constant {String}
	 */DBL_CLICK:'dblclick',/**
	 * Emitted when a mouse button is pressed.
	 * @constant {String}
	 */MOUSE_DOWN:'mousedown',/**
	 * Emitted when a mouse button is released.
	 * @constant {String}
	 */MOUSE_UP:'mouseup',/**
	 * Emitted when the mouse is moved on the target.
	 * @constant {String}
	 */MOUSE_MOVE:'mousemove',/**
	 * Emitted when the mouse is moved onto the target.
	 * @constant {String}
	 */MOUSE_OVER:'mouseover',/**
	 * Emitted when the mouse is moved out of the target.
	 * @constant {String}
	 */MOUSE_OUT:'mouseout',/**
	 * Emitted when a new pan event is handled.
	 * @constant {String}
	 */PAN_START:'panstart',/**
	 * Emitted during each frame of a pan animation.
	 * @constant {String}
	 */PAN:'pan',/**
	 * Emitted on the final frame of a pan animation.
	 * @constant {String}
	 */PAN_END:'panend',/**
	 * Emitted when a new zoom event is handled.
	 * @constant {String}
	 */ZOOM_START:'zoomstart',/**
	 * Emitted during each frame of a zoom animation.
	 * @constant {String}
	 */ZOOM:'zoom',/**
	 * Emitted on the final frame of a zoom animation.
	 * @constant {String}
	 */ZOOM_END:'zoomend',/**
	 * Emitted before processing a new frame.
	 * @constant {String}
	 */FRAME:'frame',/**
	 * Emitted when processing a resize event.
	 * @constant {String}
	 */RESIZE:'resize',/**
	 * Emitted when an initial request for a tile is made, the tile is not
	 * yet part of the layer and has not yet been requested.
	 * @constant {String}
	 */TILE_REQUEST:'tilerequest',/**
	 * Emitted when a tile request completes unsuccessfully. The tile is not
	 * added to the layer.
	 * @constant {String}
	 */TILE_FAILURE:'tilefailure',/**
	 * Emitted when a tile request completes successfully. The tile is added
	 * to the layer.
	 * @constant {String}
	 */TILE_ADD:'tileadd',/**
	 * Emitted when a tile request completes successfully but the tile is no
	 * longer in view. The tile is not added to the layer.
	 * @constant {String}
	 */TILE_DISCARD:'tilediscard',/**
	 * Emitted when a tile is evicted from the internal LRU cache.
	 * @constant {String}
	 */TILE_REMOVE:'tileremove',/**
	 * Emitted when all visible tiles have been loaded for a layer.
	 * @constant {String}
	 */LOAD:'load',/**
	 * Emitted by DOMRenderer after tiles are rendered to the DOM.
	 * @constant {String}
	 */POST_DRAW:'postdraw'};

},{}],149:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Event=require('./Event');var FrameEvent=function(_Event){_inherits(FrameEvent,_Event);function FrameEvent(timestamp){_classCallCheck(this,FrameEvent);return _possibleConstructorReturn(this,(FrameEvent.__proto__||Object.getPrototypeOf(FrameEvent)).call(this,timestamp));}return FrameEvent;}(Event);module.exports=FrameEvent;

},{"./Event":147}],150:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Event=require('./Event');var MouseEvent=function(_Event){_inherits(MouseEvent,_Event);function MouseEvent(target,button,viewPx,plotPx){var data=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;_classCallCheck(this,MouseEvent);var _this=_possibleConstructorReturn(this,(MouseEvent.__proto__||Object.getPrototypeOf(MouseEvent)).call(this));_this.target=target;_this.viewPx=viewPx;_this.plotPx=plotPx;_this.button=button;_this.data=data;return _this;}return MouseEvent;}(Event);module.exports=MouseEvent;

},{"./Event":147}],151:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Event=require('./Event');var PanEvent=function(_Event){_inherits(PanEvent,_Event);function PanEvent(plot){var prevPx=arguments.length>1&&arguments[1]!==undefined?arguments[1]:plot.viewport.getPosition();var currentPx=arguments.length>2&&arguments[2]!==undefined?arguments[2]:plot.viewport.getPosition();_classCallCheck(this,PanEvent);var _this=_possibleConstructorReturn(this,(PanEvent.__proto__||Object.getPrototypeOf(PanEvent)).call(this));_this.plot=plot;_this.prevPx=prevPx;_this.currentPx=currentPx;return _this;}return PanEvent;}(Event);module.exports=PanEvent;

},{"./Event":147}],152:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Event=require('./Event');var ResizeEvent=function(_Event){_inherits(ResizeEvent,_Event);function ResizeEvent(plot,prevSize,targetSize){_classCallCheck(this,ResizeEvent);var _this=_possibleConstructorReturn(this,(ResizeEvent.__proto__||Object.getPrototypeOf(ResizeEvent)).call(this));_this.plot=plot;_this.prevSize=prevSize;_this.targetSize=targetSize;return _this;}return ResizeEvent;}(Event);module.exports=ResizeEvent;

},{"./Event":147}],153:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Event=require('./Event');var TileEvent=function(_Event){_inherits(TileEvent,_Event);function TileEvent(layer,tile){_classCallCheck(this,TileEvent);var _this=_possibleConstructorReturn(this,(TileEvent.__proto__||Object.getPrototypeOf(TileEvent)).call(this));_this.layer=layer;_this.tile=tile;return _this;}return TileEvent;}(Event);module.exports=TileEvent;

},{"./Event":147}],154:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Event=require('./Event');var ZoomEvent=function(_Event){_inherits(ZoomEvent,_Event);function ZoomEvent(plot,prevZoom,currentZoom,targetZoom){_classCallCheck(this,ZoomEvent);var _this=_possibleConstructorReturn(this,(ZoomEvent.__proto__||Object.getPrototypeOf(ZoomEvent)).call(this));_this.plot=plot;_this.prevZoom=prevZoom;_this.currentZoom=currentZoom;_this.targetZoom=targetZoom;return _this;}return ZoomEvent;}(Event);module.exports=ZoomEvent;

},{"./Event":147}],155:[function(require,module,exports){
'use strict';var EventType=require('./event/EventType');var CollisionType=require('./render/webgl/rtree/CollisionType');module.exports={// core
Bounds:require('./core/Bounds'),Browser:require('./core/Browser'),Coord:require('./core/Coord'),Tile:require('./core/Tile'),// event types
CLICK:EventType.CLICK,DBL_CLICK:EventType.DBL_CLICK,MOUSE_DOWN:EventType.MOUSE_DOWN,MOUSE_UP:EventType.MOUSE_UP,MOUSE_MOVE:EventType.MOUSE_MOVE,MOUSE_OVER:EventType.MOUSE_OVER,MOUSE_OUT:EventType.MOUSE_OUT,PAN_START:EventType.PAN_START,PAN:EventType.PAN,PAN_END:EventType.PAN_END,ZOOM_START:EventType.ZOOM_START,ZOOM:EventType.ZOOM,ZOOM_END:EventType.ZOOM_END,FRAME:EventType.FRAME,RESIZE:EventType.RESIZE,TILE_REQUEST:EventType.TILE_REQUEST,TILE_FAILURE:EventType.TILE_FAILURE,TILE_ADD:EventType.TILE_ADD,TILE_DISCARD:EventType.TILE_DISCARD,TILE_REMOVE:EventType.TILE_REMOVE,POST_DRAW:EventType.POST_DRAW,// event
Event:require('./event/Event'),EventType:require('./event/EventType'),ClickEvent:require('./event/ClickEvent'),DrawEvent:require('./event/DrawEvent'),FrameEvent:require('./event/FrameEvent'),MouseEvent:require('./event/MouseEvent'),PanEvent:require('./event/PanEvent'),ResizeEvent:require('./event/ResizeEvent'),TileEvent:require('./event/TileEvent'),ZoomEvent:require('./event/ZoomEvent'),// collision
RTree:require('./render/webgl/rtree/RTree.js'),// collision types
CIRCLE:CollisionType.CIRCLE,RECTANGLE:CollisionType.RECTANGLE,// layer
Layer:require('./layer/Layer'),// plot
Plot:require('./plot/Plot'),// render
Renderer:require('./render/Renderer'),// dom
DOMRenderer:require('./render/dom/HTMLRenderer'),HTMLRenderer:require('./render/dom/HTMLRenderer'),SVGRenderer:require('./render/dom/SVGRenderer'),// webgl
WebGLRenderer:require('./render/webgl/WebGLRenderer'),WebGLTextureRenderer:require('./render/webgl/WebGLTextureRenderer'),WebGLVertexRenderer:require('./render/webgl/WebGLVertexRenderer'),WebGLInteractiveRenderer:require('./render/webgl/WebGLInteractiveRenderer'),PointRenderer:require('./render/webgl/PointRenderer'),ShapeRenderer:require('./render/webgl/ShapeRenderer'),TextureRenderer:require('./render/webgl/TextureRenderer'),InteractiveRenderer:require('./render/webgl/InteractiveRenderer'),// shader
Shader:require('./render/webgl/shader/Shader'),// texture
Texture:require('./render/webgl/texture/Texture'),TextureArray:require('./render/webgl/texture/TextureArray'),// vertex
VertexAtlas:require('./render/webgl/vertex/VertexAtlas'),VertexBuffer:require('./render/webgl/vertex/VertexBuffer'),// util
loadBuffer:require('./util/loadBuffer'),loadImage:require('./util/loadImage')};

},{"./core/Bounds":140,"./core/Browser":141,"./core/Coord":142,"./core/Tile":144,"./event/ClickEvent":145,"./event/DrawEvent":146,"./event/Event":147,"./event/EventType":148,"./event/FrameEvent":149,"./event/MouseEvent":150,"./event/PanEvent":151,"./event/ResizeEvent":152,"./event/TileEvent":153,"./event/ZoomEvent":154,"./layer/Layer":156,"./plot/Plot":158,"./render/Renderer":167,"./render/dom/HTMLRenderer":169,"./render/dom/SVGRenderer":170,"./render/webgl/InteractiveRenderer":171,"./render/webgl/PointRenderer":172,"./render/webgl/ShapeRenderer":173,"./render/webgl/TextureRenderer":174,"./render/webgl/WebGLInteractiveRenderer":175,"./render/webgl/WebGLRenderer":176,"./render/webgl/WebGLTextureRenderer":177,"./render/webgl/WebGLVertexRenderer":178,"./render/webgl/rtree/CollisionType":179,"./render/webgl/rtree/RTree.js":180,"./render/webgl/shader/Shader":181,"./render/webgl/texture/Texture":185,"./render/webgl/texture/TextureArray":186,"./render/webgl/vertex/VertexAtlas":187,"./render/webgl/vertex/VertexBuffer":188,"./util/loadBuffer":189,"./util/loadImage":190}],156:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var EventEmitter=require('events');var TilePyramid=require('./TilePyramid');/**
 * Class representing an individual layer.
 */var Layer=function(_EventEmitter){_inherits(Layer,_EventEmitter);/**
	 * Instantiates a new Layer object.
	 *
	 * @param {Object} options - The layer options.
	 * @param {Renderer} options.renderer - The layer renderer.
	 * @param {Number} options.opacity - The layer opacity.
	 * @param {boolean} options.hidden - Whether or not the layer is visible.
	 * @param {boolean} options.muted - Whether or not the layer is muted.
	 */function Layer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Layer);var _this=_possibleConstructorReturn(this,(Layer.__proto__||Object.getPrototypeOf(Layer)).call(this));_this.opacity=defaultTo(options.opacity,1.0);_this.hidden=defaultTo(options.hidden,false);_this.muted=defaultTo(options.muted,false);_this.renderer=defaultTo(options.renderer,null);_this.pyramid=new TilePyramid(_this,options);_this.plot=null;return _this;}/**
	 * Executed when the layer is attached to a plot.
	 *
	 * @param {Plot} plot - The plot to attach the layer to.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */_createClass(Layer,[{key:'onAdd',value:function onAdd(plot){if(!plot){throw'No plot argument provided';}// set plot
this.plot=plot;// execute renderer hook
if(this.renderer){this.renderer.onAdd(this);}// request initial tiles.
this.refresh();return this;}/**
	 * Executed when the layer is removed from a plot.
	 *
	 * @param {Plot} plot - The plot to remove the layer from.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'onRemove',value:function onRemove(plot){if(!plot){throw'No plot argument provided';}// execute renderer hook
if(this.renderer){this.renderer.onRemove(this);}// remove plot
this.plot=null;// clear the underlying pyramid
this.pyramid.clear();return this;}/**
	 * Add a renderer to the layer.
	 *
	 * @param {Renderer} renderer - The renderer to add to the layer.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'setRenderer',value:function setRenderer(renderer){if(!renderer){throw'No renderer argument provided';}if(this.renderer&&this.plot){this.renderer.onRemove(this);}this.renderer=renderer;if(this.plot){this.renderer.onAdd(this);}return this;}/**
	 * Remove the renderer from the layer.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'removeRenderer',value:function removeRenderer(){if(!this.renderer){throw'No renderer is currently attached to the layer';}if(this.plot){this.renderer.onRemove(this);}this.renderer=null;return this;}/**
	 * Make the layer visible.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'show',value:function show(){this.hidden=false;return this;}/**
	 * Make the layer invisible.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'hide',value:function hide(){this.hidden=true;return this;}/**
	 * Returns true if the layer is hidden.
	 *
	 * @returns {boolean} Whether or not the layer is hidden.
	 */},{key:'isHidden',value:function isHidden(){return this.hidden;}/**
	 * Mutes the layer, it will no longer send any tile requests.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'mute',value:function mute(){this.muted=true;return this;}/**
	 * Unmutes the layer and immediately requests all visible tiles.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'unmute',value:function unmute(){if(this.muted){this.muted=false;if(this.plot){// get visible coords
var coords=this.plot.getVisibleCoords();// request tiles
this.requestTiles(coords);}}return this;}/**
	 * Returns true if the layer is muted.
	 *
	 * @returns {boolean} Whether or not the layer is muted.
	 */},{key:'isMuted',value:function isMuted(){return this.muted;}/**
	 * Unmutes and shows the layer.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'enable',value:function enable(){this.show();this.unmute();return this;}/**
	 * Mutes and hides the layer.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'disable',value:function disable(){this.hide();this.mute();return this;}/**
	 * Returns true if the layer is disabled (muted and hidden).
	 *
	 * @returns {boolean} Whether or not the layer is disabled.
	 */},{key:'isDisabled',value:function isDisabled(){return this.muted&&this.hidden;}/**
	 * Draw the layer for the frame.
	 *
	 * @param {Number} timestamp - The frame timestamp.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'draw',value:function draw(timestamp){if(this.hidden){// clear renderer state
if(this.renderer){this.renderer.clear();}return this;}if(this.renderer){this.renderer.draw(timestamp);}return this;}/**
	 * Clear and re-request all tiles for the layer.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'refresh',value:function refresh(){// clear the underlying pyramid
this.pyramid.clear();if(this.plot){// clear renderer state
if(this.renderer){this.renderer.clear();}// get visible coords
var coords=this.plot.getVisibleCoords();// request tiles
this.requestTiles(coords);}return this;}/**
	 * Request a specific tile.
	 *
	 * @param {Coord} coord - The coord of the tile to request.
	 * @param {Function} done - The callback function to execute upon completion.
	 */},{key:'requestTile',value:function requestTile(coord,done){done(null,null);}/**
	 * Request an array of tiles.
	 *
	 * @param {Array} coords - The coords of the tiles to request.
	 *
	 * @returns {Layer} The layer object, for chaining.
	 */},{key:'requestTiles',value:function requestTiles(coords){if(this.muted){return this;}this.pyramid.requestTiles(coords);return this;}}]);return Layer;}(EventEmitter);module.exports=Layer;

},{"./TilePyramid":157,"events":191,"lodash/defaultTo":107}],157:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var defaultTo=require('lodash/defaultTo');var throttle=require('lodash/throttle');var LRU=require('lru-cache');var Tile=require('../core/Tile');var EventType=require('../event/EventType');var TileEvent=require('../event/TileEvent');// Constants
/**
 * Number of the tiles held in the pyramid.
 * @private
 * @constant {Number}
 */var CACHE_SIZE=256;/**
 * Number of persistent zoom levels held in the pyramids.
 * @private
 * @constant {Number}
 */var PERSISTANT_LEVELS=4;/**
 * Loaded event throttle in milliseconds.
 * @private
 * @constant {Number}
 */var LOADED_THROTTLE_MS=200;// Private Methods
var getLODOffset=function getLODOffset(descendant,ancestor){var scale=Math.pow(2,descendant.z-ancestor.z);var step=1/scale;var root={x:ancestor.x*scale,y:ancestor.y*scale};return{x:(descendant.x-root.x)*step,y:(descendant.y-root.y)*step,extent:step};};var add=function add(pyramid,tile){if(tile.coord.z<pyramid.persistentLevels){// persistent tiles
if(pyramid.persistents.has(tile.coord.hash)){throw'Tile of coord '+tile.coord.hash+' already exists in the pyramid';}pyramid.persistents.set(tile.coord.hash,tile);}else{// non-persistent tiles
if(pyramid.tiles.has(tile.coord.hash)){throw'Tile of coord '+tile.coord.hash+' already exists in the pyramid';}pyramid.tiles.set(tile.coord.hash,tile);}// store in level arrays
if(!pyramid.levels.has(tile.coord.z)){pyramid.levels.set(tile.coord.z,[]);}pyramid.levels.get(tile.coord.z).push(tile);// emit add
pyramid.layer.emit(EventType.TILE_ADD,new TileEvent(pyramid.layer,tile));};var remove=function remove(pyramid,tile){// only check for persistent since we it will already be removed from lru
// cache
if(tile.coord.z<pyramid.persistentLevels){if(!pyramid.persistents.has(tile.coord.hash)){throw'Tile of coord '+tile.coord.hash+' does not exists in the pyramid';}pyramid.persistents.delete(tile.coord.hash);}// remove from levels
var level=pyramid.levels.get(tile.coord.z);level.splice(level.indexOf(tile),1);if(level.length===0){pyramid.levels.delete(tile.coord.z);}// emit remove
pyramid.layer.emit(EventType.TILE_REMOVE,new TileEvent(pyramid.layer,tile));};var sumPowerOfFour=function sumPowerOfFour(n){return 1/3*(Math.pow(4,n)-1);};var checkIfLoaded=function checkIfLoaded(pyramid){// if no more pending tiles, emit load
if(pyramid.pending.size===0){pyramid.emitLoad(new TileEvent(pyramid.layer,null));}};var sortAroundCenter=function sortAroundCenter(plot,coords){// get the center plot pixel
var center=plot.getTargetCenter();var zoom=plot.getTargetZoom();// get the scaled tile size
var tileSize=plot.tileSize*Math.pow(2,zoom-Math.round(zoom));// convert center to tile coords
center.x/=tileSize;center.y/=tileSize;// sort the requests by distance from center tile
coords.sort(function(a,b){var dax=center.x-(a.x+0.5);var day=center.y-(a.y+0.5);var dbx=center.x-(b.x+0.5);var dby=center.y-(b.y+0.5);var da=dax*dax+day*day;var db=dbx*dbx+dby*dby;a.d=da;b.d=db;return da-db;});return coords;};var removeDuplicates=function removeDuplicates(coords){var seen=new Map();return coords.filter(function(coord){var ncoord=coord.normalize();return seen.has(ncoord.hash)?false:seen.set(ncoord.hash,true);});};var isTileStale=function isTileStale(pyramid,tile){// NOTE: coord is already normalized
var ncoord=tile.coord;if(pyramid.stale.has(ncoord.hash)){// check if uid is flagged as stale
var uids=pyramid.stale.get(ncoord.hash);if(uids.has(tile.uid)){uids.delete(tile.uid);if(uids.size===0){pyramid.stale.delete(ncoord.hash);}return true;}}var plot=pyramid.layer.plot;if(!plot){// layer has been removed from plot, tile is stale
return true;}// if zooming, use target zoom, if not use current zoom
var viewport=plot.getTargetViewport();var zoom=plot.getTargetZoom();return!viewport.isInView(plot.tileSize,tile.coord,zoom);};/**
 * Class representing a pyramid of tiles.
 */var TilePyramid=function(){/**
	 * Instantiates a new Bounds object.
	 *
	 * @param {Layer} layer - The layer object.
	 * @param {Object} options - The pyramid options.
	 * @param {Number} options.cacheSize - The size of the tile cache.
	 * @param {Number} options.persistentLevels - The number of persistent levels in the pyramid.
	 */function TilePyramid(layer){var _this=this;var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,TilePyramid);if(!layer){throw'No layer parameter provided';}this.cacheSize=defaultTo(options.cacheSize,CACHE_SIZE);this.persistentLevels=defaultTo(options.persistentLevels,PERSISTANT_LEVELS);this.totalCapacity=this.cacheSize+sumPowerOfFour(this.persistentLevels);this.layer=layer;this.levels=new Map();this.persistents=new Map();this.pending=new Map();this.stale=new Map();this.tiles=new LRU({max:this.cacheSize,dispose:function dispose(key,tile){remove(_this,tile);}});// create throttled emit load event for this layer
this.emitLoad=throttle(function(event){_this.layer.emit(EventType.LOAD,event);},LOADED_THROTTLE_MS);}/**
	 * Empties the current pyramid of all tiles, flags any pending tiles as
	 * stale.
	 */_createClass(TilePyramid,[{key:'clear',value:function clear(){var _this2=this;// any pending tiles are now flagged as stale
this.pending.forEach(function(tile,hash){// flag uid as stale
var uids=_this2.stale.get(hash);if(!uids){uids=new Map();_this2.stale.set(hash,uids);}uids.set(tile.uid,true);});this.pending=new Map();// fresh map
// clear persistent tiles
this.persistents.forEach(function(tile){remove(_this2,tile);});this.persistents.clear();// clear lru cache
this.tiles.reset();}/**
	 * Test whether or not a coord is held in cache in the pyramid.
	 *
	 * @param {Coord} coord - The coord to test.
	 *
	 * @returns {boolean} Whether or not the coord exists in the pyramid.
	 */},{key:'has',value:function has(coord){if(coord.z<this.persistentLevels){return this.persistents.has(coord.hash);}return this.tiles.has(coord.hash);}/**
	 * Test whether or not a coord is currently pending.
	 *
	 * @param {Coord} coord - The coord to test.
	 *
	 * @returns {boolean} Whether or not the coord is currently pending.
	 */},{key:'isPending',value:function isPending(coord){return this.pending.has(coord.hash);}/**
	 * Returns the tile matching the provided coord. If the tile does not
	 * exist, returns undefined.
	 *
	 * @param {Coord} coord - The coord of the tile to return.
	 *
	 * @returns {Tile} The tile object.
	 */},{key:'get',value:function get(coord){if(coord.z<this.persistentLevels){return this.persistents.get(coord.hash);}return this.tiles.get(coord.hash);}/**
	 * Returns the closest ancestor of the provided coord. If no ancestor
	 * exists in the pyramid, returns undefined.
	 *
	 * @param {Coord} coord - The coord of the tile.
	 *
	 * @return {Coord} The closest available ancestor of the provided coord.
	 */},{key:'getClosestAncestor',value:function getClosestAncestor(coord){// get ancestors levels, in descending order
var levels=[].concat(_toConsumableArray(this.levels.keys())).sort(function(a,b){// sort by key
return b-a;}).filter(function(entry){// filter by key
return entry<coord.z;});// check for closest ancestor
for(var i=0;i<levels.length;i++){var level=levels[i];var ancestor=coord.getAncestor(coord.z-level);if(this.has(ancestor)){return ancestor;}}return undefined;}/**
	 * Requests tiles for the provided coords. If the tiles already exist
	 * in the pyramid or is currently pending no request is made.
	 *
	 * @param {Array} coords - The array of coords to request.
	 */},{key:'requestTiles',value:function requestTiles(coords){var _this3=this;// remove any duplicates
coords=removeDuplicates(coords);// filter out coords we don't need to request
coords=coords.filter(function(coord){// get normalized coord, we use normalized coords for requests
// so that we do not track / request the same tiles
var ncoord=coord.normalize();// we already have the tile, or it's currently pending
// NOTE: use `get` here to update the recentness of the tile in LRU
return!_this3.get(ncoord)&&!_this3.isPending(ncoord);});// sort coords by distance from viewport center
coords=sortAroundCenter(this.layer.plot,coords);// request tiles
coords.forEach(function(coord){// get normalized coord, we use normalized coords for requests
// so that we do not track / request the same tiles
var ncoord=coord.normalize();// create the new tile
var tile=new Tile(ncoord);// add uuid to pending array
_this3.pending.set(ncoord.hash,tile);// emit request
_this3.layer.emit(EventType.TILE_REQUEST,new TileEvent(_this3.layer,tile));// request tile
_this3.layer.requestTile(ncoord,function(err,data){// remove tile from pending
_this3.pending.delete(ncoord.hash);// check err
if(err!==null){// add err
tile.err=err;// emit failure
_this3.layer.emit(EventType.TILE_FAILURE,new TileEvent(_this3.layer,tile));// check if loaded
checkIfLoaded(_this3);return;}// add data to the tile
tile.data=data;// check if tile is stale
if(isTileStale(_this3,tile)){// emit discard
_this3.layer.emit(EventType.TILE_DISCARD,new TileEvent(_this3.layer,tile));// check if loaded
checkIfLoaded(_this3);return;}// add to tile pyramid
add(_this3,tile);// check if loaded
checkIfLoaded(_this3);});});}/**
	 * If the tile exists in the pyramid, return it. Otherwise return the
	 * closest available tile, along with the offset and relative scale. If
	 * no ancestor exists, return undefined.
	 *
	 * @return {Tile} The tile that closest matches the provided coord.
	 */},{key:'getAvailableLOD',value:function getAvailableLOD(coord){var ncoord=coord.normalize();// check if we have the tile
if(this.has(ncoord)){return{coord:coord,tile:this.get(ncoord),offset:{x:0,y:0,extent:1}};}// if not, take the closest ancestor
var ancestor=this.getClosestAncestor(ncoord);if(ancestor){return{coord:coord,tile:this.get(ancestor),offset:getLODOffset(ncoord,ancestor)};}return undefined;}}]);return TilePyramid;}();module.exports=TilePyramid;

},{"../core/Tile":144,"../event/EventType":148,"../event/TileEvent":153,"lodash/defaultTo":107,"lodash/throttle":131,"lru-cache":134}],158:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var clamp=require('lodash/clamp');var defaultTo=require('lodash/defaultTo');var EventEmitter=require('events');var EventType=require('../event/EventType');var FrameEvent=require('../event/FrameEvent');var ResizeEvent=require('../event/ResizeEvent');var RenderBuffer=require('../render/webgl/texture/RenderBuffer');var Request=require('./Request');var Viewport=require('./Viewport');var ClickHandler=require('./handler/ClickHandler');var MouseHandler=require('./handler/MouseHandler');var PanHandler=require('./handler/PanHandler');var ZoomHandler=require('./handler/ZoomHandler');// Constants
/**
 * The maximum zoom level supported.
 * @private
 * @constant {Number}
 */var MAX_ZOOM=24;// Private Methods
var resize=function resize(plot){var current={width:plot.container.offsetWidth,height:plot.container.offsetHeight};var prev={width:plot.viewport.width,height:plot.viewport.height};var center=plot.viewport.getCenter();if(prev.width!==current.width||prev.height!==current.height||plot.pixelRatio!==window.devicePixelRatio){// store device pixel ratio
plot.pixelRatio=window.devicePixelRatio;// resize canvas
plot.canvas.style.width=current.width+'px';plot.canvas.style.height=current.height+'px';plot.canvas.width=current.width*plot.pixelRatio;plot.canvas.height=current.height*plot.pixelRatio;// resize render target
plot.renderBuffer.resize(current.width*plot.pixelRatio,current.height*plot.pixelRatio);// update viewport
plot.viewport.width=current.width;plot.viewport.height=current.height;// re-center viewport
plot.viewport.centerOn(center);// request tiles
Request.requestTiles(plot);// emit resize
plot.emit(EventType.RESIZE,new ResizeEvent(plot,prev,current));}};var reset=function reset(plot){if(!plot.wraparound){// if there is no wraparound, do not reset
return;}// resets the position of the viewport relative to the layer such that
// the layer native coordinate range is within the viewports bounds.
var scale=Math.pow(2,plot.zoom);var layerWidth=scale*plot.tileSize;var layerSpans=Math.ceil(plot.viewport.width/layerWidth);var layerLeft=0;var layerRight=layerWidth-1;// layer is past the left bound of the viewport
if(plot.viewport.x>layerRight){plot.viewport.x-=layerWidth*layerSpans;if(plot.isPanning()){plot.panAnimation.start.x-=layerWidth*layerSpans;}}// layer is past the right bound of the viewport
if(plot.viewport.x+plot.viewport.width<layerLeft){plot.viewport.x+=layerWidth*layerSpans;if(plot.isPanning()){plot.panAnimation.start.x+=layerWidth*layerSpans;}}};var broadcast=function broadcast(plot,type){plot.on(type,function(event){plot.layers.forEach(function(layer){layer.emit(type,event);});});};var frame=function frame(plot){// get frame timestamp
var timestamp=Date.now();// emit start frame
plot.emit(EventType.FRAME,new FrameEvent(timestamp));// update size
resize(plot);var gl=plot.gl;// clear the backbuffer
gl.clearColor(0,0,0,0);gl.clear(gl.COLOR_BUFFER_BIT);// set the viewport
gl.viewport(0,0,plot.viewport.width*window.devicePixelRatio,plot.viewport.height*window.devicePixelRatio);// apply the zoom animation
if(plot.isZooming()){plot.zoomAnimation.update(timestamp);}// apply the pan animation
if(plot.isPanning()){plot.panAnimation.update(timestamp);Request.panRequest(plot);}// reset viewport / plot
reset(plot);// render each layer
plot.layers.forEach(function(layer){layer.draw(timestamp);});// request next frame
plot.frameRequest=requestAnimationFrame(function(){frame(plot);});};/**
 * Class representing a plot.
 */var Plot=function(_EventEmitter){_inherits(Plot,_EventEmitter);/**
	 * Instantiates a new Plot object.
	 *
	 * @param {String} selector - The selector for the canvas element.
	 * @param {Object} options - The plot options.
	 * @param {Number} options.tileSize - The dimension in pixels of a tile.
	 * @param {Number} options.zoom - The zoom of the plot.
	 * @param {Number} options.minZoom - The minimum zoom of the plot.
	 * @param {Number} options.maxZoom - The maximum zoom of the plot.
	 * @param {Object} options.center - The center of the plot, in plot pixels.
	 * @param {boolean} options.wraparound - Whether or not the plot wraps around.
	 *
	 * @param {Number} options.inertia - Whether or not pan inertia is enabled.
	 * @param {Number} options.inertiaEasing - The inertia easing factor.
	 * @param {Number} options.inertiaDeceleration - The inertia deceleration factor.
	 *
	 * @param {Number} options.continuousZoom - Whether or not continuous zoom is enabled.
	 * @param {Number} options.zoomDuration - The duration of the zoom animation.
	 * @param {Number} options.maxConcurrentZooms - The maximum concurrent zooms in a single batch.
	 * @param {Number} options.deltaPerZoom - The scroll delta required per zoom level.
	 * @param {Number} options.zoomDebounce - The debounce duration of the zoom in ms.
	 */function Plot(selector){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Plot);var _this=_possibleConstructorReturn(this,(Plot.__proto__||Object.getPrototypeOf(Plot)).call(this));_this.container=document.querySelector(selector);if(!_this.container){throw'Element could not be found for selector '+selector;}// create canvas element
_this.canvas=document.createElement('canvas');_this.canvas.style.width=_this.container.offsetWidth+'px';_this.canvas.style.height=_this.container.offsetHeight+'px';_this.canvas.width=_this.container.offsetWidth*window.devicePixelRatio;_this.canvas.height=_this.container.offsetHeight*window.devicePixelRatio;_this.container.appendChild(_this.canvas);// get WebGL context
_this.gl=_this.canvas.getContext('webgl',options);if(!_this.gl){throw'Unable to create a WebGLRenderingContext, please ensure your browser supports WebGL';}// create renderbuffer
_this.renderBuffer=new RenderBuffer(_this.gl,_this.canvas.width,_this.canvas.height);// set viewport
_this.viewport=new Viewport({width:_this.canvas.offsetWidth,height:_this.canvas.offsetHeight});// set pixel ratio
_this.pixelRatio=window.devicePixelRatio;// tile size in pixels
_this.tileSize=defaultTo(options.tileSize,256);// min and max zoom of the plot
_this.minZoom=defaultTo(options.minZoom,0);_this.maxZoom=defaultTo(options.maxZoom,MAX_ZOOM);// current zoom of the plot
_this.zoom=defaultTo(options.zoom,0);_this.zoom=clamp(_this.zoom,_this.minZoom,_this.maxZoom);// center the plot
var half=Math.pow(2,_this.zoom)*_this.tileSize/2;var center=defaultTo(options.center,{x:half,y:half});_this.viewport.centerOn(center);// wraparound
_this.wraparound=defaultTo(options.wraparound,false);// create and enable handlers
_this.handlers=new Map();_this.handlers.set('click',new ClickHandler(_this,options));_this.handlers.set('mouse',new MouseHandler(_this,options));_this.handlers.set('pan',new PanHandler(_this,options));_this.handlers.set('zoom',new ZoomHandler(_this,options));_this.handlers.forEach(function(handler){handler.enable();});// layers
_this.layers=[];// frame request
_this.frameRequest=null;// broadcast zoom / pan events to layers
broadcast(_this,EventType.ZOOM_START);broadcast(_this,EventType.ZOOM);broadcast(_this,EventType.ZOOM_END);broadcast(_this,EventType.PAN_START);broadcast(_this,EventType.PAN);broadcast(_this,EventType.PAN_END);// being frame loop
frame(_this);return _this;}/**
	 * Destroys the plots association with the underlying canvas element and
	 * disables all event handlers.
	 *
	 * @returns {Plot} The plot object, for chaining.
	 */_createClass(Plot,[{key:'destroy',value:function destroy(){var _this2=this;// stop animation loop
cancelAnimationFrame(this.frameRequest);this.frameRequest=null;// disable handlers
this.handlers.forEach(function(handler){handler.disable();});// remove layers
this.layers.forEach(function(layer){_this2.removeLayer(layer);});// destroy context
this.gl=null;// remove canvas
this.container.removeChild(this.canvas);this.canvas=null;this.container=null;this.renderBuffer=null;return this;}/**
	 * Adds a layer to the plot.
	 *
	 * @param {Layer} layer - The layer to add to the plot.
	 *
	 * @returns {Plot} The plot object, for chaining.
	 */},{key:'addLayer',value:function addLayer(layer){if(!layer){throw'No layer argument provided';}if(this.layers.indexOf(layer)!==-1){throw'Provided layer is already attached to the plot';}this.layers.push(layer);layer.onAdd(this);return this;}/**
	 * Removes a layer from the plot.
	 *
	 * @param {Layer} layer - The layer to remove from the plot.
	 *
	 * @returns {Plot} The plot object, for chaining.
	 */},{key:'removeLayer',value:function removeLayer(layer){if(!layer){throw'No layer argument provided';}var index=this.layers.indexOf(layer);if(index===-1){throw'Provided layer is not attached to the plot';}this.layers.splice(index,1);layer.onRemove(this);return this;}/**
	 * Takes a mouse event and returns the corresponding viewport pixel
	 * position. Coordinate [0, 0] is bottom-left of the viewport.
	 *
	 * @param {Event} event - The mouse event.
	 *
	 * @returns {Object} The viewport pixel position.
	 */},{key:'mouseToViewPx',value:function mouseToViewPx(event){return{x:event.clientX,y:this.viewport.height-event.clientY};}/**
	 * Takes a mouse event and returns the corresponding plot pixel
	 * position. Coordinate [0, 0] is bottom-left of the plot.
	 *
	 * @param {Event} event - The mouse event.
	 *
	 * @returns {Object} The plot pixel position.
	 */},{key:'mouseToPlotPx',value:function mouseToPlotPx(event){return this.viewPxToPlotPx(this.mouseToViewPx(event));}/**
	 * Takes a viewport pixel position and returns the corresponding plot
	 * pixel position. Coordinate [0, 0] is bottom-left of the plot.
	 *
	 * @param {Object} px - The viewport pixel position.
	 *
	 * @returns {Object} The plot pixel position.
	 */},{key:'viewPxToPlotPx',value:function viewPxToPlotPx(px){return{x:this.viewport.x+px.x,y:this.viewport.y+px.y};}/**
	 * Takes a plot pixel position and returns the corresponding viewport
	 * pixel position. Coordinate [0, 0] is bottom-left of the viewport.
	 *
	 * @param {Object} px - The plot pixel position.
	 *
	 * @returns {Object} The viewport pixel position.
	 */},{key:'plotPxToViewPx',value:function plotPxToViewPx(px){return{x:px.x-this.viewport.x,y:px.y-this.viewport.y};}/**
	 * Returns the target zoom of the plot. If the plot is actively zooming, it
	 * will return the destination zoom. If the plot is not actively zooming, it
	 * will return the current zoom.
	 *
	 * @returns {Number} The target zoom of the plot.
	 */},{key:'getTargetZoom',value:function getTargetZoom(){if(this.isZooming()){// if zooming, use the target level
return this.zoomAnimation.targetZoom;}// if not zooming, use the current level
return this.zoom;}/**
	 * Returns the target center of the plot in plot pixel coordinates. If the
	 * plot is actively zooming or panning, it will return the  destination
	 * center. If the plot is not actively zooming or panning, it will return
	 * the current center in plot pixel coordinates.
	 *
	 * @returns {Object} The target center in plot pixel coordinates.
	 */},{key:'getTargetCenter',value:function getTargetCenter(){if(this.isZooming()){// if zooming, use the target center
return this.zoomAnimation.targetViewport.getCenter();}// if not zooming, use the current center
return this.viewport.getCenter();}/**
	 * Returns the target viewport of the plot. If the plot is actively zooming,
	 * it will return the target viewport. If the plot is not actively zooming,
	 * it will return the current viewport.
	 *
	 * @returns {Viewport} The target viewport of the plot.
	 */},{key:'getTargetViewport',value:function getTargetViewport(){if(this.isZooming()){// if zooming, use the target viewport
return this.zoomAnimation.targetViewport;}// if not zooming, use the current viewport
return this.viewport;}/**
	 * Returns the tile coordinatess currently visible in the viewport.
	 *
	 * @returns {Array} The array of visible tile coords.
	 */},{key:'getVisibleCoords',value:function getVisibleCoords(){return this.getTargetViewport().getVisibleCoords(this.tileSize,this.getTargetZoom(),Math.round(this.getTargetZoom()),this.wraparound);}/**
	 * Pans to the target plot pixel coordinate.
	 *
	 * @param {Number} level - The target plot pixel.
	 * @param {boolean} animate - Whether or not to animate the pan. Defaults to `true`.
	 */},{key:'panTo',value:function panTo(plotPx){var animate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;// cancel existing animations
if(this.isPanning()){this.panAnimation.cancel();}if(this.isZooming()){this.zoomAnimation.cancel();}this.handlers.get('pan').panTo(plotPx,animate);}/**
	 * Zooms in to the target zoom level. This is bounded by the plot objects
	 * minZoom and maxZoom attributes.
	 *
	 * @param {Number} level - The target zoom level.
	 * @param {boolean} animate - Whether or not to animate the zoom. Defaults to `true`.
	 */},{key:'zoomTo',value:function zoomTo(level){var animate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(this.isPanning()){this.panAnimation.cancel();}if(this.isZooming()){this.zoomAnimation.cancel();}this.handlers.get('zoom').zoomTo(level,animate);}/**
	 * Returns whether or not the plot is actively panning.
	 *
	 * @returns {bool} - Whether or not the plot is panning.
	 */},{key:'isPanning',value:function isPanning(){return!!this.panAnimation;}/**
	 * Returns whether or not the plot is actively zooming.
	 *
	 * @returns {bool} - Whether or not the plot is zooming.
	 */},{key:'isZooming',value:function isZooming(){return!!this.zoomAnimation;}/**
	 * Return the containing element of the plot.
	 *
	 * @returns {DOMElement} The container of the plot.
	 */},{key:'getContainer',value:function getContainer(){return this.container;}}]);return Plot;}(EventEmitter);module.exports=Plot;

},{"../event/EventType":148,"../event/FrameEvent":149,"../event/ResizeEvent":152,"../render/webgl/texture/RenderBuffer":184,"./Request":159,"./Viewport":160,"./handler/ClickHandler":163,"./handler/MouseHandler":164,"./handler/PanHandler":165,"./handler/ZoomHandler":166,"events":191,"lodash/clamp":105,"lodash/defaultTo":107}],159:[function(require,module,exports){
'use strict';var throttle=require('lodash/throttle');// Constants
/**
 * Zoom request throttle in milliseconds.
 * @private
 * @constant {Number}
 */var ZOOM_REQUEST_THROTTLE_MS=400;/**
 * Pan request throttle in milliseconds.
 * @private
 * @constant {Number}
 */var PAN_REQUEST_THROTTLE_MS=100;// Private
var requestTiles=function requestTiles(plot){// get all visible coords in the target viewport
var coords=plot.getVisibleCoords();// for each layer
plot.layers.forEach(function(layer){// request tiles
layer.requestTiles(coords);});};module.exports={requestTiles:requestTiles,panRequest:throttle(requestTiles,PAN_REQUEST_THROTTLE_MS),zoomRequest:throttle(requestTiles,ZOOM_REQUEST_THROTTLE_MS)};

},{"lodash/throttle":131}],160:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Bounds=require('../core/Bounds');var Coord=require('../core/Coord');/**
 * Class representing a viewport.
 */var Viewport=function(){/**
	 * Instantiates a new Viewport object.
	 *
	 * @param {Object} params - The viewport parameters.
	 * @param {Number} params.x - The x coordinate of the viewport.
	 * @param {Number} params.y - The y coordinate of the viewport.
	 * @param {Number} params.width - The width of the viewport.
	 * @param {Number} params.height - The height of the viewport.
	 */function Viewport(){var params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Viewport);this.x=params.x?params.x:0;this.y=params.y?params.y:0;this.width=params.width?Math.round(params.width):0;this.height=params.height?Math.round(params.height):0;}/**
	 * Returns the pixel bounds of the viewport. Bounds edges are inclusive.
	 *
	 * @returns {Bounds} The pixel bounds of the viewport.
	 */_createClass(Viewport,[{key:'getPixelBounds',value:function getPixelBounds(){// NOTE: bounds are INCLUSIVE
return new Bounds(this.x,this.x+this.width-1,this.y,this.y+this.height-1);}/**
	 * Returns the pixel bounds of the viewport. Bounds edges are inclusive.
	 * NOTE: this includes wraparound coordinates
	 *
	 * @param {Number} tileSize - The dimension of the tiles, in pixels.
	 * @param {Number} viewportZoom - The zoom of the viewport.
	 * @param {Number} tileZoom - The zoom of the tiles within the viewport. Optional.
	 *
	 * @returns {Bounds} The tile bounds of the viewport.
	 */},{key:'getTileBounds',value:function getTileBounds(tileSize,viewportZoom){var tileZoom=arguments.length>2&&arguments[2]!==undefined?arguments[2]:viewportZoom;// NOTE: bounds are INCLUSIVE
// get the tile coordinate bounds for tiles from the tileZoom that
// are visible from the viewportZoom.
//	 Ex. if current viewport zoom is 3 and tile zoom is 5, the
//		 tiles will be 25% of there normal size compared to the
//		 viewport.
var scale=Math.pow(2,viewportZoom-tileZoom);var scaledTileSize=tileSize*scale;return new Bounds(Math.floor(this.x/scaledTileSize),Math.ceil((this.x+this.width)/scaledTileSize-1),Math.floor(this.y/scaledTileSize),Math.ceil((this.y+this.height)/scaledTileSize-1));}/**
	 * Returns the coordinates that are visible in the viewport.
	 *
	 * @param {Number} tileSize - The dimension of the tiles, in pixels.
	 * @param {Number} viewportZoom - The zoom of the viewport.
	 * @param {Number} tileZoom - The zoom of the tiles within the viewport. Optional.
	 * @param {boolean} wraparound - The if the horizontal axis should wraparound. Optional.
	 *
	 * @returns {Array} The array of visible tile coords.
	 */},{key:'getVisibleCoords',value:function getVisibleCoords(tileSize,viewportZoom){var tileZoom=arguments.length>2&&arguments[2]!==undefined?arguments[2]:viewportZoom;var wraparound=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var bounds=this.getTileBounds(tileSize,viewportZoom,tileZoom);// min / max tile coords
var dim=Math.pow(2,tileZoom);var min=0;var max=dim-1;// get the bounds of the zoom level
var layerBounds=new Bounds(wraparound?-Infinity:min,wraparound?Infinity:max,min,max);// check if the layer is within the viewport
if(!bounds.overlaps(layerBounds)){// there is no overlap
return[];}// clamp horizontal bounds if there is no wraparound
var left=wraparound?bounds.left:Math.max(min,bounds.left);var right=wraparound?bounds.right:Math.min(max,bounds.right);// clamp vertical bounds
var bottom=Math.max(min,bounds.bottom);var top=Math.min(max,bounds.top);var coords=[];for(var x=left;x<=right;x++){for(var y=bottom;y<=top;y++){coords.push(new Coord(tileZoom,x,y));}}return coords;}/**
	 * Returns whether or not the provided coord is within the viewport.
	 *
	 * @param {Number} tileSize - The dimension of the tiles, in pixels.
	 * @param {Coord} coord - The coord.
	 * @param {Number} viewportZoom - The zoom of the viewport.
	 *
	 * @return {boolean} Whether or not the coord is in view.
	 */},{key:'isInView',value:function isInView(tileSize,coord,viewportZoom){var viewportBounds=this.getPixelBounds();var tileBounds=coord.getPixelBounds(tileSize,viewportZoom);return viewportBounds.overlaps(tileBounds);}/**
	 * Returns a viewport that has been zoomed around it's center.
	 *
	 * @param {Number} tileSize - The dimension of the tiles, in pixels.
	 * @param {Number} zoom - The current zoom of the viewport.
	 * @param {Number} targetZoom - The target zoom of the viewport.
	 *
	 * @returns {Array} The array of visible tile coords.
	 */},{key:'zoomFromPlotCenter',value:function zoomFromPlotCenter(tileSize,zoom,targetZoom){// get the current dimension
var current=Math.pow(2,zoom);// get the next dimension
var next=Math.pow(2,targetZoom);// determine the change in pixels to center the existing plot
var change=tileSize*(next-current)/2;// return new viewport
var viewport=new Viewport({width:this.width,height:this.height,x:this.x+change,y:this.y+change});return viewport;}/**
	 * Returns a viewport that has been zoomed around a provided plot pixel.
	 *
	 * @param {Number} tileSize - The dimension of the tiles, in pixels.
	 * @param {Number} zoom - The current zoom of the viewport.
	 * @param {Number} targetZoom - The target zoom of the viewport.
	 * @param {Object} targetPx - The target pixel to zoom around.
	 *
	 * @returns {Array} The array of visible tile coords.
	 */},{key:'zoomFromPlotPx',value:function zoomFromPlotPx(tileSize,zoom,targetZoom,targetPx){// get the current dimension
var current=Math.pow(2,zoom);// get the next dimension
var next=Math.pow(2,targetZoom);// determine the change in pixels to center the existing plot
var change=tileSize*(next-current)/2;// get the half size of the plot at the current zoom
var half=tileSize*current/2;// get the distance from the plot center at the current zoom
var diff={x:targetPx.x-half,y:targetPx.y-half};// get the scaling between the two zoom levels
var scale=Math.pow(2,targetZoom-zoom);// scale the diff, and subtract it's current value
var scaledDiff={x:diff.x*scale-diff.x,y:diff.y*scale-diff.y};// return new viewport
var viewport=new Viewport({width:this.width,height:this.height,x:this.x+change+scaledDiff.x,y:this.y+change+scaledDiff.y});return viewport;}/**
	 * Returns the lower-left corner position of the viewport in plot pixel
	 * coordinates.
	 *
	 * @returns {Object} The plot pixel position.
	 */},{key:'getPosition',value:function getPosition(){return{x:this.x,y:this.y};}/**
	 * Returns the center of the viewport in plot pixel coordinates.
	 *
	 * @returns {Object} The plot pixel center.
	 */},{key:'getCenter',value:function getCenter(){return{x:this.x+this.width/2,y:this.y+this.height/2};}/**
	 * Centers the viewport on a given plot pixel coordinate.
	 *
	 * @param {Object} px - The plot pixel to center the viewport on.
	 *
	 * @returns {Viewport} The viewport object, for chaining.
	 */},{key:'centerOn',value:function centerOn(px){this.x=px.x-this.width/2;this.y=px.y-this.height/2;}}]);return Viewport;}();module.exports=Viewport;

},{"../core/Bounds":140,"../core/Coord":142}],161:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var EventType=require('../../event/EventType');var PanEvent=require('../../event/PanEvent');/**
 * Class representing a pan animation.
 */var PanAnimation=function(){/**
	 * Instantiates a new PanAnimation object.
	 *
	 * @param {Object} params - The parameters of the animation.
	 * @param {Number} params.plot - The plot target of the animation.
	 * @param {Number} params.start - The start timestamp of the animation.
	 * @param {Number} params.delta - The positional delta of the animation.
	 * @param {Number} params.easing - The easing factor of the animation.
	 * @param {Number} params.duration - The duration of the animation.
	 */function PanAnimation(){var params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,PanAnimation);this.timestamp=Date.now();this.plot=params.plot;this.start=params.start;this.delta=params.delta;this.end={x:this.start.x+this.delta.x,y:this.start.y+this.delta.y};this.easing=params.easing;this.duration=params.duration;}/**
	 * Updates the position of the plot based on the current state of the
	 * animation.
	 *
	 * @param {Number} timestamp - The frame timestamp.
	 */_createClass(PanAnimation,[{key:'update',value:function update(timestamp){var t=Math.min(1.0,(timestamp-this.timestamp)/(this.duration||1));// calculate the progress of the animation
var progress=1-Math.pow(1-t,1/this.easing);// caclulate the current position along the pan
var plot=this.plot;var prev=plot.viewport.getPosition();var current={x:this.start.x+this.delta.x*progress,y:this.start.y+this.delta.y*progress};// set the viewport positions
plot.viewport.x=current.x;plot.viewport.y=current.y;// create pan event
var event=new PanEvent(plot,prev,current);// check if animation is finished
if(t<1){plot.emit(EventType.PAN,event);}else{plot.emit(EventType.PAN_END,event);// remove self from plot
plot.panAnimation=null;}}/**
	 * Cancels the current animation and removes it from the plot.
	 */},{key:'cancel',value:function cancel(){var plot=this.plot;var current=plot.viewport.getPosition();// emit pan end
plot.emit(EventType.PAN_END,new PanEvent(plot,current,this.end));// remove self from plot
plot.panAnimation=null;}/**
	 * Complete the current animation and remove it from the plot.
	 */},{key:'finish',value:function finish(){var plot=this.plot;var current=plot.viewport.getPosition();// set the viewport positions
plot.viewport.x=this.end.x;plot.viewport.y=this.end.y;// emit pan end
var event=new PanEvent(plot,current,this.end);plot.emit(EventType.PAN_END,event);// remove self from plot
plot.panAnimation=null;}}]);return PanAnimation;}();module.exports=PanAnimation;

},{"../../event/EventType":148,"../../event/PanEvent":151}],162:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var EventType=require('../../event/EventType');var ZoomEvent=require('../../event/ZoomEvent');/**
 * Class representing a zoom animation.
 */var ZoomAnimation=function(){/**
	 * Instantiates a new ZoomAnimation object.
	 *
	 * @param {Object} params - The parameters of the animation.
	 * @param {Number} params.plot - The plot target of the animation.
	 * @param {Number} params.prevZoom - The starting zoom of the animation.
	 * @param {Number} params.targetZoom - The target zoom of the animation.
	 * @param {Number} params.prevViewport - The starting viewport of the animation.
	 * @param {Number} params.targetViewport - The target viewport of the animation.
	 * @param {Number} params.targetPx - The target pixel of the animation, in plot coordinates.
	 * @param {Number} params.duration - The duration of the animation.
	 */function ZoomAnimation(){var params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,ZoomAnimation);this.timestamp=Date.now();this.plot=params.plot;this.duration=params.duration;this.prevZoom=params.prevZoom;this.targetZoom=params.targetZoom;this.prevViewport=params.prevViewport;this.targetViewport=params.targetViewport;this.targetPx=params.targetPx;}/**
	 * Updates the zoom of the plot based on the current state of the
	 * animation.
	 *
	 * @param {Number} timestamp - The frame timestamp.
	 */_createClass(ZoomAnimation,[{key:'update',value:function update(timestamp){// get t value
var t=Math.min(1.0,(timestamp-this.timestamp)/(this.duration||1));// calc new zoom
var range=this.targetZoom-this.prevZoom;var zoom=this.prevZoom+range*t;var plot=this.plot;// set new zoom
plot.zoom=zoom;// calc new viewport position from prev
plot.viewport=this.prevViewport.zoomFromPlotPx(plot.tileSize,this.prevZoom,plot.zoom,this.targetPx);// create zoom event
var event=new ZoomEvent(plot,this.prevZoom,plot.zoom,this.targetZoom);// check if animation is finished
if(t<1){plot.emit(EventType.ZOOM,event);}else{plot.emit(EventType.ZOOM_END,event);// remove self from plot
plot.zoomAnimation=null;}}/**
	 * Cancels the current animation and removes it from the plot.
	 */},{key:'cancel',value:function cancel(){var plot=this.plot;if(!plot.continuousZoom){// round to the closest zoom
plot.zoom=Math.round(plot.zoom);// calc viewport position from prev
plot.viewport=this.prevViewport.zoomFromPlotPx(plot.tileSize,this.prevZoom,plot.zoom,this.targetPx);}// emit zoom end
var event=new ZoomEvent(plot,this.prevZoom,plot.zoom,this.targetZoom);plot.emit(EventType.ZOOM_END,event);// remove self from plot
plot.zoomAnimation=null;}/**
	 * Complete the current animation and remove it from the plot.
	 */},{key:'finish',value:function finish(){var plot=this.plot;plot.zoom=this.targetZoom;plot.viewport=this.targetViewport;// emit zoom end
var event=new ZoomEvent(plot,this.prevZoom,plot.zoom,this.targetZoom);plot.emit(EventType.ZOOM_END,event);// remove self from plot
plot.zoomAnimation=null;}}]);return ZoomAnimation;}();module.exports=ZoomAnimation;

},{"../../event/EventType":148,"../../event/ZoomEvent":154}],163:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var EventType=require('../../event/EventType');var ClickEvent=require('../../event/ClickEvent');// Const
/**
 * Distance in pixels the mouse can be moved before the click event is
 * cancelled.
 * @private
 * @constant {Number}
 */var MOVE_TOLERANCE=15;// Private Methods
var getMouseButton=function getMouseButton(event){if(event.which){if(event.which===1){return'left';}else if(event.which===2){return'middle';}else if(event.which===3){return'right';}}if(event.button===0){return'left';}else if(event.button===1){return'middle';}else if(event.button===2){return'right';}};var createEvent=function createEvent(plot,event){return new ClickEvent(plot,getMouseButton(event),plot.mouseToViewPx(event),plot.mouseToPlotPx(event));};/**
 * Class representing a click handler.
 */var ClickHandler=function(){/**
	 * Instantiates a new ClickHandler object.
	 *
	 * @param {Plot} plot - The plot to attach the handler to.
	 */function ClickHandler(plot){_classCallCheck(this,ClickHandler);this.plot=plot;this.enabled=false;}/**
	 * Enables the handler.
	 *
	 * @returns {ClickHandler} The handler object, for chaining.
	 */_createClass(ClickHandler,[{key:'enable',value:function enable(){var _this=this;if(this.enabled){throw'Handler is already enabled';}var plot=this.plot;var last=null;this.mousedown=function(event){last=plot.mouseToViewPx(event);};this.mouseup=function(event){if(!last){return;}var pos=plot.mouseToViewPx(event);var diff={x:last.x-pos.x,y:last.y-pos.y};var distSqrd=diff.x*diff.x+diff.y*diff.y;if(distSqrd<MOVE_TOLERANCE*MOVE_TOLERANCE){// movement was within tolerance, emit click
_this.plot.emit(EventType.CLICK,createEvent(plot,event));}last=null;};this.dblclick=function(event){_this.plot.emit(EventType.DBL_CLICK,createEvent(plot,event));};plot.container.addEventListener('mousedown',this.mousedown);plot.container.addEventListener('mouseup',this.mouseup);plot.container.addEventListener('dblclick',this.dblclick);this.enabled=true;}/**
	 * Disables the handler.
	 *
	 * @returns {ClickHandler} The handler object, for chaining.
	 */},{key:'disable',value:function disable(){if(this.enabled){throw'Handler is already disabled';}this.plot.container.removeEventListener('mousedown',this.mousedown);this.plot.container.removeEventListener('mouseup',this.mouseup);this.plot.container.removeEventListener('dblclick',this.dblclick);this.mousedown=null;this.mouseup=null;this.dblclick=null;this.enabled=false;}}]);return ClickHandler;}();module.exports=ClickHandler;

},{"../../event/ClickEvent":145,"../../event/EventType":148}],164:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var EventType=require('../../event/EventType');var MouseEvent=require('../../event/MouseEvent');// Private Methods
var getMouseButton=function getMouseButton(event){if(event.which){if(event.which===1){return'left';}else if(event.which===2){return'middle';}else if(event.which===3){return'right';}}if(event.button===0){return'left';}else if(event.button===1){return'middle';}else if(event.button===2){return'right';}};var createEvent=function createEvent(plot,event){return new MouseEvent(plot,getMouseButton(event),plot.mouseToViewPx(event),plot.mouseToPlotPx(event));};/**
 * Class representing a mouse handler.
 */var MouseHandler=function(){/**
	 * Instantiates a new MouseHandler object.
	 *
	 * @param {Plot} plot - The plot to attach the handler to.
	 */function MouseHandler(plot){_classCallCheck(this,MouseHandler);this.plot=plot;this.enabled=false;}/**
	 * Enables the handler.
	 *
	 * @returns {MouseHandler} The handler object, for chaining.
	 */_createClass(MouseHandler,[{key:'enable',value:function enable(){var _this=this;if(this.enabled){throw'Handler is already enabled';}var plot=this.plot;this.mousedown=function(event){_this.plot.emit(EventType.MOUSE_DOWN,createEvent(plot,event));};this.mouseup=function(event){_this.plot.emit(EventType.MOUSE_UP,createEvent(plot,event));};this.mousemove=function(event){_this.plot.emit(EventType.MOUSE_MOVE,createEvent(plot,event));};this.mouseover=function(event){_this.plot.emit(EventType.MOUSE_OVER,createEvent(plot,event));};this.mouseout=function(event){_this.plot.emit(EventType.MOUSE_OUT,createEvent(plot,event));};plot.container.addEventListener('mousedown',this.mousedown);plot.container.addEventListener('mouseup',this.mouseup);plot.container.addEventListener('mousemove',this.mousemove);plot.container.addEventListener('mouseover',this.mouseover);plot.container.addEventListener('mouseout',this.mouseout);this.enabled=true;}/**
	 * Disables the handler.
	 *
	 * @returns {MouseHandler} The handler object, for chaining.
	 */},{key:'disable',value:function disable(){if(this.enabled){throw'Handler is already disabled';}this.plot.container.removeEventListener('mousedown',this.mousedown);this.plot.container.removeEventListener('mouseup',this.mouseup);this.plot.container.removeEventListener('mousemove',this.mousemove);this.plot.container.removeEventListener('mouseover',this.mouseover);this.plot.container.removeEventListener('mouseout',this.mouseout);this.mousedown=null;this.mouseup=null;this.mousemove=null;this.mouseover=null;this.mouseout=null;this.enabled=false;}}]);return MouseHandler;}();module.exports=MouseHandler;

},{"../../event/EventType":148,"../../event/MouseEvent":150}],165:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var defaultTo=require('lodash/defaultTo');var PanAnimation=require('../animation/PanAnimation');var EventType=require('../../event/EventType');var PanEvent=require('../../event/PanEvent');var Request=require('./../Request');// Constants
/**
 * Time in milliseconds before a pan point expires.
 * @private
 * @constant {Number}
 */var PAN_EXPIRY_MS=50;/**
 * Pan inertia enabled.
 * @private
 * @constant {boolean}
 */var PAN_INTERTIA=true;/**
 * Pan inertia easing.
 * @private
 * @constant {Number}
 */var PAN_INTERTIA_EASING=0.2;/**
 * Pan inertia deceleration.
 * @private
 * @constant {Number}
 */var PAN_INTERTIA_DECELERATION=3400;/**
 * Pan to animation duration
 * @private
 * @constant {Number}
 */var PAN_TO_DURATION=800;// Private Methods
var pan=function pan(plot,delta){if(plot.isZooming()){// no panning while zooming
return;}var prev=plot.viewport.getPosition();var current={x:prev.x+=delta.x,y:prev.y+=delta.y};// update current viewport
plot.viewport.x=current.x;plot.viewport.y=current.y;// request tiles
Request.panRequest(plot);// emit pan
plot.emit(EventType.PAN,new PanEvent(plot,prev,current));};var isRightButton=function isRightButton(event){return event.which?event.which===3:event.button===2;};/**
 * Class representing a pan handler.
 */var PanHandler=function(){/**
	 * Instantiates a new PanHandler object.
	 *
	 * @param {Plot} plot - The plot to attach the handler to.
	 * @param {Object} options - The parameters of the animation.
	 * @param {Number} options.inertia - Whether or not pan inertia is enabled.
	 * @param {Number} options.inertiaEasing - The inertia easing factor.
	 * @param {Number} options.inertiaDeceleration - The inertia deceleration factor.
	 */function PanHandler(plot){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,PanHandler);this.inertia=defaultTo(options.inertia,PAN_INTERTIA);this.inertiaEasing=defaultTo(options.inertiaEasing,PAN_INTERTIA_EASING);this.inertiaDeceleration=defaultTo(options.inertiaDeceleration,PAN_INTERTIA_DECELERATION);this.plot=plot;this.enabled=false;}/**
	 * Enables the handler.
	 *
	 * @returns {PanHandler} The handler object, for chaining.
	 */_createClass(PanHandler,[{key:'enable',value:function enable(){var _this=this;if(this.enabled){throw'Handler is already enabled';}var plot=this.plot;var down=false;var lastPos=null;var lastTime=null;var positions=[];var times=[];this.mousedown=function(event){// ignore if right-button
if(isRightButton(event)){return;}// flag as down
down=true;// set position and timestamp
lastPos=plot.mouseToViewPx(event);lastTime=Date.now();if(_this.inertia){// clear existing pan animation
plot.panAnimation=null;// reset position and time arrays
positions=[];times=[];}};this.mousemove=function(event){if(down){// get latest position and timestamp
var pos=plot.mouseToViewPx(event);var time=Date.now();if(positions.length===0){// emit pan start
var prev={x:lastPos.x,y:lastPos.y};var current={x:pos.x,y:pos.y};plot.emit(EventType.PAN_START,new PanEvent(plot,prev,current));}if(_this.inertia){// add to position and time arrays
positions.push(pos);times.push(time);// prevent array from getting too big
if(time-times[0]>PAN_EXPIRY_MS){positions.shift();times.shift();}}// calculate the positional delta
var delta={x:lastPos.x-pos.x,y:lastPos.y-pos.y};// pan the plot
pan(plot,delta);// update last position and time
lastTime=time;lastPos=pos;}};this.mouseup=function(event){// flag as up
down=false;if(plot.isZooming()){// no panning while zooming
return;}// ignore if right-button
if(isRightButton(event)){return;}// ignore if no drag occurred
if(positions.length===0){return;}if(!_this.inertia){// exit early if no inertia or no movement
plot.emit(EventType.PAN_END,new PanEvent(plot));return;}// get timestamp
var time=Date.now();// strip any positions that are too old
while(time-times[0]>PAN_EXPIRY_MS){positions.shift();times.shift();}if(times.length<2){// exit early if no remaining valid positions
plot.emit(EventType.PAN_END,new PanEvent(plot));return;}// shorthand
var deceleration=_this.inertiaDeceleration;var easing=_this.inertiaEasing;// calculate direction from earliest to latest
var direction={x:lastPos.x-positions[0].x,y:lastPos.y-positions[0].y};// calculate the time difference
var diff=(lastTime-times[0]||1)/1000;// ms to s
// calculate velocity
var velocity={x:direction.x*(easing/diff),y:direction.y*(easing/diff)};// calculate speed
var speed=Math.sqrt(velocity.x*velocity.x+velocity.y*velocity.y);// calculate panning duration
var duration=speed/(deceleration*easing);// calculate inertia delta
var delta={x:Math.round(velocity.x*(-duration/2)),y:Math.round(velocity.y*(-duration/2))};// get current viewport x / y
var start={x:plot.viewport.x,y:plot.viewport.y};// set pan animation
plot.panAnimation=new PanAnimation({plot:plot,start:start,delta:delta,easing:easing,duration:duration*1000// s to ms
});};this.plot.container.addEventListener('mousedown',this.mousedown);document.addEventListener('mousemove',this.mousemove);document.addEventListener('mouseup',this.mouseup);this.enabled=true;}/**
	 * Disables the handler.
	 *
	 * @returns {PanHandler} The handler object, for chaining.
	 */},{key:'disable',value:function disable(){if(!this.enabled){throw'Handler is already disabled';}this.plot.container.removeEventListener('mousedown',this.mousedown);document.removeEventListener('mousemove',this.mousemove);document.removeEventListener('mouseup',this.mouseup);this.mousedown=null;this.mousemove=null;this.mouseup=null;this.enabled=false;}/**
	 * Pans to the target plot pixel coordinate.
	 *
	 * @param {Number} level - The target plot pixel.
	 * @param {boolean} animate - Whether or not to animate the pan. Defaults to `true`.
	 */},{key:'panTo',value:function panTo(plotPx){var animate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var plot=this.plot;var centerPx=plot.viewport.getCenter();var delta={x:plotPx.x-centerPx.x,y:plotPx.y-centerPx.y};if(!animate){// do not animate
plot.emit(EventType.PAN_START,new PanEvent(plot));pan(plot,delta);plot.emit(EventType.PAN_END,new PanEvent(plot));}else{// animate pan
plot.emit(EventType.PAN_START,new PanEvent(plot));plot.panAnimation=new PanAnimation({plot:plot,start:plot.viewport.getPosition(),delta:delta,easing:this.inertiaEasing,duration:PAN_TO_DURATION});}}}]);return PanHandler;}();module.exports=PanHandler;

},{"../../event/EventType":148,"../../event/PanEvent":151,"../animation/PanAnimation":161,"./../Request":159,"lodash/defaultTo":107}],166:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var clamp=require('lodash/clamp');var defaultTo=require('lodash/defaultTo');var Browser=require('../../core/Browser');var EventType=require('../../event/EventType');var ZoomEvent=require('../../event/ZoomEvent');var ZoomAnimation=require('../animation/ZoomAnimation');var Request=require('../Request');var Viewport=require('../Viewport');// Constants
/**
 * Amount of scroll pixels per zoom level.
 * @private
 * @constant {Number}
 */var ZOOM_WHEEL_DELTA=300;/**
 * Length of zoom animation in milliseconds.
 * @private
 * @constant {Number}
 */var ZOOM_ANIMATION_MS=250;/**
 * Maximum concurrent discrete zooms in a single batch.
 * @private
 * @constant {Number}
 */var MAX_CONCURRENT_ZOOMS=4;/**
 * Zoom debounce delay in miliseconds.
 * @private
 * @constant {Number}
 */var ZOOM_DEBOUNCE_MS=100;/**
 * Continuous zoom enabled.
 * @private
 * @constant {boolean}
 */var CONTINUOUS_ZOOM=false;// Private Methods
var last=Date.now();var skipInterpolation=function skipInterpolation(animation,delta){// NOTE: attempt to determine if the scroll device is a mouse or a
// trackpad. Mouse scrolling creates large infrequent deltas while
// trackpads create tons of very small deltas. We want to interpolate
// between wheel events, but not between trackpad events.
var now=Date.now();var tdelta=now-last;last=now;if(delta%4.000244140625===0){// definitely a wheel, interpolate
return false;}if(Math.abs(delta)<4){// definitely track pad, do not interpolate
return true;}if(animation&&animation.duration!==0){// current animation has interpolation, should probably interpolate
// the next animation too.
// NOTE: without this, rapid wheel scrolling will trigger the skip
// below
return false;}if(tdelta<40){// events are close enough together that we should probably
// not interpolate
return true;}return false;};var computeZoomDelta=function computeZoomDelta(wheelDelta,continuousZoom,deltaPerZoom,maxZooms){var zoomDelta=wheelDelta/deltaPerZoom;if(!continuousZoom){// snap value if not continuous zoom
if(wheelDelta>0){zoomDelta=Math.ceil(zoomDelta);}else{zoomDelta=Math.floor(zoomDelta);}}// clamp zoom delta to max concurrent zooms
return clamp(zoomDelta,-maxZooms,maxZooms);};var computeTargetZoom=function computeTargetZoom(zoomDelta,currentZoom,currentAnimation,minZoom,maxZoom){var targetZoom=void 0;if(currentAnimation){// append to existing animation target
targetZoom=currentAnimation.targetZoom+zoomDelta;}else{targetZoom=currentZoom+zoomDelta;}// clamp the target zoom to min and max zoom level of plot
return clamp(targetZoom,minZoom,maxZoom);};var zoom=function zoom(plot,targetPx,zoomDelta,duration){// calculate target zoom level
var targetZoom=computeTargetZoom(zoomDelta,plot.zoom,plot.zoomAnimation,plot.minZoom,plot.maxZoom);// check if we need to zoom
if(targetZoom!==plot.zoom){// set target viewport
var targetViewport=plot.viewport.zoomFromPlotPx(plot.tileSize,plot.zoom,targetZoom,targetPx);// clear pan animation
plot.panAnimation=null;// if there is a duration
if(duration>0){// set zoom animation
plot.zoomAnimation=new ZoomAnimation({plot:plot,duration:duration,prevZoom:plot.zoom,targetZoom:targetZoom,prevViewport:new Viewport(plot.viewport),targetViewport:targetViewport,targetPx:targetPx});}// request tiles
Request.zoomRequest(plot);// emit zoom start
plot.emit(EventType.ZOOM_START,new ZoomEvent(plot,plot.zoom,plot.zoom,targetZoom));// if there isn't a duration
if(duration===0){// immediately update plot
plot.zoom=targetZoom;plot.viewport=targetViewport;// emit zoom end
plot.emit(EventType.ZOOM_END,new ZoomEvent(plot,targetZoom,targetZoom,targetZoom));}}};var zoomFromWheel=function zoomFromWheel(handler,plot,targetPx,wheelDelta,continuousZoom){// no wheel delta, exit early
if(wheelDelta===0){return;}// calculate zoom delta from wheel delta
var zoomDelta=computeZoomDelta(wheelDelta,continuousZoom,handler.deltaPerZoom,handler.maxConcurrentZooms);// get duration
var duration=handler.zoomDuration;if(continuousZoom&&skipInterpolation(plot.zoomAnimation,wheelDelta)){// skip animation interpolation
duration=0;}// process the zoom
zoom(plot,targetPx,zoomDelta,duration);};var getWheelDelta=function getWheelDelta(plot,event){if(event.deltaMode===0){// pixels
if(Browser.firefox){return-event.deltaY/plot.pixelRatio;}return-event.deltaY;}else if(event.deltaMode===1){// lines
return-event.deltaY*20;}// pages
return-event.deltaY*60;};/**
 * Class representing a zoom handler.
 */var ZoomHandler=function(){/**
	 * Instantiates a new ZoomHandler object.
	 *
	 * @param {Plot} plot - The plot to attach the handler to.
	 * @param {Object} options - The parameters of the animation.
	 * @param {Number} options.continuousZoom - Whether or not continuous zoom is enabled.
	 * @param {Number} options.zoomDuration - The duration of the zoom animation.
	 * @param {Number} options.maxConcurrentZooms - The maximum concurrent zooms in a single batch.
	 * @param {Number} options.deltaPerZoom - The scroll delta required per zoom level.
	 * @param {Number} options.zoomDebounce - The debounce duration of the zoom in ms.
	 */function ZoomHandler(plot){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,ZoomHandler);this.continuousZoom=defaultTo(options.continuousZoom,CONTINUOUS_ZOOM);this.zoomDuration=defaultTo(options.zoomDuration,ZOOM_ANIMATION_MS);this.maxConcurrentZooms=defaultTo(options.maxConcurrentZooms,MAX_CONCURRENT_ZOOMS);this.deltaPerZoom=defaultTo(options.deltaPerZoom,ZOOM_WHEEL_DELTA);this.zoomDebounce=defaultTo(options.zoomDebounce,ZOOM_DEBOUNCE_MS);this.plot=plot;this.enabled=false;}/**
	 * Enables the handler.
	 *
	 * @returns {ZoomHandler} The handler object, for chaining.
	 */_createClass(ZoomHandler,[{key:'enable',value:function enable(){var _this=this;if(this.enabled){throw'Handler is already enabled';}var plot=this.plot;var wheelDelta=0;var timeout=null;var evt=null;this.dblclick=function(event){// get mouse position
var targetPx=plot.mouseToPlotPx(event);// zoom the plot by one level
zoom(plot,targetPx,1,_this.zoomDuration);};this.wheel=function(event){// get normalized delta
var delta=getWheelDelta(plot,event);if(!_this.continuousZoom&&Math.abs(delta)<4){// mitigate the hyper sensitivty of a trackpad
return;}// increment wheel delta
wheelDelta+=delta;// check zoom type
if(_this.continuousZoom){// get target pixel from mouse position
var targetPx=plot.mouseToPlotPx(event);// process continuous zoom immediately
zoomFromWheel(_this,plot,targetPx,wheelDelta,true);// reset wheel delta
wheelDelta=0;}else{// set event
evt=event;// debounce discrete zoom
if(!timeout){timeout=setTimeout(function(){// get target pixel from mouse position
// NOTE: this is called inside the closure to ensure
// that we use the current viewport of the plot to
// convert from mouse to plot pixels
var targetPx=plot.mouseToPlotPx(evt);// process zoom event
zoomFromWheel(_this,plot,targetPx,wheelDelta,false);// reset wheel delta
wheelDelta=0;// clear timeout
timeout=null;// clear event
evt=null;},_this.zoomDebounce);}}// prevent default behavior and stop propagationa
event.preventDefault();event.stopPropagation();};this.plot.container.addEventListener('dblclick',this.dblclick);this.plot.container.addEventListener('wheel',this.wheel);this.enabled=true;}/**
	 * Disables the handler.
	 *
	 * @returns {ZoomHandler} The handler object, for chaining.
	 */},{key:'disable',value:function disable(){if(this.enabled){throw'Handler is already disabled';}this.plot.container.removeEventListener('dblclick',this.dblclick);this.plot.container.removeEventListener('wheel',this.wheel);this.dblclick=null;this.wheel=null;this.enabled=false;}/**
	 * Zooms in to the target zoom level. This is bounded by the plot objects
	 * minZoom and maxZoom attributes.
	 *
	 * @param {Number} level - The target zoom level.
	 * @param {boolean} animate - Whether or not to animate the zoom. Defaults to `true`.
	 */},{key:'zoomTo',value:function zoomTo(level){var animate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var plot=this.plot;var targetPx=this.plot.viewport.getCenter();var zoomDelta=level-plot.zoom;if(!animate){// do not animate
zoom(plot,targetPx,zoomDelta,0);}else{// animate
zoom(plot,targetPx,zoomDelta,this.zoomDuration);}}}]);return ZoomHandler;}();module.exports=ZoomHandler;

},{"../../core/Browser":141,"../../event/EventType":148,"../../event/ZoomEvent":154,"../Request":159,"../Viewport":160,"../animation/ZoomAnimation":162,"lodash/clamp":105,"lodash/defaultTo":107}],167:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var EventEmitter=require('events');/**
 * Class representing a renderer.
 */var Renderer=function(_EventEmitter){_inherits(Renderer,_EventEmitter);/**
	 * Instantiates a new Renderer object.
	 */function Renderer(){_classCallCheck(this,Renderer);var _this=_possibleConstructorReturn(this,(Renderer.__proto__||Object.getPrototypeOf(Renderer)).call(this));_this.layer=null;_this.handlers=null;return _this;}/**
	 * Executed when the renderer is attached to a layer.
	 *
	 * @param {Layer} layer - The layer to attach the renderer to.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */_createClass(Renderer,[{key:'onAdd',value:function onAdd(layer){if(!layer){throw'No layer provided as argument';}this.layer=layer;this.handlers=new Map();return this;}/**
	 * Executed when the renderer is removed from a layer.
	 *
	 * @param {Layer} layer - The layer to remove the renderer from.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'onRemove',value:function onRemove(layer){if(!layer){throw'No layer provided as argument';}this.layer=null;this.handlers=null;return this;}/**
	 * Clears any persisted state in the renderer.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'clear',value:function clear(){return this;}/**
	 * The draw function that is executed per frame.
	 *
	 * @param {Number} timestamp - The frame timestamp.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'draw',value:function draw(){return this;}}]);return Renderer;}(EventEmitter);module.exports=Renderer;

},{"events":191}],168:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var DrawEvent=require('../../event/DrawEvent');var EventType=require('../../event/EventType');var Renderer=require('../Renderer');// Constants
/**
 * The maximum left / bottom offset of the container element.
 * @private
 * @constant {Number}
 */var MAX_CONTAINER_OFFSET=256*256*8;/**
 * Draw debounce timeout in milliseconds.
 * @private
 * @constant {Number}
 */var DRAW_DEBOUNCE_MS=400;/**
 * Erase debounce timeout in milliseconds.
 * @private
 * @constant {Number}
 */var ERASE_DEBOUNCE_MS=400;/**
 * Opacity timeout in milleseconds.
 * @private
 * @constant {Number}
 */var OPACITY_TIMEOUT_MS=40;/**
 * Opacity fade in transition duration in milleseconds.
 * @private
 * @constant {Number}
 */var OPACITY_FADE_IN_MS=400;// Private Methods
var getStaleCoords=function getStaleCoords(plot,tiles){// get all currently visible tile coords
var coords=plot.getVisibleCoords();var visible=new Map();coords.forEach(function(coord){visible.set(coord.hash,coord);});// flag any coord that is not in view as stale
var stale=new Map();tiles.forEach(function(tile,hash){if(!visible.has(hash)){stale.set(hash,tile);}});return stale;};var getRenderables=function getRenderables(plot,pyramid){// get all currently visible tile coords
var coords=plot.getVisibleCoords();// get available renderables
var renderables=new Map();coords.forEach(function(coord){var ncoord=coord.normalize();// check if we have the tile
var tile=pyramid.get(ncoord);if(tile){renderables.set(coord.hash,{coord:coord,tile:tile});}});return renderables;};var drawTiles=function drawTiles(renderer,container,tiles,plot,pyramid){var ignoreFade=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;var tileSize=plot.tileSize;// create document fragment
var fragment=document.createDocumentFragment();// add new tiles to the DOM
var renderables=getRenderables(plot,pyramid);renderables.forEach(function(renderable,hash){if(!tiles.has(hash)){var coord=renderable.coord;// create tile element
var elem=renderer.createTile(tileSize);// position tile
renderer.positionTile(elem,coord.x*tileSize+renderer.offset.x,coord.y*tileSize+renderer.offset.y,tileSize);// make tile invisible
if(!ignoreFade){elem.style.transition='opacity '+OPACITY_FADE_IN_MS+'ms';elem.style.opacity='0.0';}// draw the tile
renderer.drawTile(elem,renderable.tile);// add to the fragment
fragment.append(elem);if(!ignoreFade){// fade tile in
setTimeout(function(){elem.style.opacity=1.0;},OPACITY_TIMEOUT_MS);}// add the tile
tiles.set(hash,{coord:coord,elem:elem});}});if(fragment.children.length>0){// append all new tiles to the container
container.appendChild(fragment);// emit a postdraw event
renderer.emit(EventType.POST_DRAW,new DrawEvent(renderables,null));}};var eraseTiles=function eraseTiles(renderer,container,tiles,plot){// remove any stale tiles from DOM
var stale=getStaleCoords(plot,tiles);stale.forEach(function(tile,hash){tiles.delete(hash);container.removeChild(tile.elem);});};/**
 * Class representing a DOM renderer.
 */var DOMRenderer=function(_Renderer){_inherits(DOMRenderer,_Renderer);/**
	 * Instantiates a new DOMRenderer object.
	 */function DOMRenderer(){_classCallCheck(this,DOMRenderer);var _this=_possibleConstructorReturn(this,(DOMRenderer.__proto__||Object.getPrototypeOf(DOMRenderer)).call(this));_this.tiles=null;_this.container=null;// to deal with css top / left precision issues, we need to position
// the layer container relative to the current viewport within some
// pixel threshold to prevent rendering issues.
_this.offset={x:0,y:0};_this.drawTimeout=null;_this.eraseTimeout=null;return _this;}/**
	 * Executed when the renderer is attached to a layer.
	 *
	 * @param {Layer} layer - The layer to attach the renderer to.
	 *
	 * @returns {DOMRenderer} The renderer object, for chaining.
	 */_createClass(DOMRenderer,[{key:'onAdd',value:function onAdd(layer){_get(DOMRenderer.prototype.__proto__||Object.getPrototypeOf(DOMRenderer.prototype),'onAdd',this).call(this,layer);this.tiles=new Map();this.container=this.createContainer();this.layer.plot.container.appendChild(this.container);return this;}/**
	 * Executed when the renderer is removed from a layer.
	 *
	 * @param {Layer} layer - The layer to remove the renderer from.
	 *
	 * @returns {DOMRenderer} The renderer object, for chaining.
	 */},{key:'onRemove',value:function onRemove(layer){this.layer.plot.container.removeChild(this.container);this.tiles=null;this.container=null;// clear timeouts
clearTimeout(this.drawTimeout);clearTimeout(this.eraseTimeout);this.drawTimeout=null;this.eraseTimeout=null;_get(DOMRenderer.prototype.__proto__||Object.getPrototypeOf(DOMRenderer.prototype),'onRemove',this).call(this,layer);return this;}/**
	 * Create and return the DOM Element which contains the layer.
	 *
	 * @returns {Element} The layer container DOM element.
	 */},{key:'createContainer',value:function createContainer(){throw'`createContainer` not implemented';}/**
	 * Create and return the DOM Element which represents an individual
	 * tile.
	 *
	 * @param {Number} size - the size of the tile, in pixels.
	 *
	 * @returns {Element} The tile DOM element.
	 */},{key:'createTile',value:function createTile(){throw'`createTile` not implemented';}/**
	 * Set the location of the DOM Element which represents an individual
	 * tile.
	 *
	 * @param {Element} tile - The tile DOM element.
	 * @param {Number} x - The x position of the tile, in pixels.
	 * @param {Number} y - The y position of the tile, in pixels.
	 * @param {Number} size - the size of the tile, in pixels.
	 *
	 * @returns {Element} The tile DOM element.
	 */},{key:'positionTile',value:function positionTile(){throw'`positionTile` not implemented';}/**
	 * The draw function that is executed per frame.
	 *
	 * @returns {DOMRenderer} The renderer object, for chaining.
	 */},{key:'draw',value:function draw(){var _this2=this;var layer=this.layer;var plot=layer.plot;var tiles=this.tiles;var container=this.container;// get all stale coords
var stale=getStaleCoords(plot,tiles);if(tiles.size>0&&stale.size===tiles.size){// all tiles are stale, remove them all
if(this.eraseTimeout){clearTimeout(this.eraseTimeout);this.eraseTimeout=null;}tiles.clear();container.innerHTML='';}else{// not all tiles are stale, remove them individually
if(!this.eraseTimeout){this.eraseTimeout=setTimeout(function(){// clear timeout
_this2.eraseTimeout=null;// remove any stale tiles from DOM
eraseTiles(_this2,_this2.container,_this2.tiles,_this2.layer.plot);},ERASE_DEBOUNCE_MS);}}if(!this.drawTimeout){this.drawTimeout=setTimeout(function(){// clear the timeout
_this2.drawTimeout=null;// draw the renderables
drawTiles(_this2,_this2.container,_this2.tiles,_this2.layer.plot,_this2.layer.pyramid,false);},DRAW_DEBOUNCE_MS);}// get viewport position
var px=plot.plotPxToViewPx({x:0,y:0});// determine container offset
var delta={x:px.x-this.offset.x,y:px.y-this.offset.y};if(Math.abs(delta.x)>MAX_CONTAINER_OFFSET||Math.abs(delta.y)>MAX_CONTAINER_OFFSET){// tile to container offset is too large, reset it to current
// viewport, re-position all current tiles.
this.offset.x=px.x;this.offset.y=px.y;delta.x=0;delta.y=0;var tileSize=plot.tileSize;this.tiles.forEach(function(tile){// re-position tile
_this2.positionTile(tile.elem,tile.coord.x*tileSize+_this2.offset.x,tile.coord.y*tileSize+_this2.offset.y,tileSize);});}// scale on difference between current zoom and rounded target zoom
var scale=Math.pow(2,plot.zoom-Math.round(plot.getTargetZoom()));// update container
container.style.transform='translate3d('+delta.x+'px,'+-delta.y+'px,0) scale('+scale+')';container.style.transformOrigin=this.offset.x+'px '+-this.offset.y+'px';container.style.opacity=layer.opacity;return this;}/**
	 * Remove all rendered tiles from the DOM.
	 *
	 * @returns {DOMRenderer} The renderer object, for chaining.
	 */},{key:'clear',value:function clear(){_get(DOMRenderer.prototype.__proto__||Object.getPrototypeOf(DOMRenderer.prototype),'clear',this).call(this);// remove all tiles and clear the container
this.container.innerHTML='';this.tiles.clear();// clear timeouts
clearTimeout(this.drawTimeout);clearTimeout(this.eraseTimeout);this.drawTimeout=null;this.eraseTimeout=null;return this;}/**
	 * Forces the renderer to discard all current DOM rendered tiles and
	 * recreate them.
	 *
	 * @param {Boolean} ignoreFade - Do not fade-in redrawn layer.
	 *
	 * @returns {DOMRenderer} The renderer object, for chaining.
	 */},{key:'redraw',value:function redraw(){var ignoreFade=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;this.clear();// force draw
drawTiles(this,this.container,this.tiles,this.layer.plot,this.layer.pyramid,this.layer,ignoreFade);return this;}/**
	 * The draw function that is executed per tile.
	 *
	 * @param {Element} element - The DOM Element object.
	 * @param {Tile} tile - The Tile object.
	 */},{key:'drawTile',value:function drawTile(){}}]);return DOMRenderer;}(Renderer);module.exports=DOMRenderer;

},{"../../event/DrawEvent":146,"../../event/EventType":148,"../Renderer":167}],169:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var DOMRenderer=require('./DOMRenderer');/**
 * Class representing a HTML renderer.
 */var HTMLRenderer=function(_DOMRenderer){_inherits(HTMLRenderer,_DOMRenderer);/**
	 * Instantiates a new HTMLRenderer object.
	 */function HTMLRenderer(){_classCallCheck(this,HTMLRenderer);return _possibleConstructorReturn(this,(HTMLRenderer.__proto__||Object.getPrototypeOf(HTMLRenderer)).call(this));}/**
	 * Create and return the HTML Element which contains the layer.
	 *
	 * @returns {Element} The layer container HTML element.
	 */_createClass(HTMLRenderer,[{key:'createContainer',value:function createContainer(){var container=document.createElement('div');container.style.position='absolute';container.style.left=0;container.style.bottom=0;return container;}/**
	 * Create and return the HTML Element which represents an individual
	 * tile.
	 *
	 * @param {Number} size - the size of the tile, in pixels.
	 *
	 * @returns {Element} The tile HTML element.
	 */},{key:'createTile',value:function createTile(size){var tile=document.createElement('div');tile.style.position='absolute';tile.style.width=size+'px';tile.style.height=size+'px';return tile;}/**
	 * Set the location of the DOM Element which represents an individual
	 * tile.
	 *
	 * @param {Element} tile - The tile HTML element.
	 * @param {Number} x - The x position of the tile, in pixels.
	 * @param {Number} y - The y position of the tile, in pixels.
	 * @param {Number} size - the size of the tile, in pixels.
	 */},{key:'positionTile',value:function positionTile(tile,x,y){tile.style.left=x+'px';tile.style.bottom=y+'px';}}]);return HTMLRenderer;}(DOMRenderer);module.exports=HTMLRenderer;

},{"./DOMRenderer":168}],170:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var DOMRenderer=require('./DOMRenderer');// Constants
/**
 * SVG Namespace string.
 * @private
 * @constant {String}
 */var SVG_NS='http://www.w3.org/2000/svg';/**
 * Arbitrary size of the root svg element, since it cannot be 0x0.
 * @private
 * @constant {Number}
 */var SVG_SIZE=20;/**
 * Class representing a SVG renderer.
 */var SVGRenderer=function(_DOMRenderer){_inherits(SVGRenderer,_DOMRenderer);/**
	 * Instantiates a new SVGRenderer object.
	 */function SVGRenderer(){_classCallCheck(this,SVGRenderer);return _possibleConstructorReturn(this,(SVGRenderer.__proto__||Object.getPrototypeOf(SVGRenderer)).call(this));}/**
	 * Create and return the SVG Element which contains the layer.
	 *
	 * @returns {Element} The layer container SVG element.
	 */_createClass(SVGRenderer,[{key:'createContainer',value:function createContainer(){var container=document.createElementNS(SVG_NS,'svg');container.style.position='absolute';container.style.overflow='visible';container.style.left=0;container.style.bottom=-SVG_SIZE;container.setAttribute('width',SVG_SIZE);container.setAttribute('height',SVG_SIZE);return container;}/**
	 * Create and return the SVG Element which represents an individual
	 * tile.
	 *
	 * @param {Number} size - the size of the tile, in pixels.
	 *
	 * @returns {Element} The tile SVG element.
	 */},{key:'createTile',value:function createTile(){return document.createElementNS(SVG_NS,'g');}/**
	 * Set the location of the SVG Element which represents an individual
	 * tile.
	 *
	 * @param {Element} tile - The tile DOM element.
	 * @param {Number} x - The x position of the tile, in pixels.
	 * @param {Number} y - The y position of the tile, in pixels.
	 * @param {Number} size - the size of the tile, in pixels.
	 *
	 * @returns {Element} The tile SVG element.
	 */},{key:'positionTile',value:function positionTile(tile,x,y,size){tile.setAttribute('transform','translate('+x+','+(-y-size)+')');}}]);return SVGRenderer;}(DOMRenderer);module.exports=SVGRenderer;

},{"./DOMRenderer":168}],171:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var VertexBuffer=require('./vertex/VertexBuffer');var WebGLInteractiveRenderer=require('./WebGLInteractiveRenderer');// Constants
/**
 * Highlighted point radius increase.
 * @private
 * @constant {Number}
 */var HIGHLIGHTED_RADIUS_OFFSET=2;/**
 * Selected point radius increase.
 * @private
 * @constant {Number}
 */var SELECTED_RADIUS_OFFSET=4;/**
 * Shader GLSL source.
 * @private
 * @constant {Object}
 */var SHADER_GLSL={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tattribute float aRadius;\n\t\tuniform float uRadiusOffset;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform float uPixelRatio;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvoid main() {\n\t\t\tvec2 wPosition = (aPosition * uScale) + uTileOffset;\n\t\t\tgl_PointSize = (aRadius + uRadiusOffset) * uScale * 2.0 * uPixelRatio;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\t#ifdef GL_OES_standard_derivatives\n\t\t\t#extension GL_OES_standard_derivatives : enable\n\t\t#endif\n\t\tprecision highp float;\n\t\tuniform vec4 uColor;\n\t\tvoid main() {\n\t\t\tvec2 cxy = 2.0 * gl_PointCoord - 1.0;\n\t\t\tfloat radius = dot(cxy, cxy);\n\t\t\tfloat alpha = 1.0;\n\t\t\t#ifdef GL_OES_standard_derivatives\n\t\t\t\tfloat delta = fwidth(radius);\n\t\t\t\talpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, radius);\n\t\t\t#else\n\t\t\t\tif (radius > 1.0) {\n\t\t\t\t\tdiscard;\n\t\t\t\t}\n\t\t\t#endif\n\t\t\tgl_FragColor = vec4(uColor.rgb, uColor.a * alpha);\n\t\t}\n\t\t'};// Private Methods
var createPoint=function createPoint(gl){var vertices=new Float32Array(2);vertices[0]=0.0;vertices[1]=0.0;// create quad buffer
return new VertexBuffer(gl,vertices,{0:{size:2,type:'FLOAT',byteOffset:0}},{mode:'POINTS',count:1});};var renderTiles=function renderTiles(atlas,shader,renderables,color){// set global uniforms
shader.setUniform('uColor',color);shader.setUniform('uRadiusOffset',0);// binds the buffer to instance
atlas.bind();// for each renderable
renderables.forEach(function(renderable){// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);// draw points
atlas.draw(renderable.hash,'POINTS');});// unbind
atlas.unbind();};var renderPoint=function renderPoint(point,shader,plot,target,color,radius){// get tile offset
var coord=target.tile.coord;var scale=Math.pow(2,plot.zoom-coord.z);var tileOffset=[coord.x*scale*plot.tileSize+scale*target.x-plot.viewport.x,coord.y*scale*plot.tileSize+scale*target.y-plot.viewport.y];// set uniforms
shader.setUniform('uTileOffset',tileOffset);shader.setUniform('uScale',scale);shader.setUniform('uColor',color);shader.setUniform('uRadiusOffset',radius+target.radius);// binds the buffer to instance
point.bind();// draw the points
point.draw();// unbind
point.unbind();};/**
 * Class representing an interactive point renderer.
 */var InteractiveRenderer=function(_WebGLInteractiveRend){_inherits(InteractiveRenderer,_WebGLInteractiveRend);/**
	 * Instantiates a new InteractiveRenderer object.
	 *
	 * @param {Object} options - The options object.
	 * @param {Array} options.xField - The X field of the data.
	 * @param {Array} options.yField - The Y field of the data.
	 * @param {Array} options.radiusField - The radius field of the data.
	 * @param {Array} options.color - The color of the points.
	 */function InteractiveRenderer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,InteractiveRenderer);var _this=_possibleConstructorReturn(this,(InteractiveRenderer.__proto__||Object.getPrototypeOf(InteractiveRenderer)).call(this,options));_this.shader=null;_this.point=null;_this.atlas=null;_this.xField=defaultTo(options.xField,'x');_this.yField=defaultTo(options.yField,'y');_this.radiusField=defaultTo(options.radiusField,'radius');_this.color=defaultTo(options.color,[1.0,0.4,0.1,0.8]);return _this;}/**
	 * Executed when the renderer is attached to a layer.
	 *
	 * @param {Layer} layer - The layer to attach the renderer to.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */_createClass(InteractiveRenderer,[{key:'onAdd',value:function onAdd(layer){_get(InteractiveRenderer.prototype.__proto__||Object.getPrototypeOf(InteractiveRenderer.prototype),'onAdd',this).call(this,layer);// get the extension for standard derivatives
this.ext=this.gl.getExtension('OES_standard_derivatives');this.point=createPoint(this.gl);this.shader=this.createShader(SHADER_GLSL);this.atlas=this.createVertexAtlas({// position
0:{size:2,type:'FLOAT'},// radius
1:{size:1,type:'FLOAT'}});return this;}/**
	 * Executed when the renderer is removed from a layer.
	 *
	 * @param {Layer} layer - The layer to remove the renderer from.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'onRemove',value:function onRemove(layer){this.destroyVertexAtlas(this.atlas);this.atlas=null;this.shader=null;this.point=null;_get(InteractiveRenderer.prototype.__proto__||Object.getPrototypeOf(InteractiveRenderer.prototype),'onRemove',this).call(this,layer);return this;}/**
	 * Executed when a tile is added to the layer pyramid.
	 *
	 * @param {VertexAtlas} atlas - The vertex atlas object.
	 * @param {Tile} tile - The new tile object containing data.
	 */},{key:'addTile',value:function addTile(atlas,tile){var coord=tile.coord;var data=tile.data;var tileSize=this.layer.plot.tileSize;var xOffset=coord.x*tileSize;var yOffset=coord.y*tileSize;var xField=this.xField;var yField=this.yField;var radiusField=this.radiusField;var points=new Array(data.length);var vertices=new Float32Array(data.length*3);for(var i=0;i<data.length;i++){var datum=data[i];// get point attributes
var x=datum[xField];var y=datum[yField];var radius=datum[radiusField];// convert to plot pixels
var plotX=x+xOffset;var plotY=y+yOffset;// add to buffer
vertices[i*3]=x;vertices[i*3+1]=y;vertices[i*3+2]=radius;// add to points
points[i]={x:x,y:y,radius:radius,minX:plotX-radius,maxX:plotX+radius,minY:plotY-radius,maxY:plotY+radius,tile:tile,data:datum};}// index points
this.addPoints(coord,points);// add to atlas
atlas.set(coord.hash,vertices,points.length);}/**
	 * Executed when a tile is removed from the layer pyramid.
	 *
	 * @param {VertexAtlas} atlas - The vertex atlas object.
	 * @param {Tile} tile - The new tile object containing data.
	 */},{key:'removeTile',value:function removeTile(atlas,tile){var coord=tile.coord;// remove from atlas
atlas.delete(coord.hash);// unindex points
this.removePoints(coord);}/**
	 * The draw function that is executed per frame.
	 *
	 * @param {Number} timestamp - The frame timestamp.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'draw',value:function draw(){var _this2=this;var gl=this.gl;var plot=this.layer.plot;var projection=this.getOrthoMatrix();var shader=this.shader;// bind render target
plot.renderBuffer.bind();// clear render target
plot.renderBuffer.clear();// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE);// use shader
shader.use();// set uniforms
shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uPixelRatio',plot.pixelRatio);// render the tiles
renderTiles(this.atlas,shader,this.getRenderables(),this.color);// render selected
this.selected.forEach(function(selected){renderPoint(_this2.point,shader,plot,selected,_this2.color,SELECTED_RADIUS_OFFSET);});// render highlighted
if(this.highlighted&&this.selected.indexOf(this.highlighted)===-1){renderPoint(this.point,shader,plot,this.highlighted,this.color,HIGHLIGHTED_RADIUS_OFFSET);}// unbind render target
plot.renderBuffer.unbind();// render framebuffer to the backbuffer
plot.renderBuffer.blitToScreen(this.layer.opacity);return this;}}]);return InteractiveRenderer;}(WebGLInteractiveRenderer);module.exports=InteractiveRenderer;

},{"./WebGLInteractiveRenderer":175,"./vertex/VertexBuffer":188,"lodash/defaultTo":107}],172:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var WebGLVertexRenderer=require('./WebGLVertexRenderer');// Constants
/**
 * Shader GLSL source.
 * @private
 * @constant {Object}
 */var SHADER_GLSL={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tattribute float aRadius;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform float uPixelRatio;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvoid main() {\n\t\t\tvec2 wPosition = (aPosition * uScale) + uTileOffset;\n\t\t\tgl_PointSize = aRadius * 2.0 * uPixelRatio;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\t#ifdef GL_OES_standard_derivatives\n\t\t\t#extension GL_OES_standard_derivatives : enable\n\t\t#endif\n\t\tprecision highp float;\n\t\tuniform vec4 uColor;\n\t\tvoid main() {\n\t\t\tvec2 cxy = 2.0 * gl_PointCoord - 1.0;\n\t\t\tfloat radius = dot(cxy, cxy);\n\t\t\tfloat alpha = 1.0;\n\t\t\t#ifdef GL_OES_standard_derivatives\n\t\t\t\tfloat delta = fwidth(radius);\n\t\t\t\talpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, radius);\n\t\t\t#else\n\t\t\t\tif (radius > 1.0) {\n\t\t\t\t\tdiscard;\n\t\t\t\t}\n\t\t\t#endif\n\t\t\tgl_FragColor = vec4(uColor.rgb, uColor.a * alpha);\n\t\t}\n\t\t'};/**
 * Class representing a point renderer.
 */var PointRenderer=function(_WebGLVertexRenderer){_inherits(PointRenderer,_WebGLVertexRenderer);/**
	 * Instantiates a new PointRenderer object.
	 *
	 * @param {Object} options - The options object.
	 * @param {Array} options.color - The color of the points.
	 */function PointRenderer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,PointRenderer);var _this=_possibleConstructorReturn(this,(PointRenderer.__proto__||Object.getPrototypeOf(PointRenderer)).call(this,options));_this.shader=null;_this.atlas=null;_this.color=defaultTo(options.color,[1.0,0.4,0.1,0.8]);return _this;}/**
	 * Executed when the renderer is attached to a layer.
	 *
	 * @param {Layer} layer - The layer to attach the renderer to.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */_createClass(PointRenderer,[{key:'onAdd',value:function onAdd(layer){_get(PointRenderer.prototype.__proto__||Object.getPrototypeOf(PointRenderer.prototype),'onAdd',this).call(this,layer);// get the extension for standard derivatives
this.ext=this.gl.getExtension('OES_standard_derivatives');this.shader=this.createShader(SHADER_GLSL);this.atlas=this.createVertexAtlas({// position
0:{size:2,type:'FLOAT'},// radius
1:{size:1,type:'FLOAT'}});return this;}/**
	 * Executed when the renderer is removed from a layer.
	 *
	 * @param {Layer} layer - The layer to remove the renderer from.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'onRemove',value:function onRemove(layer){this.destroyVertexAtlas(this.atlas);this.atlas=null;this.shader=null;_get(PointRenderer.prototype.__proto__||Object.getPrototypeOf(PointRenderer.prototype),'onRemove',this).call(this,layer);return this;}/**
	 * The draw function that is executed per frame.
	 *
	 * @param {Number} timestamp - The frame timestamp.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'draw',value:function draw(){var gl=this.gl;var shader=this.shader;var atlas=this.atlas;var plot=this.layer.plot;var renderables=this.getRenderables();var proj=this.getOrthoMatrix();// bind render target
plot.renderBuffer.bind();// clear render target
plot.renderBuffer.clear();// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE);// bind shader
shader.use();// set global uniforms
shader.setUniform('uProjectionMatrix',proj);shader.setUniform('uColor',this.color);shader.setUniform('uPixelRatio',plot.pixelRatio);// binds the vertex atlas
atlas.bind();// for each renderable
renderables.forEach(function(renderable){// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);// draw the points
atlas.draw(renderable.hash,'POINTS');});// unbind
atlas.unbind();// unbind render target
plot.renderBuffer.unbind();// render framebuffer to the backbuffer
plot.renderBuffer.blitToScreen(this.layer.opacity);return this;}}]);return PointRenderer;}(WebGLVertexRenderer);module.exports=PointRenderer;

},{"./WebGLVertexRenderer":178,"lodash/defaultTo":107}],173:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var VertexBuffer=require('./vertex/VertexBuffer');var WebGLVertexRenderer=require('./WebGLVertexRenderer');// Constants
/**
 * Inner radius of star.
 * @private
 * @constant {Number}
 */var STAR_INNER_RADIUS=0.4;/**
 * Outer radius of star.
 * @private
 * @constant {Number}
 */var STAR_OUTER_RADIUS=1.0;/**
 * Number of points on the star.
 * @private
 * @constant {Number}
 */var STAR_NUM_POINTS=5;/**
 * Shader GLSL source.
 * @private
 * @constant {Object}
 */var SHADER_GLSL={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tattribute vec2 aOffset;\n\t\tattribute float aRadius;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvoid main() {\n\t\t\tvec2 wPosition = (aPosition * aRadius) + (aOffset * uScale) + uTileOffset;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform vec4 uColor;\n\t\tvoid main() {\n\t\t\tgl_FragColor = uColor;\n\t\t}\n\t\t'};// Private Methods
var createStar=function createStar(gl){var theta=2*Math.PI/STAR_NUM_POINTS;var htheta=theta/2.0;var qtheta=theta/4.0;var positions=new Float32Array(STAR_NUM_POINTS*2*2+4);positions[0]=0;positions[1]=0;for(var i=0;i<STAR_NUM_POINTS;i++){var angle=i*theta;var sx=Math.cos(angle-qtheta)*STAR_INNER_RADIUS;var sy=Math.sin(angle-qtheta)*STAR_INNER_RADIUS;positions[i*4+2]=sx;positions[i*4+1+2]=sy;sx=Math.cos(angle+htheta-qtheta)*STAR_OUTER_RADIUS;sy=Math.sin(angle+htheta-qtheta)*STAR_OUTER_RADIUS;positions[i*4+2+2]=sx;positions[i*4+3+2]=sy;}positions[positions.length-2]=positions[2];positions[positions.length-1]=positions[3];return new VertexBuffer(gl,positions,{0:{size:2,type:'FLOAT'}},{mode:'TRIANGLE_FAN',count:positions.length/2});};/**
 * Class representing a shape renderer.
 */var ShapeRenderer=function(_WebGLVertexRenderer){_inherits(ShapeRenderer,_WebGLVertexRenderer);/**
	 * Instantiates a new ShapeRenderer object.
	 *
	 * @param {Object} options - The options object.
	 * @param {Array} options.color - The color of the points.
	 */function ShapeRenderer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,ShapeRenderer);var _this=_possibleConstructorReturn(this,(ShapeRenderer.__proto__||Object.getPrototypeOf(ShapeRenderer)).call(this,options));_this.shape=null;_this.shader=null;_this.atlas=null;_this.color=defaultTo(options.color,[1.0,0.4,0.1,0.8]);return _this;}/**
	 * Executed when the renderer is attached to a layer.
	 *
	 * @param {Layer} layer - The layer to attach the renderer to.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */_createClass(ShapeRenderer,[{key:'onAdd',value:function onAdd(layer){_get(ShapeRenderer.prototype.__proto__||Object.getPrototypeOf(ShapeRenderer.prototype),'onAdd',this).call(this,layer);this.shape=createStar(this.gl);this.shader=this.createShader(SHADER_GLSL);this.atlas=this.createVertexAtlas({// offset
1:{size:2,type:'FLOAT'},// radius
2:{size:1,type:'FLOAT'}});return this;}/**
	 * Executed when the renderer is removed from a layer.
	 *
	 * @param {Layer} layer - The layer to remove the renderer from.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'onRemove',value:function onRemove(layer){this.destroyVertexAtlas(this.atlas);this.atlas=null;this.shape=null;this.shader=null;_get(ShapeRenderer.prototype.__proto__||Object.getPrototypeOf(ShapeRenderer.prototype),'onRemove',this).call(this,layer);return this;}/**
	 * The draw function that is executed per frame.
	 *
	 * @param {Number} timestamp - The frame timestamp.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'draw',value:function draw(){var gl=this.gl;var shader=this.shader;var atlas=this.atlas;var shape=this.shape;var plot=this.layer.plot;var renderables=this.getRenderables();var proj=this.getOrthoMatrix();// bind render target
plot.renderBuffer.bind();// clear render target
plot.renderBuffer.clear();// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE);// bind shader
shader.use();// set global uniforms
shader.setUniform('uProjectionMatrix',proj);shader.setUniform('uColor',this.color);// bind shape
shape.bind();// binds the buffer to instance
atlas.bindInstanced();// for each renderable
renderables.forEach(function(renderable){// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);// draw the instances
atlas.drawInstanced(renderable.hash,shape.mode,shape.count);});// unbind
atlas.unbindInstanced();// unbind quad
shape.unbind();// unbind render target
plot.renderBuffer.unbind();// render framebuffer to the backbuffer
plot.renderBuffer.blitToScreen(this.layer.opacity);return this;}}]);return ShapeRenderer;}(WebGLVertexRenderer);module.exports=ShapeRenderer;

},{"./WebGLVertexRenderer":178,"./vertex/VertexBuffer":188,"lodash/defaultTo":107}],174:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var VertexBuffer=require('./vertex/VertexBuffer');var WebGLTextureRenderer=require('./WebGLTextureRenderer');// Constants
/**
 * Shader GLSL source.
 * @private
 * @constant {Object}
 */var SHADER_GLSL={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tattribute vec2 aTextureCoord;\n\t\tuniform vec4 uTextureCoordOffset;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvarying vec2 vTextureCoord;\n\t\tvoid main() {\n\t\t\tvTextureCoord = vec2(\n\t\t\t\tuTextureCoordOffset.x + (aTextureCoord.x * uTextureCoordOffset.z),\n\t\t\t\tuTextureCoordOffset.y + (aTextureCoord.y * uTextureCoordOffset.w));\n\t\t\tvec2 wPosition = (aPosition * uScale) + uTileOffset;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform sampler2D uTextureSampler;\n\t\tuniform float uOpacity;\n\t\tvarying vec2 vTextureCoord;\n\t\tvoid main() {\n\t\t\tvec4 color = texture2D(uTextureSampler, vec2(vTextureCoord.x, 1.0 - vTextureCoord.y));\n\t\t\tgl_FragColor = vec4(color.rgb, color.a * uOpacity);\n\t\t}\n\t\t'};var createQuad=function createQuad(gl,min,max){var vertices=new Float32Array(24);// positions
vertices[0]=min;vertices[1]=min;vertices[2]=max;vertices[3]=min;vertices[4]=max;vertices[5]=max;vertices[6]=min;vertices[7]=min;vertices[8]=max;vertices[9]=max;vertices[10]=min;vertices[11]=max;// uvs
vertices[12]=0;vertices[13]=0;vertices[14]=1;vertices[15]=0;vertices[16]=1;vertices[17]=1;vertices[18]=0;vertices[19]=0;vertices[20]=1;vertices[21]=1;vertices[22]=0;vertices[23]=1;// create quad buffer
return new VertexBuffer(gl,vertices,{0:{size:2,type:'FLOAT',byteOffset:0},1:{size:2,type:'FLOAT',byteOffset:2*6*4}},{count:6});};/**
 * Class representing a renderer.
 */var TextureRenderer=function(_WebGLTextureRenderer){_inherits(TextureRenderer,_WebGLTextureRenderer);/**
	 * Instantiates a new TextureRenderer object.
	 */function TextureRenderer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,TextureRenderer);var _this=_possibleConstructorReturn(this,(TextureRenderer.__proto__||Object.getPrototypeOf(TextureRenderer)).call(this,options));_this.quad=null;_this.shader=null;_this.array=null;return _this;}/**
	 * Executed when the renderer is attached to a layer.
	 *
	 * @param {Layer} layer - The layer to attach the renderer to.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */_createClass(TextureRenderer,[{key:'onAdd',value:function onAdd(layer){_get(TextureRenderer.prototype.__proto__||Object.getPrototypeOf(TextureRenderer.prototype),'onAdd',this).call(this,layer);this.quad=createQuad(this.gl,0,layer.plot.tileSize);this.shader=this.createShader(SHADER_GLSL);this.array=this.createTextureArray(layer.plot.tileSize);return this;}/**
	 * Executed when the renderer is removed from a layer.
	 *
	 * @param {Layer} layer - The layer to remove the renderer from.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'onRemove',value:function onRemove(layer){this.destroyTextureArray(this.array);this.array=null;this.quad=null;this.shader=null;_get(TextureRenderer.prototype.__proto__||Object.getPrototypeOf(TextureRenderer.prototype),'onRemove',this).call(this,layer);return this;}/**
	 * The draw function that is executed per frame.
	 *
	 * @param {Number} timestamp - The frame timestamp.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'draw',value:function draw(){var gl=this.gl;var shader=this.shader;var array=this.array;var quad=this.quad;var renderables=this.getRenderablesLOD();var proj=this.getOrthoMatrix();// bind shader
shader.use();// set global uniforms
shader.setUniform('uProjectionMatrix',proj);shader.setUniform('uTextureSampler',0);shader.setUniform('uOpacity',this.layer.opacity);// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);// bind quad
quad.bind();var last=void 0;// for each renderable
renderables.forEach(function(renderable){var hash=renderable.hash;if(last!==hash){// bind texture
array.bind(hash,0);last=hash;}// set tile uniforms
shader.setUniform('uTextureCoordOffset',renderable.uvOffset);shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);// draw
quad.draw();// no need to unbind texture
});// unbind quad
quad.unbind();return this;}}]);return TextureRenderer;}(WebGLTextureRenderer);module.exports=TextureRenderer;

},{"./WebGLTextureRenderer":177,"./vertex/VertexBuffer":188}],175:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var Keyboard=require('../../core/Keyboard');var EventType=require('../../event/EventType');var ClickEvent=require('../../event/ClickEvent');var MouseEvent=require('../../event/MouseEvent');var RTree=require('./rtree/RTree');var CollisionType=require('./rtree/CollisionType');var WebGLVertexRenderer=require('./WebGLVertexRenderer');// Constants
/**
 * Click event handler symbol.
 * @private
 * @constant
 */var CLICK=Symbol();/**
 * Mousemove event handler symbol.
 * @private
 * @constant
 */var MOUSE_MOVE=Symbol();/**
 * Zoom end event handler symbol.
 * @private
 * @constant
 */var ZOOM_START=Symbol();// Private Methods
var getCollision=function getCollision(renderer,plotPx){var plot=renderer.layer.plot;// don't return collision if zooming
if(plot.isZooming()){return null;}// points are hashed in un-scaled coordinates, unscale the point
var targetZoom=Math.round(plot.zoom);var scale=Math.pow(2,targetZoom-plot.zoom);// unscaled points
var sx=plotPx.x*scale;var sy=plotPx.y*scale;// get the tree for the zoom
var tree=renderer.trees.get(targetZoom);if(!tree){// no data for tile
return null;}return tree.searchPoint(sx,sy);};var onClick=function onClick(renderer,event){var multiSelect=Keyboard.poll('ctrl')||Keyboard.poll('meta');var collision=getCollision(renderer,event.plotPx);if(collision){// add to collection if multi-selection is enabled
if(multiSelect){// add to collection if multi-selection is enabled
var index=renderer.selected.indexOf(collision);if(index===-1){// select point
renderer.selected.push(collision);}else{// remove point if already selected
renderer.selected.splice(index,1);}}else{// clear selection, adding only the latest entry
renderer.selected=[collision];}// emit click event
renderer.emit(EventType.CLICK,new ClickEvent(renderer.layer,event.viewPx,event.plotPx,event.button,renderer.selected.length>1?renderer.selected:collision));}else{if(multiSelect){// if multi-select is held, don't clear selection, it implies user
// may have misclicked
return;}// flag as unselected
renderer.selected=[];}};var active=new Map();var setCursor=function setCursor(renderer){var plot=renderer.layer.plot;if(!active.has(plot)){active.set(plot,new Map());}var isActive=active.get(plot);if(!isActive.has(renderer)){isActive.set(renderer,true);plot.getContainer().style.cursor='pointer';};};var resetCursor=function resetCursor(renderer){var plot=renderer.layer.plot;if(!active.has(plot)){return;}var isActive=active.get(plot);isActive.delete(renderer);if(isActive.size===0){plot.getContainer().style.cursor='inherit';}};var onMouseMove=function onMouseMove(renderer,event){var collision=getCollision(renderer,event.plotPx);if(collision){// mimic mouseover / mouseout events
if(renderer.highlighted){if(renderer.highlighted!==collision){// new collision
// emit mouseout for prev
renderer.emit(EventType.MOUSE_OUT,new MouseEvent(renderer.layer,event.viewPx,event.plotPx,event.button,renderer.highlighted));// emit mouseover for new
renderer.emit(EventType.MOUSE_OVER,new MouseEvent(renderer.layer,event.viewPx,event.plotPx,event.button,collision));}}else{// no previous collision, execute mouseover
renderer.emit(EventType.MOUSE_OVER,new MouseEvent(renderer.layer,event.viewPx,event.plotPx,event.button,collision));}// set cursor
setCursor(renderer);// flag as highlighted
renderer.highlighted=collision;return;}// mouse out
if(renderer.highlighted){// reset cursor
resetCursor(renderer);// emit mouse out
renderer.emit(EventType.MOUSE_OUT,new MouseEvent(renderer.layer,event.viewPx,event.plotPx,event.button,renderer.highlighted));}// clear highlighted flag
renderer.highlighted=null;};/**
 * Class representing an interactive vertex based webgl renderer.
 */var WebGLInteractiveRenderer=function(_WebGLVertexRenderer){_inherits(WebGLInteractiveRenderer,_WebGLVertexRenderer);/**
	 * Instantiates a new WebGLInteractiveRenderer object.
	 *
	 * @param {Object} options - The options object.
	 * @param {boolean} options.collisionType - The collision type of the points.
	 * @param {boolean} options.nodeCapacity - The node capacity of the r-tree.
	 */function WebGLInteractiveRenderer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,WebGLInteractiveRenderer);var _this=_possibleConstructorReturn(this,(WebGLInteractiveRenderer.__proto__||Object.getPrototypeOf(WebGLInteractiveRenderer)).call(this,options));_this.trees=null;_this.points=null;_this.highlighted=null;_this.selected=[];_this.collisionType=defaultTo(options.collisionType,CollisionType.CIRCLE);_this.nodeCapacity=defaultTo(options.nodeCapacity,32);return _this;}/**
	 * Clears any selection / highlighted elements.
	 *
	 * @returns {WebGLVertexRenderer} The renderer object, for chaining.
	 */_createClass(WebGLInteractiveRenderer,[{key:'clear',value:function clear(){_get(WebGLInteractiveRenderer.prototype.__proto__||Object.getPrototypeOf(WebGLInteractiveRenderer.prototype),'clear',this).call(this);// clear selected / highlighted
this.highlighted=null;this.selected=[];// reset the cursor
resetCursor(this);return this;}/**
	 * Executed when the renderer is attached to a layer.
	 *
	 * @param {Layer} layer - The layer to attach the renderer to.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'onAdd',value:function onAdd(layer){var _this2=this;_get(WebGLInteractiveRenderer.prototype.__proto__||Object.getPrototypeOf(WebGLInteractiveRenderer.prototype),'onAdd',this).call(this,layer);// create rtree and point maps
this.trees=new Map();this.points=new Map();// create handlers
this.handlers.set(CLICK,function(event){if(_this2.layer.isHidden()){return;}onClick(_this2,event);});this.handlers.set(MOUSE_MOVE,function(event){if(_this2.layer.isHidden()){return;}onMouseMove(_this2,event);});this.handlers.set(ZOOM_START,function(){_this2.selected=[];_this2.highlighted=null;});// attach handlers
layer.plot.on(EventType.CLICK,this.handlers.get(CLICK));layer.plot.on(EventType.MOUSE_MOVE,this.handlers.get(MOUSE_MOVE));layer.plot.on(EventType.ZOOM_START,this.handlers.get(ZOOM_START));return this;}/**
	 * Executed when the renderer is removed from a layer.
	 *
	 * @param {Layer} layer - The layer to remove the renderer from.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'onRemove',value:function onRemove(layer){// detach handlers
this.layer.plot.removeListener(EventType.CLICK,this.handlers.get(CLICK));this.layer.plot.removeListener(EventType.MOUSE_MOVE,this.handlers.get(MOUSE_MOVE));this.layer.plot.removeListener(EventType.ZOOM_START,this.handlers.get(ZOOM_START));// destroy handlers
this.handlers.delete(CLICK);this.handlers.delete(MOUSE_MOVE);this.handlers.delete(ZOOM_START);// destroy rtree and point maps
this.trees=null;this.points=null;this.selected=[];this.highlighted=null;// clear selected / highlighted
this.clear();_get(WebGLInteractiveRenderer.prototype.__proto__||Object.getPrototypeOf(WebGLInteractiveRenderer.prototype),'onRemove',this).call(this,layer);return this;}/**
	 * Indexes the provided points into an R-Tree structure.
	 *
	 * @param {Coord} coord - The coord for the tile.
	 * @param {Array} points - The point data to index.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'addPoints',value:function addPoints(coord,points){if(!this.trees.has(coord.z)){this.trees.set(coord.z,new RTree({collisionType:this.collisionType,nodeCapacity:this.nodeCapacity}));}this.trees.get(coord.z).insert(points);this.points.set(coord.hash,points);return this;}/**
	 * Removes the coords worth of tiles from the R-Tree structure.
	 *
	 * @param {Coord} coord - The coord for the tile.
	 *
	 * @returns {Renderer} The renderer object, for chaining.
	 */},{key:'removePoints',value:function removePoints(coord){var points=this.points.get(coord.hash);this.trees.get(coord.z).remove(points);this.points.delete(coord.hash);return this;}}]);return WebGLInteractiveRenderer;}(WebGLVertexRenderer);module.exports=WebGLInteractiveRenderer;

},{"../../core/Keyboard":143,"../../event/ClickEvent":145,"../../event/EventType":148,"../../event/MouseEvent":150,"./WebGLVertexRenderer":178,"./rtree/CollisionType":179,"./rtree/RTree":180,"lodash/defaultTo":107}],176:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Shader=require('./shader/Shader');var Renderer=require('../Renderer');// Private Methods
var sortByHash=function sortByHash(a,b){if(a<b){return-1;}else if(a>b){return 1;}return 0;};/**
 * Class representing a webgl renderer.
 */var WebGLRenderer=function(_Renderer){_inherits(WebGLRenderer,_Renderer);/**
	 * Instantiates a new WebGLRenderer object.
	 *
	 * @param {Object} options - The options object.
	 */function WebGLRenderer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,WebGLRenderer);var _this=_possibleConstructorReturn(this,(WebGLRenderer.__proto__||Object.getPrototypeOf(WebGLRenderer)).call(this,options));_this.gl=null;return _this;}/**
	 * Executed when the renderer is attached to a layer.
	 *
	 * @param {Layer} layer - The layer to attach the renderer to.
	 *
	 * @returns {WebGLRenderer} The renderer object, for chaining.
	 */_createClass(WebGLRenderer,[{key:'onAdd',value:function onAdd(layer){_get(WebGLRenderer.prototype.__proto__||Object.getPrototypeOf(WebGLRenderer.prototype),'onAdd',this).call(this,layer);this.gl=this.layer.plot.gl;return this;}/**
	 * Executed when the renderer is removed from a layer.
	 *
	 * @param {Layer} layer - The layer to remove the renderer from.
	 *
	 * @returns {WebGLRenderer} The renderer object, for chaining.
	 */},{key:'onRemove',value:function onRemove(layer){this.gl=null;_get(WebGLRenderer.prototype.__proto__||Object.getPrototypeOf(WebGLRenderer.prototype),'onRemove',this).call(this,layer);return this;}/**
	 * Instantiate and return a new Shader object using the renderers internal
	 * WebGLRenderingContext.
	 * @param {Object} params - The shader param object.
	 * @param {String} params.common - Common glsl to be shared by both vertex and fragment shaders.
	 * @param {String} params.vert - The vertex shader glsl.
	 * @param {String} params.frag - The fragment shader glsl.
	 *
	 * @returns {Shader} The shader object.
	 */},{key:'createShader',value:function createShader(source){return new Shader(this.gl,source);}/**
	 * Returns the orthographic projection matrix for the viewport.
	 *
	 * @return {Float32Array} The orthographic projection matrix.
	 */},{key:'getOrthoMatrix',value:function getOrthoMatrix(){var viewport=this.layer.plot.viewport;var left=0;var right=viewport.width;var bottom=0;var top=viewport.height;var near=-1;var far=1;var lr=1/(left-right);var bt=1/(bottom-top);var nf=1/(near-far);var out=new Float32Array(16);out[0]=-2*lr;out[1]=0;out[2]=0;out[3]=0;out[4]=0;out[5]=-2*bt;out[6]=0;out[7]=0;out[8]=0;out[9]=0;out[10]=2*nf;out[11]=0;out[12]=(left+right)*lr;out[13]=(top+bottom)*bt;out[14]=(far+near)*nf;out[15]=1;return out;}/**
	 * Returns the renderables for the underlying layer.
	 *
	 * @returns {Array} The array of renderables.
	 */},{key:'getRenderables',value:function getRenderables(){var plot=this.layer.plot;var pyramid=this.layer.pyramid;// get all currently visible tile coords
var coords=plot.viewport.getVisibleCoords(plot.tileSize,plot.zoom,Math.round(plot.zoom),// get tiles closest to current zoom
plot.wraparound);// get available renderables
var renderables=[];coords.forEach(function(coord){var ncoord=coord.normalize();// check if we have the tile
var tile=pyramid.get(ncoord);if(tile){var scale=Math.pow(2,plot.zoom-coord.z);var tileOffset=[coord.x*scale*plot.tileSize-plot.viewport.x,coord.y*scale*plot.tileSize-plot.viewport.y];var renderable={tile:tile,coord:coord,scale:scale,hash:ncoord.hash,tileOffset:tileOffset};renderables.push(renderable);}});// sort by hash
renderables.sort(sortByHash);return renderables;}/**
	 * Returns the renderables for the underlying layer at the closest
	 * available LOD.
	 *
	 * @returns {Array} The array of renderables.
	 */},{key:'getRenderablesLOD',value:function getRenderablesLOD(){var plot=this.layer.plot;var pyramid=this.layer.pyramid;// get all currently visible tile coords
var coords=plot.viewport.getVisibleCoords(plot.tileSize,plot.zoom,Math.round(plot.zoom),// get tiles closest to current zoom
plot.wraparound);// get available LOD renderables
var renderables=[];coords.forEach(function(coord){// check if we have any tile LOD available
var lod=pyramid.getAvailableLOD(coord);if(lod){var scale=Math.pow(2,plot.zoom-coord.z);var tileOffset=[coord.x*scale*plot.tileSize-plot.viewport.x,coord.y*scale*plot.tileSize-plot.viewport.y];var renderable={tile:lod.tile,coord:coord,scale:scale,hash:lod.tile.coord.hash,tileOffset:tileOffset,uvOffset:[lod.offset.x,lod.offset.y,lod.offset.extent,lod.offset.extent]};renderables.push(renderable);}});// sort by hash
renderables.sort(sortByHash);return renderables;}}]);return WebGLRenderer;}(Renderer);module.exports=WebGLRenderer;

},{"../Renderer":167,"./shader/Shader":181}],177:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var EventType=require('../../event/EventType');var WebGLRenderer=require('./WebGLRenderer');var TextureArray=require('./texture/TextureArray');// Constants
/**
 * Add tile handler symbol.
 * @private
 * @constant
 */var TILE_ADD=Symbol();/**
 * Remove tile handler symbol.
 * @private
 * @constant
 */var TILE_REMOVE=Symbol();/**
 * Class representing a texture based webgl renderer.
 */var WebGLTextureRenderer=function(_WebGLRenderer){_inherits(WebGLTextureRenderer,_WebGLRenderer);/**
	 * Instantiates a new WebGLTextureRenderer object.
	 *
	 * @param {Object} options - The options object.
	 */function WebGLTextureRenderer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,WebGLTextureRenderer);var _this=_possibleConstructorReturn(this,(WebGLTextureRenderer.__proto__||Object.getPrototypeOf(WebGLTextureRenderer)).call(this,options));_this.format=defaultTo(options.format,'RGBA');_this.type=defaultTo(options.type,'UNSIGNED_BYTE');_this.filter=defaultTo(options.filter,'LINEAR');_this.invertY=defaultTo(options.invertY,false);_this.premultiplyAlpha=defaultTo(options.premultiplyAlpha,false);return _this;}/**
	 * Executed when a tile is added to the layer pyramid.
	 *
	 * @param {TextureArray} array - The texture array object.
	 * @param {Tile} tile - The new tile object containing data.
	 */_createClass(WebGLTextureRenderer,[{key:'addTile',value:function addTile(array,tile){array.set(tile.coord.hash,tile.data);}/**
	 * Executed when a tile is removed from the layer pyramid.
	 *
	 * @param {TextureArray} array - The texture array object.
	 * @param {Tile} tile - The new tile object containing data.
	 */},{key:'removeTile',value:function removeTile(array,tile){array.delete(tile.coord.hash);}/**
	 * Creates a texture array of appropriate size for the layer pyramid using
	 * the provided texture size. Creates and attaches the necessary event
	 * handlers to add and remove data from the array accordingly.
	 *
	 * @param {Number} textureSize - The resolution of the tile texture.
	 */},{key:'createTextureArray',value:function createTextureArray(textureSize){var _this2=this;// create texture array
var array=new TextureArray(this.gl,textureSize,{// set num chunks to be able to fit the capacity of the pyramid
numChunks:this.layer.pyramid.totalCapacity,// set texture attributes
format:this.format,filter:this.filter,invertY:this.invertY,premultiplyAlpha:this.premultiplyAlpha});// create handlers
var add=function add(event){_this2.addTile(array,event.tile);};var remove=function remove(event){_this2.removeTile(array,event.tile);};// attach handlers
this.layer.on(EventType.TILE_ADD,add);this.layer.on(EventType.TILE_REMOVE,remove);// store the handlers under the array
var handlers=new Map([[TILE_ADD,add],[TILE_REMOVE,remove]]);this.handlers.set(array,handlers);// return the array
return array;}/**
	 * Destroys a texture array object and removes all event handlers used to
	 * add and remove data from the array.
	 */},{key:'destroyTextureArray',value:function destroyTextureArray(array){// get handlers associated with the array
var handlers=this.handlers.get(array);// detach handlers
this.layer.removeListener(EventType.TILE_ADD,handlers.get(TILE_ADD));this.layer.removeListener(EventType.TILE_REMOVE,handlers.get(TILE_REMOVE));// destroy handlers
this.handlers.delete(array);}}]);return WebGLTextureRenderer;}(WebGLRenderer);module.exports=WebGLTextureRenderer;

},{"../../event/EventType":148,"./WebGLRenderer":176,"./texture/TextureArray":186,"lodash/defaultTo":107}],178:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var EventType=require('../../event/EventType');var WebGLRenderer=require('./WebGLRenderer');var VertexAtlas=require('./vertex/VertexAtlas');// Constants
/**
 * Add tile handler symbol.
 * @private
 * @constant
 */var TILE_ADD=Symbol();/**
 * Remove tile handler symbol.
 * @private
 * @constant
 */var TILE_REMOVE=Symbol();/**
 * Class representing a vertex based webgl renderer.
 */var WebGLVertexRenderer=function(_WebGLRenderer){_inherits(WebGLVertexRenderer,_WebGLRenderer);/**
	 * Instantiates a new WebGLVertexRenderer object.
	 *
	 * @param {Object} options - The options object.
	 * @param {Array} options.maxVertices - The max number of vertices per tile.
	 */function WebGLVertexRenderer(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,WebGLVertexRenderer);var _this=_possibleConstructorReturn(this,(WebGLVertexRenderer.__proto__||Object.getPrototypeOf(WebGLVertexRenderer)).call(this,options));_this.maxVertices=defaultTo(options.maxVertices,128*128);return _this;}/**
	 * Executed when a tile is added to the layer pyramid.
	 *
	 * @param {VertexAtlas} atlas - The vertex atlas object.
	 * @param {Tile} tile - The new tile object containing data.
	 */_createClass(WebGLVertexRenderer,[{key:'addTile',value:function addTile(atlas,tile){atlas.set(tile.coord.hash,tile.data,tile.data.length/atlas.stride);}/**
	 * Executed when a tile is removed from the layer pyramid.
	 *
	 * @param {VertexAtlas} atlas - The vertex atlas object.
	 * @param {Tile} tile - The new tile object containing data.
	 */},{key:'removeTile',value:function removeTile(atlas,tile){atlas.delete(tile.coord.hash);}/**
	 * Creates a vertex atlas of appropriate size for the layer pyramid using
	 * the provided attribute pointers. Creates and attaches the necessary
	 * event handlers to add and remove data from the atlas accordingly.
	 *
	 * @param {Object} pointers - The vertex attribute pointers.
	 */},{key:'createVertexAtlas',value:function createVertexAtlas(pointers){var _this2=this;// create vertex atlas
var atlas=new VertexAtlas(this.gl,pointers,{// set num chunks to be able to fit the capacity of the pyramid
numChunks:this.layer.pyramid.totalCapacity,chunkSize:this.maxVertices});// create handlers
var add=function add(event){_this2.addTile(atlas,event.tile);};var remove=function remove(event){_this2.removeTile(atlas,event.tile);};// attach handlers
this.layer.on(EventType.TILE_ADD,add);this.layer.on(EventType.TILE_REMOVE,remove);// store the handlers under the atlas
var handlers=new Map([[TILE_ADD,add],[TILE_REMOVE,remove]]);this.handlers.set(atlas,handlers);return atlas;}/**
	 * Destroys a vertex atlas object and removes all event handlers used to add
	 * and remove data from the atlas.
	 */},{key:'destroyVertexAtlas',value:function destroyVertexAtlas(atlas){// get handlers associated with the atlas
var handlers=this.handlers.get(atlas);// detach handlers
this.layer.removeListener(EventType.TILE_ADD,handlers.get(TILE_ADD));this.layer.removeListener(EventType.TILE_REMOVE,handlers.get(TILE_REMOVE));// destroy handlers
this.handlers.delete(atlas);}}]);return WebGLVertexRenderer;}(WebGLRenderer);module.exports=WebGLVertexRenderer;

},{"../../event/EventType":148,"./WebGLRenderer":176,"./vertex/VertexAtlas":187,"lodash/defaultTo":107}],179:[function(require,module,exports){
'use strict';module.exports={/**
	 * A circle collision primitive.
	 * @constant {String}
	 */CIRCLE:'circle',/**
	 * A rectangle collision primitive.
	 * @constant {String}
	 */RECTANGLE:'rectangle'};

},{}],180:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var rbush=require('rbush');var defaultTo=require('lodash/defaultTo');var CollisionType=require('./CollisionType');/**
 * Class representing an r-tree.
 */var RTree=function(){/**
	 * Instantiates a new RTree object.
	 *
	 * @param {Object} options - The options object.
	 * @param {boolean} options.collisionType - The collision type of the collidables.
	 * @param {boolean} options.nodeCapacity - The node capacity of the r-tree.
	 */function RTree(options){_classCallCheck(this,RTree);this.collisionType=defaultTo(options.collisionType,CollisionType.CIRCLE);this.tree=rbush(defaultTo(options.nodeCapacity,32));}/**
	 * Inserts an array of collidables into the r-tree.
	 *
	 * @param {Array} collidables - The array of collidables to insert.
	 */_createClass(RTree,[{key:'insert',value:function insert(collidables){this.tree.load(collidables);}/**
	 * Removes an array of collidables from the r-tree.
	 *
	 * @param {Array} collidables - The array of collidables to remove.
	 */},{key:'remove',value:function remove(collidables){var tree=this.tree;for(var i=0;i<collidables.length;i++){tree.remove(collidables[i]);}}/**
	 * Searchs the r-tree using a point.
	 *
	 * @param {Number} x - The x component.
	 * @param {Number} y - The y component.
	 *
	 * @returns {Object} The collision object.
	 */},{key:'searchPoint',value:function searchPoint(x,y){var collisions=this.tree.search({minX:x,maxX:x,minY:y,maxY:y});if(collisions.length===0){return null;}if(this.collisionType===CollisionType.RECTANGLE){// rectangle, return result as is
return collisions[0];}// do a circle - point check
for(var i=0;i<collisions.length;i++){var collision=collisions[i];// distance to center of square
var cx=(collision.minX+collision.maxX)*0.5;var cy=(collision.minY+collision.maxY)*0.5;var dx=cx-x;var dy=cy-y;// assume the boxes are squares
var radius=cx;if(dx*dx+dy*dy<=radius*radius){return collision;}}return null;}/**
	 * Searchs the r-tree using a rectangle.
	 *
	 * @param {Number} minX - The minimum x component.
	 * @param {Number} maxX - The maximum x component.
	 * @param {Number} minY - The minimum x component.
	 * @param {Number} maxY - The maximum x component.
	 * @param {Number} y - The y component.
	 *
	 * @returns {Object} The collision object.
	 */},{key:'searchRectangle',value:function searchRectangle(minX,maxX,minY,maxY){var collisions=this.tree.search({minX:minX,maxX:maxX,minY:minY,maxY:maxY});if(collisions.length===0){return null;}if(this.collisionType===CollisionType.RECTANGLE){// rectangle, return result as is
return collisions[0];}// get rect half width / height
var halfWidth=(minX+maxX)*0.5;var halfHeight=(minY+maxY)*0.5;// do a circle - rectangle check
for(var i=0;i<collisions.length;i++){var collision=collisions[i];// circle position
var circleX=(collision.minX+collision.maxX)*0.5;var circleY=(collision.minY+collision.maxY)*0.5;// distance from rectangle bottom-left
var dx=Math.abs(circleX-minX);var dy=Math.abs(circleY-minY);// assume the boxes are squares
var radius=collision.minX+collision.maxX;if(dx>halfWidth+radius||dy>halfHeight+radius){return false;}if(dx<=halfWidth||dy<=halfHeight){return collision;}var cornerDist=Math.pow(2,dx-halfWidth)+Math.pow(2,dy-halfHeight);if(cornerDist<=radius*radius){return collision;}}return null;}}]);return RTree;}();module.exports=RTree;

},{"./CollisionType":179,"lodash/defaultTo":107,"rbush":138}],181:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var map=require('lodash/map');var parseShader=require('./parseShader');// Constants
var UNIFORM_FUNCTIONS={'bool':'uniform1i','bool[]':'uniform1iv','float':'uniform1f','float[]':'uniform1fv','int':'uniform1i','int[]':'uniform1iv','uint':'uniform1i','uint[]':'uniform1iv','vec2':'uniform2fv','vec2[]':'uniform2fv','ivec2':'uniform2iv','ivec2[]':'uniform2iv','vec3':'uniform3fv','vec3[]':'uniform3fv','ivec3':'uniform3iv','ivec3[]':'uniform3iv','vec4':'uniform4fv','vec4[]':'uniform4fv','ivec4':'uniform4iv','ivec4[]':'uniform4iv','mat2':'uniformMatrix2fv','mat2[]':'uniformMatrix2fv','mat3':'uniformMatrix3fv','mat3[]':'uniformMatrix3fv','mat4':'uniformMatrix4fv','mat4[]':'uniformMatrix4fv','sampler2D':'uniform1i','samplerCube':'uniform1i'};// Private Methods
var setAttributesAndUniforms=function setAttributesAndUniforms(shader,vertSource,fragSource){// parse shader delcarations
var declarations=parseShader([vertSource,fragSource],['uniform','attribute']);// for each declaration in the shader
declarations.forEach(function(declaration){// check if its an attribute or uniform
if(declaration.qualifier==='attribute'){// if attribute, store type and index
shader.attributes.set(declaration.name,{type:declaration.type,index:shader.attributes.size});}else{// if (declaration.qualifier === 'uniform') {
// if uniform, store type and buffer function name
var type=declaration.type+(declaration.count>1?'[]':'');shader.uniforms.set(declaration.name,{type:declaration.type,func:UNIFORM_FUNCTIONS[type]});}});};var compileShader=function compileShader(gl,shaderSource,type){var shader=gl.createShader(gl[type]);gl.shaderSource(shader,shaderSource);gl.compileShader(shader);if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)){throw'An error occurred compiling the shader:\n'+gl.getShaderInfoLog(shader);}return shader;};var bindAttributeLocations=function bindAttributeLocations(shader){var gl=shader.gl;shader.attributes.forEach(function(attribute,name){// bind the attribute location
gl.bindAttribLocation(shader.program,attribute.index,name);});};var getUniformLocations=function getUniformLocations(shader){var gl=shader.gl;var uniforms=shader.uniforms;uniforms.forEach(function(uniform,name){// get the uniform location
var location=gl.getUniformLocation(shader.program,name);// check if null, parse may detect uniform that is compiled out
// due to a preprocessor evaluation.
// TODO: fix parser so that it evaluates these correctly.
if(location===null){uniforms.delete(name);}else{uniform.location=location;}});};var createDefines=function createDefines(defines){return map(defines,function(value,name){return'#define '+name+' '+value;}).join('\n');};var createProgram=function createProgram(shader,sources){// Creates the shader program object from source strings. This includes:
//	1) Compiling and linking the shader program.
//	2) Parsing shader source for attribute and uniform information.
//	3) Binding attribute locations, by order of delcaration.
//	4) Querying and storing uniform location.
var gl=shader.gl;var defines=createDefines(sources.define);var common=defines+(sources.common||'');var vert=common+sources.vert;var frag=common+sources.frag;// compile shaders
var vertexShader=compileShader(gl,vert,'VERTEX_SHADER');var fragmentShader=compileShader(gl,frag,'FRAGMENT_SHADER');// parse source for attribute and uniforms
setAttributesAndUniforms(shader,vert,frag);// create the shader program
shader.program=gl.createProgram();// attach vertex and fragment shaders
gl.attachShader(shader.program,vertexShader);gl.attachShader(shader.program,fragmentShader);// bind vertex attribute locations BEFORE linking
bindAttributeLocations(shader);// link shader
gl.linkProgram(shader.program);// If creating the shader program failed, alert
if(!gl.getProgramParameter(shader.program,gl.LINK_STATUS)){throw'An error occured linking the shader:\n'+gl.getProgramInfoLog(shader.program);}// get shader uniform locations
getUniformLocations(shader);};/**
 * Class representing a shader program.
 */var Shader=function(){/**
	 * Instantiates a Shader object.
	 *
	 * @param {WebGLRenderingContext} gl - The WebGL context.
	 * @param {Object} params - The shader params object.
	 * @param {String} params.common - Common glsl to be shared by both vertex and fragment shaders.
	 * @param {String} params.vert - The vertex shader glsl.
	 * @param {String} params.frag - The fragment shader glsl.
	 * @param {Object} params.define - Any #define directives to include in the glsl.
	 */function Shader(gl){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Shader);// check source arguments
if(!params.vert){throw'Vertex shader argument `vert` has not been provided';}if(!params.frag){throw'Fragment shader argument `frag` has not been provided';}this.gl=gl;this.program=null;this.attributes=new Map();this.uniforms=new Map();// create the shader program
createProgram(this,params);}/**
	 * Binds the shader program for use.
	 *
	 * @return {Shader} The shader object, for chaining.
	 */_createClass(Shader,[{key:'use',value:function use(){// use the shader
this.gl.useProgram(this.program);return this;}/**
	 * Buffer a uniform value by name.
	 *
	 * @param {String} name - The uniform name in the shader source.
	 * @param {*} value - The uniform value to buffer.
	 *
	 * @return {Shader} - The shader object, for chaining.
	 */},{key:'setUniform',value:function setUniform(name,value){var uniform=this.uniforms.get(name);// ensure that the uniform params exists for the name
if(!uniform){throw'No uniform found under name `'+name+'`';}// check value
if(value===undefined||value===null){// ensure that the uniform argument is defined
throw'Value passed for uniform `'+name+'` is undefined or null';}// set the uniform
// NOTE: checking type by string comparison is faster than wrapping
// the functions.
if(uniform.type==='mat2'||uniform.type==='mat3'||uniform.type==='mat4'){this.gl[uniform.func](uniform.location,false,value);}else{this.gl[uniform.func](uniform.location,value);}return this;}}]);return Shader;}();module.exports=Shader;

},{"./parseShader":182,"lodash/map":125}],182:[function(require,module,exports){
'use strict';var preprocess=require('./preprocess');// Constants
var COMMENTS_REGEXP=/(\/\*([\s\S]*?)\*\/)|(\/\/(.*)$)/gm;var ENDLINE_REGEXP=/(\r\n|\n|\r)/gm;var WHITESPACE_REGEXP=/\s{2,}/g;var BRACKET_WHITESPACE_REGEXP=/(\s*)(\[)(\s*)(\d+)(\s*)(\])(\s*)/g;var NAME_COUNT_REGEXP=/([a-zA-Z_][a-zA-Z0-9_]*)(?:\[(\d+)\])?/;var PRECISION_REGEX=/\bprecision\s+\w+\s+\w+;/g;var INLINE_PRECISION_REGEX=/\b(highp|mediump|lowp)\s+/g;// Private Methods
var stripComments=function stripComments(str){// regex source: https://github.com/moagrius/stripcomments
return str.replace(COMMENTS_REGEXP,'');};var stripPrecision=function stripPrecision(str){return str.replace(PRECISION_REGEX,'')// remove global precision declarations
.replace(INLINE_PRECISION_REGEX,'');// remove inline precision declarations
};var normalizeWhitespace=function normalizeWhitespace(str){return str.replace(ENDLINE_REGEXP,' ')// normalize line endings
.replace(WHITESPACE_REGEXP,' ')// normalize whitespace to single ' '
.replace(BRACKET_WHITESPACE_REGEXP,'$2$4$6');// remove whitespace in brackets
};var parseNameAndCount=function parseNameAndCount(qualifier,type,entry){// determine name and size of variable
var matches=entry.match(NAME_COUNT_REGEXP);var name=matches[1];var count=matches[2]===undefined?1:parseInt(matches[2],10);return{qualifier:qualifier,type:type,name:name,count:count};};var parseStatement=function parseStatement(statement){// split statement on commas
//
// ['uniform mat4 A[10]', 'B', 'C[2]']
//
var split=statement.split(',').map(function(elem){return elem.trim();});// split declaration header from statement
//
// ['uniform', 'mat4', 'A[10]']
//
var header=split.shift().split(' ');// qualifier is always first element
//
// 'uniform'
//
var qualifier=header.shift();// type will be the second element
//
// 'mat4'
//
var type=header.shift();// last part of header will be the first, and possible only variable name
//
// ['A[10]', 'B', 'C[2]']
//
var names=header.concat(split);// if there are other names after a ',' add them as well
return names.map(function(name){return parseNameAndCount(qualifier,type,name);});};var parseSource=function parseSource(source,keywords){// splits the source string by semi-colons and constructs an array of
// declaration objects based on the provided qualifier keywords.
// get individual statements (any sequence ending in ;)
var statements=source.split(';');// build regex for parsing statements with targetted keywords
var keywordStr=keywords.join('|');var keywordRegex=new RegExp('\\b('+keywordStr+')\\b.*');// parse and store global precision statements and any declarations
var matched=[];// for each statement
statements.forEach(function(statement){// check for keywords
//
// ['uniform float uTime']
//
var kmatch=statement.match(keywordRegex);if(kmatch){// parse statement and add to array
matched=matched.concat(parseStatement(kmatch[0]));}});return matched;};var filterDuplicatesByName=function filterDuplicatesByName(declarations){// in cases where the same declarations are present in multiple
// sources, this function will remove duplicates from the results
var seen={};return declarations.filter(function(declaration){if(seen[declaration.name]){return false;}seen[declaration.name]=true;return true;});};/**
 * Parses the provided GLSL source, and returns all declaration statements that
 * contain the provided qualifier types. This can be used to extract the
 * attributes and uniform names / types from a shader.
 * NOTE: This is run only AFTER compilation succeed, so it assumes VALID syntax.
 *
 * Ex, when provided a 'uniform' qualifier, the declaration:
 *
 *	 'uniform highp vec3 uSpecularColor;'
 *
 * Would be parsed to:
 *	 {
 *		 qualifier: 'uniform',
 *		 type: 'vec3'
 *		 name: 'uSpecularColor',
 *		 count: 1
 *	 }
 * @param {Array} sources - The shader glsl sources.
 * @param {Array} qualifiers - The qualifiers to extract.
 *
 * @return {Array} The array of qualifier declaration statements.
 */module.exports=function(){var sources=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var qualifiers=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];// if no sources or qualifiers are provided, return empty array
if(sources.length===0||qualifiers.length===0){return[];}sources=Array.isArray(sources)?sources:[sources];qualifiers=Array.isArray(qualifiers)?qualifiers:[qualifiers];// parse out targetted declarations
var declarations=[];sources.forEach(function(source){// remove comments
source=stripComments(source);// run preprocessor
source=preprocess(source);// remove precision statements
source=stripPrecision(source);// finally, normalize the whitespace
source=normalizeWhitespace(source);// parse out declarations
declarations=declarations.concat(parseSource(source,qualifiers));});// remove duplicates and return
return filterDuplicatesByName(declarations);};

},{"./preprocess":183}],183:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var DEFINED='__DEFINED__';var DEFINE_REGEX=/#define\b/i;var UNDEF_REGEX=/#undef\b/i;var IF_REGEX=/#if\b/i;var IFDEF_REGEX=/#ifdef\b/i;var IFNDEF_REGEX=/#ifndef\b/i;var ELSE_REGEX=/#else\b/i;var ELIF_REGEX=/#elif\b/i;var ENDIF_REGEX=/#endif\b/i;var PARSE_DEFINE_REGEX=/#define\s+(\w+)(\s(\w*)?)?/i;var PARSE_UNDEF_REGEX=/#undef\s+(\w+)/i;var PARSE_IF_REGEX=/#if\s+\(?\s*(!?\s*\w+)\s*(==|!=|>=|<=|<|<|>)?\s*(\w*)\s*\)?/i;var PARSE_IFDEF_REGEX=/#ifdef\s+(\w+)/i;var PARSE_IFNDEF_REGEX=/#ifndef\s+(\w+)/i;var PARSE_ELIF_REGEX=/#elif\s+\(?\s*(!?\s*\w+)\s*(==|!=|>=|<=|<|<|>)?\s*(\w*)\s*\)?/i;var REMAINING_REGEX=/#([\W\w\s\d])(?:.*\\r?\n)*.*$/gm;var evalIf=function evalIf(a,logic,b){if(logic===undefined){if(a[0]==='!'){return!(a==='true'||a>=1);}return a==='true'||a>=1;}switch(logic){case'==':return a===b;case'!=':return a!==b;case'>':return a>b;case'>=':return a>=b;case'<':return a<b;case'<=':return a<=b;}throw'Unrecognized logical operator `'+logic+'`';};var Conditional=function(){function Conditional(type,conditional){_classCallCheck(this,Conditional);this.type=type;this.conditional=conditional.trim();this.body=[];this.children=[];}_createClass(Conditional,[{key:'eval',value:function _eval(){var parsed=void 0;switch(this.type){case'if':parsed=PARSE_IF_REGEX.exec(this.conditional);return evalIf(parsed[1],parsed[2],parsed[3]);case'ifdef':parsed=PARSE_IFDEF_REGEX.exec(this.conditional);return parsed[1]===DEFINED;case'ifndef':parsed=PARSE_IFNDEF_REGEX.exec(this.conditional);return parsed[1]!==DEFINED;case'elif':parsed=PARSE_ELIF_REGEX.exec(this.conditional);return evalIf(parsed[1],parsed[2],parsed[3]);}throw'Unrecognized conditional type `'+this.type+'`';}}]);return Conditional;}();var Block=function(){function Block(type,conditional,lineNum){_classCallCheck(this,Block);this.if=new Conditional(type,conditional);this.elif=[];this.else=null;this.parent=null;this.current=this.if;this.startLine=lineNum;this.endLine=null;}_createClass(Block,[{key:'addElse',value:function addElse(conditional){this.current=new Conditional('else',conditional);this.else=this.current;}},{key:'addElif',value:function addElif(conditional){this.current=new Conditional('elif',conditional);this.elif.push(this.current);}},{key:'addBody',value:function addBody(line,lineNum){this.current.body.push({string:line.trim(),line:lineNum});}},{key:'nest',value:function nest(block){block.parent=this;this.current.children.push(block);}},{key:'extract',value:function extract(){// #if
var body=[];if(this.if.eval()){body=body.concat(this.if.body);this.if.children.forEach(function(child){body=body.concat(child.extract());});return body;}// #elif
for(var i=0;i<this.elif.length;i++){var elif=this.elif[i];if(elif.eval()){body=body.concat(elif.body);for(var j=0;j<elif.children.length;j++){var child=elif.children[j];body=body.concat(child.extract());}return body;}}// #else
if(this.else){body=body.concat(this.else.body);this.else.children.forEach(function(child){body=body.concat(child.extract());});return body;}return[];}},{key:'eval',value:function _eval(){// ensure extract text is ordered correctly
return this.extract().sort(function(a,b){return a.line-b.line;}).map(function(arg){return arg.string;}).join('\n');}}]);return Block;}();var parseLines=function parseLines(lines){var blocks=[];var current=null;lines.forEach(function(line,index){if(line.match(IF_REGEX)){// #if
var block=new Block('if',line,index);if(!current){blocks.push(block);}else{current.nest(block);}current=block;}else if(line.match(IFDEF_REGEX)){// #ifdef
var _block=new Block('ifdef',line,index);if(!current){blocks.push(_block);}else{current.nest(_block);}current=_block;}else if(line.match(IFNDEF_REGEX)){// #ifndef
var _block2=new Block('ifndef',line,index);if(!current){blocks.push(_block2);}else{current.nest(_block2);}current=_block2;}else if(line.match(ELIF_REGEX)){// #elif
if(!current){throw'Invalid preprocessor syntax, unexpected `#elif`';}current.addElif(line);}else if(line.match(ELSE_REGEX)){// #else
if(!current){throw'Invalid preprocessor syntax, unexpected `#else`';}current.addElse(line);}else if(line.match(ENDIF_REGEX)){// #endif
if(!current){throw'Invalid preprocessor syntax, unexpected `#endif`';}current.endLine=index;current=current.parent;}else{// other
if(current){current.addBody(line,index);}}});if(current){throw'Invalid preprocessor syntax, missing expected `#endif`';}return blocks;};var replaceDefines=function replaceDefines(lines){var defines=new Map();var replaced=[];lines.forEach(function(line){if(line.match(DEFINE_REGEX)){// #define
var parsed=PARSE_DEFINE_REGEX.exec(line);defines.set(parsed[1],parsed[2]||DEFINED);}else if(line.match(UNDEF_REGEX)){// #undef
var _parsed=PARSE_UNDEF_REGEX.exec(line);defines.delete(_parsed[1]);}else if(line.match(IFDEF_REGEX)){// #ifdef
var _parsed2=PARSE_IFDEF_REGEX.exec(line);if(defines.has(_parsed2[1])){line=line.replace(_parsed2[1],DEFINED);}replaced.push(line);}else if(line.match(IFNDEF_REGEX)){// #ifndef
var _parsed3=PARSE_IFNDEF_REGEX.exec(line);if(defines.has(_parsed3[1])){line=line.replace(_parsed3[1],DEFINED);}replaced.push(line);}else{// swap defines
defines.forEach(function(val,define){line=line.replace(define,val);});replaced.push(line);}});return replaced;};/**
 * Evaluates GLSL preprocessor statements.
 * NOTE: assumes comments have been stripped, and preprocessors are valid.
 *
 *     Supported:
 *
 *         #define (substitutions only)
 *         #undef
 *         #if (== and != comparisons only)
 *         #ifdef
 *         #ifndef
 *         #elif
 *         #else
 *         #endif
 *
 *     Not Supported:
 *
 *         #define (macros)
 *         #if (&& and || operators, defined() predicate)
 *         #error
 *         #pragma
 *         #extension
 *         #version
 *         #line
 *
 * @param {String} glsl - The glsl source code.
 *
 * @return {String} The processed glsl source code.
 */module.exports=function(glsl){// split lines
var lines=glsl.split('\n');// replace any defines with their values
lines=replaceDefines(lines);// parse them
var blocks=parseLines(lines);// remove blocks in reverse order to preserve line numbers
for(var i=blocks.length-1;i>=0;i--){var block=blocks[i];var replacement=block.eval();if(replacement.length>0){lines.splice(block.startLine,block.endLine-block.startLine+1,replacement);}else{lines.splice(block.startLine,block.endLine-block.startLine+1);}}// strip remaining unsupported preprocessor statements
return lines.join('\n').replace(REMAINING_REGEX,'');};

},{}],184:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Texture=require('./Texture');var Shader=require('../shader/Shader');var VertexBuffer=require('../vertex/VertexBuffer');// Constants
/**
 * Shader GLSL source.
 * @private
 * @constant {Object}
 */var SHADER_GLSL={vert:'\n\t\tprecision highp float;\n\t\tattribute vec3 aVertexPosition;\n\t\tattribute vec2 aTextureCoord;\n\t\tvarying vec2 vTextureCoord;\n\t\tvoid main(void) {\n\t\t\tvTextureCoord = aTextureCoord;\n\t\t\tgl_Position = vec4(aVertexPosition, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform float uOpacity;\n\t\tuniform sampler2D uTextureSampler;\n\t\tvarying vec2 vTextureCoord;\n\t\tvoid main(void) {\n\t\t\tvec4 color = texture2D(uTextureSampler, vTextureCoord);\n\t\t\tgl_FragColor = vec4(color.rgb, color.a * uOpacity);\n\t\t}\n\t\t'};// Private Methods
var createQuad=function createQuad(gl,min,max){var vertices=new Float32Array(24);// positions
vertices[0]=min;vertices[1]=min;vertices[2]=max;vertices[3]=min;vertices[4]=max;vertices[5]=max;vertices[6]=min;vertices[7]=min;vertices[8]=max;vertices[9]=max;vertices[10]=min;vertices[11]=max;// uvs
vertices[12]=0;vertices[13]=0;vertices[14]=1;vertices[15]=0;vertices[16]=1;vertices[17]=1;vertices[18]=0;vertices[19]=0;vertices[20]=1;vertices[21]=1;vertices[22]=0;vertices[23]=1;// create quad buffer
return new VertexBuffer(gl,vertices,{0:{size:2,type:'FLOAT',byteOffset:0},1:{size:2,type:'FLOAT',byteOffset:2*6*4}},{count:6});};var setColorTarget=function setColorTarget(gl,framebuffer,attachment,index){gl.bindFramebuffer(gl.FRAMEBUFFER,framebuffer);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl['COLOR_ATTACHMENT'+index],gl.TEXTURE_2D,attachment.texture,0);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};var renderToScreen=function renderToScreen(gl,texture,shader,quad,opacity){// bind shader
shader.use();// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);// set uniforms
shader.setUniform('uOpacity',opacity);// set texture sampler unit
shader.setUniform('uTextureSampler',0);// bind texture
texture.bind(0);// draw quad
quad.bind();quad.draw();quad.unbind();// unbind texture
texture.unbind();};/**
 * Class representing a renderbuffer.
 */var RenderBuffer=function(){/**
	 * Instantiates a RenderBuffer object.
	 *
	 * @param {WebGLRenderingContext} gl - The WebGL context.
	 * @param {Number} width - The width of the renderbuffer.
	 * @param {Number} height - The height of the renderbuffer.
	 */function RenderBuffer(gl,width,height){_classCallCheck(this,RenderBuffer);this.gl=gl;this.framebuffer=gl.createFramebuffer();this.shader=new Shader(gl,SHADER_GLSL);this.quad=createQuad(gl,-1,1);this.texture=new Texture(gl,null,{width:width,height:height,filter:'NEAREST',invertY:false});setColorTarget(this.gl,this.framebuffer,this.texture,0);}/**
	 * Binds the renderbuffer for writing.
	 *
	 * @return {RenderBuffer} The renderbuffer object, for chaining.
	 */_createClass(RenderBuffer,[{key:'bind',value:function bind(){var gl=this.gl;gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);return this;}/**
	 * Unbinds the renderbuffer for writing.
	 *
	 * @return {RenderBuffer} The renderbuffer object, for chaining.
	 */},{key:'unbind',value:function unbind(){var gl=this.gl;gl.bindFramebuffer(gl.FRAMEBUFFER,null);return this;}/**
	 * Clears the renderbuffer buffer color bits.
	 *
	 * @param {Number} r - The red clear color. (Optional)
	 * @param {Number} g - The green clear color. (Optional)
	 * @param {Number} b - The blue clear color. (Optional)
	 * @param {Number} a - The alpha clear color. (Optional)
	 *
	 * @return {RenderBuffer} The renderbuffer object, for chaining.
	 */},{key:'clear',value:function clear(r,g,b,a){if(r!==undefined&&g!==undefined&&b!==undefined&&a!==undefined){this.gl.clearColor(r,g,b,a);}// clear render target
this.gl.clear(this.gl.COLOR_BUFFER_BIT);return this;}/**
	 * Blits the renderbuffer texture to the screen.
	 *
	 * @param {Number} opacity - The opacity to blit at.
	 *
	 * @return {RenderBuffer} The renderbuffer object, for chaining.
	 */},{key:'blitToScreen',value:function blitToScreen(opacity){renderToScreen(this.gl,this.texture,this.shader,this.quad,opacity);return this;}/**
	 * Resizes the renderbuffer to the provided height and width.
	 *
	 * @param {Number} width - The new width of the renderbuffer.
	 * @param {Number} height - The new height of the renderbuffer.
	 *
	 * @return {RenderBuffer} The renderbuffer object, for chaining.
	 */},{key:'resize',value:function resize(width,height){this.texture.resize(width,height);return this;}}]);return RenderBuffer;}();module.exports=RenderBuffer;

},{"../shader/Shader":181,"../vertex/VertexBuffer":188,"./Texture":185}],185:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var defaultTo=require('lodash/defaultTo');/**
 * Class representing a texture.
 */var Texture=function(){/**
	 * Instantiates a Texture object.
	 *
	 * @param {WebGLRenderingContext} gl - The WebGL context.
	 * @param {ArrayBuffer|CanvasElement} src - The data to buffer.
	 * @param {Object} options - The texture options.
	 * @param {Number} options.width - The width of the texture.
	 * @param {Number} options.height - The height of the texture.
	 * @param {String} options.wrap - The wrapping type over both S and T dimension.
	 * @param {String} options.filter - The min / mag filter used during scaling.
	 * @param {bool} options.invertY - Whether or not invert-y is enabled.
	 * @param {bool} options.premultiplyAlpha - Whether or not alpha premultiplying is enabled.
	 * @param {String} options.format - The texture pixel format.
	 * @param {String} options.type - The texture pixel component type.
	 */function Texture(gl){var src=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck(this,Texture);this.gl=gl;this.texture=gl.createTexture();// set texture properties
this.format=defaultTo(options.format,'RGBA');this.type=defaultTo(options.type,'UNSIGNED_BYTE');this.filter=defaultTo(options.filter,'LINEAR');this.wrap=defaultTo(options.wrap,'CLAMP_TO_EDGE');this.invertY=defaultTo(options.invertY,false);this.premultiplyAlpha=defaultTo(options.premultiplyAlpha,false);// buffer the data
this.bufferData(src,options.width,options.height);// set parameters
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl[this.wrap]);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl[this.wrap]);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl[this.filter]);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl[this.filter]);}/**
	 * Binds the texture object to the provided texture unit location.
	 *
	 * @param {Number} location - The texture unit location index. Optional.
	 *
	 * @return {Texture} The texture object, for chaining.
	 */_createClass(Texture,[{key:'bind',value:function bind(){var location=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var gl=this.gl;gl.activeTexture(gl['TEXTURE'+location]);gl.bindTexture(gl.TEXTURE_2D,this.texture);return this;}/**
	 * Unbinds the texture object.
	 *
	 * @return {Texture} The texture object, for chaining.
	 */},{key:'unbind',value:function unbind(){var gl=this.gl;gl.bindTexture(gl.TEXTURE_2D,null);return this;}/**
	 * Buffer data into the texture.
	 *
	 * @param {Array|ArrayBufferView|null} data - The data array to buffer.
	 * @param {Number} width - The width of the data.
	 * @param {Number} height - The height of the data.
	 *
	 * @return {Texture} The texture object, for chaining.
	 */},{key:'bufferData',value:function bufferData(data,width,height){var gl=this.gl;// bind texture
gl.bindTexture(gl.TEXTURE_2D,this.texture);gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,this.invertY);gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha);// buffer the data
if(data&&data.width&&data.height){// store width and height
this.width=data.width;this.height=data.height;// buffer the texture
gl.texImage2D(gl.TEXTURE_2D,0,// mip-map level
gl[this.format],// webgl requires format === internalFormat
gl[this.format],gl[this.type],data);}else{// store width and height
this.width=width||this.width;this.height=height||this.height;// buffer the texture data
gl.texImage2D(gl.TEXTURE_2D,0,// mip-map level
gl[this.format],// webgl requires format === internalFormat
this.width,this.height,0,// border, must be 0
gl[this.format],gl[this.type],data);}return this;}/**
	 * Buffer partial data into the texture.
	 *
	 * @param {Array|ArrayBufferView|null} data - The data array to buffer.
	 * @param {Number} xOffset - The x offset at which to buffer.
	 * @param {Number} yOffset - The y offset at which to buffer.
	 * @param {Number} width - The width of the data.
	 * @param {Number} height - The height of the data.
	 *
	 * @return {Texture} The texture object, for chaining.
	 */},{key:'bufferSubData',value:function bufferSubData(data){var xOffset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var yOffset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var width=arguments.length>3&&arguments[3]!==undefined?arguments[3]:undefined;var height=arguments.length>4&&arguments[4]!==undefined?arguments[4]:undefined;var gl=this.gl;// bind texture
gl.bindTexture(gl.TEXTURE_2D,this.texture);gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,this.invertY);gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha);// buffer the data
if(data.width&&data.height){// buffer the texture
gl.texSubImage2D(gl.TEXTURE_2D,0,// mip-map level
xOffset,yOffset,gl[this.format],gl[this.type],data);}else{// buffer the texture data
gl.texSubImage2D(gl.TEXTURE_2D,0,// mip-map level
xOffset,yOffset,width,height,gl[this.format],gl[this.type],data);}return this;}/**
	 * Resize the underlying texture. This clears the texture data.
	 *
	 * @param {Number} width - The new width of the texture.
	 * @param {Number} height - The new height of the texture.
	 *
	 * @return {Texture} The texture object, for chaining.
	 */},{key:'resize',value:function resize(width,height){this.bufferData(null,width,height);return this;}}]);return Texture;}();module.exports=Texture;

},{"lodash/defaultTo":107}],186:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var defaultTo=require('lodash/defaultTo');// Private Methods
var createTexture=function createTexture(gl,format,size,type,filter,invertY,premultiplyAlpha){var texture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,texture);gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,invertY);gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,premultiplyAlpha);// buffer the data
gl.texImage2D(gl.TEXTURE_2D,0,// mip-map level
gl[format],// webgl requires format === internalFormat
size,size,0,// border, must be 0
gl[format],gl[type],null);// set parameters
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl[filter]);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl[filter]);return texture;};/**
 * Class representing a texture array.
 */var TextureArray=function(){/**
	 * Instantiates a new TextureArray object.
	 *
	 * NOTE: we use a texture array rather than a texture atlas because of
	 * the sub-pixel bleeding that occurs in the atlas when textures are
	 * not padded. Due to the overhead of padding clientside, the
	 * frequency of load load events, and the average number of tiles on
	 * the screen at any one time, binding individual tile textures
	 * provides a less volatile frame rate compared to padding textures and
	 * using an atlas.
	 *
	 * @param {WebGLRenderingContext} gl - The WebGL context.
	 * @param {Number} tileSize - The size of a tile, in pixels.
	 * @param {Object} options - The texture array options.
	 * @param {Number} options.numChunks - The size of the array, in tiles.
	 */function TextureArray(gl){var tileSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:256;var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck(this,TextureArray);this.gl=gl;this.numChunks=defaultTo(options.numChunks,256);this.chunkSize=tileSize;// set texture properties
this.format=defaultTo(options.format,'RGBA');this.type=defaultTo(options.type,'UNSIGNED_BYTE');this.filter=defaultTo(options.filter,'LINEAR');this.invertY=defaultTo(options.invertY,false);this.premultiplyAlpha=defaultTo(options.premultiplyAlpha,false);// create textures
this.available=new Array(this.numChunks);for(var i=0;i<this.numChunks;i++){this.available[i]={texture:createTexture(this.gl,this.format,this.chunkSize,this.type,this.filter,this.invertY,this.premultiplyAlpha)};}// create used chunk map
this.used=new Map();}/**
	 * Test whether or not a key is held in the array.
	 *
	 * @param {String} key - The key to test.
	 *
	 * @returns {boolean} Whether or not the coord exists in the pyramid.
	 */_createClass(TextureArray,[{key:'has',value:function has(key){return this.used.has(key);}/**
	 * Returns the chunk matching the provided key. If the chunk does not
	 * exist, returns undefined.
	 *
	 * @param {String} key - The key of the chunk to return.
	 *
	 * @returns {Object} The chunk object.
	 */},{key:'get',value:function get(key){return this.used.get(key);}/**
	 * Set the texture data for the provided key.
	 *
	 * @param {String} key - The key of the texture data.
	 * @param {ArrayBuffer|HTMLCanvasElement|HTMLImageElement} data - The texture data.
	 */},{key:'set',value:function set(key,data){if(this.has(key)){throw'Tile of coord '+key+' already exists in the array';}if(this.available.length===0){throw'No available texture chunks in array';}// get an available chunk
var chunk=this.available.pop();// buffer the data
var gl=this.gl;gl.bindTexture(gl.TEXTURE_2D,chunk.texture);gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,this.invertY);gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha);if(data.width&&data.height){// canvas type
gl.texImage2D(gl.TEXTURE_2D,0,// mip-map level
gl[this.format],// webgl requires format === internalFormat
gl[this.format],gl[this.type],data);}else{// arraybuffer type
gl.texImage2D(gl.TEXTURE_2D,0,// mip-map level
gl[this.format],// webgl requires format === internalFormat
this.chunkSize,this.chunkSize,0,// border, must be 0
gl[this.format],gl[this.type],data);}// add to used
this.used.set(key,chunk);}/**
	 * Flags the chunk matching the provided key as unused in the array.
	 *
	 * @param {String} key - The key of the chunk to free.
	 *
	 * @returns {TextureArray} The TextureArray object, for chaining.
	 */},{key:'delete',value:function _delete(key){if(!this.has(key)){throw'Tile of coord '+key+' does not exist in the array';}// get chunk
var chunk=this.used.get(key);// remove from used
this.used.delete(key);// add to available
this.available.push(chunk);return this;}/**
	 * Binds the texture array to the provided texture unit.
	 *
	 * @param {String} key - The key of the chunk to bind.
	 * @param {String} location - The texture unit to activate. Optional.
	 *
	 * @returns {TextureArray} The TextureArray object, for chaining.
	 */},{key:'bind',value:function bind(key){var location=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(!this.has(key)){throw'Tile of coord '+key+' does not exist in the array';}var gl=this.gl;var chunk=this.used.get(key);gl.activeTexture(gl['TEXTURE'+location]);gl.bindTexture(gl.TEXTURE_2D,chunk.texture);return this;}/**
	 * Unbinds the texture array.
	 *
	 * @returns {TextureArray} The TextureArray object, for chaining.
	 */},{key:'unbind',value:function unbind(){// no-op
return this;}}]);return TextureArray;}();module.exports=TextureArray;

},{"lodash/defaultTo":107}],187:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var defaultTo=require('lodash/defaultTo');var forIn=require('lodash/forIn');// Constants
var BYTES_PER_TYPE={BYTE:1,UNSIGNED_BYTE:1,SHORT:2,UNSIGNED_SHORT:2,FIXED:4,FLOAT:4};// Private Methods
var calcChunkByteSize=function calcChunkByteSize(pointers,chunkSize){var byteSize=0;pointers.forEach(function(pointer){byteSize+=BYTES_PER_TYPE[pointer.type]*pointer.size*chunkSize;});return byteSize;};var calcByteOffsets=function calcByteOffsets(chunk,pointers,chunkByteOffset){var byteOffset=0;pointers.forEach(function(pointer,location){chunk.byteOffsets[location]=chunkByteOffset+byteOffset;byteOffset+=BYTES_PER_TYPE[pointer.type]*pointer.size;});};var calcStride=function calcStride(pointers){var stride=0;pointers.forEach(function(pointer){stride+=pointer.size;});return stride;};var parseAttributePointers=function parseAttributePointers(pointers){var attributePointers=new Map();var byteOffset=0;// convert to map
forIn(pointers,function(pointer,index){attributePointers.set(index,{type:pointer.type,size:pointer.size,byteOffset:byteOffset,byteStride:0});byteOffset+=BYTES_PER_TYPE[pointer.type]*pointer.size;});// add byteStride
attributePointers.forEach(function(pointer){pointer.byteStride=byteOffset;});return attributePointers;};/**
 * Class representing a vertex atlas.
 */var VertexAtlas=function(){/**
	 * Instantiates a new VertexAtlas object.
	 * NOTE: Assumes interleaved vertex format.
	 *
	 * @param {WebGLRenderingContext} gl - The WebGL context.
	 * @param {Number} tileSize - The size of a tile, in pixels.
	 * @param {Object} options - The vertex atlas options.
	 * @param {Number} options.chunkSize - The size of a single chunk, in vertices.
	 * @param {Number} options.numChunks - The size of the atlas, in tiles.
	 */function VertexAtlas(gl,pointers){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck(this,VertexAtlas);// get context
this.gl=gl;// get the extension for hardware instancing
this.ext=gl.getExtension('ANGLE_instanced_arrays');if(!this.ext){throw'ANGLE_instanced_arrays WebGL extension is not supported';}this.numChunks=defaultTo(options.numChunks,256);this.chunkSize=defaultTo(options.chunkSize,128*128);// set the pointers of the atlas
this.pointers=parseAttributePointers(pointers);// calc stride of the atlas
this.stride=calcStride(this.pointers);// create available chunks
this.available=new Array(this.numChunks);// calc the chunk byte size
var chunkByteSize=calcChunkByteSize(this.pointers,this.chunkSize);// for each chunk
for(var i=0;i<this.numChunks;i++){var chunkOffset=i*this.chunkSize;var chunkByteOffset=i*chunkByteSize;var available={count:0,chunkOffset:chunkOffset,chunkByteOffset:chunkByteOffset,byteOffsets:{}};// calculate interleaved offsets / stride, this only needs
// to be done once
calcByteOffsets(available,this.pointers,chunkByteOffset);// add chunk
this.available[i]=available;}// create used chunk map
this.used=new Map();// create buffer
this.buffer=gl.createBuffer();// calc total size of the buffer
var byteSize=chunkByteSize*this.numChunks;// buffer the data
gl.bindBuffer(gl.ARRAY_BUFFER,this.buffer);gl.bufferData(gl.ARRAY_BUFFER,byteSize,gl.DYNAMIC_DRAW);}/**
	 * Test whether or not a key is held in the atlas.
	 *
	 * @param {String} key - The key to test.
	 *
	 * @returns {boolean} Whether or not the coord exists in the pyramid.
	 */_createClass(VertexAtlas,[{key:'has',value:function has(key){return this.used.has(key);}/**
	 * Returns the chunk matching the provided key. If the chunk does not
	 * exist, returns undefined.
	 *
	 * @param {String} key - The key of the chunk to return.
	 *
	 * @returns {Object} The chunk object.
	 */},{key:'get',value:function get(key){return this.used.get(key);}/**
	 * Set the vertex data for the provided key.
	 *
	 * @param {String} key - The key of the vertex data.
	 * @param {Number} count - The count of vertices added.
	 * @param {ArrayBuffer} data - The vertex data.
	 */},{key:'set',value:function set(key,data,count){if(this.has(key)){throw'Tile of coord '+key+' already exists in the atlas';}if(this.available.length===0){throw'No available vertex chunks in atlas';}// get an available chunk
var chunk=this.available.pop();// update chunk count
chunk.count=count;// only actually buffer the data if there is  data
if(count>0){// buffer the data
var gl=this.gl;gl.bindBuffer(gl.ARRAY_BUFFER,this.buffer);gl.bufferSubData(gl.ARRAY_BUFFER,chunk.chunkByteOffset,data);}// add to used
this.used.set(key,chunk);}/**
	 * Flags the chunk matching the provided key as unused in the atlas.
	 *
	 * @param {String} key - The key of the chunk to free.
	 *
	 * @returns {VertexAtlas} The VertexAtlas object, for chaining.
	 */},{key:'delete',value:function _delete(key){if(!this.has(key)){throw'Tile of coord '+key+' does not exist in the atlas';}// get chunk
var chunk=this.used.get(key);// remove from used
this.used.delete(key);// add to available
this.available.push(chunk);return this;}/**
	 * Binds the vertex atlas and activates the attribute arrays.
	 *
	 * @returns {VertexAtlas} The VertexAtlas object, for chaining.
	 */},{key:'bind',value:function bind(){var gl=this.gl;// bind the buffer
gl.bindBuffer(gl.ARRAY_BUFFER,this.buffer);// for each attribute pointer
this.pointers.forEach(function(pointer,index){// enable attribute index
gl.enableVertexAttribArray(index);// set attribute pointer
gl.vertexAttribPointer(index,pointer.size,gl[pointer.type],false,pointer.byteStride,pointer.byteOffset);});return this;}/**
	 * Binds the vertex atlas and activates the attribute arrays for
	 * instancing.
	 *
	 * @returns {VertexAtlas} The VertexAtlas object, for chaining.
	 */},{key:'bindInstanced',value:function bindInstanced(){var gl=this.gl;var ext=this.ext;// bind the buffer
gl.bindBuffer(gl.ARRAY_BUFFER,this.buffer);// for each attribute pointer
this.pointers.forEach(function(pointer,index){// enable attribute index
gl.enableVertexAttribArray(index);// enable instancing this attribute
ext.vertexAttribDivisorANGLE(index,1);});return this;}/**
	 * Unbinds the vertex atlas and disables the vertex arrays.
	 *
	 * @returns {VertexAtlas} The VertexAtlas object, for chaining.
	 */},{key:'unbind',value:function unbind(){var gl=this.gl;// for each attribute pointer
this.pointers.forEach(function(pointer,index){// disable attribute index
gl.disableVertexAttribArray(index);});return this;}/**
	 * Unbinds the vertex atlas and disables the vertex arrays for
	 * instancing.
	 *
	 * @returns {VertexAtlas} The VertexAtlas object, for chaining.
	 */},{key:'unbindInstanced',value:function unbindInstanced(){var gl=this.gl;var ext=this.ext;// for each attribute pointer
this.pointers.forEach(function(pointer,index){// disable attribute index
gl.disableVertexAttribArray(index);// disable instancing this attribute
ext.vertexAttribDivisorANGLE(index,0);});return this;}},{key:'draw',value:function draw(key,mode){var offset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var count=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;if(!this.has(key)){throw'Tile of coord '+key+' does not exist in the atlas';}var gl=this.gl;var chunk=this.used.get(key);// only actually draw if count > 0
if(chunk.count>0){// draw the chunk
gl.drawArrays(gl[mode],chunk.chunkOffset+offset,count?count:chunk.count);}}},{key:'drawInstanced',value:function drawInstanced(key,mode,count){if(!this.has(key)){throw'Tile of coord '+key+' does not exist in the atlas';}var gl=this.gl;var ext=this.ext;var chunk=this.used.get(key);// for each attribute pointer
this.pointers.forEach(function(pointer,index){// set attribute pointer
gl.vertexAttribPointer(index,pointer.size,gl[pointer.type],false,pointer.byteStride,chunk.byteOffsets[index]);});// only actually draw if count > 0
if(chunk.count>0){// draw the bound vertex array
ext.drawArraysInstancedANGLE(gl[mode],0,count,chunk.count);}}}]);return VertexAtlas;}();module.exports=VertexAtlas;

},{"lodash/defaultTo":107,"lodash/forIn":109}],188:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var defaultTo=require('lodash/defaultTo');var forIn=require('lodash/forIn');// Constants
var BYTES_PER_TYPE={BYTE:1,UNSIGNED_BYTE:1,SHORT:2,UNSIGNED_SHORT:2,FIXED:4,FLOAT:4};// Private Methods
var getStride=function getStride(pointers){// if there is only one attribute pointer assigned to this buffer,
// there is no need for stride, set to default of 0
if(pointers.size===1){return 0;}var maxByteOffset=0;var byteSizeSum=0;var byteStride=0;pointers.forEach(function(pointer){var byteOffset=pointer.byteOffset;var size=pointer.size;var type=pointer.type;// track the sum of each attribute size
byteSizeSum+=size*BYTES_PER_TYPE[type];// track the largest offset to determine the byte stride of the buffer
if(byteOffset>maxByteOffset){maxByteOffset=byteOffset;byteStride=byteOffset+size*BYTES_PER_TYPE[type];}});// check if the max byte offset is greater than or equal to the the sum
// of the sizes. If so this buffer is not interleaved and does not need
// a stride.
if(maxByteOffset>=byteSizeSum){// TODO: test what stride === 0 does for an interleaved buffer of
// length === 1.
return 0;}return byteStride;};var getAttributePointers=function getAttributePointers(attributePointers){// parse pointers to ensure they are valid
var pointers=new Map();forIn(attributePointers,function(pointer,key){// parse index from string to int
var index=parseInt(key,10);// ensure byte offset exists
pointer.byteOffset=defaultTo(pointer.byteOffset,0);// add to map
pointers.set(index,pointer);});return pointers;};/**
 * @class VertexBuffer
 * @classdesc A vertex buffer object.
 */var VertexBuffer=function(){/**
	 * Instantiates an VertexBuffer object.
	 *
	 * @param {WebGLRenderingContext} gl - The WebGL context.
	 * @param {WebGLBuffer|ArrayBuffer|Number} arg - The buffer or length of the buffer.
	 * @param {Object} pointers - The array pointer map.
	 * @param {Object} options - The vertex buffer options.
	 * @param {String} options.mode - The draw mode / primitive type.
	 * @param {String} options.indexOffset - The index offset into the drawn buffer.
	 * @param {String} options.count - The number of indices to draw.
	 */function VertexBuffer(gl,arg){var pointers=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};_classCallCheck(this,VertexBuffer);this.gl=gl;this.mode=defaultTo(options.mode,'TRIANGLES');this.count=defaultTo(options.count,0);this.indexOffset=defaultTo(options.indexOffset,0);// first, set the attribute pointers
this.pointers=getAttributePointers(pointers);// set the byte stride
this.byteStride=getStride(this.pointers);// create buffer
if(arg instanceof WebGLBuffer){this.buffer=arg;}else{this.buffer=gl.createBuffer();if(arg){// buffer the data
this.bufferData(arg);}}}/**
	 * Upload vertex data to the GPU.
	 *
	 * @param {ArrayBuffer|Number} arg - The array of data to buffer, or size of the buffer in bytes.
	 *
	 * @return {VertexBuffer} The vertex buffer object, for chaining.
	 */_createClass(VertexBuffer,[{key:'bufferData',value:function bufferData(arg){var gl=this.gl;gl.bindBuffer(gl.ARRAY_BUFFER,this.buffer);gl.bufferData(gl.ARRAY_BUFFER,arg,gl.STATIC_DRAW);}/**
	 * Upload partial vertex data to the GPU.
	 *
	 * @param {ArrayBuffer} array - The array of data to buffer.
	 * @param {Number} byteOffset - The byte offset at which to buffer.
	 *
	 * @return {VertexBuffer} The vertex buffer object, for chaining.
	 */},{key:'bufferSubData',value:function bufferSubData(array){var byteOffset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var gl=this.gl;gl.bindBuffer(gl.ARRAY_BUFFER,this.buffer);gl.bufferSubData(gl.ARRAY_BUFFER,byteOffset,array);return this;}/**
	 * Binds the vertex buffer object.
	 *
	 * @return {VertexBuffer} - Returns the vertex buffer object for chaining.
	 */},{key:'bind',value:function bind(){var _this=this;var gl=this.gl;// bind buffer
gl.bindBuffer(gl.ARRAY_BUFFER,this.buffer);// for each attribute pointer
this.pointers.forEach(function(pointer,index){// set attribute pointer
gl.vertexAttribPointer(index,pointer.size,gl[pointer.type],false,_this.byteStride,pointer.byteOffset);// enable attribute index
gl.enableVertexAttribArray(index);});return this;}/**
	 * Unbinds the vertex buffer object.
	 *
	 * @return {VertexBuffer} The vertex buffer object, for chaining.
	 */},{key:'unbind',value:function unbind(){var gl=this.gl;this.pointers.forEach(function(pointer,index){// disable attribute index
gl.disableVertexAttribArray(index);});return this;}/**
	 * Execute the draw command for the bound buffer.
	 *
	 * @return {VertexBuffer} The vertex buffer object, for chaining.
	 */},{key:'draw',value:function draw(){var gl=this.gl;gl.drawArrays(gl[this.mode],this.indexOffset,this.count);return this;}}]);return VertexBuffer;}();module.exports=VertexBuffer;

},{"lodash/defaultTo":107,"lodash/forIn":109}],189:[function(require,module,exports){
'use strict';/**
 * Issues a XHR and loads an ArrayBuffer.
 *
 * @param {String} url - The url.
 * @param {Function} done - The callback.
 */module.exports=function(url,done){var req=new XMLHttpRequest();req.open('GET',url,true);req.responseType='arraybuffer';req.onload=function(){var arraybuffer=req.response;if(arraybuffer){done(null,arraybuffer);}else{var err='Unable to load ArrayBuffer from URL: `'+event.path[0].currentSrc+'`';done(err,null);}};req.onerror=function(event){var err='Unable to load ArrayBuffer from URL: `'+event.path[0].currentSrc+'`';done(err,null);};req.withCredentials=true;req.send(null);};

},{}],190:[function(require,module,exports){
'use strict';/**
 * Issues a XHR and loads an Image.
 *
 * @param {String} url - The url.
 * @param {Function} done - The callback.
 */module.exports=function(url,done){var image=new Image();image.onload=function(){done(null,image);};image.onerror=function(event){var err='Unable to load image from URL: `'+event.path[0].currentSrc+'`';done(err,null);};image.crossOrigin='anonymous';image.src=url;};

},{}],191:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
function EventEmitter(){this._events=this._events||{};this._maxListeners=this._maxListeners||undefined;}module.exports=EventEmitter;// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners=10;// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||n<0||isNaN(n))throw TypeError('n must be a positive number');this._maxListeners=n;return this;};EventEmitter.prototype.emit=function(type){var er,handler,len,args,i,listeners;if(!this._events)this._events={};// If there is no 'error' event listener then throw.
if(type==='error'){if(!this._events.error||isObject(this._events.error)&&!this._events.error.length){er=arguments[1];if(er instanceof Error){throw er;// Unhandled 'error' event
}else{// At least give some kind of context to the user
var err=new Error('Uncaught, unspecified "error" event. ('+er+')');err.context=er;throw err;}}}handler=this._events[type];if(isUndefined(handler))return false;if(isFunction(handler)){switch(arguments.length){// fast cases
case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;// slower
default:args=Array.prototype.slice.call(arguments,1);handler.apply(this,args);}}else if(isObject(handler)){args=Array.prototype.slice.call(arguments,1);listeners=handler.slice();len=listeners.length;for(i=0;i<len;i++){listeners[i].apply(this,args);}}return true;};EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events)this._events={};// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(this._events.newListener)this.emit('newListener',type,isFunction(listener.listener)?listener.listener:listener);if(!this._events[type])// Optimize the case of one listener. Don't need the extra array object.
this._events[type]=listener;else if(isObject(this._events[type]))// If we've already got an array, just append.
this._events[type].push(listener);else// Adding the second element, need to change to array.
this._events[type]=[this._events[type],listener];// Check for listener leak
if(isObject(this._events[type])&&!this._events[type].warned){if(!isUndefined(this._maxListeners)){m=this._maxListeners;}else{m=EventEmitter.defaultMaxListeners;}if(m&&m>0&&this._events[type].length>m){this._events[type].warned=true;console.error('(node) warning: possible EventEmitter memory '+'leak detected. %d listeners added. '+'Use emitter.setMaxListeners() to increase limit.',this._events[type].length);if(typeof console.trace==='function'){// not supported in IE 10
console.trace();}}}return this;};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.once=function(type,listener){if(!isFunction(listener))throw TypeError('listener must be a function');var fired=false;function g(){this.removeListener(type,g);if(!fired){fired=true;listener.apply(this,arguments);}}g.listener=listener;this.on(type,g);return this;};// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i;if(!isFunction(listener))throw TypeError('listener must be a function');if(!this._events||!this._events[type])return this;list=this._events[type];length=list.length;position=-1;if(list===listener||isFunction(list.listener)&&list.listener===listener){delete this._events[type];if(this._events.removeListener)this.emit('removeListener',type,listener);}else if(isObject(list)){for(i=length;i-->0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){position=i;break;}}if(position<0)return this;if(list.length===1){list.length=0;delete this._events[type];}else{list.splice(position,1);}if(this._events.removeListener)this.emit('removeListener',type,listener);}return this;};EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;// not listening for removeListener, no need to emit
if(!this._events.removeListener){if(arguments.length===0)this._events={};else if(this._events[type])delete this._events[type];return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){for(key in this._events){if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events={};return this;}listeners=this._events[type];if(isFunction(listeners)){this.removeListener(type,listeners);}else if(listeners){// LIFO order
while(listeners.length){this.removeListener(type,listeners[listeners.length-1]);}}delete this._events[type];return this;};EventEmitter.prototype.listeners=function(type){var ret;if(!this._events||!this._events[type])ret=[];else if(isFunction(this._events[type]))ret=[this._events[type]];else ret=this._events[type].slice();return ret;};EventEmitter.prototype.listenerCount=function(type){if(this._events){var evlistener=this._events[type];if(isFunction(evlistener))return 1;else if(evlistener)return evlistener.length;}return 0;};EventEmitter.listenerCount=function(emitter,type){return emitter.listenerCount(type);};function isFunction(arg){return typeof arg==='function';}function isNumber(arg){return typeof arg==='number';}function isObject(arg){return(typeof arg==='undefined'?'undefined':_typeof(arg))==='object'&&arg!==null;}function isUndefined(arg){return arg===void 0;}

},{}],192:[function(require,module,exports){
"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */(function(global,factory){"use strict";if((typeof module==="undefined"?"undefined":_typeof(module))==="object"&&_typeof(module.exports)==="object"){// For CommonJS and CommonJS-like environments where a proper `window`
// is present, execute the factory and get jQuery.
// For environments that do not have a `window` with a `document`
// (such as Node.js), expose a factory as module.exports.
// This accentuates the need for the creation of a real `window`.
// e.g. var jQuery = require("jquery")(window);
// See ticket #14549 for more info.
module.exports=global.document?factory(global,true):function(w){if(!w.document){throw new Error("jQuery requires a window with a document");}return factory(w);};}else{factory(global);}// Pass this if window is not defined yet
})(typeof window!=="undefined"?window:undefined,function(window,noGlobal){// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";var arr=[];var document=window.document;var getProto=Object.getPrototypeOf;var _slice=arr.slice;var concat=arr.concat;var push=arr.push;var indexOf=arr.indexOf;var class2type={};var toString=class2type.toString;var hasOwn=class2type.hasOwnProperty;var fnToString=hasOwn.toString;var ObjectFunctionString=fnToString.call(Object);var support={};function DOMEval(code,doc){doc=doc||document;var script=doc.createElement("script");script.text=code;doc.head.appendChild(script).parentNode.removeChild(script);}/* global Symbol */// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module
var version="3.1.1",// Define a local copy of jQuery
jQuery=function jQuery(selector,context){// The jQuery object is actually just the init constructor 'enhanced'
// Need init if jQuery is called (just allow error to be thrown if not included)
return new jQuery.fn.init(selector,context);},// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
rtrim=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,// Matches dashed string for camelizing
rmsPrefix=/^-ms-/,rdashAlpha=/-([a-z])/g,// Used by jQuery.camelCase as callback to replace()
fcamelCase=function fcamelCase(all,letter){return letter.toUpperCase();};jQuery.fn=jQuery.prototype={// The current version of jQuery being used
jquery:version,constructor:jQuery,// The default length of a jQuery object is 0
length:0,toArray:function toArray(){return _slice.call(this);},// Get the Nth element in the matched element set OR
// Get the whole matched element set as a clean array
get:function get(num){// Return all the elements in a clean array
if(num==null){return _slice.call(this);}// Return just the one element from the set
return num<0?this[num+this.length]:this[num];},// Take an array of elements and push it onto the stack
// (returning the new matched element set)
pushStack:function pushStack(elems){// Build a new jQuery matched element set
var ret=jQuery.merge(this.constructor(),elems);// Add the old object onto the stack (as a reference)
ret.prevObject=this;// Return the newly-formed element set
return ret;},// Execute a callback for every element in the matched set.
each:function each(callback){return jQuery.each(this,callback);},map:function map(callback){return this.pushStack(jQuery.map(this,function(elem,i){return callback.call(elem,i,elem);}));},slice:function slice(){return this.pushStack(_slice.apply(this,arguments));},first:function first(){return this.eq(0);},last:function last(){return this.eq(-1);},eq:function eq(i){var len=this.length,j=+i+(i<0?len:0);return this.pushStack(j>=0&&j<len?[this[j]]:[]);},end:function end(){return this.prevObject||this.constructor();},// For internal use only.
// Behaves like an Array's method, not like a jQuery method.
push:push,sort:arr.sort,splice:arr.splice};jQuery.extend=jQuery.fn.extend=function(){var options,name,src,copy,copyIsArray,clone,target=arguments[0]||{},i=1,length=arguments.length,deep=false;// Handle a deep copy situation
if(typeof target==="boolean"){deep=target;// Skip the boolean and the target
target=arguments[i]||{};i++;}// Handle case when target is a string or something (possible in deep copy)
if((typeof target==="undefined"?"undefined":_typeof(target))!=="object"&&!jQuery.isFunction(target)){target={};}// Extend jQuery itself if only one argument is passed
if(i===length){target=this;i--;}for(;i<length;i++){// Only deal with non-null/undefined values
if((options=arguments[i])!=null){// Extend the base object
for(name in options){src=target[name];copy=options[name];// Prevent never-ending loop
if(target===copy){continue;}// Recurse if we're merging plain objects or arrays
if(deep&&copy&&(jQuery.isPlainObject(copy)||(copyIsArray=jQuery.isArray(copy)))){if(copyIsArray){copyIsArray=false;clone=src&&jQuery.isArray(src)?src:[];}else{clone=src&&jQuery.isPlainObject(src)?src:{};}// Never move original objects, clone them
target[name]=jQuery.extend(deep,clone,copy);// Don't bring in undefined values
}else if(copy!==undefined){target[name]=copy;}}}}// Return the modified object
return target;};jQuery.extend({// Unique for each copy of jQuery on the page
expando:"jQuery"+(version+Math.random()).replace(/\D/g,""),// Assume jQuery is ready without the ready module
isReady:true,error:function error(msg){throw new Error(msg);},noop:function noop(){},isFunction:function isFunction(obj){return jQuery.type(obj)==="function";},isArray:Array.isArray,isWindow:function isWindow(obj){return obj!=null&&obj===obj.window;},isNumeric:function isNumeric(obj){// As of jQuery 3.0, isNumeric is limited to
// strings and numbers (primitives or objects)
// that can be coerced to finite numbers (gh-2662)
var type=jQuery.type(obj);return(type==="number"||type==="string")&&// parseFloat NaNs numeric-cast false positives ("")
// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
// subtraction forces infinities to NaN
!isNaN(obj-parseFloat(obj));},isPlainObject:function isPlainObject(obj){var proto,Ctor;// Detect obvious negatives
// Use toString instead of jQuery.type to catch host objects
if(!obj||toString.call(obj)!=="[object Object]"){return false;}proto=getProto(obj);// Objects with no prototype (e.g., `Object.create( null )`) are plain
if(!proto){return true;}// Objects with prototype are plain iff they were constructed by a global Object function
Ctor=hasOwn.call(proto,"constructor")&&proto.constructor;return typeof Ctor==="function"&&fnToString.call(Ctor)===ObjectFunctionString;},isEmptyObject:function isEmptyObject(obj){/* eslint-disable no-unused-vars */// See https://github.com/eslint/eslint/issues/6125
var name;for(name in obj){return false;}return true;},type:function type(obj){if(obj==null){return obj+"";}// Support: Android <=2.3 only (functionish RegExp)
return(typeof obj==="undefined"?"undefined":_typeof(obj))==="object"||typeof obj==="function"?class2type[toString.call(obj)]||"object":typeof obj==="undefined"?"undefined":_typeof(obj);},// Evaluates a script in a global context
globalEval:function globalEval(code){DOMEval(code);},// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 13
// Microsoft forgot to hump their vendor prefix (#9572)
camelCase:function camelCase(string){return string.replace(rmsPrefix,"ms-").replace(rdashAlpha,fcamelCase);},nodeName:function nodeName(elem,name){return elem.nodeName&&elem.nodeName.toLowerCase()===name.toLowerCase();},each:function each(obj,callback){var length,i=0;if(isArrayLike(obj)){length=obj.length;for(;i<length;i++){if(callback.call(obj[i],i,obj[i])===false){break;}}}else{for(i in obj){if(callback.call(obj[i],i,obj[i])===false){break;}}}return obj;},// Support: Android <=4.0 only
trim:function trim(text){return text==null?"":(text+"").replace(rtrim,"");},// results is for internal usage only
makeArray:function makeArray(arr,results){var ret=results||[];if(arr!=null){if(isArrayLike(Object(arr))){jQuery.merge(ret,typeof arr==="string"?[arr]:arr);}else{push.call(ret,arr);}}return ret;},inArray:function inArray(elem,arr,i){return arr==null?-1:indexOf.call(arr,elem,i);},// Support: Android <=4.0 only, PhantomJS 1 only
// push.apply(_, arraylike) throws on ancient WebKit
merge:function merge(first,second){var len=+second.length,j=0,i=first.length;for(;j<len;j++){first[i++]=second[j];}first.length=i;return first;},grep:function grep(elems,callback,invert){var callbackInverse,matches=[],i=0,length=elems.length,callbackExpect=!invert;// Go through the array, only saving the items
// that pass the validator function
for(;i<length;i++){callbackInverse=!callback(elems[i],i);if(callbackInverse!==callbackExpect){matches.push(elems[i]);}}return matches;},// arg is for internal usage only
map:function map(elems,callback,arg){var length,value,i=0,ret=[];// Go through the array, translating each of the items to their new values
if(isArrayLike(elems)){length=elems.length;for(;i<length;i++){value=callback(elems[i],i,arg);if(value!=null){ret.push(value);}}// Go through every key on the object,
}else{for(i in elems){value=callback(elems[i],i,arg);if(value!=null){ret.push(value);}}}// Flatten any nested arrays
return concat.apply([],ret);},// A global GUID counter for objects
guid:1,// Bind a function to a context, optionally partially applying any
// arguments.
proxy:function proxy(fn,context){var tmp,args,proxy;if(typeof context==="string"){tmp=fn[context];context=fn;fn=tmp;}// Quick check to determine if target is callable, in the spec
// this throws a TypeError, but we will just return undefined.
if(!jQuery.isFunction(fn)){return undefined;}// Simulated bind
args=_slice.call(arguments,2);proxy=function proxy(){return fn.apply(context||this,args.concat(_slice.call(arguments)));};// Set the guid of unique handler to the same of original handler, so it can be removed
proxy.guid=fn.guid=fn.guid||jQuery.guid++;return proxy;},now:Date.now,// jQuery.support is not used in Core but other projects attach their
// properties to it so it needs to exist.
support:support});if(typeof Symbol==="function"){jQuery.fn[Symbol.iterator]=arr[Symbol.iterator];}// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(i,name){class2type["[object "+name+"]"]=name.toLowerCase();});function isArrayLike(obj){// Support: real iOS 8.2 only (not reproducible in simulator)
// `in` check used to prevent JIT error (gh-2145)
// hasOwn isn't used here due to false negatives
// regarding Nodelist length in IE
var length=!!obj&&"length"in obj&&obj.length,type=jQuery.type(obj);if(type==="function"||jQuery.isWindow(obj)){return false;}return type==="array"||length===0||typeof length==="number"&&length>0&&length-1 in obj;}var Sizzle=/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */function(window){var i,support,Expr,getText,isXML,tokenize,compile,select,outermostContext,sortInput,hasDuplicate,// Local document vars
setDocument,document,docElem,documentIsHTML,rbuggyQSA,rbuggyMatches,matches,contains,// Instance-specific data
expando="sizzle"+1*new Date(),preferredDoc=window.document,dirruns=0,done=0,classCache=createCache(),tokenCache=createCache(),compilerCache=createCache(),sortOrder=function sortOrder(a,b){if(a===b){hasDuplicate=true;}return 0;},// Instance methods
hasOwn={}.hasOwnProperty,arr=[],pop=arr.pop,push_native=arr.push,push=arr.push,slice=arr.slice,// Use a stripped-down indexOf as it's faster than native
// https://jsperf.com/thor-indexof-vs-for/5
indexOf=function indexOf(list,elem){var i=0,len=list.length;for(;i<len;i++){if(list[i]===elem){return i;}}return-1;},booleans="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",// Regular expressions
// http://www.w3.org/TR/css3-selectors/#whitespace
whitespace="[\\x20\\t\\r\\n\\f]",// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
identifier="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
attributes="\\["+whitespace+"*("+identifier+")(?:"+whitespace+// Operator (capture 2)
"*([*^$|!~]?=)"+whitespace+// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+identifier+"))|)"+whitespace+"*\\]",pseudos=":("+identifier+")(?:\\(("+// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
// 1. quoted (capture 3; capture 4 or capture 5)
"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+// 2. simple (capture 6)
"((?:\\\\.|[^\\\\()[\\]]|"+attributes+")*)|"+// 3. anything else (capture 2)
".*"+")\\)|)",// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
rwhitespace=new RegExp(whitespace+"+","g"),rtrim=new RegExp("^"+whitespace+"+|((?:^|[^\\\\])(?:\\\\.)*)"+whitespace+"+$","g"),rcomma=new RegExp("^"+whitespace+"*,"+whitespace+"*"),rcombinators=new RegExp("^"+whitespace+"*([>+~]|"+whitespace+")"+whitespace+"*"),rattributeQuotes=new RegExp("="+whitespace+"*([^\\]'\"]*?)"+whitespace+"*\\]","g"),rpseudo=new RegExp(pseudos),ridentifier=new RegExp("^"+identifier+"$"),matchExpr={"ID":new RegExp("^#("+identifier+")"),"CLASS":new RegExp("^\\.("+identifier+")"),"TAG":new RegExp("^("+identifier+"|[*])"),"ATTR":new RegExp("^"+attributes),"PSEUDO":new RegExp("^"+pseudos),"CHILD":new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+whitespace+"*(even|odd|(([+-]|)(\\d*)n|)"+whitespace+"*(?:([+-]|)"+whitespace+"*(\\d+)|))"+whitespace+"*\\)|)","i"),"bool":new RegExp("^(?:"+booleans+")$","i"),// For use in libraries implementing .is()
// We use this for POS matching in `select`
"needsContext":new RegExp("^"+whitespace+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+whitespace+"*((?:-\\d)?\\d*)"+whitespace+"*\\)|)(?=[^-]|$)","i")},rinputs=/^(?:input|select|textarea|button)$/i,rheader=/^h\d$/i,rnative=/^[^{]+\{\s*\[native \w/,// Easily-parseable/retrievable ID or TAG or CLASS selectors
rquickExpr=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,rsibling=/[+~]/,// CSS escapes
// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
runescape=new RegExp("\\\\([\\da-f]{1,6}"+whitespace+"?|("+whitespace+")|.)","ig"),funescape=function funescape(_,escaped,escapedWhitespace){var high="0x"+escaped-0x10000;// NaN means non-codepoint
// Support: Firefox<24
// Workaround erroneous numeric interpretation of +"0x"
return high!==high||escapedWhitespace?escaped:high<0?// BMP codepoint
String.fromCharCode(high+0x10000):// Supplemental Plane codepoint (surrogate pair)
String.fromCharCode(high>>10|0xD800,high&0x3FF|0xDC00);},// CSS string/identifier serialization
// https://drafts.csswg.org/cssom/#common-serializing-idioms
rcssescape=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,fcssescape=function fcssescape(ch,asCodePoint){if(asCodePoint){// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
if(ch==="\0"){return"\uFFFD";}// Control characters and (dependent upon position) numbers get escaped as code points
return ch.slice(0,-1)+"\\"+ch.charCodeAt(ch.length-1).toString(16)+" ";}// Other potentially-special ASCII characters get backslash-escaped
return"\\"+ch;},// Used for iframes
// See setDocument()
// Removing the function wrapper causes a "Permission Denied"
// error in IE
unloadHandler=function unloadHandler(){setDocument();},disabledAncestor=addCombinator(function(elem){return elem.disabled===true&&("form"in elem||"label"in elem);},{dir:"parentNode",next:"legend"});// Optimize for push.apply( _, NodeList )
try{push.apply(arr=slice.call(preferredDoc.childNodes),preferredDoc.childNodes);// Support: Android<4.0
// Detect silently failing push.apply
arr[preferredDoc.childNodes.length].nodeType;}catch(e){push={apply:arr.length?// Leverage slice if possible
function(target,els){push_native.apply(target,slice.call(els));}:// Support: IE<9
// Otherwise append directly
function(target,els){var j=target.length,i=0;// Can't trust NodeList.length
while(target[j++]=els[i++]){}target.length=j-1;}};}function Sizzle(selector,context,results,seed){var m,i,elem,nid,match,groups,newSelector,newContext=context&&context.ownerDocument,// nodeType defaults to 9, since context defaults to document
nodeType=context?context.nodeType:9;results=results||[];// Return early from calls with invalid selector or context
if(typeof selector!=="string"||!selector||nodeType!==1&&nodeType!==9&&nodeType!==11){return results;}// Try to shortcut find operations (as opposed to filters) in HTML documents
if(!seed){if((context?context.ownerDocument||context:preferredDoc)!==document){setDocument(context);}context=context||document;if(documentIsHTML){// If the selector is sufficiently simple, try using a "get*By*" DOM method
// (excepting DocumentFragment context, where the methods don't exist)
if(nodeType!==11&&(match=rquickExpr.exec(selector))){// ID selector
if(m=match[1]){// Document context
if(nodeType===9){if(elem=context.getElementById(m)){// Support: IE, Opera, Webkit
// TODO: identify versions
// getElementById can match elements by name instead of ID
if(elem.id===m){results.push(elem);return results;}}else{return results;}// Element context
}else{// Support: IE, Opera, Webkit
// TODO: identify versions
// getElementById can match elements by name instead of ID
if(newContext&&(elem=newContext.getElementById(m))&&contains(context,elem)&&elem.id===m){results.push(elem);return results;}}// Type selector
}else if(match[2]){push.apply(results,context.getElementsByTagName(selector));return results;// Class selector
}else if((m=match[3])&&support.getElementsByClassName&&context.getElementsByClassName){push.apply(results,context.getElementsByClassName(m));return results;}}// Take advantage of querySelectorAll
if(support.qsa&&!compilerCache[selector+" "]&&(!rbuggyQSA||!rbuggyQSA.test(selector))){if(nodeType!==1){newContext=context;newSelector=selector;// qSA looks outside Element context, which is not what we want
// Thanks to Andrew Dupont for this workaround technique
// Support: IE <=8
// Exclude object elements
}else if(context.nodeName.toLowerCase()!=="object"){// Capture the context ID, setting it first if necessary
if(nid=context.getAttribute("id")){nid=nid.replace(rcssescape,fcssescape);}else{context.setAttribute("id",nid=expando);}// Prefix every selector in the list
groups=tokenize(selector);i=groups.length;while(i--){groups[i]="#"+nid+" "+toSelector(groups[i]);}newSelector=groups.join(",");// Expand context for sibling selectors
newContext=rsibling.test(selector)&&testContext(context.parentNode)||context;}if(newSelector){try{push.apply(results,newContext.querySelectorAll(newSelector));return results;}catch(qsaError){}finally{if(nid===expando){context.removeAttribute("id");}}}}}}// All others
return select(selector.replace(rtrim,"$1"),context,results,seed);}/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */function createCache(){var keys=[];function cache(key,value){// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
if(keys.push(key+" ")>Expr.cacheLength){// Only keep the most recent entries
delete cache[keys.shift()];}return cache[key+" "]=value;}return cache;}/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */function markFunction(fn){fn[expando]=true;return fn;}/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */function assert(fn){var el=document.createElement("fieldset");try{return!!fn(el);}catch(e){return false;}finally{// Remove from its parent by default
if(el.parentNode){el.parentNode.removeChild(el);}// release memory in IE
el=null;}}/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */function addHandle(attrs,handler){var arr=attrs.split("|"),i=arr.length;while(i--){Expr.attrHandle[arr[i]]=handler;}}/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */function siblingCheck(a,b){var cur=b&&a,diff=cur&&a.nodeType===1&&b.nodeType===1&&a.sourceIndex-b.sourceIndex;// Use IE sourceIndex if available on both nodes
if(diff){return diff;}// Check if b follows a
if(cur){while(cur=cur.nextSibling){if(cur===b){return-1;}}}return a?1:-1;}/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */function createInputPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return name==="input"&&elem.type===type;};}/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */function createButtonPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return(name==="input"||name==="button")&&elem.type===type;};}/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */function createDisabledPseudo(disabled){// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
return function(elem){// Only certain elements can match :enabled or :disabled
// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
if("form"in elem){// Check for inherited disabledness on relevant non-disabled elements:
// * listed form-associated elements in a disabled fieldset
//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
// * option elements in a disabled optgroup
//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
// All such elements have a "form" property.
if(elem.parentNode&&elem.disabled===false){// Option elements defer to a parent optgroup if present
if("label"in elem){if("label"in elem.parentNode){return elem.parentNode.disabled===disabled;}else{return elem.disabled===disabled;}}// Support: IE 6 - 11
// Use the isDisabled shortcut property to check for disabled fieldset ancestors
return elem.isDisabled===disabled||// Where there is no isDisabled, check manually
/* jshint -W018 */elem.isDisabled!==!disabled&&disabledAncestor(elem)===disabled;}return elem.disabled===disabled;// Try to winnow out elements that can't be disabled before trusting the disabled property.
// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
// even exist on them, let alone have a boolean value.
}else if("label"in elem){return elem.disabled===disabled;}// Remaining elements are neither :enabled nor :disabled
return false;};}/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */function createPositionalPseudo(fn){return markFunction(function(argument){argument=+argument;return markFunction(function(seed,matches){var j,matchIndexes=fn([],seed.length,argument),i=matchIndexes.length;// Match elements found at the specified indexes
while(i--){if(seed[j=matchIndexes[i]]){seed[j]=!(matches[j]=seed[j]);}}});});}/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */function testContext(context){return context&&typeof context.getElementsByTagName!=="undefined"&&context;}// Expose support vars for convenience
support=Sizzle.support={};/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */isXML=Sizzle.isXML=function(elem){// documentElement is verified for cases where it doesn't yet exist
// (such as loading iframes in IE - #4833)
var documentElement=elem&&(elem.ownerDocument||elem).documentElement;return documentElement?documentElement.nodeName!=="HTML":false;};/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */setDocument=Sizzle.setDocument=function(node){var hasCompare,subWindow,doc=node?node.ownerDocument||node:preferredDoc;// Return early if doc is invalid or already selected
if(doc===document||doc.nodeType!==9||!doc.documentElement){return document;}// Update global variables
document=doc;docElem=document.documentElement;documentIsHTML=!isXML(document);// Support: IE 9-11, Edge
// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
if(preferredDoc!==document&&(subWindow=document.defaultView)&&subWindow.top!==subWindow){// Support: IE 11, Edge
if(subWindow.addEventListener){subWindow.addEventListener("unload",unloadHandler,false);// Support: IE 9 - 10 only
}else if(subWindow.attachEvent){subWindow.attachEvent("onunload",unloadHandler);}}/* Attributes
	---------------------------------------------------------------------- */// Support: IE<8
// Verify that getAttribute really returns attributes and not properties
// (excepting IE8 booleans)
support.attributes=assert(function(el){el.className="i";return!el.getAttribute("className");});/* getElement(s)By*
	---------------------------------------------------------------------- */// Check if getElementsByTagName("*") returns only elements
support.getElementsByTagName=assert(function(el){el.appendChild(document.createComment(""));return!el.getElementsByTagName("*").length;});// Support: IE<9
support.getElementsByClassName=rnative.test(document.getElementsByClassName);// Support: IE<10
// Check if getElementById returns elements by name
// The broken getElementById methods don't pick up programmatically-set names,
// so use a roundabout getElementsByName test
support.getById=assert(function(el){docElem.appendChild(el).id=expando;return!document.getElementsByName||!document.getElementsByName(expando).length;});// ID filter and find
if(support.getById){Expr.filter["ID"]=function(id){var attrId=id.replace(runescape,funescape);return function(elem){return elem.getAttribute("id")===attrId;};};Expr.find["ID"]=function(id,context){if(typeof context.getElementById!=="undefined"&&documentIsHTML){var elem=context.getElementById(id);return elem?[elem]:[];}};}else{Expr.filter["ID"]=function(id){var attrId=id.replace(runescape,funescape);return function(elem){var node=typeof elem.getAttributeNode!=="undefined"&&elem.getAttributeNode("id");return node&&node.value===attrId;};};// Support: IE 6 - 7 only
// getElementById is not reliable as a find shortcut
Expr.find["ID"]=function(id,context){if(typeof context.getElementById!=="undefined"&&documentIsHTML){var node,i,elems,elem=context.getElementById(id);if(elem){// Verify the id attribute
node=elem.getAttributeNode("id");if(node&&node.value===id){return[elem];}// Fall back on getElementsByName
elems=context.getElementsByName(id);i=0;while(elem=elems[i++]){node=elem.getAttributeNode("id");if(node&&node.value===id){return[elem];}}}return[];}};}// Tag
Expr.find["TAG"]=support.getElementsByTagName?function(tag,context){if(typeof context.getElementsByTagName!=="undefined"){return context.getElementsByTagName(tag);// DocumentFragment nodes don't have gEBTN
}else if(support.qsa){return context.querySelectorAll(tag);}}:function(tag,context){var elem,tmp=[],i=0,// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
results=context.getElementsByTagName(tag);// Filter out possible comments
if(tag==="*"){while(elem=results[i++]){if(elem.nodeType===1){tmp.push(elem);}}return tmp;}return results;};// Class
Expr.find["CLASS"]=support.getElementsByClassName&&function(className,context){if(typeof context.getElementsByClassName!=="undefined"&&documentIsHTML){return context.getElementsByClassName(className);}};/* QSA/matchesSelector
	---------------------------------------------------------------------- */// QSA and matchesSelector support
// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
rbuggyMatches=[];// qSa(:focus) reports false when true (Chrome 21)
// We allow this because of a bug in IE8/9 that throws an error
// whenever `document.activeElement` is accessed on an iframe
// So, we allow :focus to pass through QSA all the time to avoid the IE error
// See https://bugs.jquery.com/ticket/13378
rbuggyQSA=[];if(support.qsa=rnative.test(document.querySelectorAll)){// Build QSA regex
// Regex strategy adopted from Diego Perini
assert(function(el){// Select is set to empty string on purpose
// This is to test IE's treatment of not explicitly
// setting a boolean content attribute,
// since its presence should be enough
// https://bugs.jquery.com/ticket/12359
docElem.appendChild(el).innerHTML="<a id='"+expando+"'></a>"+"<select id='"+expando+"-\r\\' msallowcapture=''>"+"<option selected=''></option></select>";// Support: IE8, Opera 11-12.16
// Nothing should be selected when empty strings follow ^= or $= or *=
// The test attribute must be unknown in Opera but "safe" for WinRT
// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
if(el.querySelectorAll("[msallowcapture^='']").length){rbuggyQSA.push("[*^$]="+whitespace+"*(?:''|\"\")");}// Support: IE8
// Boolean attributes and "value" are not treated correctly
if(!el.querySelectorAll("[selected]").length){rbuggyQSA.push("\\["+whitespace+"*(?:value|"+booleans+")");}// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
if(!el.querySelectorAll("[id~="+expando+"-]").length){rbuggyQSA.push("~=");}// Webkit/Opera - :checked should return selected option elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
// IE8 throws error here and will not see later tests
if(!el.querySelectorAll(":checked").length){rbuggyQSA.push(":checked");}// Support: Safari 8+, iOS 8+
// https://bugs.webkit.org/show_bug.cgi?id=136851
// In-page `selector#id sibling-combinator selector` fails
if(!el.querySelectorAll("a#"+expando+"+*").length){rbuggyQSA.push(".#.+[+~]");}});assert(function(el){el.innerHTML="<a href='' disabled='disabled'></a>"+"<select disabled='disabled'><option/></select>";// Support: Windows 8 Native Apps
// The type and name attributes are restricted during .innerHTML assignment
var input=document.createElement("input");input.setAttribute("type","hidden");el.appendChild(input).setAttribute("name","D");// Support: IE8
// Enforce case-sensitivity of name attribute
if(el.querySelectorAll("[name=d]").length){rbuggyQSA.push("name"+whitespace+"*[*^$|!~]?=");}// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
// IE8 throws error here and will not see later tests
if(el.querySelectorAll(":enabled").length!==2){rbuggyQSA.push(":enabled",":disabled");}// Support: IE9-11+
// IE's :disabled selector does not pick up the children of disabled fieldsets
docElem.appendChild(el).disabled=true;if(el.querySelectorAll(":disabled").length!==2){rbuggyQSA.push(":enabled",":disabled");}// Opera 10-11 does not throw on post-comma invalid pseudos
el.querySelectorAll("*,:x");rbuggyQSA.push(",.*:");});}if(support.matchesSelector=rnative.test(matches=docElem.matches||docElem.webkitMatchesSelector||docElem.mozMatchesSelector||docElem.oMatchesSelector||docElem.msMatchesSelector)){assert(function(el){// Check to see if it's possible to do matchesSelector
// on a disconnected node (IE 9)
support.disconnectedMatch=matches.call(el,"*");// This should fail with an exception
// Gecko does not error, returns false instead
matches.call(el,"[s!='']:x");rbuggyMatches.push("!=",pseudos);});}rbuggyQSA=rbuggyQSA.length&&new RegExp(rbuggyQSA.join("|"));rbuggyMatches=rbuggyMatches.length&&new RegExp(rbuggyMatches.join("|"));/* Contains
	---------------------------------------------------------------------- */hasCompare=rnative.test(docElem.compareDocumentPosition);// Element contains another
// Purposefully self-exclusive
// As in, an element does not contain itself
contains=hasCompare||rnative.test(docElem.contains)?function(a,b){var adown=a.nodeType===9?a.documentElement:a,bup=b&&b.parentNode;return a===bup||!!(bup&&bup.nodeType===1&&(adown.contains?adown.contains(bup):a.compareDocumentPosition&&a.compareDocumentPosition(bup)&16));}:function(a,b){if(b){while(b=b.parentNode){if(b===a){return true;}}}return false;};/* Sorting
	---------------------------------------------------------------------- */// Document order sorting
sortOrder=hasCompare?function(a,b){// Flag for duplicate removal
if(a===b){hasDuplicate=true;return 0;}// Sort on method existence if only one input has compareDocumentPosition
var compare=!a.compareDocumentPosition-!b.compareDocumentPosition;if(compare){return compare;}// Calculate position if both inputs belong to the same document
compare=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):// Otherwise we know they are disconnected
1;// Disconnected nodes
if(compare&1||!support.sortDetached&&b.compareDocumentPosition(a)===compare){// Choose the first element that is related to our preferred document
if(a===document||a.ownerDocument===preferredDoc&&contains(preferredDoc,a)){return-1;}if(b===document||b.ownerDocument===preferredDoc&&contains(preferredDoc,b)){return 1;}// Maintain original order
return sortInput?indexOf(sortInput,a)-indexOf(sortInput,b):0;}return compare&4?-1:1;}:function(a,b){// Exit early if the nodes are identical
if(a===b){hasDuplicate=true;return 0;}var cur,i=0,aup=a.parentNode,bup=b.parentNode,ap=[a],bp=[b];// Parentless nodes are either documents or disconnected
if(!aup||!bup){return a===document?-1:b===document?1:aup?-1:bup?1:sortInput?indexOf(sortInput,a)-indexOf(sortInput,b):0;// If the nodes are siblings, we can do a quick check
}else if(aup===bup){return siblingCheck(a,b);}// Otherwise we need full lists of their ancestors for comparison
cur=a;while(cur=cur.parentNode){ap.unshift(cur);}cur=b;while(cur=cur.parentNode){bp.unshift(cur);}// Walk down the tree looking for a discrepancy
while(ap[i]===bp[i]){i++;}return i?// Do a sibling check if the nodes have a common ancestor
siblingCheck(ap[i],bp[i]):// Otherwise nodes in our document sort first
ap[i]===preferredDoc?-1:bp[i]===preferredDoc?1:0;};return document;};Sizzle.matches=function(expr,elements){return Sizzle(expr,null,null,elements);};Sizzle.matchesSelector=function(elem,expr){// Set document vars if needed
if((elem.ownerDocument||elem)!==document){setDocument(elem);}// Make sure that attribute selectors are quoted
expr=expr.replace(rattributeQuotes,"='$1']");if(support.matchesSelector&&documentIsHTML&&!compilerCache[expr+" "]&&(!rbuggyMatches||!rbuggyMatches.test(expr))&&(!rbuggyQSA||!rbuggyQSA.test(expr))){try{var ret=matches.call(elem,expr);// IE 9's matchesSelector returns false on disconnected nodes
if(ret||support.disconnectedMatch||// As well, disconnected nodes are said to be in a document
// fragment in IE 9
elem.document&&elem.document.nodeType!==11){return ret;}}catch(e){}}return Sizzle(expr,document,null,[elem]).length>0;};Sizzle.contains=function(context,elem){// Set document vars if needed
if((context.ownerDocument||context)!==document){setDocument(context);}return contains(context,elem);};Sizzle.attr=function(elem,name){// Set document vars if needed
if((elem.ownerDocument||elem)!==document){setDocument(elem);}var fn=Expr.attrHandle[name.toLowerCase()],// Don't get fooled by Object.prototype properties (jQuery #13807)
val=fn&&hasOwn.call(Expr.attrHandle,name.toLowerCase())?fn(elem,name,!documentIsHTML):undefined;return val!==undefined?val:support.attributes||!documentIsHTML?elem.getAttribute(name):(val=elem.getAttributeNode(name))&&val.specified?val.value:null;};Sizzle.escape=function(sel){return(sel+"").replace(rcssescape,fcssescape);};Sizzle.error=function(msg){throw new Error("Syntax error, unrecognized expression: "+msg);};/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */Sizzle.uniqueSort=function(results){var elem,duplicates=[],j=0,i=0;// Unless we *know* we can detect duplicates, assume their presence
hasDuplicate=!support.detectDuplicates;sortInput=!support.sortStable&&results.slice(0);results.sort(sortOrder);if(hasDuplicate){while(elem=results[i++]){if(elem===results[i]){j=duplicates.push(i);}}while(j--){results.splice(duplicates[j],1);}}// Clear input after sorting to release objects
// See https://github.com/jquery/sizzle/pull/225
sortInput=null;return results;};/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */getText=Sizzle.getText=function(elem){var node,ret="",i=0,nodeType=elem.nodeType;if(!nodeType){// If no nodeType, this is expected to be an array
while(node=elem[i++]){// Do not traverse comment nodes
ret+=getText(node);}}else if(nodeType===1||nodeType===9||nodeType===11){// Use textContent for elements
// innerText usage removed for consistency of new lines (jQuery #11153)
if(typeof elem.textContent==="string"){return elem.textContent;}else{// Traverse its children
for(elem=elem.firstChild;elem;elem=elem.nextSibling){ret+=getText(elem);}}}else if(nodeType===3||nodeType===4){return elem.nodeValue;}// Do not include comment or processing instruction nodes
return ret;};Expr=Sizzle.selectors={// Can be adjusted by the user
cacheLength:50,createPseudo:markFunction,match:matchExpr,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{"ATTR":function ATTR(match){match[1]=match[1].replace(runescape,funescape);// Move the given value to match[3] whether quoted or unquoted
match[3]=(match[3]||match[4]||match[5]||"").replace(runescape,funescape);if(match[2]==="~="){match[3]=" "+match[3]+" ";}return match.slice(0,4);},"CHILD":function CHILD(match){/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/match[1]=match[1].toLowerCase();if(match[1].slice(0,3)==="nth"){// nth-* requires argument
if(!match[3]){Sizzle.error(match[0]);}// numeric x and y parameters for Expr.filter.CHILD
// remember that false/true cast respectively to 0/1
match[4]=+(match[4]?match[5]+(match[6]||1):2*(match[3]==="even"||match[3]==="odd"));match[5]=+(match[7]+match[8]||match[3]==="odd");// other types prohibit arguments
}else if(match[3]){Sizzle.error(match[0]);}return match;},"PSEUDO":function PSEUDO(match){var excess,unquoted=!match[6]&&match[2];if(matchExpr["CHILD"].test(match[0])){return null;}// Accept quoted arguments as-is
if(match[3]){match[2]=match[4]||match[5]||"";// Strip excess characters from unquoted arguments
}else if(unquoted&&rpseudo.test(unquoted)&&(// Get excess from tokenize (recursively)
excess=tokenize(unquoted,true))&&(// advance to the next closing parenthesis
excess=unquoted.indexOf(")",unquoted.length-excess)-unquoted.length)){// excess is a negative index
match[0]=match[0].slice(0,excess);match[2]=unquoted.slice(0,excess);}// Return only captures needed by the pseudo filter method (type and argument)
return match.slice(0,3);}},filter:{"TAG":function TAG(nodeNameSelector){var nodeName=nodeNameSelector.replace(runescape,funescape).toLowerCase();return nodeNameSelector==="*"?function(){return true;}:function(elem){return elem.nodeName&&elem.nodeName.toLowerCase()===nodeName;};},"CLASS":function CLASS(className){var pattern=classCache[className+" "];return pattern||(pattern=new RegExp("(^|"+whitespace+")"+className+"("+whitespace+"|$)"))&&classCache(className,function(elem){return pattern.test(typeof elem.className==="string"&&elem.className||typeof elem.getAttribute!=="undefined"&&elem.getAttribute("class")||"");});},"ATTR":function ATTR(name,operator,check){return function(elem){var result=Sizzle.attr(elem,name);if(result==null){return operator==="!=";}if(!operator){return true;}result+="";return operator==="="?result===check:operator==="!="?result!==check:operator==="^="?check&&result.indexOf(check)===0:operator==="*="?check&&result.indexOf(check)>-1:operator==="$="?check&&result.slice(-check.length)===check:operator==="~="?(" "+result.replace(rwhitespace," ")+" ").indexOf(check)>-1:operator==="|="?result===check||result.slice(0,check.length+1)===check+"-":false;};},"CHILD":function CHILD(type,what,argument,first,last){var simple=type.slice(0,3)!=="nth",forward=type.slice(-4)!=="last",ofType=what==="of-type";return first===1&&last===0?// Shortcut for :nth-*(n)
function(elem){return!!elem.parentNode;}:function(elem,context,xml){var cache,uniqueCache,outerCache,node,nodeIndex,start,dir=simple!==forward?"nextSibling":"previousSibling",parent=elem.parentNode,name=ofType&&elem.nodeName.toLowerCase(),useCache=!xml&&!ofType,diff=false;if(parent){// :(first|last|only)-(child|of-type)
if(simple){while(dir){node=elem;while(node=node[dir]){if(ofType?node.nodeName.toLowerCase()===name:node.nodeType===1){return false;}}// Reverse direction for :only-* (if we haven't yet done so)
start=dir=type==="only"&&!start&&"nextSibling";}return true;}start=[forward?parent.firstChild:parent.lastChild];// non-xml :nth-child(...) stores cache data on `parent`
if(forward&&useCache){// Seek `elem` from a previously-cached index
// ...in a gzip-friendly way
node=parent;outerCache=node[expando]||(node[expando]={});// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
uniqueCache=outerCache[node.uniqueID]||(outerCache[node.uniqueID]={});cache=uniqueCache[type]||[];nodeIndex=cache[0]===dirruns&&cache[1];diff=nodeIndex&&cache[2];node=nodeIndex&&parent.childNodes[nodeIndex];while(node=++nodeIndex&&node&&node[dir]||(// Fallback to seeking `elem` from the start
diff=nodeIndex=0)||start.pop()){// When found, cache indexes on `parent` and break
if(node.nodeType===1&&++diff&&node===elem){uniqueCache[type]=[dirruns,nodeIndex,diff];break;}}}else{// Use previously-cached element index if available
if(useCache){// ...in a gzip-friendly way
node=elem;outerCache=node[expando]||(node[expando]={});// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
uniqueCache=outerCache[node.uniqueID]||(outerCache[node.uniqueID]={});cache=uniqueCache[type]||[];nodeIndex=cache[0]===dirruns&&cache[1];diff=nodeIndex;}// xml :nth-child(...)
// or :nth-last-child(...) or :nth(-last)?-of-type(...)
if(diff===false){// Use the same loop as above to seek `elem` from the start
while(node=++nodeIndex&&node&&node[dir]||(diff=nodeIndex=0)||start.pop()){if((ofType?node.nodeName.toLowerCase()===name:node.nodeType===1)&&++diff){// Cache the index of each encountered element
if(useCache){outerCache=node[expando]||(node[expando]={});// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
uniqueCache=outerCache[node.uniqueID]||(outerCache[node.uniqueID]={});uniqueCache[type]=[dirruns,diff];}if(node===elem){break;}}}}}// Incorporate the offset, then check against cycle size
diff-=last;return diff===first||diff%first===0&&diff/first>=0;}};},"PSEUDO":function PSEUDO(pseudo,argument){// pseudo-class names are case-insensitive
// http://www.w3.org/TR/selectors/#pseudo-classes
// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
// Remember that setFilters inherits from pseudos
var args,fn=Expr.pseudos[pseudo]||Expr.setFilters[pseudo.toLowerCase()]||Sizzle.error("unsupported pseudo: "+pseudo);// The user may use createPseudo to indicate that
// arguments are needed to create the filter function
// just as Sizzle does
if(fn[expando]){return fn(argument);}// But maintain support for old signatures
if(fn.length>1){args=[pseudo,pseudo,"",argument];return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?markFunction(function(seed,matches){var idx,matched=fn(seed,argument),i=matched.length;while(i--){idx=indexOf(seed,matched[i]);seed[idx]=!(matches[idx]=matched[i]);}}):function(elem){return fn(elem,0,args);};}return fn;}},pseudos:{// Potentially complex pseudos
"not":markFunction(function(selector){// Trim the selector passed to compile
// to avoid treating leading and trailing
// spaces as combinators
var input=[],results=[],matcher=compile(selector.replace(rtrim,"$1"));return matcher[expando]?markFunction(function(seed,matches,context,xml){var elem,unmatched=matcher(seed,null,xml,[]),i=seed.length;// Match elements unmatched by `matcher`
while(i--){if(elem=unmatched[i]){seed[i]=!(matches[i]=elem);}}}):function(elem,context,xml){input[0]=elem;matcher(input,null,xml,results);// Don't keep the element (issue #299)
input[0]=null;return!results.pop();};}),"has":markFunction(function(selector){return function(elem){return Sizzle(selector,elem).length>0;};}),"contains":markFunction(function(text){text=text.replace(runescape,funescape);return function(elem){return(elem.textContent||elem.innerText||getText(elem)).indexOf(text)>-1;};}),// "Whether an element is represented by a :lang() selector
// is based solely on the element's language value
// being equal to the identifier C,
// or beginning with the identifier C immediately followed by "-".
// The matching of C against the element's language value is performed case-insensitively.
// The identifier C does not have to be a valid language name."
// http://www.w3.org/TR/selectors/#lang-pseudo
"lang":markFunction(function(lang){// lang value must be a valid identifier
if(!ridentifier.test(lang||"")){Sizzle.error("unsupported lang: "+lang);}lang=lang.replace(runescape,funescape).toLowerCase();return function(elem){var elemLang;do{if(elemLang=documentIsHTML?elem.lang:elem.getAttribute("xml:lang")||elem.getAttribute("lang")){elemLang=elemLang.toLowerCase();return elemLang===lang||elemLang.indexOf(lang+"-")===0;}}while((elem=elem.parentNode)&&elem.nodeType===1);return false;};}),// Miscellaneous
"target":function target(elem){var hash=window.location&&window.location.hash;return hash&&hash.slice(1)===elem.id;},"root":function root(elem){return elem===docElem;},"focus":function focus(elem){return elem===document.activeElement&&(!document.hasFocus||document.hasFocus())&&!!(elem.type||elem.href||~elem.tabIndex);},// Boolean properties
"enabled":createDisabledPseudo(false),"disabled":createDisabledPseudo(true),"checked":function checked(elem){// In CSS3, :checked should return both checked and selected elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
var nodeName=elem.nodeName.toLowerCase();return nodeName==="input"&&!!elem.checked||nodeName==="option"&&!!elem.selected;},"selected":function selected(elem){// Accessing this property makes selected-by-default
// options in Safari work properly
if(elem.parentNode){elem.parentNode.selectedIndex;}return elem.selected===true;},// Contents
"empty":function empty(elem){// http://www.w3.org/TR/selectors/#empty-pseudo
// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
//   but not by others (comment: 8; processing instruction: 7; etc.)
// nodeType < 6 works because attributes (2) do not appear as children
for(elem=elem.firstChild;elem;elem=elem.nextSibling){if(elem.nodeType<6){return false;}}return true;},"parent":function parent(elem){return!Expr.pseudos["empty"](elem);},// Element/input types
"header":function header(elem){return rheader.test(elem.nodeName);},"input":function input(elem){return rinputs.test(elem.nodeName);},"button":function button(elem){var name=elem.nodeName.toLowerCase();return name==="input"&&elem.type==="button"||name==="button";},"text":function text(elem){var attr;return elem.nodeName.toLowerCase()==="input"&&elem.type==="text"&&(// Support: IE<8
// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
(attr=elem.getAttribute("type"))==null||attr.toLowerCase()==="text");},// Position-in-collection
"first":createPositionalPseudo(function(){return[0];}),"last":createPositionalPseudo(function(matchIndexes,length){return[length-1];}),"eq":createPositionalPseudo(function(matchIndexes,length,argument){return[argument<0?argument+length:argument];}),"even":createPositionalPseudo(function(matchIndexes,length){var i=0;for(;i<length;i+=2){matchIndexes.push(i);}return matchIndexes;}),"odd":createPositionalPseudo(function(matchIndexes,length){var i=1;for(;i<length;i+=2){matchIndexes.push(i);}return matchIndexes;}),"lt":createPositionalPseudo(function(matchIndexes,length,argument){var i=argument<0?argument+length:argument;for(;--i>=0;){matchIndexes.push(i);}return matchIndexes;}),"gt":createPositionalPseudo(function(matchIndexes,length,argument){var i=argument<0?argument+length:argument;for(;++i<length;){matchIndexes.push(i);}return matchIndexes;})}};Expr.pseudos["nth"]=Expr.pseudos["eq"];// Add button/input type pseudos
for(i in{radio:true,checkbox:true,file:true,password:true,image:true}){Expr.pseudos[i]=createInputPseudo(i);}for(i in{submit:true,reset:true}){Expr.pseudos[i]=createButtonPseudo(i);}// Easy API for creating new setFilters
function setFilters(){}setFilters.prototype=Expr.filters=Expr.pseudos;Expr.setFilters=new setFilters();tokenize=Sizzle.tokenize=function(selector,parseOnly){var matched,match,tokens,type,soFar,groups,preFilters,cached=tokenCache[selector+" "];if(cached){return parseOnly?0:cached.slice(0);}soFar=selector;groups=[];preFilters=Expr.preFilter;while(soFar){// Comma and first run
if(!matched||(match=rcomma.exec(soFar))){if(match){// Don't consume trailing commas as valid
soFar=soFar.slice(match[0].length)||soFar;}groups.push(tokens=[]);}matched=false;// Combinators
if(match=rcombinators.exec(soFar)){matched=match.shift();tokens.push({value:matched,// Cast descendant combinators to space
type:match[0].replace(rtrim," ")});soFar=soFar.slice(matched.length);}// Filters
for(type in Expr.filter){if((match=matchExpr[type].exec(soFar))&&(!preFilters[type]||(match=preFilters[type](match)))){matched=match.shift();tokens.push({value:matched,type:type,matches:match});soFar=soFar.slice(matched.length);}}if(!matched){break;}}// Return the length of the invalid excess
// if we're just parsing
// Otherwise, throw an error or return tokens
return parseOnly?soFar.length:soFar?Sizzle.error(selector):// Cache the tokens
tokenCache(selector,groups).slice(0);};function toSelector(tokens){var i=0,len=tokens.length,selector="";for(;i<len;i++){selector+=tokens[i].value;}return selector;}function addCombinator(matcher,combinator,base){var dir=combinator.dir,skip=combinator.next,key=skip||dir,checkNonElements=base&&key==="parentNode",doneName=done++;return combinator.first?// Check against closest ancestor/preceding element
function(elem,context,xml){while(elem=elem[dir]){if(elem.nodeType===1||checkNonElements){return matcher(elem,context,xml);}}return false;}:// Check against all ancestor/preceding elements
function(elem,context,xml){var oldCache,uniqueCache,outerCache,newCache=[dirruns,doneName];// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
if(xml){while(elem=elem[dir]){if(elem.nodeType===1||checkNonElements){if(matcher(elem,context,xml)){return true;}}}}else{while(elem=elem[dir]){if(elem.nodeType===1||checkNonElements){outerCache=elem[expando]||(elem[expando]={});// Support: IE <9 only
// Defend against cloned attroperties (jQuery gh-1709)
uniqueCache=outerCache[elem.uniqueID]||(outerCache[elem.uniqueID]={});if(skip&&skip===elem.nodeName.toLowerCase()){elem=elem[dir]||elem;}else if((oldCache=uniqueCache[key])&&oldCache[0]===dirruns&&oldCache[1]===doneName){// Assign to newCache so results back-propagate to previous elements
return newCache[2]=oldCache[2];}else{// Reuse newcache so results back-propagate to previous elements
uniqueCache[key]=newCache;// A match means we're done; a fail means we have to keep checking
if(newCache[2]=matcher(elem,context,xml)){return true;}}}}}return false;};}function elementMatcher(matchers){return matchers.length>1?function(elem,context,xml){var i=matchers.length;while(i--){if(!matchers[i](elem,context,xml)){return false;}}return true;}:matchers[0];}function multipleContexts(selector,contexts,results){var i=0,len=contexts.length;for(;i<len;i++){Sizzle(selector,contexts[i],results);}return results;}function condense(unmatched,map,filter,context,xml){var elem,newUnmatched=[],i=0,len=unmatched.length,mapped=map!=null;for(;i<len;i++){if(elem=unmatched[i]){if(!filter||filter(elem,context,xml)){newUnmatched.push(elem);if(mapped){map.push(i);}}}}return newUnmatched;}function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){if(postFilter&&!postFilter[expando]){postFilter=setMatcher(postFilter);}if(postFinder&&!postFinder[expando]){postFinder=setMatcher(postFinder,postSelector);}return markFunction(function(seed,results,context,xml){var temp,i,elem,preMap=[],postMap=[],preexisting=results.length,// Get initial elements from seed or context
elems=seed||multipleContexts(selector||"*",context.nodeType?[context]:context,[]),// Prefilter to get matcher input, preserving a map for seed-results synchronization
matcherIn=preFilter&&(seed||!selector)?condense(elems,preMap,preFilter,context,xml):elems,matcherOut=matcher?// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
postFinder||(seed?preFilter:preexisting||postFilter)?// ...intermediate processing is necessary
[]:// ...otherwise use results directly
results:matcherIn;// Find primary matches
if(matcher){matcher(matcherIn,matcherOut,context,xml);}// Apply postFilter
if(postFilter){temp=condense(matcherOut,postMap);postFilter(temp,[],context,xml);// Un-match failing elements by moving them back to matcherIn
i=temp.length;while(i--){if(elem=temp[i]){matcherOut[postMap[i]]=!(matcherIn[postMap[i]]=elem);}}}if(seed){if(postFinder||preFilter){if(postFinder){// Get the final matcherOut by condensing this intermediate into postFinder contexts
temp=[];i=matcherOut.length;while(i--){if(elem=matcherOut[i]){// Restore matcherIn since elem is not yet a final match
temp.push(matcherIn[i]=elem);}}postFinder(null,matcherOut=[],temp,xml);}// Move matched elements from seed to results to keep them synchronized
i=matcherOut.length;while(i--){if((elem=matcherOut[i])&&(temp=postFinder?indexOf(seed,elem):preMap[i])>-1){seed[temp]=!(results[temp]=elem);}}}// Add elements to results, through postFinder if defined
}else{matcherOut=condense(matcherOut===results?matcherOut.splice(preexisting,matcherOut.length):matcherOut);if(postFinder){postFinder(null,results,matcherOut,xml);}else{push.apply(results,matcherOut);}}});}function matcherFromTokens(tokens){var checkContext,matcher,j,len=tokens.length,leadingRelative=Expr.relative[tokens[0].type],implicitRelative=leadingRelative||Expr.relative[" "],i=leadingRelative?1:0,// The foundational matcher ensures that elements are reachable from top-level context(s)
matchContext=addCombinator(function(elem){return elem===checkContext;},implicitRelative,true),matchAnyContext=addCombinator(function(elem){return indexOf(checkContext,elem)>-1;},implicitRelative,true),matchers=[function(elem,context,xml){var ret=!leadingRelative&&(xml||context!==outermostContext)||((checkContext=context).nodeType?matchContext(elem,context,xml):matchAnyContext(elem,context,xml));// Avoid hanging onto element (issue #299)
checkContext=null;return ret;}];for(;i<len;i++){if(matcher=Expr.relative[tokens[i].type]){matchers=[addCombinator(elementMatcher(matchers),matcher)];}else{matcher=Expr.filter[tokens[i].type].apply(null,tokens[i].matches);// Return special upon seeing a positional matcher
if(matcher[expando]){// Find the next relative operator (if any) for proper handling
j=++i;for(;j<len;j++){if(Expr.relative[tokens[j].type]){break;}}return setMatcher(i>1&&elementMatcher(matchers),i>1&&toSelector(// If the preceding token was a descendant combinator, insert an implicit any-element `*`
tokens.slice(0,i-1).concat({value:tokens[i-2].type===" "?"*":""})).replace(rtrim,"$1"),matcher,i<j&&matcherFromTokens(tokens.slice(i,j)),j<len&&matcherFromTokens(tokens=tokens.slice(j)),j<len&&toSelector(tokens));}matchers.push(matcher);}}return elementMatcher(matchers);}function matcherFromGroupMatchers(elementMatchers,setMatchers){var bySet=setMatchers.length>0,byElement=elementMatchers.length>0,superMatcher=function superMatcher(seed,context,xml,results,outermost){var elem,j,matcher,matchedCount=0,i="0",unmatched=seed&&[],setMatched=[],contextBackup=outermostContext,// We must always have either seed elements or outermost context
elems=seed||byElement&&Expr.find["TAG"]("*",outermost),// Use integer dirruns iff this is the outermost matcher
dirrunsUnique=dirruns+=contextBackup==null?1:Math.random()||0.1,len=elems.length;if(outermost){outermostContext=context===document||context||outermost;}// Add elements passing elementMatchers directly to results
// Support: IE<9, Safari
// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
for(;i!==len&&(elem=elems[i])!=null;i++){if(byElement&&elem){j=0;if(!context&&elem.ownerDocument!==document){setDocument(elem);xml=!documentIsHTML;}while(matcher=elementMatchers[j++]){if(matcher(elem,context||document,xml)){results.push(elem);break;}}if(outermost){dirruns=dirrunsUnique;}}// Track unmatched elements for set filters
if(bySet){// They will have gone through all possible matchers
if(elem=!matcher&&elem){matchedCount--;}// Lengthen the array for every element, matched or not
if(seed){unmatched.push(elem);}}}// `i` is now the count of elements visited above, and adding it to `matchedCount`
// makes the latter nonnegative.
matchedCount+=i;// Apply set filters to unmatched elements
// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
// no element matchers and no seed.
// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
// case, which will result in a "00" `matchedCount` that differs from `i` but is also
// numerically zero.
if(bySet&&i!==matchedCount){j=0;while(matcher=setMatchers[j++]){matcher(unmatched,setMatched,context,xml);}if(seed){// Reintegrate element matches to eliminate the need for sorting
if(matchedCount>0){while(i--){if(!(unmatched[i]||setMatched[i])){setMatched[i]=pop.call(results);}}}// Discard index placeholder values to get only actual matches
setMatched=condense(setMatched);}// Add matches to results
push.apply(results,setMatched);// Seedless set matches succeeding multiple successful matchers stipulate sorting
if(outermost&&!seed&&setMatched.length>0&&matchedCount+setMatchers.length>1){Sizzle.uniqueSort(results);}}// Override manipulation of globals by nested matchers
if(outermost){dirruns=dirrunsUnique;outermostContext=contextBackup;}return unmatched;};return bySet?markFunction(superMatcher):superMatcher;}compile=Sizzle.compile=function(selector,match/* Internal Use Only */){var i,setMatchers=[],elementMatchers=[],cached=compilerCache[selector+" "];if(!cached){// Generate a function of recursive functions that can be used to check each element
if(!match){match=tokenize(selector);}i=match.length;while(i--){cached=matcherFromTokens(match[i]);if(cached[expando]){setMatchers.push(cached);}else{elementMatchers.push(cached);}}// Cache the compiled function
cached=compilerCache(selector,matcherFromGroupMatchers(elementMatchers,setMatchers));// Save selector and tokenization
cached.selector=selector;}return cached;};/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */select=Sizzle.select=function(selector,context,results,seed){var i,tokens,token,type,find,compiled=typeof selector==="function"&&selector,match=!seed&&tokenize(selector=compiled.selector||selector);results=results||[];// Try to minimize operations if there is only one selector in the list and no seed
// (the latter of which guarantees us context)
if(match.length===1){// Reduce context if the leading compound selector is an ID
tokens=match[0]=match[0].slice(0);if(tokens.length>2&&(token=tokens[0]).type==="ID"&&context.nodeType===9&&documentIsHTML&&Expr.relative[tokens[1].type]){context=(Expr.find["ID"](token.matches[0].replace(runescape,funescape),context)||[])[0];if(!context){return results;// Precompiled matchers will still verify ancestry, so step up a level
}else if(compiled){context=context.parentNode;}selector=selector.slice(tokens.shift().value.length);}// Fetch a seed set for right-to-left matching
i=matchExpr["needsContext"].test(selector)?0:tokens.length;while(i--){token=tokens[i];// Abort if we hit a combinator
if(Expr.relative[type=token.type]){break;}if(find=Expr.find[type]){// Search, expanding context for leading sibling combinators
if(seed=find(token.matches[0].replace(runescape,funescape),rsibling.test(tokens[0].type)&&testContext(context.parentNode)||context)){// If seed is empty or no tokens remain, we can return early
tokens.splice(i,1);selector=seed.length&&toSelector(tokens);if(!selector){push.apply(results,seed);return results;}break;}}}}// Compile and execute a filtering function if one is not provided
// Provide `match` to avoid retokenization if we modified the selector above
(compiled||compile(selector,match))(seed,context,!documentIsHTML,results,!context||rsibling.test(selector)&&testContext(context.parentNode)||context);return results;};// One-time assignments
// Sort stability
support.sortStable=expando.split("").sort(sortOrder).join("")===expando;// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates=!!hasDuplicate;// Initialize against the default document
setDocument();// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached=assert(function(el){// Should return 1, but returns 4 (following)
return el.compareDocumentPosition(document.createElement("fieldset"))&1;});// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if(!assert(function(el){el.innerHTML="<a href='#'></a>";return el.firstChild.getAttribute("href")==="#";})){addHandle("type|href|height|width",function(elem,name,isXML){if(!isXML){return elem.getAttribute(name,name.toLowerCase()==="type"?1:2);}});}// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if(!support.attributes||!assert(function(el){el.innerHTML="<input/>";el.firstChild.setAttribute("value","");return el.firstChild.getAttribute("value")==="";})){addHandle("value",function(elem,name,isXML){if(!isXML&&elem.nodeName.toLowerCase()==="input"){return elem.defaultValue;}});}// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if(!assert(function(el){return el.getAttribute("disabled")==null;})){addHandle(booleans,function(elem,name,isXML){var val;if(!isXML){return elem[name]===true?name.toLowerCase():(val=elem.getAttributeNode(name))&&val.specified?val.value:null;}});}return Sizzle;}(window);jQuery.find=Sizzle;jQuery.expr=Sizzle.selectors;// Deprecated
jQuery.expr[":"]=jQuery.expr.pseudos;jQuery.uniqueSort=jQuery.unique=Sizzle.uniqueSort;jQuery.text=Sizzle.getText;jQuery.isXMLDoc=Sizzle.isXML;jQuery.contains=Sizzle.contains;jQuery.escapeSelector=Sizzle.escape;var dir=function dir(elem,_dir,until){var matched=[],truncate=until!==undefined;while((elem=elem[_dir])&&elem.nodeType!==9){if(elem.nodeType===1){if(truncate&&jQuery(elem).is(until)){break;}matched.push(elem);}}return matched;};var _siblings=function _siblings(n,elem){var matched=[];for(;n;n=n.nextSibling){if(n.nodeType===1&&n!==elem){matched.push(n);}}return matched;};var rneedsContext=jQuery.expr.match.needsContext;var rsingleTag=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;var risSimple=/^.[^:#\[\.,]*$/;// Implement the identical functionality for filter and not
function winnow(elements,qualifier,not){if(jQuery.isFunction(qualifier)){return jQuery.grep(elements,function(elem,i){return!!qualifier.call(elem,i,elem)!==not;});}// Single element
if(qualifier.nodeType){return jQuery.grep(elements,function(elem){return elem===qualifier!==not;});}// Arraylike of elements (jQuery, arguments, Array)
if(typeof qualifier!=="string"){return jQuery.grep(elements,function(elem){return indexOf.call(qualifier,elem)>-1!==not;});}// Simple selector that can be filtered directly, removing non-Elements
if(risSimple.test(qualifier)){return jQuery.filter(qualifier,elements,not);}// Complex selector, compare the two sets, removing non-Elements
qualifier=jQuery.filter(qualifier,elements);return jQuery.grep(elements,function(elem){return indexOf.call(qualifier,elem)>-1!==not&&elem.nodeType===1;});}jQuery.filter=function(expr,elems,not){var elem=elems[0];if(not){expr=":not("+expr+")";}if(elems.length===1&&elem.nodeType===1){return jQuery.find.matchesSelector(elem,expr)?[elem]:[];}return jQuery.find.matches(expr,jQuery.grep(elems,function(elem){return elem.nodeType===1;}));};jQuery.fn.extend({find:function find(selector){var i,ret,len=this.length,self=this;if(typeof selector!=="string"){return this.pushStack(jQuery(selector).filter(function(){for(i=0;i<len;i++){if(jQuery.contains(self[i],this)){return true;}}}));}ret=this.pushStack([]);for(i=0;i<len;i++){jQuery.find(selector,self[i],ret);}return len>1?jQuery.uniqueSort(ret):ret;},filter:function filter(selector){return this.pushStack(winnow(this,selector||[],false));},not:function not(selector){return this.pushStack(winnow(this,selector||[],true));},is:function is(selector){return!!winnow(this,// If this is a positional/relative selector, check membership in the returned set
// so $("p:first").is("p:last") won't return true for a doc with two "p".
typeof selector==="string"&&rneedsContext.test(selector)?jQuery(selector):selector||[],false).length;}});// Initialize a jQuery object
// A central reference to the root jQuery(document)
var rootjQuery,// A simple way to check for HTML strings
// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
// Strict HTML recognition (#11290: must start with <)
// Shortcut simple #id case for speed
rquickExpr=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,init=jQuery.fn.init=function(selector,context,root){var match,elem;// HANDLE: $(""), $(null), $(undefined), $(false)
if(!selector){return this;}// Method init() accepts an alternate rootjQuery
// so migrate can support jQuery.sub (gh-2101)
root=root||rootjQuery;// Handle HTML strings
if(typeof selector==="string"){if(selector[0]==="<"&&selector[selector.length-1]===">"&&selector.length>=3){// Assume that strings that start and end with <> are HTML and skip the regex check
match=[null,selector,null];}else{match=rquickExpr.exec(selector);}// Match html or make sure no context is specified for #id
if(match&&(match[1]||!context)){// HANDLE: $(html) -> $(array)
if(match[1]){context=context instanceof jQuery?context[0]:context;// Option to run scripts is true for back-compat
// Intentionally let the error be thrown if parseHTML is not present
jQuery.merge(this,jQuery.parseHTML(match[1],context&&context.nodeType?context.ownerDocument||context:document,true));// HANDLE: $(html, props)
if(rsingleTag.test(match[1])&&jQuery.isPlainObject(context)){for(match in context){// Properties of context are called as methods if possible
if(jQuery.isFunction(this[match])){this[match](context[match]);// ...and otherwise set as attributes
}else{this.attr(match,context[match]);}}}return this;// HANDLE: $(#id)
}else{elem=document.getElementById(match[2]);if(elem){// Inject the element directly into the jQuery object
this[0]=elem;this.length=1;}return this;}// HANDLE: $(expr, $(...))
}else if(!context||context.jquery){return(context||root).find(selector);// HANDLE: $(expr, context)
// (which is just equivalent to: $(context).find(expr)
}else{return this.constructor(context).find(selector);}// HANDLE: $(DOMElement)
}else if(selector.nodeType){this[0]=selector;this.length=1;return this;// HANDLE: $(function)
// Shortcut for document ready
}else if(jQuery.isFunction(selector)){return root.ready!==undefined?root.ready(selector):// Execute immediately if ready is not present
selector(jQuery);}return jQuery.makeArray(selector,this);};// Give the init function the jQuery prototype for later instantiation
init.prototype=jQuery.fn;// Initialize central reference
rootjQuery=jQuery(document);var rparentsprev=/^(?:parents|prev(?:Until|All))/,// Methods guaranteed to produce a unique set when starting from a unique set
guaranteedUnique={children:true,contents:true,next:true,prev:true};jQuery.fn.extend({has:function has(target){var targets=jQuery(target,this),l=targets.length;return this.filter(function(){var i=0;for(;i<l;i++){if(jQuery.contains(this,targets[i])){return true;}}});},closest:function closest(selectors,context){var cur,i=0,l=this.length,matched=[],targets=typeof selectors!=="string"&&jQuery(selectors);// Positional selectors never match, since there's no _selection_ context
if(!rneedsContext.test(selectors)){for(;i<l;i++){for(cur=this[i];cur&&cur!==context;cur=cur.parentNode){// Always skip document fragments
if(cur.nodeType<11&&(targets?targets.index(cur)>-1:// Don't pass non-elements to Sizzle
cur.nodeType===1&&jQuery.find.matchesSelector(cur,selectors))){matched.push(cur);break;}}}}return this.pushStack(matched.length>1?jQuery.uniqueSort(matched):matched);},// Determine the position of an element within the set
index:function index(elem){// No argument, return index in parent
if(!elem){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1;}// Index in selector
if(typeof elem==="string"){return indexOf.call(jQuery(elem),this[0]);}// Locate the position of the desired element
return indexOf.call(this,// If it receives a jQuery object, the first element is used
elem.jquery?elem[0]:elem);},add:function add(selector,context){return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(),jQuery(selector,context))));},addBack:function addBack(selector){return this.add(selector==null?this.prevObject:this.prevObject.filter(selector));}});function sibling(cur,dir){while((cur=cur[dir])&&cur.nodeType!==1){}return cur;}jQuery.each({parent:function parent(elem){var parent=elem.parentNode;return parent&&parent.nodeType!==11?parent:null;},parents:function parents(elem){return dir(elem,"parentNode");},parentsUntil:function parentsUntil(elem,i,until){return dir(elem,"parentNode",until);},next:function next(elem){return sibling(elem,"nextSibling");},prev:function prev(elem){return sibling(elem,"previousSibling");},nextAll:function nextAll(elem){return dir(elem,"nextSibling");},prevAll:function prevAll(elem){return dir(elem,"previousSibling");},nextUntil:function nextUntil(elem,i,until){return dir(elem,"nextSibling",until);},prevUntil:function prevUntil(elem,i,until){return dir(elem,"previousSibling",until);},siblings:function siblings(elem){return _siblings((elem.parentNode||{}).firstChild,elem);},children:function children(elem){return _siblings(elem.firstChild);},contents:function contents(elem){return elem.contentDocument||jQuery.merge([],elem.childNodes);}},function(name,fn){jQuery.fn[name]=function(until,selector){var matched=jQuery.map(this,fn,until);if(name.slice(-5)!=="Until"){selector=until;}if(selector&&typeof selector==="string"){matched=jQuery.filter(selector,matched);}if(this.length>1){// Remove duplicates
if(!guaranteedUnique[name]){jQuery.uniqueSort(matched);}// Reverse order for parents* and prev-derivatives
if(rparentsprev.test(name)){matched.reverse();}}return this.pushStack(matched);};});var rnothtmlwhite=/[^\x20\t\r\n\f]+/g;// Convert String-formatted options into Object-formatted ones
function createOptions(options){var object={};jQuery.each(options.match(rnothtmlwhite)||[],function(_,flag){object[flag]=true;});return object;}/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */jQuery.Callbacks=function(options){// Convert options from String-formatted to Object-formatted if needed
// (we check in cache first)
options=typeof options==="string"?createOptions(options):jQuery.extend({},options);var// Flag to know if list is currently firing
firing,// Last fire value for non-forgettable lists
memory,// Flag to know if list was already fired
_fired,// Flag to prevent firing
_locked,// Actual callback list
list=[],// Queue of execution data for repeatable lists
queue=[],// Index of currently firing callback (modified by add/remove as needed)
firingIndex=-1,// Fire callbacks
fire=function fire(){// Enforce single-firing
_locked=options.once;// Execute callbacks for all pending executions,
// respecting firingIndex overrides and runtime changes
_fired=firing=true;for(;queue.length;firingIndex=-1){memory=queue.shift();while(++firingIndex<list.length){// Run callback and check for early termination
if(list[firingIndex].apply(memory[0],memory[1])===false&&options.stopOnFalse){// Jump to end and forget the data so .add doesn't re-fire
firingIndex=list.length;memory=false;}}}// Forget the data if we're done with it
if(!options.memory){memory=false;}firing=false;// Clean up if we're done firing for good
if(_locked){// Keep an empty list if we have data for future add calls
if(memory){list=[];// Otherwise, this object is spent
}else{list="";}}},// Actual Callbacks object
self={// Add a callback or a collection of callbacks to the list
add:function add(){if(list){// If we have memory from a past run, we should fire after adding
if(memory&&!firing){firingIndex=list.length-1;queue.push(memory);}(function add(args){jQuery.each(args,function(_,arg){if(jQuery.isFunction(arg)){if(!options.unique||!self.has(arg)){list.push(arg);}}else if(arg&&arg.length&&jQuery.type(arg)!=="string"){// Inspect recursively
add(arg);}});})(arguments);if(memory&&!firing){fire();}}return this;},// Remove a callback from the list
remove:function remove(){jQuery.each(arguments,function(_,arg){var index;while((index=jQuery.inArray(arg,list,index))>-1){list.splice(index,1);// Handle firing indexes
if(index<=firingIndex){firingIndex--;}}});return this;},// Check if a given callback is in the list.
// If no argument is given, return whether or not list has callbacks attached.
has:function has(fn){return fn?jQuery.inArray(fn,list)>-1:list.length>0;},// Remove all callbacks from the list
empty:function empty(){if(list){list=[];}return this;},// Disable .fire and .add
// Abort any current/pending executions
// Clear all callbacks and values
disable:function disable(){_locked=queue=[];list=memory="";return this;},disabled:function disabled(){return!list;},// Disable .fire
// Also disable .add unless we have memory (since it would have no effect)
// Abort any pending executions
lock:function lock(){_locked=queue=[];if(!memory&&!firing){list=memory="";}return this;},locked:function locked(){return!!_locked;},// Call all callbacks with the given context and arguments
fireWith:function fireWith(context,args){if(!_locked){args=args||[];args=[context,args.slice?args.slice():args];queue.push(args);if(!firing){fire();}}return this;},// Call all the callbacks with the given arguments
fire:function fire(){self.fireWith(this,arguments);return this;},// To know if the callbacks have already been called at least once
fired:function fired(){return!!_fired;}};return self;};function Identity(v){return v;}function Thrower(ex){throw ex;}function adoptValue(value,resolve,reject){var method;try{// Check for promise aspect first to privilege synchronous behavior
if(value&&jQuery.isFunction(method=value.promise)){method.call(value).done(resolve).fail(reject);// Other thenables
}else if(value&&jQuery.isFunction(method=value.then)){method.call(value,resolve,reject);// Other non-thenables
}else{// Support: Android 4.0 only
// Strict mode functions invoked without .call/.apply get global-object context
resolve.call(undefined,value);}// For Promises/A+, convert exceptions into rejections
// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
// Deferred#then to conditionally suppress rejection.
}catch(value){// Support: Android 4.0 only
// Strict mode functions invoked without .call/.apply get global-object context
reject.call(undefined,value);}}jQuery.extend({Deferred:function Deferred(func){var tuples=[// action, add listener, callbacks,
// ... .then handlers, argument index, [final state]
["notify","progress",jQuery.Callbacks("memory"),jQuery.Callbacks("memory"),2],["resolve","done",jQuery.Callbacks("once memory"),jQuery.Callbacks("once memory"),0,"resolved"],["reject","fail",jQuery.Callbacks("once memory"),jQuery.Callbacks("once memory"),1,"rejected"]],_state="pending",_promise={state:function state(){return _state;},always:function always(){deferred.done(arguments).fail(arguments);return this;},"catch":function _catch(fn){return _promise.then(null,fn);},// Keep pipe for back-compat
pipe:function pipe()/* fnDone, fnFail, fnProgress */{var fns=arguments;return jQuery.Deferred(function(newDefer){jQuery.each(tuples,function(i,tuple){// Map tuples (progress, done, fail) to arguments (done, fail, progress)
var fn=jQuery.isFunction(fns[tuple[4]])&&fns[tuple[4]];// deferred.progress(function() { bind to newDefer or newDefer.notify })
// deferred.done(function() { bind to newDefer or newDefer.resolve })
// deferred.fail(function() { bind to newDefer or newDefer.reject })
deferred[tuple[1]](function(){var returned=fn&&fn.apply(this,arguments);if(returned&&jQuery.isFunction(returned.promise)){returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);}else{newDefer[tuple[0]+"With"](this,fn?[returned]:arguments);}});});fns=null;}).promise();},then:function then(onFulfilled,onRejected,onProgress){var maxDepth=0;function resolve(depth,deferred,handler,special){return function(){var that=this,args=arguments,mightThrow=function mightThrow(){var returned,then;// Support: Promises/A+ section 2.3.3.3.3
// https://promisesaplus.com/#point-59
// Ignore double-resolution attempts
if(depth<maxDepth){return;}returned=handler.apply(that,args);// Support: Promises/A+ section 2.3.1
// https://promisesaplus.com/#point-48
if(returned===deferred.promise()){throw new TypeError("Thenable self-resolution");}// Support: Promises/A+ sections 2.3.3.1, 3.5
// https://promisesaplus.com/#point-54
// https://promisesaplus.com/#point-75
// Retrieve `then` only once
then=returned&&(// Support: Promises/A+ section 2.3.4
// https://promisesaplus.com/#point-64
// Only check objects and functions for thenability
(typeof returned==="undefined"?"undefined":_typeof(returned))==="object"||typeof returned==="function")&&returned.then;// Handle a returned thenable
if(jQuery.isFunction(then)){// Special processors (notify) just wait for resolution
if(special){then.call(returned,resolve(maxDepth,deferred,Identity,special),resolve(maxDepth,deferred,Thrower,special));// Normal processors (resolve) also hook into progress
}else{// ...and disregard older resolution values
maxDepth++;then.call(returned,resolve(maxDepth,deferred,Identity,special),resolve(maxDepth,deferred,Thrower,special),resolve(maxDepth,deferred,Identity,deferred.notifyWith));}// Handle all other returned values
}else{// Only substitute handlers pass on context
// and multiple values (non-spec behavior)
if(handler!==Identity){that=undefined;args=[returned];}// Process the value(s)
// Default process is resolve
(special||deferred.resolveWith)(that,args);}},// Only normal processors (resolve) catch and reject exceptions
process=special?mightThrow:function(){try{mightThrow();}catch(e){if(jQuery.Deferred.exceptionHook){jQuery.Deferred.exceptionHook(e,process.stackTrace);}// Support: Promises/A+ section 2.3.3.3.4.1
// https://promisesaplus.com/#point-61
// Ignore post-resolution exceptions
if(depth+1>=maxDepth){// Only substitute handlers pass on context
// and multiple values (non-spec behavior)
if(handler!==Thrower){that=undefined;args=[e];}deferred.rejectWith(that,args);}}};// Support: Promises/A+ section 2.3.3.3.1
// https://promisesaplus.com/#point-57
// Re-resolve promises immediately to dodge false rejection from
// subsequent errors
if(depth){process();}else{// Call an optional hook to record the stack, in case of exception
// since it's otherwise lost when execution goes async
if(jQuery.Deferred.getStackHook){process.stackTrace=jQuery.Deferred.getStackHook();}window.setTimeout(process);}};}return jQuery.Deferred(function(newDefer){// progress_handlers.add( ... )
tuples[0][3].add(resolve(0,newDefer,jQuery.isFunction(onProgress)?onProgress:Identity,newDefer.notifyWith));// fulfilled_handlers.add( ... )
tuples[1][3].add(resolve(0,newDefer,jQuery.isFunction(onFulfilled)?onFulfilled:Identity));// rejected_handlers.add( ... )
tuples[2][3].add(resolve(0,newDefer,jQuery.isFunction(onRejected)?onRejected:Thrower));}).promise();},// Get a promise for this deferred
// If obj is provided, the promise aspect is added to the object
promise:function promise(obj){return obj!=null?jQuery.extend(obj,_promise):_promise;}},deferred={};// Add list-specific methods
jQuery.each(tuples,function(i,tuple){var list=tuple[2],stateString=tuple[5];// promise.progress = list.add
// promise.done = list.add
// promise.fail = list.add
_promise[tuple[1]]=list.add;// Handle state
if(stateString){list.add(function(){// state = "resolved" (i.e., fulfilled)
// state = "rejected"
_state=stateString;},// rejected_callbacks.disable
// fulfilled_callbacks.disable
tuples[3-i][2].disable,// progress_callbacks.lock
tuples[0][2].lock);}// progress_handlers.fire
// fulfilled_handlers.fire
// rejected_handlers.fire
list.add(tuple[3].fire);// deferred.notify = function() { deferred.notifyWith(...) }
// deferred.resolve = function() { deferred.resolveWith(...) }
// deferred.reject = function() { deferred.rejectWith(...) }
deferred[tuple[0]]=function(){deferred[tuple[0]+"With"](this===deferred?undefined:this,arguments);return this;};// deferred.notifyWith = list.fireWith
// deferred.resolveWith = list.fireWith
// deferred.rejectWith = list.fireWith
deferred[tuple[0]+"With"]=list.fireWith;});// Make the deferred a promise
_promise.promise(deferred);// Call given func if any
if(func){func.call(deferred,deferred);}// All done!
return deferred;},// Deferred helper
when:function when(singleValue){var// count of uncompleted subordinates
remaining=arguments.length,// count of unprocessed arguments
i=remaining,// subordinate fulfillment data
resolveContexts=Array(i),resolveValues=_slice.call(arguments),// the master Deferred
master=jQuery.Deferred(),// subordinate callback factory
updateFunc=function updateFunc(i){return function(value){resolveContexts[i]=this;resolveValues[i]=arguments.length>1?_slice.call(arguments):value;if(! --remaining){master.resolveWith(resolveContexts,resolveValues);}};};// Single- and empty arguments are adopted like Promise.resolve
if(remaining<=1){adoptValue(singleValue,master.done(updateFunc(i)).resolve,master.reject);// Use .then() to unwrap secondary thenables (cf. gh-3000)
if(master.state()==="pending"||jQuery.isFunction(resolveValues[i]&&resolveValues[i].then)){return master.then();}}// Multiple arguments are aggregated like Promise.all array elements
while(i--){adoptValue(resolveValues[i],updateFunc(i),master.reject);}return master.promise();}});// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;jQuery.Deferred.exceptionHook=function(error,stack){// Support: IE 8 - 9 only
// Console exists when dev tools are open, which can happen at any time
if(window.console&&window.console.warn&&error&&rerrorNames.test(error.name)){window.console.warn("jQuery.Deferred exception: "+error.message,error.stack,stack);}};jQuery.readyException=function(error){window.setTimeout(function(){throw error;});};// The deferred used on DOM ready
var readyList=jQuery.Deferred();jQuery.fn.ready=function(fn){readyList.then(fn)// Wrap jQuery.readyException in a function so that the lookup
// happens at the time of error handling instead of callback
// registration.
.catch(function(error){jQuery.readyException(error);});return this;};jQuery.extend({// Is the DOM ready to be used? Set to true once it occurs.
isReady:false,// A counter to track how many items to wait for before
// the ready event fires. See #6781
readyWait:1,// Hold (or release) the ready event
holdReady:function holdReady(hold){if(hold){jQuery.readyWait++;}else{jQuery.ready(true);}},// Handle when the DOM is ready
ready:function ready(wait){// Abort if there are pending holds or we're already ready
if(wait===true?--jQuery.readyWait:jQuery.isReady){return;}// Remember that the DOM is ready
jQuery.isReady=true;// If a normal DOM Ready event fired, decrement, and wait if need be
if(wait!==true&&--jQuery.readyWait>0){return;}// If there are functions bound, to execute
readyList.resolveWith(document,[jQuery]);}});jQuery.ready.then=readyList.then;// The ready event handler and self cleanup method
function completed(){document.removeEventListener("DOMContentLoaded",completed);window.removeEventListener("load",completed);jQuery.ready();}// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if(document.readyState==="complete"||document.readyState!=="loading"&&!document.documentElement.doScroll){// Handle it asynchronously to allow scripts the opportunity to delay ready
window.setTimeout(jQuery.ready);}else{// Use the handy event callback
document.addEventListener("DOMContentLoaded",completed);// A fallback to window.onload, that will always work
window.addEventListener("load",completed);}// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access=function access(elems,fn,key,value,chainable,emptyGet,raw){var i=0,len=elems.length,bulk=key==null;// Sets many values
if(jQuery.type(key)==="object"){chainable=true;for(i in key){access(elems,fn,i,key[i],true,emptyGet,raw);}// Sets one value
}else if(value!==undefined){chainable=true;if(!jQuery.isFunction(value)){raw=true;}if(bulk){// Bulk operations run against the entire set
if(raw){fn.call(elems,value);fn=null;// ...except when executing function values
}else{bulk=fn;fn=function fn(elem,key,value){return bulk.call(jQuery(elem),value);};}}if(fn){for(;i<len;i++){fn(elems[i],key,raw?value:value.call(elems[i],i,fn(elems[i],key)));}}}if(chainable){return elems;}// Gets
if(bulk){return fn.call(elems);}return len?fn(elems[0],key):emptyGet;};var acceptData=function acceptData(owner){// Accepts only:
//  - Node
//    - Node.ELEMENT_NODE
//    - Node.DOCUMENT_NODE
//  - Object
//    - Any
return owner.nodeType===1||owner.nodeType===9||!+owner.nodeType;};function Data(){this.expando=jQuery.expando+Data.uid++;}Data.uid=1;Data.prototype={cache:function cache(owner){// Check if the owner object already has a cache
var value=owner[this.expando];// If not, create one
if(!value){value={};// We can accept data for non-element nodes in modern browsers,
// but we should not, see #8335.
// Always return an empty object.
if(acceptData(owner)){// If it is a node unlikely to be stringify-ed or looped over
// use plain assignment
if(owner.nodeType){owner[this.expando]=value;// Otherwise secure it in a non-enumerable property
// configurable must be true to allow the property to be
// deleted when data is removed
}else{Object.defineProperty(owner,this.expando,{value:value,configurable:true});}}}return value;},set:function set(owner,data,value){var prop,cache=this.cache(owner);// Handle: [ owner, key, value ] args
// Always use camelCase key (gh-2257)
if(typeof data==="string"){cache[jQuery.camelCase(data)]=value;// Handle: [ owner, { properties } ] args
}else{// Copy the properties one-by-one to the cache object
for(prop in data){cache[jQuery.camelCase(prop)]=data[prop];}}return cache;},get:function get(owner,key){return key===undefined?this.cache(owner):// Always use camelCase key (gh-2257)
owner[this.expando]&&owner[this.expando][jQuery.camelCase(key)];},access:function access(owner,key,value){// In cases where either:
//
//   1. No key was specified
//   2. A string key was specified, but no value provided
//
// Take the "read" path and allow the get method to determine
// which value to return, respectively either:
//
//   1. The entire cache object
//   2. The data stored at the key
//
if(key===undefined||key&&typeof key==="string"&&value===undefined){return this.get(owner,key);}// When the key is not a string, or both a key and value
// are specified, set or extend (existing objects) with either:
//
//   1. An object of properties
//   2. A key and value
//
this.set(owner,key,value);// Since the "set" path can have two possible entry points
// return the expected data based on which path was taken[*]
return value!==undefined?value:key;},remove:function remove(owner,key){var i,cache=owner[this.expando];if(cache===undefined){return;}if(key!==undefined){// Support array or space separated string of keys
if(jQuery.isArray(key)){// If key is an array of keys...
// We always set camelCase keys, so remove that.
key=key.map(jQuery.camelCase);}else{key=jQuery.camelCase(key);// If a key with the spaces exists, use it.
// Otherwise, create an array by matching non-whitespace
key=key in cache?[key]:key.match(rnothtmlwhite)||[];}i=key.length;while(i--){delete cache[key[i]];}}// Remove the expando if there's no more data
if(key===undefined||jQuery.isEmptyObject(cache)){// Support: Chrome <=35 - 45
// Webkit & Blink performance suffers when deleting properties
// from DOM nodes, so set to undefined instead
// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
if(owner.nodeType){owner[this.expando]=undefined;}else{delete owner[this.expando];}}},hasData:function hasData(owner){var cache=owner[this.expando];return cache!==undefined&&!jQuery.isEmptyObject(cache);}};var dataPriv=new Data();var dataUser=new Data();//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
var rbrace=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,rmultiDash=/[A-Z]/g;function getData(data){if(data==="true"){return true;}if(data==="false"){return false;}if(data==="null"){return null;}// Only convert to a number if it doesn't change the string
if(data===+data+""){return+data;}if(rbrace.test(data)){return JSON.parse(data);}return data;}function dataAttr(elem,key,data){var name;// If nothing was found internally, try to fetch any
// data from the HTML5 data-* attribute
if(data===undefined&&elem.nodeType===1){name="data-"+key.replace(rmultiDash,"-$&").toLowerCase();data=elem.getAttribute(name);if(typeof data==="string"){try{data=getData(data);}catch(e){}// Make sure we set the data so it isn't changed later
dataUser.set(elem,key,data);}else{data=undefined;}}return data;}jQuery.extend({hasData:function hasData(elem){return dataUser.hasData(elem)||dataPriv.hasData(elem);},data:function data(elem,name,_data){return dataUser.access(elem,name,_data);},removeData:function removeData(elem,name){dataUser.remove(elem,name);},// TODO: Now that all calls to _data and _removeData have been replaced
// with direct calls to dataPriv methods, these can be deprecated.
_data:function _data(elem,name,data){return dataPriv.access(elem,name,data);},_removeData:function _removeData(elem,name){dataPriv.remove(elem,name);}});jQuery.fn.extend({data:function data(key,value){var i,name,data,elem=this[0],attrs=elem&&elem.attributes;// Gets all values
if(key===undefined){if(this.length){data=dataUser.get(elem);if(elem.nodeType===1&&!dataPriv.get(elem,"hasDataAttrs")){i=attrs.length;while(i--){// Support: IE 11 only
// The attrs elements can be null (#14894)
if(attrs[i]){name=attrs[i].name;if(name.indexOf("data-")===0){name=jQuery.camelCase(name.slice(5));dataAttr(elem,name,data[name]);}}}dataPriv.set(elem,"hasDataAttrs",true);}}return data;}// Sets multiple values
if((typeof key==="undefined"?"undefined":_typeof(key))==="object"){return this.each(function(){dataUser.set(this,key);});}return access(this,function(value){var data;// The calling jQuery object (element matches) is not empty
// (and therefore has an element appears at this[ 0 ]) and the
// `value` parameter was not undefined. An empty jQuery object
// will result in `undefined` for elem = this[ 0 ] which will
// throw an exception if an attempt to read a data cache is made.
if(elem&&value===undefined){// Attempt to get data from the cache
// The key will always be camelCased in Data
data=dataUser.get(elem,key);if(data!==undefined){return data;}// Attempt to "discover" the data in
// HTML5 custom data-* attrs
data=dataAttr(elem,key);if(data!==undefined){return data;}// We tried really hard, but the data doesn't exist.
return;}// Set the data...
this.each(function(){// We always store the camelCased key
dataUser.set(this,key,value);});},null,value,arguments.length>1,null,true);},removeData:function removeData(key){return this.each(function(){dataUser.remove(this,key);});}});jQuery.extend({queue:function queue(elem,type,data){var queue;if(elem){type=(type||"fx")+"queue";queue=dataPriv.get(elem,type);// Speed up dequeue by getting out quickly if this is just a lookup
if(data){if(!queue||jQuery.isArray(data)){queue=dataPriv.access(elem,type,jQuery.makeArray(data));}else{queue.push(data);}}return queue||[];}},dequeue:function dequeue(elem,type){type=type||"fx";var queue=jQuery.queue(elem,type),startLength=queue.length,fn=queue.shift(),hooks=jQuery._queueHooks(elem,type),next=function next(){jQuery.dequeue(elem,type);};// If the fx queue is dequeued, always remove the progress sentinel
if(fn==="inprogress"){fn=queue.shift();startLength--;}if(fn){// Add a progress sentinel to prevent the fx queue from being
// automatically dequeued
if(type==="fx"){queue.unshift("inprogress");}// Clear up the last queue stop function
delete hooks.stop;fn.call(elem,next,hooks);}if(!startLength&&hooks){hooks.empty.fire();}},// Not public - generate a queueHooks object, or return the current one
_queueHooks:function _queueHooks(elem,type){var key=type+"queueHooks";return dataPriv.get(elem,key)||dataPriv.access(elem,key,{empty:jQuery.Callbacks("once memory").add(function(){dataPriv.remove(elem,[type+"queue",key]);})});}});jQuery.fn.extend({queue:function queue(type,data){var setter=2;if(typeof type!=="string"){data=type;type="fx";setter--;}if(arguments.length<setter){return jQuery.queue(this[0],type);}return data===undefined?this:this.each(function(){var queue=jQuery.queue(this,type,data);// Ensure a hooks for this queue
jQuery._queueHooks(this,type);if(type==="fx"&&queue[0]!=="inprogress"){jQuery.dequeue(this,type);}});},dequeue:function dequeue(type){return this.each(function(){jQuery.dequeue(this,type);});},clearQueue:function clearQueue(type){return this.queue(type||"fx",[]);},// Get a promise resolved when queues of a certain type
// are emptied (fx is the type by default)
promise:function promise(type,obj){var tmp,count=1,defer=jQuery.Deferred(),elements=this,i=this.length,resolve=function resolve(){if(! --count){defer.resolveWith(elements,[elements]);}};if(typeof type!=="string"){obj=type;type=undefined;}type=type||"fx";while(i--){tmp=dataPriv.get(elements[i],type+"queueHooks");if(tmp&&tmp.empty){count++;tmp.empty.add(resolve);}}resolve();return defer.promise(obj);}});var pnum=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var rcssNum=new RegExp("^(?:([+-])=|)("+pnum+")([a-z%]*)$","i");var cssExpand=["Top","Right","Bottom","Left"];var isHiddenWithinTree=function isHiddenWithinTree(elem,el){// isHiddenWithinTree might be called from jQuery#filter function;
// in that case, element will be second argument
elem=el||elem;// Inline style trumps all
return elem.style.display==="none"||elem.style.display===""&&// Otherwise, check computed style
// Support: Firefox <=43 - 45
// Disconnected elements can have computed display: none, so first confirm that elem is
// in the document.
jQuery.contains(elem.ownerDocument,elem)&&jQuery.css(elem,"display")==="none";};var swap=function swap(elem,options,callback,args){var ret,name,old={};// Remember the old values, and insert the new ones
for(name in options){old[name]=elem.style[name];elem.style[name]=options[name];}ret=callback.apply(elem,args||[]);// Revert the old values
for(name in options){elem.style[name]=old[name];}return ret;};function adjustCSS(elem,prop,valueParts,tween){var adjusted,scale=1,maxIterations=20,currentValue=tween?function(){return tween.cur();}:function(){return jQuery.css(elem,prop,"");},initial=currentValue(),unit=valueParts&&valueParts[3]||(jQuery.cssNumber[prop]?"":"px"),// Starting value computation is required for potential unit mismatches
initialInUnit=(jQuery.cssNumber[prop]||unit!=="px"&&+initial)&&rcssNum.exec(jQuery.css(elem,prop));if(initialInUnit&&initialInUnit[3]!==unit){// Trust units reported by jQuery.css
unit=unit||initialInUnit[3];// Make sure we update the tween properties later on
valueParts=valueParts||[];// Iteratively approximate from a nonzero starting point
initialInUnit=+initial||1;do{// If previous iteration zeroed out, double until we get *something*.
// Use string for doubling so we don't accidentally see scale as unchanged below
scale=scale||".5";// Adjust and apply
initialInUnit=initialInUnit/scale;jQuery.style(elem,prop,initialInUnit+unit);// Update scale, tolerating zero or NaN from tween.cur()
// Break the loop if scale is unchanged or perfect, or if we've just had enough.
}while(scale!==(scale=currentValue()/initial)&&scale!==1&&--maxIterations);}if(valueParts){initialInUnit=+initialInUnit||+initial||0;// Apply relative offset (+=/-=) if specified
adjusted=valueParts[1]?initialInUnit+(valueParts[1]+1)*valueParts[2]:+valueParts[2];if(tween){tween.unit=unit;tween.start=initialInUnit;tween.end=adjusted;}}return adjusted;}var defaultDisplayMap={};function getDefaultDisplay(elem){var temp,doc=elem.ownerDocument,nodeName=elem.nodeName,display=defaultDisplayMap[nodeName];if(display){return display;}temp=doc.body.appendChild(doc.createElement(nodeName));display=jQuery.css(temp,"display");temp.parentNode.removeChild(temp);if(display==="none"){display="block";}defaultDisplayMap[nodeName]=display;return display;}function showHide(elements,show){var display,elem,values=[],index=0,length=elements.length;// Determine new display value for elements that need to change
for(;index<length;index++){elem=elements[index];if(!elem.style){continue;}display=elem.style.display;if(show){// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
// check is required in this first loop unless we have a nonempty display value (either
// inline or about-to-be-restored)
if(display==="none"){values[index]=dataPriv.get(elem,"display")||null;if(!values[index]){elem.style.display="";}}if(elem.style.display===""&&isHiddenWithinTree(elem)){values[index]=getDefaultDisplay(elem);}}else{if(display!=="none"){values[index]="none";// Remember what we're overwriting
dataPriv.set(elem,"display",display);}}}// Set the display of the elements in a second loop to avoid constant reflow
for(index=0;index<length;index++){if(values[index]!=null){elements[index].style.display=values[index];}}return elements;}jQuery.fn.extend({show:function show(){return showHide(this,true);},hide:function hide(){return showHide(this);},toggle:function toggle(state){if(typeof state==="boolean"){return state?this.show():this.hide();}return this.each(function(){if(isHiddenWithinTree(this)){jQuery(this).show();}else{jQuery(this).hide();}});}});var rcheckableType=/^(?:checkbox|radio)$/i;var rtagName=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i;var rscriptType=/^$|\/(?:java|ecma)script/i;// We have to close these tags to support XHTML (#13200)
var wrapMap={// Support: IE <=9 only
option:[1,"<select multiple='multiple'>","</select>"],// XHTML parsers do not magically insert elements in the
// same way that tag soup parsers do. So we cannot shorten
// this by omitting <tbody> or other required elements.
thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};// Support: IE <=9 only
wrapMap.optgroup=wrapMap.option;wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead;wrapMap.th=wrapMap.td;function getAll(context,tag){// Support: IE <=9 - 11 only
// Use typeof to avoid zero-argument method invocation on host objects (#15151)
var ret;if(typeof context.getElementsByTagName!=="undefined"){ret=context.getElementsByTagName(tag||"*");}else if(typeof context.querySelectorAll!=="undefined"){ret=context.querySelectorAll(tag||"*");}else{ret=[];}if(tag===undefined||tag&&jQuery.nodeName(context,tag)){return jQuery.merge([context],ret);}return ret;}// Mark scripts as having already been evaluated
function setGlobalEval(elems,refElements){var i=0,l=elems.length;for(;i<l;i++){dataPriv.set(elems[i],"globalEval",!refElements||dataPriv.get(refElements[i],"globalEval"));}}var rhtml=/<|&#?\w+;/;function buildFragment(elems,context,scripts,selection,ignored){var elem,tmp,tag,wrap,contains,j,fragment=context.createDocumentFragment(),nodes=[],i=0,l=elems.length;for(;i<l;i++){elem=elems[i];if(elem||elem===0){// Add nodes directly
if(jQuery.type(elem)==="object"){// Support: Android <=4.0 only, PhantomJS 1 only
// push.apply(_, arraylike) throws on ancient WebKit
jQuery.merge(nodes,elem.nodeType?[elem]:elem);// Convert non-html into a text node
}else if(!rhtml.test(elem)){nodes.push(context.createTextNode(elem));// Convert html into DOM nodes
}else{tmp=tmp||fragment.appendChild(context.createElement("div"));// Deserialize a standard representation
tag=(rtagName.exec(elem)||["",""])[1].toLowerCase();wrap=wrapMap[tag]||wrapMap._default;tmp.innerHTML=wrap[1]+jQuery.htmlPrefilter(elem)+wrap[2];// Descend through wrappers to the right content
j=wrap[0];while(j--){tmp=tmp.lastChild;}// Support: Android <=4.0 only, PhantomJS 1 only
// push.apply(_, arraylike) throws on ancient WebKit
jQuery.merge(nodes,tmp.childNodes);// Remember the top-level container
tmp=fragment.firstChild;// Ensure the created nodes are orphaned (#12392)
tmp.textContent="";}}}// Remove wrapper from fragment
fragment.textContent="";i=0;while(elem=nodes[i++]){// Skip elements already in the context collection (trac-4087)
if(selection&&jQuery.inArray(elem,selection)>-1){if(ignored){ignored.push(elem);}continue;}contains=jQuery.contains(elem.ownerDocument,elem);// Append to fragment
tmp=getAll(fragment.appendChild(elem),"script");// Preserve script evaluation history
if(contains){setGlobalEval(tmp);}// Capture executables
if(scripts){j=0;while(elem=tmp[j++]){if(rscriptType.test(elem.type||"")){scripts.push(elem);}}}}return fragment;}(function(){var fragment=document.createDocumentFragment(),div=fragment.appendChild(document.createElement("div")),input=document.createElement("input");// Support: Android 4.0 - 4.3 only
// Check state lost if the name is set (#11217)
// Support: Windows Web Apps (WWA)
// `name` and `type` must use .setAttribute for WWA (#14901)
input.setAttribute("type","radio");input.setAttribute("checked","checked");input.setAttribute("name","t");div.appendChild(input);// Support: Android <=4.1 only
// Older WebKit doesn't clone checked state correctly in fragments
support.checkClone=div.cloneNode(true).cloneNode(true).lastChild.checked;// Support: IE <=11 only
// Make sure textarea (and checkbox) defaultValue is properly cloned
div.innerHTML="<textarea>x</textarea>";support.noCloneChecked=!!div.cloneNode(true).lastChild.defaultValue;})();var documentElement=document.documentElement;var rkeyEvent=/^key/,rmouseEvent=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,rtypenamespace=/^([^.]*)(?:\.(.+)|)/;function returnTrue(){return true;}function returnFalse(){return false;}// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement(){try{return document.activeElement;}catch(err){}}function _on(elem,types,selector,data,fn,one){var origFn,type;// Types can be a map of types/handlers
if((typeof types==="undefined"?"undefined":_typeof(types))==="object"){// ( types-Object, selector, data )
if(typeof selector!=="string"){// ( types-Object, data )
data=data||selector;selector=undefined;}for(type in types){_on(elem,type,selector,data,types[type],one);}return elem;}if(data==null&&fn==null){// ( types, fn )
fn=selector;data=selector=undefined;}else if(fn==null){if(typeof selector==="string"){// ( types, selector, fn )
fn=data;data=undefined;}else{// ( types, data, fn )
fn=data;data=selector;selector=undefined;}}if(fn===false){fn=returnFalse;}else if(!fn){return elem;}if(one===1){origFn=fn;fn=function fn(event){// Can use an empty set, since event contains the info
jQuery().off(event);return origFn.apply(this,arguments);};// Use same guid so caller can remove using origFn
fn.guid=origFn.guid||(origFn.guid=jQuery.guid++);}return elem.each(function(){jQuery.event.add(this,types,fn,data,selector);});}/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */jQuery.event={global:{},add:function add(elem,types,handler,data,selector){var handleObjIn,eventHandle,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.get(elem);// Don't attach events to noData or text/comment nodes (but allow plain objects)
if(!elemData){return;}// Caller can pass in an object of custom data in lieu of the handler
if(handler.handler){handleObjIn=handler;handler=handleObjIn.handler;selector=handleObjIn.selector;}// Ensure that invalid selectors throw exceptions at attach time
// Evaluate against documentElement in case elem is a non-element node (e.g., document)
if(selector){jQuery.find.matchesSelector(documentElement,selector);}// Make sure that the handler has a unique ID, used to find/remove it later
if(!handler.guid){handler.guid=jQuery.guid++;}// Init the element's event structure and main handler, if this is the first
if(!(events=elemData.events)){events=elemData.events={};}if(!(eventHandle=elemData.handle)){eventHandle=elemData.handle=function(e){// Discard the second event of a jQuery.event.trigger() and
// when an event is called after a page has unloaded
return typeof jQuery!=="undefined"&&jQuery.event.triggered!==e.type?jQuery.event.dispatch.apply(elem,arguments):undefined;};}// Handle multiple events separated by a space
types=(types||"").match(rnothtmlwhite)||[""];t=types.length;while(t--){tmp=rtypenamespace.exec(types[t])||[];type=origType=tmp[1];namespaces=(tmp[2]||"").split(".").sort();// There *must* be a type, no attaching namespace-only handlers
if(!type){continue;}// If event changes its type, use the special event handlers for the changed type
special=jQuery.event.special[type]||{};// If selector defined, determine special event api type, otherwise given type
type=(selector?special.delegateType:special.bindType)||type;// Update special based on newly reset type
special=jQuery.event.special[type]||{};// handleObj is passed to all event handlers
handleObj=jQuery.extend({type:type,origType:origType,data:data,handler:handler,guid:handler.guid,selector:selector,needsContext:selector&&jQuery.expr.match.needsContext.test(selector),namespace:namespaces.join(".")},handleObjIn);// Init the event handler queue if we're the first
if(!(handlers=events[type])){handlers=events[type]=[];handlers.delegateCount=0;// Only use addEventListener if the special events handler returns false
if(!special.setup||special.setup.call(elem,data,namespaces,eventHandle)===false){if(elem.addEventListener){elem.addEventListener(type,eventHandle);}}}if(special.add){special.add.call(elem,handleObj);if(!handleObj.handler.guid){handleObj.handler.guid=handler.guid;}}// Add to the element's handler list, delegates in front
if(selector){handlers.splice(handlers.delegateCount++,0,handleObj);}else{handlers.push(handleObj);}// Keep track of which events have ever been used, for event optimization
jQuery.event.global[type]=true;}},// Detach an event or set of events from an element
remove:function remove(elem,types,handler,selector,mappedTypes){var j,origCount,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.hasData(elem)&&dataPriv.get(elem);if(!elemData||!(events=elemData.events)){return;}// Once for each type.namespace in types; type may be omitted
types=(types||"").match(rnothtmlwhite)||[""];t=types.length;while(t--){tmp=rtypenamespace.exec(types[t])||[];type=origType=tmp[1];namespaces=(tmp[2]||"").split(".").sort();// Unbind all events (on this namespace, if provided) for the element
if(!type){for(type in events){jQuery.event.remove(elem,type+types[t],handler,selector,true);}continue;}special=jQuery.event.special[type]||{};type=(selector?special.delegateType:special.bindType)||type;handlers=events[type]||[];tmp=tmp[2]&&new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)");// Remove matching events
origCount=j=handlers.length;while(j--){handleObj=handlers[j];if((mappedTypes||origType===handleObj.origType)&&(!handler||handler.guid===handleObj.guid)&&(!tmp||tmp.test(handleObj.namespace))&&(!selector||selector===handleObj.selector||selector==="**"&&handleObj.selector)){handlers.splice(j,1);if(handleObj.selector){handlers.delegateCount--;}if(special.remove){special.remove.call(elem,handleObj);}}}// Remove generic event handler if we removed something and no more handlers exist
// (avoids potential for endless recursion during removal of special event handlers)
if(origCount&&!handlers.length){if(!special.teardown||special.teardown.call(elem,namespaces,elemData.handle)===false){jQuery.removeEvent(elem,type,elemData.handle);}delete events[type];}}// Remove data and the expando if it's no longer used
if(jQuery.isEmptyObject(events)){dataPriv.remove(elem,"handle events");}},dispatch:function dispatch(nativeEvent){// Make a writable jQuery.Event from the native event object
var event=jQuery.event.fix(nativeEvent);var i,j,ret,matched,handleObj,handlerQueue,args=new Array(arguments.length),handlers=(dataPriv.get(this,"events")||{})[event.type]||[],special=jQuery.event.special[event.type]||{};// Use the fix-ed jQuery.Event rather than the (read-only) native event
args[0]=event;for(i=1;i<arguments.length;i++){args[i]=arguments[i];}event.delegateTarget=this;// Call the preDispatch hook for the mapped type, and let it bail if desired
if(special.preDispatch&&special.preDispatch.call(this,event)===false){return;}// Determine handlers
handlerQueue=jQuery.event.handlers.call(this,event,handlers);// Run delegates first; they may want to stop propagation beneath us
i=0;while((matched=handlerQueue[i++])&&!event.isPropagationStopped()){event.currentTarget=matched.elem;j=0;while((handleObj=matched.handlers[j++])&&!event.isImmediatePropagationStopped()){// Triggered event must either 1) have no namespace, or 2) have namespace(s)
// a subset or equal to those in the bound event (both can have no namespace).
if(!event.rnamespace||event.rnamespace.test(handleObj.namespace)){event.handleObj=handleObj;event.data=handleObj.data;ret=((jQuery.event.special[handleObj.origType]||{}).handle||handleObj.handler).apply(matched.elem,args);if(ret!==undefined){if((event.result=ret)===false){event.preventDefault();event.stopPropagation();}}}}}// Call the postDispatch hook for the mapped type
if(special.postDispatch){special.postDispatch.call(this,event);}return event.result;},handlers:function handlers(event,_handlers){var i,handleObj,sel,matchedHandlers,matchedSelectors,handlerQueue=[],delegateCount=_handlers.delegateCount,cur=event.target;// Find delegate handlers
if(delegateCount&&// Support: IE <=9
// Black-hole SVG <use> instance trees (trac-13180)
cur.nodeType&&// Support: Firefox <=42
// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
// Support: IE 11 only
// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
!(event.type==="click"&&event.button>=1)){for(;cur!==this;cur=cur.parentNode||this){// Don't check non-elements (#13208)
// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
if(cur.nodeType===1&&!(event.type==="click"&&cur.disabled===true)){matchedHandlers=[];matchedSelectors={};for(i=0;i<delegateCount;i++){handleObj=_handlers[i];// Don't conflict with Object.prototype properties (#13203)
sel=handleObj.selector+" ";if(matchedSelectors[sel]===undefined){matchedSelectors[sel]=handleObj.needsContext?jQuery(sel,this).index(cur)>-1:jQuery.find(sel,this,null,[cur]).length;}if(matchedSelectors[sel]){matchedHandlers.push(handleObj);}}if(matchedHandlers.length){handlerQueue.push({elem:cur,handlers:matchedHandlers});}}}}// Add the remaining (directly-bound) handlers
cur=this;if(delegateCount<_handlers.length){handlerQueue.push({elem:cur,handlers:_handlers.slice(delegateCount)});}return handlerQueue;},addProp:function addProp(name,hook){Object.defineProperty(jQuery.Event.prototype,name,{enumerable:true,configurable:true,get:jQuery.isFunction(hook)?function(){if(this.originalEvent){return hook(this.originalEvent);}}:function(){if(this.originalEvent){return this.originalEvent[name];}},set:function set(value){Object.defineProperty(this,name,{enumerable:true,configurable:true,writable:true,value:value});}});},fix:function fix(originalEvent){return originalEvent[jQuery.expando]?originalEvent:new jQuery.Event(originalEvent);},special:{load:{// Prevent triggered image.load events from bubbling to window.load
noBubble:true},focus:{// Fire native event if possible so blur/focus sequence is correct
trigger:function trigger(){if(this!==safeActiveElement()&&this.focus){this.focus();return false;}},delegateType:"focusin"},blur:{trigger:function trigger(){if(this===safeActiveElement()&&this.blur){this.blur();return false;}},delegateType:"focusout"},click:{// For checkbox, fire native event so checked state will be right
trigger:function trigger(){if(this.type==="checkbox"&&this.click&&jQuery.nodeName(this,"input")){this.click();return false;}},// For cross-browser consistency, don't fire native .click() on links
_default:function _default(event){return jQuery.nodeName(event.target,"a");}},beforeunload:{postDispatch:function postDispatch(event){// Support: Firefox 20+
// Firefox doesn't alert if the returnValue field is not set.
if(event.result!==undefined&&event.originalEvent){event.originalEvent.returnValue=event.result;}}}}};jQuery.removeEvent=function(elem,type,handle){// This "if" is needed for plain objects
if(elem.removeEventListener){elem.removeEventListener(type,handle);}};jQuery.Event=function(src,props){// Allow instantiation without the 'new' keyword
if(!(this instanceof jQuery.Event)){return new jQuery.Event(src,props);}// Event object
if(src&&src.type){this.originalEvent=src;this.type=src.type;// Events bubbling up the document may have been marked as prevented
// by a handler lower down the tree; reflect the correct value.
this.isDefaultPrevented=src.defaultPrevented||src.defaultPrevented===undefined&&// Support: Android <=2.3 only
src.returnValue===false?returnTrue:returnFalse;// Create target properties
// Support: Safari <=6 - 7 only
// Target should not be a text node (#504, #13143)
this.target=src.target&&src.target.nodeType===3?src.target.parentNode:src.target;this.currentTarget=src.currentTarget;this.relatedTarget=src.relatedTarget;// Event type
}else{this.type=src;}// Put explicitly provided properties onto the event object
if(props){jQuery.extend(this,props);}// Create a timestamp if incoming event doesn't have one
this.timeStamp=src&&src.timeStamp||jQuery.now();// Mark it as fixed
this[jQuery.expando]=true;};// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype={constructor:jQuery.Event,isDefaultPrevented:returnFalse,isPropagationStopped:returnFalse,isImmediatePropagationStopped:returnFalse,isSimulated:false,preventDefault:function preventDefault(){var e=this.originalEvent;this.isDefaultPrevented=returnTrue;if(e&&!this.isSimulated){e.preventDefault();}},stopPropagation:function stopPropagation(){var e=this.originalEvent;this.isPropagationStopped=returnTrue;if(e&&!this.isSimulated){e.stopPropagation();}},stopImmediatePropagation:function stopImmediatePropagation(){var e=this.originalEvent;this.isImmediatePropagationStopped=returnTrue;if(e&&!this.isSimulated){e.stopImmediatePropagation();}this.stopPropagation();}};// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,"char":true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:function which(event){var button=event.button;// Add which for key events
if(event.which==null&&rkeyEvent.test(event.type)){return event.charCode!=null?event.charCode:event.keyCode;}// Add which for click: 1 === left; 2 === middle; 3 === right
if(!event.which&&button!==undefined&&rmouseEvent.test(event.type)){if(button&1){return 1;}if(button&2){return 3;}if(button&4){return 2;}return 0;}return event.which;}},jQuery.event.addProp);// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(orig,fix){jQuery.event.special[orig]={delegateType:fix,bindType:fix,handle:function handle(event){var ret,target=this,related=event.relatedTarget,handleObj=event.handleObj;// For mouseenter/leave call the handler if related is outside the target.
// NB: No relatedTarget if the mouse left/entered the browser window
if(!related||related!==target&&!jQuery.contains(target,related)){event.type=handleObj.origType;ret=handleObj.handler.apply(this,arguments);event.type=fix;}return ret;}};});jQuery.fn.extend({on:function on(types,selector,data,fn){return _on(this,types,selector,data,fn);},one:function one(types,selector,data,fn){return _on(this,types,selector,data,fn,1);},off:function off(types,selector,fn){var handleObj,type;if(types&&types.preventDefault&&types.handleObj){// ( event )  dispatched jQuery.Event
handleObj=types.handleObj;jQuery(types.delegateTarget).off(handleObj.namespace?handleObj.origType+"."+handleObj.namespace:handleObj.origType,handleObj.selector,handleObj.handler);return this;}if((typeof types==="undefined"?"undefined":_typeof(types))==="object"){// ( types-object [, selector] )
for(type in types){this.off(type,selector,types[type]);}return this;}if(selector===false||typeof selector==="function"){// ( types [, fn] )
fn=selector;selector=undefined;}if(fn===false){fn=returnFalse;}return this.each(function(){jQuery.event.remove(this,types,fn,selector);});}});var/* eslint-disable max-len */// See https://github.com/eslint/eslint/issues/3229
rxhtmlTag=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,/* eslint-enable */// Support: IE <=10 - 11, Edge 12 - 13
// In IE/Edge using regex groups here causes severe slowdowns.
// See https://connect.microsoft.com/IE/feedback/details/1736512/
rnoInnerhtml=/<script|<style|<link/i,// checked="checked" or checked
rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i,rscriptTypeMasked=/^true\/(.*)/,rcleanScript=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function manipulationTarget(elem,content){if(jQuery.nodeName(elem,"table")&&jQuery.nodeName(content.nodeType!==11?content:content.firstChild,"tr")){return elem.getElementsByTagName("tbody")[0]||elem;}return elem;}// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript(elem){elem.type=(elem.getAttribute("type")!==null)+"/"+elem.type;return elem;}function restoreScript(elem){var match=rscriptTypeMasked.exec(elem.type);if(match){elem.type=match[1];}else{elem.removeAttribute("type");}return elem;}function cloneCopyEvent(src,dest){var i,l,type,pdataOld,pdataCur,udataOld,udataCur,events;if(dest.nodeType!==1){return;}// 1. Copy private data: events, handlers, etc.
if(dataPriv.hasData(src)){pdataOld=dataPriv.access(src);pdataCur=dataPriv.set(dest,pdataOld);events=pdataOld.events;if(events){delete pdataCur.handle;pdataCur.events={};for(type in events){for(i=0,l=events[type].length;i<l;i++){jQuery.event.add(dest,type,events[type][i]);}}}}// 2. Copy user data
if(dataUser.hasData(src)){udataOld=dataUser.access(src);udataCur=jQuery.extend({},udataOld);dataUser.set(dest,udataCur);}}// Fix IE bugs, see support tests
function fixInput(src,dest){var nodeName=dest.nodeName.toLowerCase();// Fails to persist the checked state of a cloned checkbox or radio button.
if(nodeName==="input"&&rcheckableType.test(src.type)){dest.checked=src.checked;// Fails to return the selected option to the default selected state when cloning options
}else if(nodeName==="input"||nodeName==="textarea"){dest.defaultValue=src.defaultValue;}}function domManip(collection,args,callback,ignored){// Flatten any nested arrays
args=concat.apply([],args);var fragment,first,scripts,hasScripts,node,doc,i=0,l=collection.length,iNoClone=l-1,value=args[0],isFunction=jQuery.isFunction(value);// We can't cloneNode fragments that contain checked, in WebKit
if(isFunction||l>1&&typeof value==="string"&&!support.checkClone&&rchecked.test(value)){return collection.each(function(index){var self=collection.eq(index);if(isFunction){args[0]=value.call(this,index,self.html());}domManip(self,args,callback,ignored);});}if(l){fragment=buildFragment(args,collection[0].ownerDocument,false,collection,ignored);first=fragment.firstChild;if(fragment.childNodes.length===1){fragment=first;}// Require either new content or an interest in ignored elements to invoke the callback
if(first||ignored){scripts=jQuery.map(getAll(fragment,"script"),disableScript);hasScripts=scripts.length;// Use the original fragment for the last item
// instead of the first because it can end up
// being emptied incorrectly in certain situations (#8070).
for(;i<l;i++){node=fragment;if(i!==iNoClone){node=jQuery.clone(node,true,true);// Keep references to cloned scripts for later restoration
if(hasScripts){// Support: Android <=4.0 only, PhantomJS 1 only
// push.apply(_, arraylike) throws on ancient WebKit
jQuery.merge(scripts,getAll(node,"script"));}}callback.call(collection[i],node,i);}if(hasScripts){doc=scripts[scripts.length-1].ownerDocument;// Reenable scripts
jQuery.map(scripts,restoreScript);// Evaluate executable scripts on first document insertion
for(i=0;i<hasScripts;i++){node=scripts[i];if(rscriptType.test(node.type||"")&&!dataPriv.access(node,"globalEval")&&jQuery.contains(doc,node)){if(node.src){// Optional AJAX dependency, but won't run scripts if not present
if(jQuery._evalUrl){jQuery._evalUrl(node.src);}}else{DOMEval(node.textContent.replace(rcleanScript,""),doc);}}}}}}return collection;}function _remove(elem,selector,keepData){var node,nodes=selector?jQuery.filter(selector,elem):elem,i=0;for(;(node=nodes[i])!=null;i++){if(!keepData&&node.nodeType===1){jQuery.cleanData(getAll(node));}if(node.parentNode){if(keepData&&jQuery.contains(node.ownerDocument,node)){setGlobalEval(getAll(node,"script"));}node.parentNode.removeChild(node);}}return elem;}jQuery.extend({htmlPrefilter:function htmlPrefilter(html){return html.replace(rxhtmlTag,"<$1></$2>");},clone:function clone(elem,dataAndEvents,deepDataAndEvents){var i,l,srcElements,destElements,clone=elem.cloneNode(true),inPage=jQuery.contains(elem.ownerDocument,elem);// Fix IE cloning issues
if(!support.noCloneChecked&&(elem.nodeType===1||elem.nodeType===11)&&!jQuery.isXMLDoc(elem)){// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
destElements=getAll(clone);srcElements=getAll(elem);for(i=0,l=srcElements.length;i<l;i++){fixInput(srcElements[i],destElements[i]);}}// Copy the events from the original to the clone
if(dataAndEvents){if(deepDataAndEvents){srcElements=srcElements||getAll(elem);destElements=destElements||getAll(clone);for(i=0,l=srcElements.length;i<l;i++){cloneCopyEvent(srcElements[i],destElements[i]);}}else{cloneCopyEvent(elem,clone);}}// Preserve script evaluation history
destElements=getAll(clone,"script");if(destElements.length>0){setGlobalEval(destElements,!inPage&&getAll(elem,"script"));}// Return the cloned set
return clone;},cleanData:function cleanData(elems){var data,elem,type,special=jQuery.event.special,i=0;for(;(elem=elems[i])!==undefined;i++){if(acceptData(elem)){if(data=elem[dataPriv.expando]){if(data.events){for(type in data.events){if(special[type]){jQuery.event.remove(elem,type);// This is a shortcut to avoid jQuery.event.remove's overhead
}else{jQuery.removeEvent(elem,type,data.handle);}}}// Support: Chrome <=35 - 45+
// Assign undefined instead of using delete, see Data#remove
elem[dataPriv.expando]=undefined;}if(elem[dataUser.expando]){// Support: Chrome <=35 - 45+
// Assign undefined instead of using delete, see Data#remove
elem[dataUser.expando]=undefined;}}}}});jQuery.fn.extend({detach:function detach(selector){return _remove(this,selector,true);},remove:function remove(selector){return _remove(this,selector);},text:function text(value){return access(this,function(value){return value===undefined?jQuery.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=value;}});},null,value,arguments.length);},append:function append(){return domManip(this,arguments,function(elem){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var target=manipulationTarget(this,elem);target.appendChild(elem);}});},prepend:function prepend(){return domManip(this,arguments,function(elem){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var target=manipulationTarget(this,elem);target.insertBefore(elem,target.firstChild);}});},before:function before(){return domManip(this,arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this);}});},after:function after(){return domManip(this,arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this.nextSibling);}});},empty:function empty(){var elem,i=0;for(;(elem=this[i])!=null;i++){if(elem.nodeType===1){// Prevent memory leaks
jQuery.cleanData(getAll(elem,false));// Remove any remaining nodes
elem.textContent="";}}return this;},clone:function clone(dataAndEvents,deepDataAndEvents){dataAndEvents=dataAndEvents==null?false:dataAndEvents;deepDataAndEvents=deepDataAndEvents==null?dataAndEvents:deepDataAndEvents;return this.map(function(){return jQuery.clone(this,dataAndEvents,deepDataAndEvents);});},html:function html(value){return access(this,function(value){var elem=this[0]||{},i=0,l=this.length;if(value===undefined&&elem.nodeType===1){return elem.innerHTML;}// See if we can take a shortcut and just use innerHTML
if(typeof value==="string"&&!rnoInnerhtml.test(value)&&!wrapMap[(rtagName.exec(value)||["",""])[1].toLowerCase()]){value=jQuery.htmlPrefilter(value);try{for(;i<l;i++){elem=this[i]||{};// Remove element nodes and prevent memory leaks
if(elem.nodeType===1){jQuery.cleanData(getAll(elem,false));elem.innerHTML=value;}}elem=0;// If using innerHTML throws an exception, use the fallback method
}catch(e){}}if(elem){this.empty().append(value);}},null,value,arguments.length);},replaceWith:function replaceWith(){var ignored=[];// Make the changes, replacing each non-ignored context element with the new content
return domManip(this,arguments,function(elem){var parent=this.parentNode;if(jQuery.inArray(this,ignored)<0){jQuery.cleanData(getAll(this));if(parent){parent.replaceChild(elem,this);}}// Force callback invocation
},ignored);}});jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(selector){var elems,ret=[],insert=jQuery(selector),last=insert.length-1,i=0;for(;i<=last;i++){elems=i===last?this:this.clone(true);jQuery(insert[i])[original](elems);// Support: Android <=4.0 only, PhantomJS 1 only
// .get() because push.apply(_, arraylike) throws on ancient WebKit
push.apply(ret,elems.get());}return this.pushStack(ret);};});var rmargin=/^margin/;var rnumnonpx=new RegExp("^("+pnum+")(?!px)[a-z%]+$","i");var getStyles=function getStyles(elem){// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
// IE throws on elements created in popups
// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
var view=elem.ownerDocument.defaultView;if(!view||!view.opener){view=window;}return view.getComputedStyle(elem);};(function(){// Executing both pixelPosition & boxSizingReliable tests require only one layout
// so they're executed at the same time to save the second computation.
function computeStyleTests(){// This is a singleton, we need to execute it only once
if(!div){return;}div.style.cssText="box-sizing:border-box;"+"position:relative;display:block;"+"margin:auto;border:1px;padding:1px;"+"top:1%;width:50%";div.innerHTML="";documentElement.appendChild(container);var divStyle=window.getComputedStyle(div);pixelPositionVal=divStyle.top!=="1%";// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
reliableMarginLeftVal=divStyle.marginLeft==="2px";boxSizingReliableVal=divStyle.width==="4px";// Support: Android 4.0 - 4.3 only
// Some styles come back with percentage values, even though they shouldn't
div.style.marginRight="50%";pixelMarginRightVal=divStyle.marginRight==="4px";documentElement.removeChild(container);// Nullify the div so it wouldn't be stored in the memory and
// it will also be a sign that checks already performed
div=null;}var pixelPositionVal,boxSizingReliableVal,pixelMarginRightVal,reliableMarginLeftVal,container=document.createElement("div"),div=document.createElement("div");// Finish early in limited (non-browser) environments
if(!div.style){return;}// Support: IE <=9 - 11 only
// Style of cloned element affects source element cloned (#8908)
div.style.backgroundClip="content-box";div.cloneNode(true).style.backgroundClip="";support.clearCloneStyle=div.style.backgroundClip==="content-box";container.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;"+"padding:0;margin-top:1px;position:absolute";container.appendChild(div);jQuery.extend(support,{pixelPosition:function pixelPosition(){computeStyleTests();return pixelPositionVal;},boxSizingReliable:function boxSizingReliable(){computeStyleTests();return boxSizingReliableVal;},pixelMarginRight:function pixelMarginRight(){computeStyleTests();return pixelMarginRightVal;},reliableMarginLeft:function reliableMarginLeft(){computeStyleTests();return reliableMarginLeftVal;}});})();function curCSS(elem,name,computed){var width,minWidth,maxWidth,ret,style=elem.style;computed=computed||getStyles(elem);// Support: IE <=9 only
// getPropertyValue is only needed for .css('filter') (#12537)
if(computed){ret=computed.getPropertyValue(name)||computed[name];if(ret===""&&!jQuery.contains(elem.ownerDocument,elem)){ret=jQuery.style(elem,name);}// A tribute to the "awesome hack by Dean Edwards"
// Android Browser returns percentage for some values,
// but width seems to be reliably pixels.
// This is against the CSSOM draft spec:
// https://drafts.csswg.org/cssom/#resolved-values
if(!support.pixelMarginRight()&&rnumnonpx.test(ret)&&rmargin.test(name)){// Remember the original values
width=style.width;minWidth=style.minWidth;maxWidth=style.maxWidth;// Put in the new values to get a computed value out
style.minWidth=style.maxWidth=style.width=ret;ret=computed.width;// Revert the changed values
style.width=width;style.minWidth=minWidth;style.maxWidth=maxWidth;}}return ret!==undefined?// Support: IE <=9 - 11 only
// IE returns zIndex value as an integer.
ret+"":ret;}function addGetHookIf(conditionFn,hookFn){// Define the hook, we'll check on the first run if it's really needed.
return{get:function get(){if(conditionFn()){// Hook not needed (or it's not possible to use it due
// to missing dependency), remove it.
delete this.get;return;}// Hook needed; redefine it so that the support test is not executed again.
return(this.get=hookFn).apply(this,arguments);}};}var// Swappable if display is none or starts with table
// except "table", "table-cell", or "table-caption"
// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
rdisplayswap=/^(none|table(?!-c[ea]).+)/,cssShow={position:"absolute",visibility:"hidden",display:"block"},cssNormalTransform={letterSpacing:"0",fontWeight:"400"},cssPrefixes=["Webkit","Moz","ms"],emptyStyle=document.createElement("div").style;// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName(name){// Shortcut for names that are not vendor prefixed
if(name in emptyStyle){return name;}// Check for vendor prefixed names
var capName=name[0].toUpperCase()+name.slice(1),i=cssPrefixes.length;while(i--){name=cssPrefixes[i]+capName;if(name in emptyStyle){return name;}}}function setPositiveNumber(elem,value,subtract){// Any relative (+/-) values have already been
// normalized at this point
var matches=rcssNum.exec(value);return matches?// Guard against undefined "subtract", e.g., when used as in cssHooks
Math.max(0,matches[2]-(subtract||0))+(matches[3]||"px"):value;}function augmentWidthOrHeight(elem,name,extra,isBorderBox,styles){var i,val=0;// If we already have the right measurement, avoid augmentation
if(extra===(isBorderBox?"border":"content")){i=4;// Otherwise initialize for horizontal or vertical properties
}else{i=name==="width"?1:0;}for(;i<4;i+=2){// Both box models exclude margin, so add it if we want it
if(extra==="margin"){val+=jQuery.css(elem,extra+cssExpand[i],true,styles);}if(isBorderBox){// border-box includes padding, so remove it if we want content
if(extra==="content"){val-=jQuery.css(elem,"padding"+cssExpand[i],true,styles);}// At this point, extra isn't border nor margin, so remove border
if(extra!=="margin"){val-=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles);}}else{// At this point, extra isn't content, so add padding
val+=jQuery.css(elem,"padding"+cssExpand[i],true,styles);// At this point, extra isn't content nor padding, so add border
if(extra!=="padding"){val+=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles);}}}return val;}function getWidthOrHeight(elem,name,extra){// Start with offset property, which is equivalent to the border-box value
var val,valueIsBorderBox=true,styles=getStyles(elem),isBorderBox=jQuery.css(elem,"boxSizing",false,styles)==="border-box";// Support: IE <=11 only
// Running getBoundingClientRect on a disconnected node
// in IE throws an error.
if(elem.getClientRects().length){val=elem.getBoundingClientRect()[name];}// Some non-html elements return undefined for offsetWidth, so check for null/undefined
// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
if(val<=0||val==null){// Fall back to computed then uncomputed css if necessary
val=curCSS(elem,name,styles);if(val<0||val==null){val=elem.style[name];}// Computed unit is not pixels. Stop here and return.
if(rnumnonpx.test(val)){return val;}// Check for style in case a browser which returns unreliable values
// for getComputedStyle silently falls back to the reliable elem.style
valueIsBorderBox=isBorderBox&&(support.boxSizingReliable()||val===elem.style[name]);// Normalize "", auto, and prepare for extra
val=parseFloat(val)||0;}// Use the active box-sizing model to add/subtract irrelevant styles
return val+augmentWidthOrHeight(elem,name,extra||(isBorderBox?"border":"content"),valueIsBorderBox,styles)+"px";}jQuery.extend({// Add in style property hooks for overriding the default
// behavior of getting and setting a style property
cssHooks:{opacity:{get:function get(elem,computed){if(computed){// We should always get a number back from opacity
var ret=curCSS(elem,"opacity");return ret===""?"1":ret;}}}},// Don't automatically add "px" to these possibly-unitless properties
cssNumber:{"animationIterationCount":true,"columnCount":true,"fillOpacity":true,"flexGrow":true,"flexShrink":true,"fontWeight":true,"lineHeight":true,"opacity":true,"order":true,"orphans":true,"widows":true,"zIndex":true,"zoom":true},// Add in properties whose names you wish to fix before
// setting or getting the value
cssProps:{"float":"cssFloat"},// Get and set the style property on a DOM Node
style:function style(elem,name,value,extra){// Don't set styles on text and comment nodes
if(!elem||elem.nodeType===3||elem.nodeType===8||!elem.style){return;}// Make sure that we're working with the right name
var ret,type,hooks,origName=jQuery.camelCase(name),style=elem.style;name=jQuery.cssProps[origName]||(jQuery.cssProps[origName]=vendorPropName(origName)||origName);// Gets hook for the prefixed version, then unprefixed version
hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];// Check if we're setting a value
if(value!==undefined){type=typeof value==="undefined"?"undefined":_typeof(value);// Convert "+=" or "-=" to relative numbers (#7345)
if(type==="string"&&(ret=rcssNum.exec(value))&&ret[1]){value=adjustCSS(elem,name,ret);// Fixes bug #9237
type="number";}// Make sure that null and NaN values aren't set (#7116)
if(value==null||value!==value){return;}// If a number was passed in, add the unit (except for certain CSS properties)
if(type==="number"){value+=ret&&ret[3]||(jQuery.cssNumber[origName]?"":"px");}// background-* props affect original clone's values
if(!support.clearCloneStyle&&value===""&&name.indexOf("background")===0){style[name]="inherit";}// If a hook was provided, use that value, otherwise just set the specified value
if(!hooks||!("set"in hooks)||(value=hooks.set(elem,value,extra))!==undefined){style[name]=value;}}else{// If a hook was provided get the non-computed value from there
if(hooks&&"get"in hooks&&(ret=hooks.get(elem,false,extra))!==undefined){return ret;}// Otherwise just get the value from the style object
return style[name];}},css:function css(elem,name,extra,styles){var val,num,hooks,origName=jQuery.camelCase(name);// Make sure that we're working with the right name
name=jQuery.cssProps[origName]||(jQuery.cssProps[origName]=vendorPropName(origName)||origName);// Try prefixed name followed by the unprefixed name
hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];// If a hook was provided get the computed value from there
if(hooks&&"get"in hooks){val=hooks.get(elem,true,extra);}// Otherwise, if a way to get the computed value exists, use that
if(val===undefined){val=curCSS(elem,name,styles);}// Convert "normal" to computed value
if(val==="normal"&&name in cssNormalTransform){val=cssNormalTransform[name];}// Make numeric if forced or a qualifier was provided and val looks numeric
if(extra===""||extra){num=parseFloat(val);return extra===true||isFinite(num)?num||0:val;}return val;}});jQuery.each(["height","width"],function(i,name){jQuery.cssHooks[name]={get:function get(elem,computed,extra){if(computed){// Certain elements can have dimension info if we invisibly show them
// but it must have a current display style that would benefit
return rdisplayswap.test(jQuery.css(elem,"display"))&&(// Support: Safari 8+
// Table columns in Safari have non-zero offsetWidth & zero
// getBoundingClientRect().width unless display is changed.
// Support: IE <=11 only
// Running getBoundingClientRect on a disconnected node
// in IE throws an error.
!elem.getClientRects().length||!elem.getBoundingClientRect().width)?swap(elem,cssShow,function(){return getWidthOrHeight(elem,name,extra);}):getWidthOrHeight(elem,name,extra);}},set:function set(elem,value,extra){var matches,styles=extra&&getStyles(elem),subtract=extra&&augmentWidthOrHeight(elem,name,extra,jQuery.css(elem,"boxSizing",false,styles)==="border-box",styles);// Convert to pixels if value adjustment is needed
if(subtract&&(matches=rcssNum.exec(value))&&(matches[3]||"px")!=="px"){elem.style[name]=value;value=jQuery.css(elem,name);}return setPositiveNumber(elem,value,subtract);}};});jQuery.cssHooks.marginLeft=addGetHookIf(support.reliableMarginLeft,function(elem,computed){if(computed){return(parseFloat(curCSS(elem,"marginLeft"))||elem.getBoundingClientRect().left-swap(elem,{marginLeft:0},function(){return elem.getBoundingClientRect().left;}))+"px";}});// These hooks are used by animate to expand properties
jQuery.each({margin:"",padding:"",border:"Width"},function(prefix,suffix){jQuery.cssHooks[prefix+suffix]={expand:function expand(value){var i=0,expanded={},// Assumes a single number if not a string
parts=typeof value==="string"?value.split(" "):[value];for(;i<4;i++){expanded[prefix+cssExpand[i]+suffix]=parts[i]||parts[i-2]||parts[0];}return expanded;}};if(!rmargin.test(prefix)){jQuery.cssHooks[prefix+suffix].set=setPositiveNumber;}});jQuery.fn.extend({css:function css(name,value){return access(this,function(elem,name,value){var styles,len,map={},i=0;if(jQuery.isArray(name)){styles=getStyles(elem);len=name.length;for(;i<len;i++){map[name[i]]=jQuery.css(elem,name[i],false,styles);}return map;}return value!==undefined?jQuery.style(elem,name,value):jQuery.css(elem,name);},name,value,arguments.length>1);}});function Tween(elem,options,prop,end,easing){return new Tween.prototype.init(elem,options,prop,end,easing);}jQuery.Tween=Tween;Tween.prototype={constructor:Tween,init:function init(elem,options,prop,end,easing,unit){this.elem=elem;this.prop=prop;this.easing=easing||jQuery.easing._default;this.options=options;this.start=this.now=this.cur();this.end=end;this.unit=unit||(jQuery.cssNumber[prop]?"":"px");},cur:function cur(){var hooks=Tween.propHooks[this.prop];return hooks&&hooks.get?hooks.get(this):Tween.propHooks._default.get(this);},run:function run(percent){var eased,hooks=Tween.propHooks[this.prop];if(this.options.duration){this.pos=eased=jQuery.easing[this.easing](percent,this.options.duration*percent,0,1,this.options.duration);}else{this.pos=eased=percent;}this.now=(this.end-this.start)*eased+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this);}if(hooks&&hooks.set){hooks.set(this);}else{Tween.propHooks._default.set(this);}return this;}};Tween.prototype.init.prototype=Tween.prototype;Tween.propHooks={_default:{get:function get(tween){var result;// Use a property on the element directly when it is not a DOM element,
// or when there is no matching style property that exists.
if(tween.elem.nodeType!==1||tween.elem[tween.prop]!=null&&tween.elem.style[tween.prop]==null){return tween.elem[tween.prop];}// Passing an empty string as a 3rd parameter to .css will automatically
// attempt a parseFloat and fallback to a string if the parse fails.
// Simple values such as "10px" are parsed to Float;
// complex values such as "rotate(1rad)" are returned as-is.
result=jQuery.css(tween.elem,tween.prop,"");// Empty strings, null, undefined and "auto" are converted to 0.
return!result||result==="auto"?0:result;},set:function set(tween){// Use step hook for back compat.
// Use cssHook if its there.
// Use .style if available and use plain properties where available.
if(jQuery.fx.step[tween.prop]){jQuery.fx.step[tween.prop](tween);}else if(tween.elem.nodeType===1&&(tween.elem.style[jQuery.cssProps[tween.prop]]!=null||jQuery.cssHooks[tween.prop])){jQuery.style(tween.elem,tween.prop,tween.now+tween.unit);}else{tween.elem[tween.prop]=tween.now;}}}};// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop=Tween.propHooks.scrollLeft={set:function set(tween){if(tween.elem.nodeType&&tween.elem.parentNode){tween.elem[tween.prop]=tween.now;}}};jQuery.easing={linear:function linear(p){return p;},swing:function swing(p){return 0.5-Math.cos(p*Math.PI)/2;},_default:"swing"};jQuery.fx=Tween.prototype.init;// Back compat <1.8 extension point
jQuery.fx.step={};var fxNow,timerId,rfxtypes=/^(?:toggle|show|hide)$/,rrun=/queueHooks$/;function raf(){if(timerId){window.requestAnimationFrame(raf);jQuery.fx.tick();}}// Animations created synchronously will run synchronously
function createFxNow(){window.setTimeout(function(){fxNow=undefined;});return fxNow=jQuery.now();}// Generate parameters to create a standard animation
function genFx(type,includeWidth){var which,i=0,attrs={height:type};// If we include width, step value is 1 to do all cssExpand values,
// otherwise step value is 2 to skip over Left and Right
includeWidth=includeWidth?1:0;for(;i<4;i+=2-includeWidth){which=cssExpand[i];attrs["margin"+which]=attrs["padding"+which]=type;}if(includeWidth){attrs.opacity=attrs.width=type;}return attrs;}function createTween(value,prop,animation){var tween,collection=(Animation.tweeners[prop]||[]).concat(Animation.tweeners["*"]),index=0,length=collection.length;for(;index<length;index++){if(tween=collection[index].call(animation,prop,value)){// We're done with this property
return tween;}}}function defaultPrefilter(elem,props,opts){var prop,value,toggle,hooks,oldfire,propTween,restoreDisplay,display,isBox="width"in props||"height"in props,anim=this,orig={},style=elem.style,hidden=elem.nodeType&&isHiddenWithinTree(elem),dataShow=dataPriv.get(elem,"fxshow");// Queue-skipping animations hijack the fx hooks
if(!opts.queue){hooks=jQuery._queueHooks(elem,"fx");if(hooks.unqueued==null){hooks.unqueued=0;oldfire=hooks.empty.fire;hooks.empty.fire=function(){if(!hooks.unqueued){oldfire();}};}hooks.unqueued++;anim.always(function(){// Ensure the complete handler is called before this completes
anim.always(function(){hooks.unqueued--;if(!jQuery.queue(elem,"fx").length){hooks.empty.fire();}});});}// Detect show/hide animations
for(prop in props){value=props[prop];if(rfxtypes.test(value)){delete props[prop];toggle=toggle||value==="toggle";if(value===(hidden?"hide":"show")){// Pretend to be hidden if this is a "show" and
// there is still data from a stopped show/hide
if(value==="show"&&dataShow&&dataShow[prop]!==undefined){hidden=true;// Ignore all other no-op show/hide data
}else{continue;}}orig[prop]=dataShow&&dataShow[prop]||jQuery.style(elem,prop);}}// Bail out if this is a no-op like .hide().hide()
propTween=!jQuery.isEmptyObject(props);if(!propTween&&jQuery.isEmptyObject(orig)){return;}// Restrict "overflow" and "display" styles during box animations
if(isBox&&elem.nodeType===1){// Support: IE <=9 - 11, Edge 12 - 13
// Record all 3 overflow attributes because IE does not infer the shorthand
// from identically-valued overflowX and overflowY
opts.overflow=[style.overflow,style.overflowX,style.overflowY];// Identify a display type, preferring old show/hide data over the CSS cascade
restoreDisplay=dataShow&&dataShow.display;if(restoreDisplay==null){restoreDisplay=dataPriv.get(elem,"display");}display=jQuery.css(elem,"display");if(display==="none"){if(restoreDisplay){display=restoreDisplay;}else{// Get nonempty value(s) by temporarily forcing visibility
showHide([elem],true);restoreDisplay=elem.style.display||restoreDisplay;display=jQuery.css(elem,"display");showHide([elem]);}}// Animate inline elements as inline-block
if(display==="inline"||display==="inline-block"&&restoreDisplay!=null){if(jQuery.css(elem,"float")==="none"){// Restore the original display value at the end of pure show/hide animations
if(!propTween){anim.done(function(){style.display=restoreDisplay;});if(restoreDisplay==null){display=style.display;restoreDisplay=display==="none"?"":display;}}style.display="inline-block";}}}if(opts.overflow){style.overflow="hidden";anim.always(function(){style.overflow=opts.overflow[0];style.overflowX=opts.overflow[1];style.overflowY=opts.overflow[2];});}// Implement show/hide animations
propTween=false;for(prop in orig){// General show/hide setup for this element animation
if(!propTween){if(dataShow){if("hidden"in dataShow){hidden=dataShow.hidden;}}else{dataShow=dataPriv.access(elem,"fxshow",{display:restoreDisplay});}// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
if(toggle){dataShow.hidden=!hidden;}// Show elements before animating them
if(hidden){showHide([elem],true);}/* eslint-disable no-loop-func */anim.done(function(){/* eslint-enable no-loop-func */// The final step of a "hide" animation is actually hiding the element
if(!hidden){showHide([elem]);}dataPriv.remove(elem,"fxshow");for(prop in orig){jQuery.style(elem,prop,orig[prop]);}});}// Per-property setup
propTween=createTween(hidden?dataShow[prop]:0,prop,anim);if(!(prop in dataShow)){dataShow[prop]=propTween.start;if(hidden){propTween.end=propTween.start;propTween.start=0;}}}}function propFilter(props,specialEasing){var index,name,easing,value,hooks;// camelCase, specialEasing and expand cssHook pass
for(index in props){name=jQuery.camelCase(index);easing=specialEasing[name];value=props[index];if(jQuery.isArray(value)){easing=value[1];value=props[index]=value[0];}if(index!==name){props[name]=value;delete props[index];}hooks=jQuery.cssHooks[name];if(hooks&&"expand"in hooks){value=hooks.expand(value);delete props[name];// Not quite $.extend, this won't overwrite existing keys.
// Reusing 'index' because we have the correct "name"
for(index in value){if(!(index in props)){props[index]=value[index];specialEasing[index]=easing;}}}else{specialEasing[name]=easing;}}}function Animation(elem,properties,options){var result,stopped,index=0,length=Animation.prefilters.length,deferred=jQuery.Deferred().always(function(){// Don't match elem in the :animated selector
delete tick.elem;}),tick=function tick(){if(stopped){return false;}var currentTime=fxNow||createFxNow(),remaining=Math.max(0,animation.startTime+animation.duration-currentTime),// Support: Android 2.3 only
// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
temp=remaining/animation.duration||0,percent=1-temp,index=0,length=animation.tweens.length;for(;index<length;index++){animation.tweens[index].run(percent);}deferred.notifyWith(elem,[animation,percent,remaining]);if(percent<1&&length){return remaining;}else{deferred.resolveWith(elem,[animation]);return false;}},animation=deferred.promise({elem:elem,props:jQuery.extend({},properties),opts:jQuery.extend(true,{specialEasing:{},easing:jQuery.easing._default},options),originalProperties:properties,originalOptions:options,startTime:fxNow||createFxNow(),duration:options.duration,tweens:[],createTween:function createTween(prop,end){var tween=jQuery.Tween(elem,animation.opts,prop,end,animation.opts.specialEasing[prop]||animation.opts.easing);animation.tweens.push(tween);return tween;},stop:function stop(gotoEnd){var index=0,// If we are going to the end, we want to run all the tweens
// otherwise we skip this part
length=gotoEnd?animation.tweens.length:0;if(stopped){return this;}stopped=true;for(;index<length;index++){animation.tweens[index].run(1);}// Resolve when we played the last frame; otherwise, reject
if(gotoEnd){deferred.notifyWith(elem,[animation,1,0]);deferred.resolveWith(elem,[animation,gotoEnd]);}else{deferred.rejectWith(elem,[animation,gotoEnd]);}return this;}}),props=animation.props;propFilter(props,animation.opts.specialEasing);for(;index<length;index++){result=Animation.prefilters[index].call(animation,elem,props,animation.opts);if(result){if(jQuery.isFunction(result.stop)){jQuery._queueHooks(animation.elem,animation.opts.queue).stop=jQuery.proxy(result.stop,result);}return result;}}jQuery.map(props,createTween,animation);if(jQuery.isFunction(animation.opts.start)){animation.opts.start.call(elem,animation);}jQuery.fx.timer(jQuery.extend(tick,{elem:elem,anim:animation,queue:animation.opts.queue}));// attach callbacks from options
return animation.progress(animation.opts.progress).done(animation.opts.done,animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);}jQuery.Animation=jQuery.extend(Animation,{tweeners:{"*":[function(prop,value){var tween=this.createTween(prop,value);adjustCSS(tween.elem,prop,rcssNum.exec(value),tween);return tween;}]},tweener:function tweener(props,callback){if(jQuery.isFunction(props)){callback=props;props=["*"];}else{props=props.match(rnothtmlwhite);}var prop,index=0,length=props.length;for(;index<length;index++){prop=props[index];Animation.tweeners[prop]=Animation.tweeners[prop]||[];Animation.tweeners[prop].unshift(callback);}},prefilters:[defaultPrefilter],prefilter:function prefilter(callback,prepend){if(prepend){Animation.prefilters.unshift(callback);}else{Animation.prefilters.push(callback);}}});jQuery.speed=function(speed,easing,fn){var opt=speed&&(typeof speed==="undefined"?"undefined":_typeof(speed))==="object"?jQuery.extend({},speed):{complete:fn||!fn&&easing||jQuery.isFunction(speed)&&speed,duration:speed,easing:fn&&easing||easing&&!jQuery.isFunction(easing)&&easing};// Go to the end state if fx are off or if document is hidden
if(jQuery.fx.off||document.hidden){opt.duration=0;}else{if(typeof opt.duration!=="number"){if(opt.duration in jQuery.fx.speeds){opt.duration=jQuery.fx.speeds[opt.duration];}else{opt.duration=jQuery.fx.speeds._default;}}}// Normalize opt.queue - true/undefined/null -> "fx"
if(opt.queue==null||opt.queue===true){opt.queue="fx";}// Queueing
opt.old=opt.complete;opt.complete=function(){if(jQuery.isFunction(opt.old)){opt.old.call(this);}if(opt.queue){jQuery.dequeue(this,opt.queue);}};return opt;};jQuery.fn.extend({fadeTo:function fadeTo(speed,to,easing,callback){// Show any hidden elements after setting opacity to 0
return this.filter(isHiddenWithinTree).css("opacity",0).show()// Animate to the value specified
.end().animate({opacity:to},speed,easing,callback);},animate:function animate(prop,speed,easing,callback){var empty=jQuery.isEmptyObject(prop),optall=jQuery.speed(speed,easing,callback),doAnimation=function doAnimation(){// Operate on a copy of prop so per-property easing won't be lost
var anim=Animation(this,jQuery.extend({},prop),optall);// Empty animations, or finishing resolves immediately
if(empty||dataPriv.get(this,"finish")){anim.stop(true);}};doAnimation.finish=doAnimation;return empty||optall.queue===false?this.each(doAnimation):this.queue(optall.queue,doAnimation);},stop:function stop(type,clearQueue,gotoEnd){var stopQueue=function stopQueue(hooks){var stop=hooks.stop;delete hooks.stop;stop(gotoEnd);};if(typeof type!=="string"){gotoEnd=clearQueue;clearQueue=type;type=undefined;}if(clearQueue&&type!==false){this.queue(type||"fx",[]);}return this.each(function(){var dequeue=true,index=type!=null&&type+"queueHooks",timers=jQuery.timers,data=dataPriv.get(this);if(index){if(data[index]&&data[index].stop){stopQueue(data[index]);}}else{for(index in data){if(data[index]&&data[index].stop&&rrun.test(index)){stopQueue(data[index]);}}}for(index=timers.length;index--;){if(timers[index].elem===this&&(type==null||timers[index].queue===type)){timers[index].anim.stop(gotoEnd);dequeue=false;timers.splice(index,1);}}// Start the next in the queue if the last step wasn't forced.
// Timers currently will call their complete callbacks, which
// will dequeue but only if they were gotoEnd.
if(dequeue||!gotoEnd){jQuery.dequeue(this,type);}});},finish:function finish(type){if(type!==false){type=type||"fx";}return this.each(function(){var index,data=dataPriv.get(this),queue=data[type+"queue"],hooks=data[type+"queueHooks"],timers=jQuery.timers,length=queue?queue.length:0;// Enable finishing flag on private data
data.finish=true;// Empty the queue first
jQuery.queue(this,type,[]);if(hooks&&hooks.stop){hooks.stop.call(this,true);}// Look for any active animations, and finish them
for(index=timers.length;index--;){if(timers[index].elem===this&&timers[index].queue===type){timers[index].anim.stop(true);timers.splice(index,1);}}// Look for any animations in the old queue and finish them
for(index=0;index<length;index++){if(queue[index]&&queue[index].finish){queue[index].finish.call(this);}}// Turn off finishing flag
delete data.finish;});}});jQuery.each(["toggle","show","hide"],function(i,name){var cssFn=jQuery.fn[name];jQuery.fn[name]=function(speed,easing,callback){return speed==null||typeof speed==="boolean"?cssFn.apply(this,arguments):this.animate(genFx(name,true),speed,easing,callback);};});// Generate shortcuts for custom animations
jQuery.each({slideDown:genFx("show"),slideUp:genFx("hide"),slideToggle:genFx("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(name,props){jQuery.fn[name]=function(speed,easing,callback){return this.animate(props,speed,easing,callback);};});jQuery.timers=[];jQuery.fx.tick=function(){var timer,i=0,timers=jQuery.timers;fxNow=jQuery.now();for(;i<timers.length;i++){timer=timers[i];// Checks the timer has not already been removed
if(!timer()&&timers[i]===timer){timers.splice(i--,1);}}if(!timers.length){jQuery.fx.stop();}fxNow=undefined;};jQuery.fx.timer=function(timer){jQuery.timers.push(timer);if(timer()){jQuery.fx.start();}else{jQuery.timers.pop();}};jQuery.fx.interval=13;jQuery.fx.start=function(){if(!timerId){timerId=window.requestAnimationFrame?window.requestAnimationFrame(raf):window.setInterval(jQuery.fx.tick,jQuery.fx.interval);}};jQuery.fx.stop=function(){if(window.cancelAnimationFrame){window.cancelAnimationFrame(timerId);}else{window.clearInterval(timerId);}timerId=null;};jQuery.fx.speeds={slow:600,fast:200,// Default speed
_default:400};// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay=function(time,type){time=jQuery.fx?jQuery.fx.speeds[time]||time:time;type=type||"fx";return this.queue(type,function(next,hooks){var timeout=window.setTimeout(next,time);hooks.stop=function(){window.clearTimeout(timeout);};});};(function(){var input=document.createElement("input"),select=document.createElement("select"),opt=select.appendChild(document.createElement("option"));input.type="checkbox";// Support: Android <=4.3 only
// Default value for a checkbox should be "on"
support.checkOn=input.value!=="";// Support: IE <=11 only
// Must access selectedIndex to make default options select
support.optSelected=opt.selected;// Support: IE <=11 only
// An input loses its value after becoming a radio
input=document.createElement("input");input.value="t";input.type="radio";support.radioValue=input.value==="t";})();var boolHook,attrHandle=jQuery.expr.attrHandle;jQuery.fn.extend({attr:function attr(name,value){return access(this,jQuery.attr,name,value,arguments.length>1);},removeAttr:function removeAttr(name){return this.each(function(){jQuery.removeAttr(this,name);});}});jQuery.extend({attr:function attr(elem,name,value){var ret,hooks,nType=elem.nodeType;// Don't get/set attributes on text, comment and attribute nodes
if(nType===3||nType===8||nType===2){return;}// Fallback to prop when attributes are not supported
if(typeof elem.getAttribute==="undefined"){return jQuery.prop(elem,name,value);}// Attribute hooks are determined by the lowercase version
// Grab necessary hook if one is defined
if(nType!==1||!jQuery.isXMLDoc(elem)){hooks=jQuery.attrHooks[name.toLowerCase()]||(jQuery.expr.match.bool.test(name)?boolHook:undefined);}if(value!==undefined){if(value===null){jQuery.removeAttr(elem,name);return;}if(hooks&&"set"in hooks&&(ret=hooks.set(elem,value,name))!==undefined){return ret;}elem.setAttribute(name,value+"");return value;}if(hooks&&"get"in hooks&&(ret=hooks.get(elem,name))!==null){return ret;}ret=jQuery.find.attr(elem,name);// Non-existent attributes return null, we normalize to undefined
return ret==null?undefined:ret;},attrHooks:{type:{set:function set(elem,value){if(!support.radioValue&&value==="radio"&&jQuery.nodeName(elem,"input")){var val=elem.value;elem.setAttribute("type",value);if(val){elem.value=val;}return value;}}}},removeAttr:function removeAttr(elem,value){var name,i=0,// Attribute names can contain non-HTML whitespace characters
// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
attrNames=value&&value.match(rnothtmlwhite);if(attrNames&&elem.nodeType===1){while(name=attrNames[i++]){elem.removeAttribute(name);}}}});// Hooks for boolean attributes
boolHook={set:function set(elem,value,name){if(value===false){// Remove boolean attributes when set to false
jQuery.removeAttr(elem,name);}else{elem.setAttribute(name,name);}return name;}};jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g),function(i,name){var getter=attrHandle[name]||jQuery.find.attr;attrHandle[name]=function(elem,name,isXML){var ret,handle,lowercaseName=name.toLowerCase();if(!isXML){// Avoid an infinite loop by temporarily removing this function from the getter
handle=attrHandle[lowercaseName];attrHandle[lowercaseName]=ret;ret=getter(elem,name,isXML)!=null?lowercaseName:null;attrHandle[lowercaseName]=handle;}return ret;};});var rfocusable=/^(?:input|select|textarea|button)$/i,rclickable=/^(?:a|area)$/i;jQuery.fn.extend({prop:function prop(name,value){return access(this,jQuery.prop,name,value,arguments.length>1);},removeProp:function removeProp(name){return this.each(function(){delete this[jQuery.propFix[name]||name];});}});jQuery.extend({prop:function prop(elem,name,value){var ret,hooks,nType=elem.nodeType;// Don't get/set properties on text, comment and attribute nodes
if(nType===3||nType===8||nType===2){return;}if(nType!==1||!jQuery.isXMLDoc(elem)){// Fix name and attach hooks
name=jQuery.propFix[name]||name;hooks=jQuery.propHooks[name];}if(value!==undefined){if(hooks&&"set"in hooks&&(ret=hooks.set(elem,value,name))!==undefined){return ret;}return elem[name]=value;}if(hooks&&"get"in hooks&&(ret=hooks.get(elem,name))!==null){return ret;}return elem[name];},propHooks:{tabIndex:{get:function get(elem){// Support: IE <=9 - 11 only
// elem.tabIndex doesn't always return the
// correct value when it hasn't been explicitly set
// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
// Use proper attribute retrieval(#12072)
var tabindex=jQuery.find.attr(elem,"tabindex");if(tabindex){return parseInt(tabindex,10);}if(rfocusable.test(elem.nodeName)||rclickable.test(elem.nodeName)&&elem.href){return 0;}return-1;}}},propFix:{"for":"htmlFor","class":"className"}});// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if(!support.optSelected){jQuery.propHooks.selected={get:function get(elem){/* eslint no-unused-expressions: "off" */var parent=elem.parentNode;if(parent&&parent.parentNode){parent.parentNode.selectedIndex;}return null;},set:function set(elem){/* eslint no-unused-expressions: "off" */var parent=elem.parentNode;if(parent){parent.selectedIndex;if(parent.parentNode){parent.parentNode.selectedIndex;}}}};}jQuery.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){jQuery.propFix[this.toLowerCase()]=this;});// Strip and collapse whitespace according to HTML spec
// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
function stripAndCollapse(value){var tokens=value.match(rnothtmlwhite)||[];return tokens.join(" ");}function getClass(elem){return elem.getAttribute&&elem.getAttribute("class")||"";}jQuery.fn.extend({addClass:function addClass(value){var classes,elem,cur,curValue,clazz,j,finalValue,i=0;if(jQuery.isFunction(value)){return this.each(function(j){jQuery(this).addClass(value.call(this,j,getClass(this)));});}if(typeof value==="string"&&value){classes=value.match(rnothtmlwhite)||[];while(elem=this[i++]){curValue=getClass(elem);cur=elem.nodeType===1&&" "+stripAndCollapse(curValue)+" ";if(cur){j=0;while(clazz=classes[j++]){if(cur.indexOf(" "+clazz+" ")<0){cur+=clazz+" ";}}// Only assign if different to avoid unneeded rendering.
finalValue=stripAndCollapse(cur);if(curValue!==finalValue){elem.setAttribute("class",finalValue);}}}}return this;},removeClass:function removeClass(value){var classes,elem,cur,curValue,clazz,j,finalValue,i=0;if(jQuery.isFunction(value)){return this.each(function(j){jQuery(this).removeClass(value.call(this,j,getClass(this)));});}if(!arguments.length){return this.attr("class","");}if(typeof value==="string"&&value){classes=value.match(rnothtmlwhite)||[];while(elem=this[i++]){curValue=getClass(elem);// This expression is here for better compressibility (see addClass)
cur=elem.nodeType===1&&" "+stripAndCollapse(curValue)+" ";if(cur){j=0;while(clazz=classes[j++]){// Remove *all* instances
while(cur.indexOf(" "+clazz+" ")>-1){cur=cur.replace(" "+clazz+" "," ");}}// Only assign if different to avoid unneeded rendering.
finalValue=stripAndCollapse(cur);if(curValue!==finalValue){elem.setAttribute("class",finalValue);}}}}return this;},toggleClass:function toggleClass(value,stateVal){var type=typeof value==="undefined"?"undefined":_typeof(value);if(typeof stateVal==="boolean"&&type==="string"){return stateVal?this.addClass(value):this.removeClass(value);}if(jQuery.isFunction(value)){return this.each(function(i){jQuery(this).toggleClass(value.call(this,i,getClass(this),stateVal),stateVal);});}return this.each(function(){var className,i,self,classNames;if(type==="string"){// Toggle individual class names
i=0;self=jQuery(this);classNames=value.match(rnothtmlwhite)||[];while(className=classNames[i++]){// Check each className given, space separated list
if(self.hasClass(className)){self.removeClass(className);}else{self.addClass(className);}}// Toggle whole class name
}else if(value===undefined||type==="boolean"){className=getClass(this);if(className){// Store className if set
dataPriv.set(this,"__className__",className);}// If the element has a class name or if we're passed `false`,
// then remove the whole classname (if there was one, the above saved it).
// Otherwise bring back whatever was previously saved (if anything),
// falling back to the empty string if nothing was stored.
if(this.setAttribute){this.setAttribute("class",className||value===false?"":dataPriv.get(this,"__className__")||"");}}});},hasClass:function hasClass(selector){var className,elem,i=0;className=" "+selector+" ";while(elem=this[i++]){if(elem.nodeType===1&&(" "+stripAndCollapse(getClass(elem))+" ").indexOf(className)>-1){return true;}}return false;}});var rreturn=/\r/g;jQuery.fn.extend({val:function val(value){var hooks,ret,isFunction,elem=this[0];if(!arguments.length){if(elem){hooks=jQuery.valHooks[elem.type]||jQuery.valHooks[elem.nodeName.toLowerCase()];if(hooks&&"get"in hooks&&(ret=hooks.get(elem,"value"))!==undefined){return ret;}ret=elem.value;// Handle most common string cases
if(typeof ret==="string"){return ret.replace(rreturn,"");}// Handle cases where value is null/undef or number
return ret==null?"":ret;}return;}isFunction=jQuery.isFunction(value);return this.each(function(i){var val;if(this.nodeType!==1){return;}if(isFunction){val=value.call(this,i,jQuery(this).val());}else{val=value;}// Treat null/undefined as ""; convert numbers to string
if(val==null){val="";}else if(typeof val==="number"){val+="";}else if(jQuery.isArray(val)){val=jQuery.map(val,function(value){return value==null?"":value+"";});}hooks=jQuery.valHooks[this.type]||jQuery.valHooks[this.nodeName.toLowerCase()];// If set returns undefined, fall back to normal setting
if(!hooks||!("set"in hooks)||hooks.set(this,val,"value")===undefined){this.value=val;}});}});jQuery.extend({valHooks:{option:{get:function get(elem){var val=jQuery.find.attr(elem,"value");return val!=null?val:// Support: IE <=10 - 11 only
// option.text throws exceptions (#14686, #14858)
// Strip and collapse whitespace
// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
stripAndCollapse(jQuery.text(elem));}},select:{get:function get(elem){var value,option,i,options=elem.options,index=elem.selectedIndex,one=elem.type==="select-one",values=one?null:[],max=one?index+1:options.length;if(index<0){i=max;}else{i=one?index:0;}// Loop through all the selected options
for(;i<max;i++){option=options[i];// Support: IE <=9 only
// IE8-9 doesn't update selected after form reset (#2551)
if((option.selected||i===index)&&// Don't return options that are disabled or in a disabled optgroup
!option.disabled&&(!option.parentNode.disabled||!jQuery.nodeName(option.parentNode,"optgroup"))){// Get the specific value for the option
value=jQuery(option).val();// We don't need an array for one selects
if(one){return value;}// Multi-Selects return an array
values.push(value);}}return values;},set:function set(elem,value){var optionSet,option,options=elem.options,values=jQuery.makeArray(value),i=options.length;while(i--){option=options[i];/* eslint-disable no-cond-assign */if(option.selected=jQuery.inArray(jQuery.valHooks.option.get(option),values)>-1){optionSet=true;}/* eslint-enable no-cond-assign */}// Force browsers to behave consistently when non-matching value is set
if(!optionSet){elem.selectedIndex=-1;}return values;}}}});// Radios and checkboxes getter/setter
jQuery.each(["radio","checkbox"],function(){jQuery.valHooks[this]={set:function set(elem,value){if(jQuery.isArray(value)){return elem.checked=jQuery.inArray(jQuery(elem).val(),value)>-1;}}};if(!support.checkOn){jQuery.valHooks[this].get=function(elem){return elem.getAttribute("value")===null?"on":elem.value;};}});// Return jQuery for attributes-only inclusion
var rfocusMorph=/^(?:focusinfocus|focusoutblur)$/;jQuery.extend(jQuery.event,{trigger:function trigger(event,data,elem,onlyHandlers){var i,cur,tmp,bubbleType,ontype,handle,special,eventPath=[elem||document],type=hasOwn.call(event,"type")?event.type:event,namespaces=hasOwn.call(event,"namespace")?event.namespace.split("."):[];cur=tmp=elem=elem||document;// Don't do events on text and comment nodes
if(elem.nodeType===3||elem.nodeType===8){return;}// focus/blur morphs to focusin/out; ensure we're not firing them right now
if(rfocusMorph.test(type+jQuery.event.triggered)){return;}if(type.indexOf(".")>-1){// Namespaced trigger; create a regexp to match event type in handle()
namespaces=type.split(".");type=namespaces.shift();namespaces.sort();}ontype=type.indexOf(":")<0&&"on"+type;// Caller can pass in a jQuery.Event object, Object, or just an event type string
event=event[jQuery.expando]?event:new jQuery.Event(type,(typeof event==="undefined"?"undefined":_typeof(event))==="object"&&event);// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
event.isTrigger=onlyHandlers?2:3;event.namespace=namespaces.join(".");event.rnamespace=event.namespace?new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;// Clean up the event in case it is being reused
event.result=undefined;if(!event.target){event.target=elem;}// Clone any incoming data and prepend the event, creating the handler arg list
data=data==null?[event]:jQuery.makeArray(data,[event]);// Allow special events to draw outside the lines
special=jQuery.event.special[type]||{};if(!onlyHandlers&&special.trigger&&special.trigger.apply(elem,data)===false){return;}// Determine event propagation path in advance, per W3C events spec (#9951)
// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
if(!onlyHandlers&&!special.noBubble&&!jQuery.isWindow(elem)){bubbleType=special.delegateType||type;if(!rfocusMorph.test(bubbleType+type)){cur=cur.parentNode;}for(;cur;cur=cur.parentNode){eventPath.push(cur);tmp=cur;}// Only add window if we got to document (e.g., not plain obj or detached DOM)
if(tmp===(elem.ownerDocument||document)){eventPath.push(tmp.defaultView||tmp.parentWindow||window);}}// Fire handlers on the event path
i=0;while((cur=eventPath[i++])&&!event.isPropagationStopped()){event.type=i>1?bubbleType:special.bindType||type;// jQuery handler
handle=(dataPriv.get(cur,"events")||{})[event.type]&&dataPriv.get(cur,"handle");if(handle){handle.apply(cur,data);}// Native handler
handle=ontype&&cur[ontype];if(handle&&handle.apply&&acceptData(cur)){event.result=handle.apply(cur,data);if(event.result===false){event.preventDefault();}}}event.type=type;// If nobody prevented the default action, do it now
if(!onlyHandlers&&!event.isDefaultPrevented()){if((!special._default||special._default.apply(eventPath.pop(),data)===false)&&acceptData(elem)){// Call a native DOM method on the target with the same name as the event.
// Don't do default actions on window, that's where global variables be (#6170)
if(ontype&&jQuery.isFunction(elem[type])&&!jQuery.isWindow(elem)){// Don't re-trigger an onFOO event when we call its FOO() method
tmp=elem[ontype];if(tmp){elem[ontype]=null;}// Prevent re-triggering of the same event, since we already bubbled it above
jQuery.event.triggered=type;elem[type]();jQuery.event.triggered=undefined;if(tmp){elem[ontype]=tmp;}}}}return event.result;},// Piggyback on a donor event to simulate a different one
// Used only for `focus(in | out)` events
simulate:function simulate(type,elem,event){var e=jQuery.extend(new jQuery.Event(),event,{type:type,isSimulated:true});jQuery.event.trigger(e,null,elem);}});jQuery.fn.extend({trigger:function trigger(type,data){return this.each(function(){jQuery.event.trigger(type,data,this);});},triggerHandler:function triggerHandler(type,data){var elem=this[0];if(elem){return jQuery.event.trigger(type,data,elem,true);}}});jQuery.each(("blur focus focusin focusout resize scroll click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup contextmenu").split(" "),function(i,name){// Handle event binding
jQuery.fn[name]=function(data,fn){return arguments.length>0?this.on(name,null,data,fn):this.trigger(name);};});jQuery.fn.extend({hover:function hover(fnOver,fnOut){return this.mouseenter(fnOver).mouseleave(fnOut||fnOver);}});support.focusin="onfocusin"in window;// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if(!support.focusin){jQuery.each({focus:"focusin",blur:"focusout"},function(orig,fix){// Attach a single capturing handler on the document while someone wants focusin/focusout
var handler=function handler(event){jQuery.event.simulate(fix,event.target,jQuery.event.fix(event));};jQuery.event.special[fix]={setup:function setup(){var doc=this.ownerDocument||this,attaches=dataPriv.access(doc,fix);if(!attaches){doc.addEventListener(orig,handler,true);}dataPriv.access(doc,fix,(attaches||0)+1);},teardown:function teardown(){var doc=this.ownerDocument||this,attaches=dataPriv.access(doc,fix)-1;if(!attaches){doc.removeEventListener(orig,handler,true);dataPriv.remove(doc,fix);}else{dataPriv.access(doc,fix,attaches);}}};});}var location=window.location;var nonce=jQuery.now();var rquery=/\?/;// Cross-browser xml parsing
jQuery.parseXML=function(data){var xml;if(!data||typeof data!=="string"){return null;}// Support: IE 9 - 11 only
// IE throws on parseFromString with invalid input.
try{xml=new window.DOMParser().parseFromString(data,"text/xml");}catch(e){xml=undefined;}if(!xml||xml.getElementsByTagName("parsererror").length){jQuery.error("Invalid XML: "+data);}return xml;};var rbracket=/\[\]$/,rCRLF=/\r?\n/g,rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i,rsubmittable=/^(?:input|select|textarea|keygen)/i;function buildParams(prefix,obj,traditional,add){var name;if(jQuery.isArray(obj)){// Serialize array item.
jQuery.each(obj,function(i,v){if(traditional||rbracket.test(prefix)){// Treat each array item as a scalar.
add(prefix,v);}else{// Item is non-scalar (array or object), encode its numeric index.
buildParams(prefix+"["+((typeof v==="undefined"?"undefined":_typeof(v))==="object"&&v!=null?i:"")+"]",v,traditional,add);}});}else if(!traditional&&jQuery.type(obj)==="object"){// Serialize object item.
for(name in obj){buildParams(prefix+"["+name+"]",obj[name],traditional,add);}}else{// Serialize scalar item.
add(prefix,obj);}}// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param=function(a,traditional){var prefix,s=[],add=function add(key,valueOrFunction){// If value is a function, invoke it and use its return value
var value=jQuery.isFunction(valueOrFunction)?valueOrFunction():valueOrFunction;s[s.length]=encodeURIComponent(key)+"="+encodeURIComponent(value==null?"":value);};// If an array was passed in, assume that it is an array of form elements.
if(jQuery.isArray(a)||a.jquery&&!jQuery.isPlainObject(a)){// Serialize the form elements
jQuery.each(a,function(){add(this.name,this.value);});}else{// If traditional, encode the "old" way (the way 1.3.2 or older
// did it), otherwise encode params recursively.
for(prefix in a){buildParams(prefix,a[prefix],traditional,add);}}// Return the resulting serialization
return s.join("&");};jQuery.fn.extend({serialize:function serialize(){return jQuery.param(this.serializeArray());},serializeArray:function serializeArray(){return this.map(function(){// Can add propHook for "elements" to filter or add form elements
var elements=jQuery.prop(this,"elements");return elements?jQuery.makeArray(elements):this;}).filter(function(){var type=this.type;// Use .is( ":disabled" ) so that fieldset[disabled] works
return this.name&&!jQuery(this).is(":disabled")&&rsubmittable.test(this.nodeName)&&!rsubmitterTypes.test(type)&&(this.checked||!rcheckableType.test(type));}).map(function(i,elem){var val=jQuery(this).val();if(val==null){return null;}if(jQuery.isArray(val)){return jQuery.map(val,function(val){return{name:elem.name,value:val.replace(rCRLF,"\r\n")};});}return{name:elem.name,value:val.replace(rCRLF,"\r\n")};}).get();}});var r20=/%20/g,rhash=/#.*$/,rantiCache=/([?&])_=[^&]*/,rheaders=/^(.*?):[ \t]*([^\r\n]*)$/mg,// #7653, #8125, #8152: local protocol detection
rlocalProtocol=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,rnoContent=/^(?:GET|HEAD)$/,rprotocol=/^\/\//,/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */prefilters={},/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */transports={},// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
allTypes="*/".concat("*"),// Anchor tag for parsing the document origin
originAnchor=document.createElement("a");originAnchor.href=location.href;// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports(structure){// dataTypeExpression is optional and defaults to "*"
return function(dataTypeExpression,func){if(typeof dataTypeExpression!=="string"){func=dataTypeExpression;dataTypeExpression="*";}var dataType,i=0,dataTypes=dataTypeExpression.toLowerCase().match(rnothtmlwhite)||[];if(jQuery.isFunction(func)){// For each dataType in the dataTypeExpression
while(dataType=dataTypes[i++]){// Prepend if requested
if(dataType[0]==="+"){dataType=dataType.slice(1)||"*";(structure[dataType]=structure[dataType]||[]).unshift(func);// Otherwise append
}else{(structure[dataType]=structure[dataType]||[]).push(func);}}}};}// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR){var inspected={},seekingTransport=structure===transports;function inspect(dataType){var selected;inspected[dataType]=true;jQuery.each(structure[dataType]||[],function(_,prefilterOrFactory){var dataTypeOrTransport=prefilterOrFactory(options,originalOptions,jqXHR);if(typeof dataTypeOrTransport==="string"&&!seekingTransport&&!inspected[dataTypeOrTransport]){options.dataTypes.unshift(dataTypeOrTransport);inspect(dataTypeOrTransport);return false;}else if(seekingTransport){return!(selected=dataTypeOrTransport);}});return selected;}return inspect(options.dataTypes[0])||!inspected["*"]&&inspect("*");}// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend(target,src){var key,deep,flatOptions=jQuery.ajaxSettings.flatOptions||{};for(key in src){if(src[key]!==undefined){(flatOptions[key]?target:deep||(deep={}))[key]=src[key];}}if(deep){jQuery.extend(true,target,deep);}return target;}/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */function ajaxHandleResponses(s,jqXHR,responses){var ct,type,finalDataType,firstDataType,contents=s.contents,dataTypes=s.dataTypes;// Remove auto dataType and get content-type in the process
while(dataTypes[0]==="*"){dataTypes.shift();if(ct===undefined){ct=s.mimeType||jqXHR.getResponseHeader("Content-Type");}}// Check if we're dealing with a known content-type
if(ct){for(type in contents){if(contents[type]&&contents[type].test(ct)){dataTypes.unshift(type);break;}}}// Check to see if we have a response for the expected dataType
if(dataTypes[0]in responses){finalDataType=dataTypes[0];}else{// Try convertible dataTypes
for(type in responses){if(!dataTypes[0]||s.converters[type+" "+dataTypes[0]]){finalDataType=type;break;}if(!firstDataType){firstDataType=type;}}// Or just use first one
finalDataType=finalDataType||firstDataType;}// If we found a dataType
// We add the dataType to the list if needed
// and return the corresponding response
if(finalDataType){if(finalDataType!==dataTypes[0]){dataTypes.unshift(finalDataType);}return responses[finalDataType];}}/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */function ajaxConvert(s,response,jqXHR,isSuccess){var conv2,current,conv,tmp,prev,converters={},// Work with a copy of dataTypes in case we need to modify it for conversion
dataTypes=s.dataTypes.slice();// Create converters map with lowercased keys
if(dataTypes[1]){for(conv in s.converters){converters[conv.toLowerCase()]=s.converters[conv];}}current=dataTypes.shift();// Convert to each sequential dataType
while(current){if(s.responseFields[current]){jqXHR[s.responseFields[current]]=response;}// Apply the dataFilter if provided
if(!prev&&isSuccess&&s.dataFilter){response=s.dataFilter(response,s.dataType);}prev=current;current=dataTypes.shift();if(current){// There's only work to do if current dataType is non-auto
if(current==="*"){current=prev;// Convert response if prev dataType is non-auto and differs from current
}else if(prev!=="*"&&prev!==current){// Seek a direct converter
conv=converters[prev+" "+current]||converters["* "+current];// If none found, seek a pair
if(!conv){for(conv2 in converters){// If conv2 outputs current
tmp=conv2.split(" ");if(tmp[1]===current){// If prev can be converted to accepted input
conv=converters[prev+" "+tmp[0]]||converters["* "+tmp[0]];if(conv){// Condense equivalence converters
if(conv===true){conv=converters[conv2];// Otherwise, insert the intermediate dataType
}else if(converters[conv2]!==true){current=tmp[0];dataTypes.unshift(tmp[1]);}break;}}}}// Apply converter (if not an equivalence)
if(conv!==true){// Unless errors are allowed to bubble, catch and return them
if(conv&&s.throws){response=conv(response);}else{try{response=conv(response);}catch(e){return{state:"parsererror",error:conv?e:"No conversion from "+prev+" to "+current};}}}}}}return{state:"success",data:response};}jQuery.extend({// Counter for holding the number of active queries
active:0,// Last-Modified header cache for next request
lastModified:{},etag:{},ajaxSettings:{url:location.href,type:"GET",isLocal:rlocalProtocol.test(location.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/accepts:{"*":allTypes,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},// Data converters
// Keys separate source (or catchall "*") and destination types with a single space
converters:{// Convert anything to text
"* text":String,// Text to html (true = no transformation)
"text html":true,// Evaluate text as a json expression
"text json":JSON.parse,// Parse text as xml
"text xml":jQuery.parseXML},// For options that shouldn't be deep extended:
// you can add your own custom options here if
// and when you create one that shouldn't be
// deep extended (see ajaxExtend)
flatOptions:{url:true,context:true}},// Creates a full fledged settings object into target
// with both ajaxSettings and settings fields.
// If target is omitted, writes into ajaxSettings.
ajaxSetup:function ajaxSetup(target,settings){return settings?// Building a settings object
ajaxExtend(ajaxExtend(target,jQuery.ajaxSettings),settings):// Extending ajaxSettings
ajaxExtend(jQuery.ajaxSettings,target);},ajaxPrefilter:addToPrefiltersOrTransports(prefilters),ajaxTransport:addToPrefiltersOrTransports(transports),// Main method
ajax:function ajax(url,options){// If url is an object, simulate pre-1.5 signature
if((typeof url==="undefined"?"undefined":_typeof(url))==="object"){options=url;url=undefined;}// Force options to be an object
options=options||{};var transport,// URL without anti-cache param
cacheURL,// Response headers
responseHeadersString,responseHeaders,// timeout handle
timeoutTimer,// Url cleanup var
urlAnchor,// Request state (becomes false upon send and true upon completion)
completed,// To know if global events are to be dispatched
fireGlobals,// Loop variable
i,// uncached part of the url
uncached,// Create the final options object
s=jQuery.ajaxSetup({},options),// Callbacks context
callbackContext=s.context||s,// Context for global events is callbackContext if it is a DOM node or jQuery collection
globalEventContext=s.context&&(callbackContext.nodeType||callbackContext.jquery)?jQuery(callbackContext):jQuery.event,// Deferreds
deferred=jQuery.Deferred(),completeDeferred=jQuery.Callbacks("once memory"),// Status-dependent callbacks
_statusCode=s.statusCode||{},// Headers (they are sent all at once)
requestHeaders={},requestHeadersNames={},// Default abort message
strAbort="canceled",// Fake xhr
jqXHR={readyState:0,// Builds headers hashtable if needed
getResponseHeader:function getResponseHeader(key){var match;if(completed){if(!responseHeaders){responseHeaders={};while(match=rheaders.exec(responseHeadersString)){responseHeaders[match[1].toLowerCase()]=match[2];}}match=responseHeaders[key.toLowerCase()];}return match==null?null:match;},// Raw string
getAllResponseHeaders:function getAllResponseHeaders(){return completed?responseHeadersString:null;},// Caches the header
setRequestHeader:function setRequestHeader(name,value){if(completed==null){name=requestHeadersNames[name.toLowerCase()]=requestHeadersNames[name.toLowerCase()]||name;requestHeaders[name]=value;}return this;},// Overrides response content-type header
overrideMimeType:function overrideMimeType(type){if(completed==null){s.mimeType=type;}return this;},// Status-dependent callbacks
statusCode:function statusCode(map){var code;if(map){if(completed){// Execute the appropriate callbacks
jqXHR.always(map[jqXHR.status]);}else{// Lazy-add the new callbacks in a way that preserves old ones
for(code in map){_statusCode[code]=[_statusCode[code],map[code]];}}}return this;},// Cancel the request
abort:function abort(statusText){var finalText=statusText||strAbort;if(transport){transport.abort(finalText);}done(0,finalText);return this;}};// Attach deferreds
deferred.promise(jqXHR);// Add protocol if not provided (prefilters might expect it)
// Handle falsy url in the settings object (#10093: consistency with old signature)
// We also use the url parameter if available
s.url=((url||s.url||location.href)+"").replace(rprotocol,location.protocol+"//");// Alias method option to type as per ticket #12004
s.type=options.method||options.type||s.method||s.type;// Extract dataTypes list
s.dataTypes=(s.dataType||"*").toLowerCase().match(rnothtmlwhite)||[""];// A cross-domain request is in order when the origin doesn't match the current origin.
if(s.crossDomain==null){urlAnchor=document.createElement("a");// Support: IE <=8 - 11, Edge 12 - 13
// IE throws exception on accessing the href property if url is malformed,
// e.g. http://example.com:80x/
try{urlAnchor.href=s.url;// Support: IE <=8 - 11 only
// Anchor's host property isn't correctly set when s.url is relative
urlAnchor.href=urlAnchor.href;s.crossDomain=originAnchor.protocol+"//"+originAnchor.host!==urlAnchor.protocol+"//"+urlAnchor.host;}catch(e){// If there is an error parsing the URL, assume it is crossDomain,
// it can be rejected by the transport if it is invalid
s.crossDomain=true;}}// Convert data if not already a string
if(s.data&&s.processData&&typeof s.data!=="string"){s.data=jQuery.param(s.data,s.traditional);}// Apply prefilters
inspectPrefiltersOrTransports(prefilters,s,options,jqXHR);// If request was aborted inside a prefilter, stop there
if(completed){return jqXHR;}// We can fire global events as of now if asked to
// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
fireGlobals=jQuery.event&&s.global;// Watch for a new set of requests
if(fireGlobals&&jQuery.active++===0){jQuery.event.trigger("ajaxStart");}// Uppercase the type
s.type=s.type.toUpperCase();// Determine if request has content
s.hasContent=!rnoContent.test(s.type);// Save the URL in case we're toying with the If-Modified-Since
// and/or If-None-Match header later on
// Remove hash to simplify url manipulation
cacheURL=s.url.replace(rhash,"");// More options handling for requests with no content
if(!s.hasContent){// Remember the hash so we can put it back
uncached=s.url.slice(cacheURL.length);// If data is available, append data to url
if(s.data){cacheURL+=(rquery.test(cacheURL)?"&":"?")+s.data;// #9682: remove data so that it's not used in an eventual retry
delete s.data;}// Add or update anti-cache param if needed
if(s.cache===false){cacheURL=cacheURL.replace(rantiCache,"$1");uncached=(rquery.test(cacheURL)?"&":"?")+"_="+nonce++ +uncached;}// Put hash and anti-cache on the URL that will be requested (gh-1732)
s.url=cacheURL+uncached;// Change '%20' to '+' if this is encoded form body content (gh-2658)
}else if(s.data&&s.processData&&(s.contentType||"").indexOf("application/x-www-form-urlencoded")===0){s.data=s.data.replace(r20,"+");}// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
if(s.ifModified){if(jQuery.lastModified[cacheURL]){jqXHR.setRequestHeader("If-Modified-Since",jQuery.lastModified[cacheURL]);}if(jQuery.etag[cacheURL]){jqXHR.setRequestHeader("If-None-Match",jQuery.etag[cacheURL]);}}// Set the correct header, if data is being sent
if(s.data&&s.hasContent&&s.contentType!==false||options.contentType){jqXHR.setRequestHeader("Content-Type",s.contentType);}// Set the Accepts header for the server, depending on the dataType
jqXHR.setRequestHeader("Accept",s.dataTypes[0]&&s.accepts[s.dataTypes[0]]?s.accepts[s.dataTypes[0]]+(s.dataTypes[0]!=="*"?", "+allTypes+"; q=0.01":""):s.accepts["*"]);// Check for headers option
for(i in s.headers){jqXHR.setRequestHeader(i,s.headers[i]);}// Allow custom headers/mimetypes and early abort
if(s.beforeSend&&(s.beforeSend.call(callbackContext,jqXHR,s)===false||completed)){// Abort if not done already and return
return jqXHR.abort();}// Aborting is no longer a cancellation
strAbort="abort";// Install callbacks on deferreds
completeDeferred.add(s.complete);jqXHR.done(s.success);jqXHR.fail(s.error);// Get transport
transport=inspectPrefiltersOrTransports(transports,s,options,jqXHR);// If no transport, we auto-abort
if(!transport){done(-1,"No Transport");}else{jqXHR.readyState=1;// Send global event
if(fireGlobals){globalEventContext.trigger("ajaxSend",[jqXHR,s]);}// If request was aborted inside ajaxSend, stop there
if(completed){return jqXHR;}// Timeout
if(s.async&&s.timeout>0){timeoutTimer=window.setTimeout(function(){jqXHR.abort("timeout");},s.timeout);}try{completed=false;transport.send(requestHeaders,done);}catch(e){// Rethrow post-completion exceptions
if(completed){throw e;}// Propagate others as results
done(-1,e);}}// Callback for when everything is done
function done(status,nativeStatusText,responses,headers){var isSuccess,success,error,response,modified,statusText=nativeStatusText;// Ignore repeat invocations
if(completed){return;}completed=true;// Clear timeout if it exists
if(timeoutTimer){window.clearTimeout(timeoutTimer);}// Dereference transport for early garbage collection
// (no matter how long the jqXHR object will be used)
transport=undefined;// Cache response headers
responseHeadersString=headers||"";// Set readyState
jqXHR.readyState=status>0?4:0;// Determine if successful
isSuccess=status>=200&&status<300||status===304;// Get response data
if(responses){response=ajaxHandleResponses(s,jqXHR,responses);}// Convert no matter what (that way responseXXX fields are always set)
response=ajaxConvert(s,response,jqXHR,isSuccess);// If successful, handle type chaining
if(isSuccess){// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
if(s.ifModified){modified=jqXHR.getResponseHeader("Last-Modified");if(modified){jQuery.lastModified[cacheURL]=modified;}modified=jqXHR.getResponseHeader("etag");if(modified){jQuery.etag[cacheURL]=modified;}}// if no content
if(status===204||s.type==="HEAD"){statusText="nocontent";// if not modified
}else if(status===304){statusText="notmodified";// If we have data, let's convert it
}else{statusText=response.state;success=response.data;error=response.error;isSuccess=!error;}}else{// Extract error from statusText and normalize for non-aborts
error=statusText;if(status||!statusText){statusText="error";if(status<0){status=0;}}}// Set data for the fake xhr object
jqXHR.status=status;jqXHR.statusText=(nativeStatusText||statusText)+"";// Success/Error
if(isSuccess){deferred.resolveWith(callbackContext,[success,statusText,jqXHR]);}else{deferred.rejectWith(callbackContext,[jqXHR,statusText,error]);}// Status-dependent callbacks
jqXHR.statusCode(_statusCode);_statusCode=undefined;if(fireGlobals){globalEventContext.trigger(isSuccess?"ajaxSuccess":"ajaxError",[jqXHR,s,isSuccess?success:error]);}// Complete
completeDeferred.fireWith(callbackContext,[jqXHR,statusText]);if(fireGlobals){globalEventContext.trigger("ajaxComplete",[jqXHR,s]);// Handle the global AJAX counter
if(! --jQuery.active){jQuery.event.trigger("ajaxStop");}}}return jqXHR;},getJSON:function getJSON(url,data,callback){return jQuery.get(url,data,callback,"json");},getScript:function getScript(url,callback){return jQuery.get(url,undefined,callback,"script");}});jQuery.each(["get","post"],function(i,method){jQuery[method]=function(url,data,callback,type){// Shift arguments if data argument was omitted
if(jQuery.isFunction(data)){type=type||callback;callback=data;data=undefined;}// The url can be an options object (which then must have .url)
return jQuery.ajax(jQuery.extend({url:url,type:method,dataType:type,data:data,success:callback},jQuery.isPlainObject(url)&&url));};});jQuery._evalUrl=function(url){return jQuery.ajax({url:url,// Make this explicit, since user can override this through ajaxSetup (#11264)
type:"GET",dataType:"script",cache:true,async:false,global:false,"throws":true});};jQuery.fn.extend({wrapAll:function wrapAll(html){var wrap;if(this[0]){if(jQuery.isFunction(html)){html=html.call(this[0]);}// The elements to wrap the target around
wrap=jQuery(html,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){wrap.insertBefore(this[0]);}wrap.map(function(){var elem=this;while(elem.firstElementChild){elem=elem.firstElementChild;}return elem;}).append(this);}return this;},wrapInner:function wrapInner(html){if(jQuery.isFunction(html)){return this.each(function(i){jQuery(this).wrapInner(html.call(this,i));});}return this.each(function(){var self=jQuery(this),contents=self.contents();if(contents.length){contents.wrapAll(html);}else{self.append(html);}});},wrap:function wrap(html){var isFunction=jQuery.isFunction(html);return this.each(function(i){jQuery(this).wrapAll(isFunction?html.call(this,i):html);});},unwrap:function unwrap(selector){this.parent(selector).not("body").each(function(){jQuery(this).replaceWith(this.childNodes);});return this;}});jQuery.expr.pseudos.hidden=function(elem){return!jQuery.expr.pseudos.visible(elem);};jQuery.expr.pseudos.visible=function(elem){return!!(elem.offsetWidth||elem.offsetHeight||elem.getClientRects().length);};jQuery.ajaxSettings.xhr=function(){try{return new window.XMLHttpRequest();}catch(e){}};var xhrSuccessStatus={// File protocol always yields status code 0, assume 200
0:200,// Support: IE <=9 only
// #1450: sometimes IE returns 1223 when it should be 204
1223:204},xhrSupported=jQuery.ajaxSettings.xhr();support.cors=!!xhrSupported&&"withCredentials"in xhrSupported;support.ajax=xhrSupported=!!xhrSupported;jQuery.ajaxTransport(function(options){var _callback,errorCallback;// Cross domain only allowed if supported through XMLHttpRequest
if(support.cors||xhrSupported&&!options.crossDomain){return{send:function send(headers,complete){var i,xhr=options.xhr();xhr.open(options.type,options.url,options.async,options.username,options.password);// Apply custom fields if provided
if(options.xhrFields){for(i in options.xhrFields){xhr[i]=options.xhrFields[i];}}// Override mime type if needed
if(options.mimeType&&xhr.overrideMimeType){xhr.overrideMimeType(options.mimeType);}// X-Requested-With header
// For cross-domain requests, seeing as conditions for a preflight are
// akin to a jigsaw puzzle, we simply never set it to be sure.
// (it can always be set on a per-request basis or even using ajaxSetup)
// For same-domain requests, won't change header if already provided.
if(!options.crossDomain&&!headers["X-Requested-With"]){headers["X-Requested-With"]="XMLHttpRequest";}// Set headers
for(i in headers){xhr.setRequestHeader(i,headers[i]);}// Callback
_callback=function callback(type){return function(){if(_callback){_callback=errorCallback=xhr.onload=xhr.onerror=xhr.onabort=xhr.onreadystatechange=null;if(type==="abort"){xhr.abort();}else if(type==="error"){// Support: IE <=9 only
// On a manual native abort, IE9 throws
// errors on any property access that is not readyState
if(typeof xhr.status!=="number"){complete(0,"error");}else{complete(// File: protocol always yields status 0; see #8605, #14207
xhr.status,xhr.statusText);}}else{complete(xhrSuccessStatus[xhr.status]||xhr.status,xhr.statusText,// Support: IE <=9 only
// IE9 has no XHR2 but throws on binary (trac-11426)
// For XHR2 non-text, let the caller handle it (gh-2498)
(xhr.responseType||"text")!=="text"||typeof xhr.responseText!=="string"?{binary:xhr.response}:{text:xhr.responseText},xhr.getAllResponseHeaders());}}};};// Listen to events
xhr.onload=_callback();errorCallback=xhr.onerror=_callback("error");// Support: IE 9 only
// Use onreadystatechange to replace onabort
// to handle uncaught aborts
if(xhr.onabort!==undefined){xhr.onabort=errorCallback;}else{xhr.onreadystatechange=function(){// Check readyState before timeout as it changes
if(xhr.readyState===4){// Allow onerror to be called first,
// but that will not handle a native abort
// Also, save errorCallback to a variable
// as xhr.onerror cannot be accessed
window.setTimeout(function(){if(_callback){errorCallback();}});}};}// Create the abort callback
_callback=_callback("abort");try{// Do send the request (this may raise an exception)
xhr.send(options.hasContent&&options.data||null);}catch(e){// #14683: Only rethrow if this hasn't been notified as an error yet
if(_callback){throw e;}}},abort:function abort(){if(_callback){_callback();}}};}});// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter(function(s){if(s.crossDomain){s.contents.script=false;}});// Install script dataType
jQuery.ajaxSetup({accepts:{script:"text/javascript, application/javascript, "+"application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function textScript(text){jQuery.globalEval(text);return text;}}});// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter("script",function(s){if(s.cache===undefined){s.cache=false;}if(s.crossDomain){s.type="GET";}});// Bind script tag hack transport
jQuery.ajaxTransport("script",function(s){// This transport only deals with cross domain requests
if(s.crossDomain){var script,_callback2;return{send:function send(_,complete){script=jQuery("<script>").prop({charset:s.scriptCharset,src:s.url}).on("load error",_callback2=function callback(evt){script.remove();_callback2=null;if(evt){complete(evt.type==="error"?404:200,evt.type);}});// Use native DOM manipulation to avoid our domManip AJAX trickery
document.head.appendChild(script[0]);},abort:function abort(){if(_callback2){_callback2();}}};}});var oldCallbacks=[],rjsonp=/(=)\?(?=&|$)|\?\?/;// Default jsonp settings
jQuery.ajaxSetup({jsonp:"callback",jsonpCallback:function jsonpCallback(){var callback=oldCallbacks.pop()||jQuery.expando+"_"+nonce++;this[callback]=true;return callback;}});// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter("json jsonp",function(s,originalSettings,jqXHR){var callbackName,overwritten,responseContainer,jsonProp=s.jsonp!==false&&(rjsonp.test(s.url)?"url":typeof s.data==="string"&&(s.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&rjsonp.test(s.data)&&"data");// Handle iff the expected data type is "jsonp" or we have a parameter to set
if(jsonProp||s.dataTypes[0]==="jsonp"){// Get callback name, remembering preexisting value associated with it
callbackName=s.jsonpCallback=jQuery.isFunction(s.jsonpCallback)?s.jsonpCallback():s.jsonpCallback;// Insert callback into url or form data
if(jsonProp){s[jsonProp]=s[jsonProp].replace(rjsonp,"$1"+callbackName);}else if(s.jsonp!==false){s.url+=(rquery.test(s.url)?"&":"?")+s.jsonp+"="+callbackName;}// Use data converter to retrieve json after script execution
s.converters["script json"]=function(){if(!responseContainer){jQuery.error(callbackName+" was not called");}return responseContainer[0];};// Force json dataType
s.dataTypes[0]="json";// Install callback
overwritten=window[callbackName];window[callbackName]=function(){responseContainer=arguments;};// Clean-up function (fires after converters)
jqXHR.always(function(){// If previous value didn't exist - remove it
if(overwritten===undefined){jQuery(window).removeProp(callbackName);// Otherwise restore preexisting value
}else{window[callbackName]=overwritten;}// Save back as free
if(s[callbackName]){// Make sure that re-using the options doesn't screw things around
s.jsonpCallback=originalSettings.jsonpCallback;// Save the callback name for future use
oldCallbacks.push(callbackName);}// Call if it was a function and we have a response
if(responseContainer&&jQuery.isFunction(overwritten)){overwritten(responseContainer[0]);}responseContainer=overwritten=undefined;});// Delegate to script
return"script";}});// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument=function(){var body=document.implementation.createHTMLDocument("").body;body.innerHTML="<form></form><form></form>";return body.childNodes.length===2;}();// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML=function(data,context,keepScripts){if(typeof data!=="string"){return[];}if(typeof context==="boolean"){keepScripts=context;context=false;}var base,parsed,scripts;if(!context){// Stop scripts or inline event handlers from being executed immediately
// by using document.implementation
if(support.createHTMLDocument){context=document.implementation.createHTMLDocument("");// Set the base href for the created document
// so any parsed elements with URLs
// are based on the document's URL (gh-2965)
base=context.createElement("base");base.href=document.location.href;context.head.appendChild(base);}else{context=document;}}parsed=rsingleTag.exec(data);scripts=!keepScripts&&[];// Single tag
if(parsed){return[context.createElement(parsed[1])];}parsed=buildFragment([data],context,scripts);if(scripts&&scripts.length){jQuery(scripts).remove();}return jQuery.merge([],parsed.childNodes);};/**
 * Load a url into a page
 */jQuery.fn.load=function(url,params,callback){var selector,type,response,self=this,off=url.indexOf(" ");if(off>-1){selector=stripAndCollapse(url.slice(off));url=url.slice(0,off);}// If it's a function
if(jQuery.isFunction(params)){// We assume that it's the callback
callback=params;params=undefined;// Otherwise, build a param string
}else if(params&&(typeof params==="undefined"?"undefined":_typeof(params))==="object"){type="POST";}// If we have elements to modify, make the request
if(self.length>0){jQuery.ajax({url:url,// If "type" variable is undefined, then "GET" method will be used.
// Make value of this field explicit since
// user can override it through ajaxSetup method
type:type||"GET",dataType:"html",data:params}).done(function(responseText){// Save response for use in complete callback
response=arguments;self.html(selector?// If a selector was specified, locate the right elements in a dummy div
// Exclude scripts to avoid IE 'Permission Denied' errors
jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector):// Otherwise use the full result
responseText);// If the request succeeds, this function gets "data", "status", "jqXHR"
// but they are ignored because response was set above.
// If it fails, this function gets "jqXHR", "status", "error"
}).always(callback&&function(jqXHR,status){self.each(function(){callback.apply(this,response||[jqXHR.responseText,status,jqXHR]);});});}return this;};// Attach a bunch of functions for handling common AJAX events
jQuery.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(i,type){jQuery.fn[type]=function(fn){return this.on(type,fn);};});jQuery.expr.pseudos.animated=function(elem){return jQuery.grep(jQuery.timers,function(fn){return elem===fn.elem;}).length;};/**
 * Gets a window from an element
 */function getWindow(elem){return jQuery.isWindow(elem)?elem:elem.nodeType===9&&elem.defaultView;}jQuery.offset={setOffset:function setOffset(elem,options,i){var curPosition,curLeft,curCSSTop,curTop,curOffset,curCSSLeft,calculatePosition,position=jQuery.css(elem,"position"),curElem=jQuery(elem),props={};// Set position first, in-case top/left are set even on static elem
if(position==="static"){elem.style.position="relative";}curOffset=curElem.offset();curCSSTop=jQuery.css(elem,"top");curCSSLeft=jQuery.css(elem,"left");calculatePosition=(position==="absolute"||position==="fixed")&&(curCSSTop+curCSSLeft).indexOf("auto")>-1;// Need to be able to calculate position if either
// top or left is auto and position is either absolute or fixed
if(calculatePosition){curPosition=curElem.position();curTop=curPosition.top;curLeft=curPosition.left;}else{curTop=parseFloat(curCSSTop)||0;curLeft=parseFloat(curCSSLeft)||0;}if(jQuery.isFunction(options)){// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
options=options.call(elem,i,jQuery.extend({},curOffset));}if(options.top!=null){props.top=options.top-curOffset.top+curTop;}if(options.left!=null){props.left=options.left-curOffset.left+curLeft;}if("using"in options){options.using.call(elem,props);}else{curElem.css(props);}}};jQuery.fn.extend({offset:function offset(options){// Preserve chaining for setter
if(arguments.length){return options===undefined?this:this.each(function(i){jQuery.offset.setOffset(this,options,i);});}var docElem,win,rect,doc,elem=this[0];if(!elem){return;}// Support: IE <=11 only
// Running getBoundingClientRect on a
// disconnected node in IE throws an error
if(!elem.getClientRects().length){return{top:0,left:0};}rect=elem.getBoundingClientRect();// Make sure element is not hidden (display: none)
if(rect.width||rect.height){doc=elem.ownerDocument;win=getWindow(doc);docElem=doc.documentElement;return{top:rect.top+win.pageYOffset-docElem.clientTop,left:rect.left+win.pageXOffset-docElem.clientLeft};}// Return zeros for disconnected and hidden elements (gh-2310)
return rect;},position:function position(){if(!this[0]){return;}var offsetParent,offset,elem=this[0],parentOffset={top:0,left:0};// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
// because it is its only offset parent
if(jQuery.css(elem,"position")==="fixed"){// Assume getBoundingClientRect is there when computed position is fixed
offset=elem.getBoundingClientRect();}else{// Get *real* offsetParent
offsetParent=this.offsetParent();// Get correct offsets
offset=this.offset();if(!jQuery.nodeName(offsetParent[0],"html")){parentOffset=offsetParent.offset();}// Add offsetParent borders
parentOffset={top:parentOffset.top+jQuery.css(offsetParent[0],"borderTopWidth",true),left:parentOffset.left+jQuery.css(offsetParent[0],"borderLeftWidth",true)};}// Subtract parent offsets and element margins
return{top:offset.top-parentOffset.top-jQuery.css(elem,"marginTop",true),left:offset.left-parentOffset.left-jQuery.css(elem,"marginLeft",true)};},// This method will return documentElement in the following cases:
// 1) For the element inside the iframe without offsetParent, this method will return
//    documentElement of the parent window
// 2) For the hidden or detached element
// 3) For body or html element, i.e. in case of the html node - it will return itself
//
// but those exceptions were never presented as a real life use-cases
// and might be considered as more preferable results.
//
// This logic, however, is not guaranteed and can change at any point in the future
offsetParent:function offsetParent(){return this.map(function(){var offsetParent=this.offsetParent;while(offsetParent&&jQuery.css(offsetParent,"position")==="static"){offsetParent=offsetParent.offsetParent;}return offsetParent||documentElement;});}});// Create scrollLeft and scrollTop methods
jQuery.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(method,prop){var top="pageYOffset"===prop;jQuery.fn[method]=function(val){return access(this,function(elem,method,val){var win=getWindow(elem);if(val===undefined){return win?win[prop]:elem[method];}if(win){win.scrollTo(!top?val:win.pageXOffset,top?val:win.pageYOffset);}else{elem[method]=val;}},method,val,arguments.length);};});// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each(["top","left"],function(i,prop){jQuery.cssHooks[prop]=addGetHookIf(support.pixelPosition,function(elem,computed){if(computed){computed=curCSS(elem,prop);// If curCSS returns percentage, fallback to offset
return rnumnonpx.test(computed)?jQuery(elem).position()[prop]+"px":computed;}});});// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each({Height:"height",Width:"width"},function(name,type){jQuery.each({padding:"inner"+name,content:type,"":"outer"+name},function(defaultExtra,funcName){// Margin is only for outerHeight, outerWidth
jQuery.fn[funcName]=function(margin,value){var chainable=arguments.length&&(defaultExtra||typeof margin!=="boolean"),extra=defaultExtra||(margin===true||value===true?"margin":"border");return access(this,function(elem,type,value){var doc;if(jQuery.isWindow(elem)){// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
return funcName.indexOf("outer")===0?elem["inner"+name]:elem.document.documentElement["client"+name];}// Get document width or height
if(elem.nodeType===9){doc=elem.documentElement;// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
// whichever is greatest
return Math.max(elem.body["scroll"+name],doc["scroll"+name],elem.body["offset"+name],doc["offset"+name],doc["client"+name]);}return value===undefined?// Get width or height on the element, requesting but not forcing parseFloat
jQuery.css(elem,type,extra):// Set width or height on the element
jQuery.style(elem,type,value,extra);},type,chainable?margin:undefined,chainable);};});});jQuery.fn.extend({bind:function bind(types,data,fn){return this.on(types,null,data,fn);},unbind:function unbind(types,fn){return this.off(types,null,fn);},delegate:function delegate(selector,types,data,fn){return this.on(types,selector,data,fn);},undelegate:function undelegate(selector,types,fn){// ( namespace ) or ( selector, types [, fn] )
return arguments.length===1?this.off(selector,"**"):this.off(types,selector||"**",fn);}});jQuery.parseJSON=JSON.parse;// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.
// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
if(typeof define==="function"&&define.amd){define("jquery",[],function(){return jQuery;});}var// Map over jQuery in case of overwrite
_jQuery=window.jQuery,// Map over the $ in case of overwrite
_$=window.$;jQuery.noConflict=function(deep){if(window.$===jQuery){window.$=_$;}if(deep&&window.jQuery===jQuery){window.jQuery=_jQuery;}return jQuery;};// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if(!noGlobal){window.jQuery=window.$=jQuery;}return jQuery;});

},{}],193:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var json=typeof JSON!=='undefined'?JSON:require('jsonify');module.exports=function(obj,opts){if(!opts)opts={};if(typeof opts==='function')opts={cmp:opts};var space=opts.space||'';if(typeof space==='number')space=Array(space+1).join(' ');var cycles=typeof opts.cycles==='boolean'?opts.cycles:false;var replacer=opts.replacer||function(key,value){return value;};var cmp=opts.cmp&&function(f){return function(node){return function(a,b){var aobj={key:a,value:node[a]};var bobj={key:b,value:node[b]};return f(aobj,bobj);};};}(opts.cmp);var seen=[];return function stringify(parent,key,node,level){var indent=space?'\n'+new Array(level+1).join(space):'';var colonSeparator=space?': ':':';if(node&&node.toJSON&&typeof node.toJSON==='function'){node=node.toJSON();}node=replacer.call(parent,key,node);if(node===undefined){return;}if((typeof node==='undefined'?'undefined':_typeof(node))!=='object'||node===null){return json.stringify(node);}if(isArray(node)){var out=[];for(var i=0;i<node.length;i++){var item=stringify(node,i,node[i],level+1)||json.stringify(null);out.push(indent+space+item);}return'['+out.join(',')+indent+']';}else{if(seen.indexOf(node)!==-1){if(cycles)return json.stringify('__cycle__');throw new TypeError('Converting circular structure to JSON');}else seen.push(node);var keys=objectKeys(node).sort(cmp&&cmp(node));var out=[];for(var i=0;i<keys.length;i++){var key=keys[i];var value=stringify(node,key,node[key],level+1);if(!value)continue;var keyValue=json.stringify(key)+colonSeparator+value;;out.push(indent+space+keyValue);}seen.splice(seen.indexOf(node),1);return'{'+out.join(',')+indent+'}';}}({'':obj},'',obj,0);};var isArray=Array.isArray||function(x){return{}.toString.call(x)==='[object Array]';};var objectKeys=Object.keys||function(obj){var has=Object.prototype.hasOwnProperty||function(){return true;};var keys=[];for(var key in obj){if(has.call(obj,key))keys.push(key);}return keys;};

},{"jsonify":194}],194:[function(require,module,exports){
'use strict';exports.parse=require('./lib/parse');exports.stringify=require('./lib/stringify');

},{"./lib/parse":195,"./lib/stringify":196}],195:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var at,// The index of the current character
ch,// The current character
escapee={'"':'"','\\':'\\','/':'/',b:'\b',f:'\f',n:'\n',r:'\r',t:'\t'},text,error=function error(m){// Call error when something is wrong.
throw{name:'SyntaxError',message:m,at:at,text:text};},next=function next(c){// If a c parameter is provided, verify that it matches the current character.
if(c&&c!==ch){error("Expected '"+c+"' instead of '"+ch+"'");}// Get the next character. When there are no more characters,
// return the empty string.
ch=text.charAt(at);at+=1;return ch;},number=function number(){// Parse a number value.
var number,string='';if(ch==='-'){string='-';next('-');}while(ch>='0'&&ch<='9'){string+=ch;next();}if(ch==='.'){string+='.';while(next()&&ch>='0'&&ch<='9'){string+=ch;}}if(ch==='e'||ch==='E'){string+=ch;next();if(ch==='-'||ch==='+'){string+=ch;next();}while(ch>='0'&&ch<='9'){string+=ch;next();}}number=+string;if(!isFinite(number)){error("Bad number");}else{return number;}},string=function string(){// Parse a string value.
var hex,i,string='',uffff;// When parsing for string values, we must look for " and \ characters.
if(ch==='"'){while(next()){if(ch==='"'){next();return string;}else if(ch==='\\'){next();if(ch==='u'){uffff=0;for(i=0;i<4;i+=1){hex=parseInt(next(),16);if(!isFinite(hex)){break;}uffff=uffff*16+hex;}string+=String.fromCharCode(uffff);}else if(typeof escapee[ch]==='string'){string+=escapee[ch];}else{break;}}else{string+=ch;}}}error("Bad string");},white=function white(){// Skip whitespace.
while(ch&&ch<=' '){next();}},word=function word(){// true, false, or null.
switch(ch){case't':next('t');next('r');next('u');next('e');return true;case'f':next('f');next('a');next('l');next('s');next('e');return false;case'n':next('n');next('u');next('l');next('l');return null;}error("Unexpected '"+ch+"'");},value,// Place holder for the value function.
array=function array(){// Parse an array value.
var array=[];if(ch==='['){next('[');white();if(ch===']'){next(']');return array;// empty array
}while(ch){array.push(value());white();if(ch===']'){next(']');return array;}next(',');white();}}error("Bad array");},object=function object(){// Parse an object value.
var key,object={};if(ch==='{'){next('{');white();if(ch==='}'){next('}');return object;// empty object
}while(ch){key=string();white();next(':');if(Object.hasOwnProperty.call(object,key)){error('Duplicate key "'+key+'"');}object[key]=value();white();if(ch==='}'){next('}');return object;}next(',');white();}}error("Bad object");};value=function value(){// Parse a JSON value. It could be an object, an array, a string, a number,
// or a word.
white();switch(ch){case'{':return object();case'[':return array();case'"':return string();case'-':return number();default:return ch>='0'&&ch<='9'?number():word();}};// Return the json_parse function. It will have access to all of the above
// functions and variables.
module.exports=function(source,reviver){var result;text=source;at=0;ch=' ';result=value();white();if(ch){error("Syntax error");}// If there is a reviver function, we recursively walk the new structure,
// passing each name/value pair to the reviver function for possible
// transformation, starting with a temporary root object that holds the result
// in an empty key. If there is not a reviver function, we simply return the
// result.
return typeof reviver==='function'?function walk(holder,key){var k,v,value=holder[key];if(value&&(typeof value==='undefined'?'undefined':_typeof(value))==='object'){for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}}return reviver.call(holder,key,value);}({'':result},''):result;};

},{}],196:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={// table of character substitutions
'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'},rep;function quote(string){// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.
escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==='string'?c:'\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4);})+'"':'"'+string+'"';}function str(key,holder){// Produce a string from holder[key].
var i,// The loop counter.
k,// The member key.
v,// The member value.
length,mind=gap,partial,value=holder[key];// If the value has a toJSON method, call it to obtain a replacement value.
if(value&&(typeof value==='undefined'?'undefined':_typeof(value))==='object'&&typeof value.toJSON==='function'){value=value.toJSON(key);}// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.
if(typeof rep==='function'){value=rep.call(holder,key,value);}// What happens next depends on the value's type.
switch(typeof value==='undefined'?'undefined':_typeof(value)){case'string':return quote(value);case'number':// JSON numbers must be finite. Encode non-finite numbers as null.
return isFinite(value)?String(value):'null';case'boolean':case'null':// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.
return String(value);case'object':if(!value)return'null';gap+=indent;partial=[];// Array.isArray
if(Object.prototype.toString.apply(value)==='[object Array]'){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||'null';}// Join all of the elements together, separated with commas, and
// wrap them in brackets.
v=partial.length===0?'[]':gap?'[\n'+gap+partial.join(',\n'+gap)+'\n'+mind+']':'['+partial.join(',')+']';gap=mind;return v;}// If the replacer is an array, use it to select the members to be
// stringified.
if(rep&&(typeof rep==='undefined'?'undefined':_typeof(rep))==='object'){length=rep.length;for(i=0;i<length;i+=1){k=rep[i];if(typeof k==='string'){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}else{// Otherwise, iterate through all of the keys in the object.
for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}// Join all of the member texts together, separated with commas,
// and wrap them in braces.
v=partial.length===0?'{}':gap?'{\n'+gap+partial.join(',\n'+gap)+'\n'+mind+'}':'{'+partial.join(',')+'}';gap=mind;return v;}}module.exports=function(value,replacer,space){var i;gap='';indent='';// If the space parameter is a number, make an indent string containing that
// many spaces.
if(typeof space==='number'){for(i=0;i<space;i+=1){indent+=' ';}}// If the space parameter is a string, it will be used as the indent string.
else if(typeof space==='string'){indent=space;}// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.
rep=replacer;if(replacer&&typeof replacer!=='function'&&((typeof replacer==='undefined'?'undefined':_typeof(replacer))!=='object'||typeof replacer.length!=='number')){throw new Error('JSON.stringify');}// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.
return str('',{'':value});};

},{}],197:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"./_getNative":257,"./_root":293,"dup":1}],198:[function(require,module,exports){
arguments[4][2][0].apply(exports,arguments)
},{"./_hashClear":263,"./_hashDelete":264,"./_hashGet":265,"./_hashHas":266,"./_hashSet":267,"dup":2}],199:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"./_listCacheClear":275,"./_listCacheDelete":276,"./_listCacheGet":277,"./_listCacheHas":278,"./_listCacheSet":279,"dup":3}],200:[function(require,module,exports){
arguments[4][4][0].apply(exports,arguments)
},{"./_getNative":257,"./_root":293,"dup":4}],201:[function(require,module,exports){
arguments[4][5][0].apply(exports,arguments)
},{"./_mapCacheClear":280,"./_mapCacheDelete":281,"./_mapCacheGet":282,"./_mapCacheHas":283,"./_mapCacheSet":284,"dup":5}],202:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"./_getNative":257,"./_root":293,"dup":6}],203:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"./_getNative":257,"./_root":293,"dup":7}],204:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"./_MapCache":201,"./_setCacheAdd":294,"./_setCacheHas":295,"dup":8}],205:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"./_ListCache":199,"./_stackClear":297,"./_stackDelete":298,"./_stackGet":299,"./_stackHas":300,"./_stackSet":301,"dup":9}],206:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"./_root":293,"dup":10}],207:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"./_root":293,"dup":11}],208:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"./_getNative":257,"./_root":293,"dup":12}],209:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"dup":13}],210:[function(require,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"./_baseTimes":241,"./_isIndex":269,"./isArguments":312,"./isArray":313,"./isBuffer":315,"./isTypedArray":324,"dup":14}],211:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"dup":15}],212:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"dup":16}],213:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"dup":17}],214:[function(require,module,exports){
arguments[4][18][0].apply(exports,arguments)
},{"./eq":307,"dup":18}],215:[function(require,module,exports){
arguments[4][19][0].apply(exports,arguments)
},{"dup":19}],216:[function(require,module,exports){
arguments[4][20][0].apply(exports,arguments)
},{"./_baseForOwn":220,"./_createBaseEach":248,"dup":20}],217:[function(require,module,exports){
'use strict';var isSymbol=require('./isSymbol');/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index<length){var value=array[index],current=iteratee(value);if(current!=null&&(computed===undefined?current===current&&!isSymbol(current):comparator(current,computed))){var computed=current,result=value;}}return result;}module.exports=baseExtremum;

},{"./isSymbol":323}],218:[function(require,module,exports){
'use strict';var arrayPush=require('./_arrayPush'),isFlattenable=require('./_isFlattenable');/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;predicate||(predicate=isFlattenable);result||(result=[]);while(++index<length){var value=array[index];if(depth>0&&predicate(value)){if(depth>1){// Recursively flatten arrays (susceptible to call stack limits).
baseFlatten(value,depth-1,predicate,isStrict,result);}else{arrayPush(result,value);}}else if(!isStrict){result[result.length]=value;}}return result;}module.exports=baseFlatten;

},{"./_arrayPush":212,"./_isFlattenable":268}],219:[function(require,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"./_createBaseFor":249,"dup":21}],220:[function(require,module,exports){
arguments[4][22][0].apply(exports,arguments)
},{"./_baseFor":219,"./keys":325,"dup":22}],221:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"./_castPath":246,"./_toKey":303,"dup":23}],222:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"./_arrayPush":212,"./isArray":313,"dup":24}],223:[function(require,module,exports){
arguments[4][25][0].apply(exports,arguments)
},{"./_Symbol":206,"./_getRawTag":258,"./_objectToString":291,"dup":25}],224:[function(require,module,exports){
"use strict";/**
 * The base implementation of `_.gt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 */function baseGt(value,other){return value>other;}module.exports=baseGt;

},{}],225:[function(require,module,exports){
arguments[4][26][0].apply(exports,arguments)
},{"dup":26}],226:[function(require,module,exports){
arguments[4][27][0].apply(exports,arguments)
},{"./_baseGetTag":223,"./isObjectLike":321,"dup":27}],227:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"./_baseIsEqualDeep":228,"./isObjectLike":321,"dup":28}],228:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"./_Stack":205,"./_equalArrays":250,"./_equalByTag":251,"./_equalObjects":252,"./_getTag":260,"./isArray":313,"./isBuffer":315,"./isTypedArray":324,"dup":29}],229:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"./_Stack":205,"./_baseIsEqual":227,"dup":30}],230:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"./_isMasked":272,"./_toSource":304,"./isFunction":317,"./isObject":320,"dup":31}],231:[function(require,module,exports){
arguments[4][32][0].apply(exports,arguments)
},{"./_baseGetTag":223,"./isLength":318,"./isObjectLike":321,"dup":32}],232:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"./_baseMatches":236,"./_baseMatchesProperty":237,"./identity":311,"./isArray":313,"./property":333,"dup":33}],233:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"./_isPrototype":273,"./_nativeKeys":289,"dup":34}],234:[function(require,module,exports){
"use strict";/**
 * The base implementation of `_.lt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 */function baseLt(value,other){return value<other;}module.exports=baseLt;

},{}],235:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./_baseEach":216,"./isArrayLike":314,"dup":36}],236:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./_baseIsMatch":229,"./_getMatchData":256,"./_matchesStrictComparable":286,"dup":37}],237:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"./_baseIsEqual":227,"./_isKey":270,"./_isStrictComparable":274,"./_matchesStrictComparable":286,"./_toKey":303,"./get":309,"./hasIn":310,"dup":38}],238:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39}],239:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"./_baseGet":221,"dup":40}],240:[function(require,module,exports){
"use strict";/**
 * The base implementation of `_.sum` and `_.sumBy` without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {number} Returns the sum.
 */function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index<length){var current=iteratee(array[index]);if(current!==undefined){result=result===undefined?current:result+current;}}return result;}module.exports=baseSum;

},{}],241:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"dup":41}],242:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"./_Symbol":206,"./_arrayMap":211,"./isArray":313,"./isSymbol":323,"dup":42}],243:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"dup":43}],244:[function(require,module,exports){
'use strict';var arrayMap=require('./_arrayMap');/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}module.exports=baseValues;

},{"./_arrayMap":211}],245:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"dup":44}],246:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./_isKey":270,"./_stringToPath":302,"./isArray":313,"./toString":338,"dup":46}],247:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"./_root":293,"dup":47}],248:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"./isArrayLike":314,"dup":48}],249:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"dup":49}],250:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"./_SetCache":204,"./_arraySome":213,"./_cacheHas":245,"dup":50}],251:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"./_Symbol":206,"./_Uint8Array":207,"./_equalArrays":250,"./_mapToArray":285,"./_setToArray":296,"./eq":307,"dup":51}],252:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./_getAllKeys":254,"dup":52}],253:[function(require,module,exports){
(function (global){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/** Detect free variable `global` from Node.js. */var freeGlobal=(typeof global==='undefined'?'undefined':_typeof(global))=='object'&&global&&global.Object===Object&&global;module.exports=freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],254:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./_baseGetAllKeys":222,"./_getSymbols":259,"./keys":325,"dup":54}],255:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"./_isKeyable":271,"dup":55}],256:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"./_isStrictComparable":274,"./keys":325,"dup":56}],257:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"./_baseIsNative":230,"./_getValue":261,"dup":57}],258:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"./_Symbol":206,"dup":58}],259:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"./_arrayFilter":209,"./stubArray":334,"dup":59}],260:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"./_DataView":197,"./_Map":200,"./_Promise":202,"./_Set":203,"./_WeakMap":208,"./_baseGetTag":223,"./_toSource":304,"dup":60}],261:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"dup":61}],262:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"./_castPath":246,"./_isIndex":269,"./_toKey":303,"./isArguments":312,"./isArray":313,"./isLength":318,"dup":62}],263:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./_nativeCreate":288,"dup":63}],264:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"dup":64}],265:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"./_nativeCreate":288,"dup":65}],266:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./_nativeCreate":288,"dup":66}],267:[function(require,module,exports){
arguments[4][67][0].apply(exports,arguments)
},{"./_nativeCreate":288,"dup":67}],268:[function(require,module,exports){
'use strict';var _Symbol=require('./_Symbol'),isArguments=require('./isArguments'),isArray=require('./isArray');/** Built-in value references. */var spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:undefined;/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol]);}module.exports=isFlattenable;

},{"./_Symbol":206,"./isArguments":312,"./isArray":313}],269:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"dup":68}],270:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"./isArray":313,"./isSymbol":323,"dup":69}],271:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"dup":70}],272:[function(require,module,exports){
arguments[4][71][0].apply(exports,arguments)
},{"./_coreJsData":247,"dup":71}],273:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"dup":72}],274:[function(require,module,exports){
arguments[4][73][0].apply(exports,arguments)
},{"./isObject":320,"dup":73}],275:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"dup":74}],276:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"./_assocIndexOf":214,"dup":75}],277:[function(require,module,exports){
arguments[4][76][0].apply(exports,arguments)
},{"./_assocIndexOf":214,"dup":76}],278:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"./_assocIndexOf":214,"dup":77}],279:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./_assocIndexOf":214,"dup":78}],280:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"./_Hash":198,"./_ListCache":199,"./_Map":200,"dup":79}],281:[function(require,module,exports){
arguments[4][80][0].apply(exports,arguments)
},{"./_getMapData":255,"dup":80}],282:[function(require,module,exports){
arguments[4][81][0].apply(exports,arguments)
},{"./_getMapData":255,"dup":81}],283:[function(require,module,exports){
arguments[4][82][0].apply(exports,arguments)
},{"./_getMapData":255,"dup":82}],284:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"./_getMapData":255,"dup":83}],285:[function(require,module,exports){
arguments[4][84][0].apply(exports,arguments)
},{"dup":84}],286:[function(require,module,exports){
arguments[4][85][0].apply(exports,arguments)
},{"dup":85}],287:[function(require,module,exports){
arguments[4][86][0].apply(exports,arguments)
},{"./memoize":330,"dup":86}],288:[function(require,module,exports){
arguments[4][87][0].apply(exports,arguments)
},{"./_getNative":257,"dup":87}],289:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./_overArg":292,"dup":88}],290:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"./_freeGlobal":253,"dup":90}],291:[function(require,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"dup":91}],292:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"dup":92}],293:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"./_freeGlobal":253,"dup":93}],294:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"dup":94}],295:[function(require,module,exports){
arguments[4][95][0].apply(exports,arguments)
},{"dup":95}],296:[function(require,module,exports){
arguments[4][96][0].apply(exports,arguments)
},{"dup":96}],297:[function(require,module,exports){
arguments[4][97][0].apply(exports,arguments)
},{"./_ListCache":199,"dup":97}],298:[function(require,module,exports){
arguments[4][98][0].apply(exports,arguments)
},{"dup":98}],299:[function(require,module,exports){
arguments[4][99][0].apply(exports,arguments)
},{"dup":99}],300:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"dup":100}],301:[function(require,module,exports){
arguments[4][101][0].apply(exports,arguments)
},{"./_ListCache":199,"./_Map":200,"./_MapCache":201,"dup":101}],302:[function(require,module,exports){
arguments[4][102][0].apply(exports,arguments)
},{"./_memoizeCapped":287,"dup":102}],303:[function(require,module,exports){
arguments[4][103][0].apply(exports,arguments)
},{"./isSymbol":323,"dup":103}],304:[function(require,module,exports){
arguments[4][104][0].apply(exports,arguments)
},{"dup":104}],305:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"./_baseClamp":215,"./toNumber":337,"dup":105}],306:[function(require,module,exports){
arguments[4][107][0].apply(exports,arguments)
},{"dup":107}],307:[function(require,module,exports){
arguments[4][108][0].apply(exports,arguments)
},{"dup":108}],308:[function(require,module,exports){
'use strict';var baseFlatten=require('./_baseFlatten');/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */function flatten(array){var length=array==null?0:array.length;return length?baseFlatten(array,1):[];}module.exports=flatten;

},{"./_baseFlatten":218}],309:[function(require,module,exports){
arguments[4][110][0].apply(exports,arguments)
},{"./_baseGet":221,"dup":110}],310:[function(require,module,exports){
arguments[4][111][0].apply(exports,arguments)
},{"./_baseHasIn":225,"./_hasPath":262,"dup":111}],311:[function(require,module,exports){
arguments[4][112][0].apply(exports,arguments)
},{"dup":112}],312:[function(require,module,exports){
arguments[4][113][0].apply(exports,arguments)
},{"./_baseIsArguments":226,"./isObjectLike":321,"dup":113}],313:[function(require,module,exports){
arguments[4][114][0].apply(exports,arguments)
},{"dup":114}],314:[function(require,module,exports){
arguments[4][115][0].apply(exports,arguments)
},{"./isFunction":317,"./isLength":318,"dup":115}],315:[function(require,module,exports){
arguments[4][116][0].apply(exports,arguments)
},{"./_root":293,"./stubFalse":335,"dup":116}],316:[function(require,module,exports){
'use strict';var baseKeys=require('./_baseKeys'),getTag=require('./_getTag'),isArguments=require('./isArguments'),isArray=require('./isArray'),isArrayLike=require('./isArrayLike'),isBuffer=require('./isBuffer'),isPrototype=require('./_isPrototype'),isTypedArray=require('./isTypedArray');/** `Object#toString` result references. */var mapTag='[object Map]',setTag='[object Set]';/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */function isEmpty(value){if(value==null){return true;}if(isArrayLike(value)&&(isArray(value)||typeof value=='string'||typeof value.splice=='function'||isBuffer(value)||isTypedArray(value)||isArguments(value))){return!value.length;}var tag=getTag(value);if(tag==mapTag||tag==setTag){return!value.size;}if(isPrototype(value)){return!baseKeys(value).length;}for(var key in value){if(hasOwnProperty.call(value,key)){return false;}}return true;}module.exports=isEmpty;

},{"./_baseKeys":233,"./_getTag":260,"./_isPrototype":273,"./isArguments":312,"./isArray":313,"./isArrayLike":314,"./isBuffer":315,"./isTypedArray":324}],317:[function(require,module,exports){
arguments[4][117][0].apply(exports,arguments)
},{"./_baseGetTag":223,"./isObject":320,"dup":117}],318:[function(require,module,exports){
arguments[4][118][0].apply(exports,arguments)
},{"dup":118}],319:[function(require,module,exports){
'use strict';var baseGetTag=require('./_baseGetTag'),isObjectLike=require('./isObjectLike');/** `Object#toString` result references. */var numberTag='[object Number]';/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */function isNumber(value){return typeof value=='number'||isObjectLike(value)&&baseGetTag(value)==numberTag;}module.exports=isNumber;

},{"./_baseGetTag":223,"./isObjectLike":321}],320:[function(require,module,exports){
arguments[4][119][0].apply(exports,arguments)
},{"dup":119}],321:[function(require,module,exports){
arguments[4][120][0].apply(exports,arguments)
},{"dup":120}],322:[function(require,module,exports){
'use strict';var baseGetTag=require('./_baseGetTag'),isArray=require('./isArray'),isObjectLike=require('./isObjectLike');/** `Object#toString` result references. */var stringTag='[object String]';/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;}module.exports=isString;

},{"./_baseGetTag":223,"./isArray":313,"./isObjectLike":321}],323:[function(require,module,exports){
arguments[4][121][0].apply(exports,arguments)
},{"./_baseGetTag":223,"./isObjectLike":321,"dup":121}],324:[function(require,module,exports){
arguments[4][122][0].apply(exports,arguments)
},{"./_baseIsTypedArray":231,"./_baseUnary":243,"./_nodeUtil":290,"dup":122}],325:[function(require,module,exports){
arguments[4][123][0].apply(exports,arguments)
},{"./_arrayLikeKeys":210,"./_baseKeys":233,"./isArrayLike":314,"dup":123}],326:[function(require,module,exports){
(function (global){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */;(function(){/** Used as a safe reference for `undefined` in pre-ES5 environments. */var undefined;/** Used as the semantic version number. */var VERSION='4.17.4';/** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Error message constants. */var CORE_ERROR_TEXT='Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',FUNC_ERROR_TEXT='Expected a function';/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/** Used as the internal argument placeholder. */var PLACEHOLDER='__lodash_placeholder__';/** Used to compose bitmasks for cloning. */var CLONE_DEEP_FLAG=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG=4;/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** Used to compose bitmasks for function metadata. */var WRAP_BIND_FLAG=1,WRAP_BIND_KEY_FLAG=2,WRAP_CURRY_BOUND_FLAG=4,WRAP_CURRY_FLAG=8,WRAP_CURRY_RIGHT_FLAG=16,WRAP_PARTIAL_FLAG=32,WRAP_PARTIAL_RIGHT_FLAG=64,WRAP_ARY_FLAG=128,WRAP_REARG_FLAG=256,WRAP_FLIP_FLAG=512;/** Used as default options for `_.truncate`. */var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION='...';/** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT=800,HOT_SPAN=16;/** Used to indicate the type of lazy iteratees. */var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;/** Used as references for various `Number` constants. */var INFINITY=1/0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e+308,NAN=0/0;/** Used as references for the maximum length and index of an array. */var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;/** Used to associate wrap methods with their bit flags. */var wrapFlags=[['ary',WRAP_ARY_FLAG],['bind',WRAP_BIND_FLAG],['bindKey',WRAP_BIND_KEY_FLAG],['curry',WRAP_CURRY_FLAG],['curryRight',WRAP_CURRY_RIGHT_FLAG],['flip',WRAP_FLIP_FLAG],['partial',WRAP_PARTIAL_FLAG],['partialRight',WRAP_PARTIAL_RIGHT_FLAG],['rearg',WRAP_REARG_FLAG]];/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',domExcTag='[object DOMException]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',promiseTag='[object Promise]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]',weakSetTag='[object WeakSet]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to match empty string literals in compiled template source. */var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;/** Used to match HTML entities and HTML characters. */var reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,reUnescapedHtml=/[&<>"']/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);/** Used to match template delimiters. */var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;/** Used to match property names within property paths. */var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,reLeadingDot=/^\./,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;/**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);/** Used to match leading and trailing whitespace. */var reTrim=/^\s+|\s+$/g,reTrimStart=/^\s+/,reTrimEnd=/\s+$/;/** Used to match wrap detail comments. */var reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,reSplitDetails=/,? & /;/** Used to match words composed of alphanumeric characters. */var reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;/** Used to match backslashes in property paths. */var reEscapeChar=/\\(\\)?/g;/**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\w*$/;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to match Latin Unicode letters (excluding mathematical operators). */var reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;/** Used to ensure capturing order of template delimiters. */var reNoMatch=/($^)/;/** Used to match unescaped characters in compiled string literals. */var reUnescapedString=/['\n\r\u2028\u2029\\]/g;/** Used to compose unicode character classes. */var rsAstralRange='\\ud800-\\udfff',rsComboMarksRange='\\u0300-\\u036f',reComboHalfMarksRange='\\ufe20-\\ufe2f',rsComboSymbolsRange='\\u20d0-\\u20ff',rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,rsDingbatRange='\\u2700-\\u27bf',rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',rsMathOpRange='\\xac\\xb1\\xd7\\xf7',rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',rsPunctuationRange='\\u2000-\\u206f',rsSpaceRange=' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',rsVarRange='\\ufe0e\\ufe0f',rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;/** Used to compose unicode capture groups. */var rsApos='[\'\u2019]',rsAstral='['+rsAstralRange+']',rsBreak='['+rsBreakRange+']',rsCombo='['+rsComboRange+']',rsDigits='\\d+',rsDingbat='['+rsDingbatRange+']',rsLower='['+rsLowerRange+']',rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',rsFitz='\\ud83c[\\udffb-\\udfff]',rsModifier='(?:'+rsCombo+'|'+rsFitz+')',rsNonAstral='[^'+rsAstralRange+']',rsRegional='(?:\\ud83c[\\udde6-\\uddff]){2}',rsSurrPair='[\\ud800-\\udbff][\\udc00-\\udfff]',rsUpper='['+rsUpperRange+']',rsZWJ='\\u200d';/** Used to compose unicode regexes. */var rsMiscLower='(?:'+rsLower+'|'+rsMisc+')',rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',reOptMod=rsModifier+'?',rsOptVar='['+rsVarRange+']?',rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',rsOrdLower='\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',rsOrdUpper='\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',rsSeq=rsOptVar+reOptMod+rsOptJoin,rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';/** Used to match apostrophes. */var reApos=RegExp(rsApos,'g');/**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */var reComboMark=RegExp(rsCombo,'g');/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */var reUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');/** Used to match complex or compound words. */var reUnicodeWord=RegExp([rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,rsUpper+'+'+rsOptContrUpper,rsOrdUpper,rsOrdLower,rsDigits,rsEmoji].join('|'),'g');/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */var reHasUnicode=RegExp('['+rsZWJ+rsAstralRange+rsComboRange+rsVarRange+']');/** Used to detect strings that need a more robust regexp to match words. */var reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;/** Used to assign default `context` object properties. */var contextProps=['Array','Buffer','DataView','Date','Error','Float32Array','Float64Array','Function','Int8Array','Int16Array','Int32Array','Map','Math','Object','Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array','Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap','_','clearTimeout','isFinite','parseInt','setTimeout'];/** Used to make template sourceURLs easier to identify. */var templateCounter=-1;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Used to map Latin Unicode letters to basic Latin letters. */var deburredLetters={// Latin-1 Supplement block.
'\xc0':'A','\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A','\xe0':'a','\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a','\xc7':'C','\xe7':'c','\xd0':'D','\xf0':'d','\xc8':'E','\xc9':'E','\xca':'E','\xcb':'E','\xe8':'e','\xe9':'e','\xea':'e','\xeb':'e','\xcc':'I','\xcd':'I','\xce':'I','\xcf':'I','\xec':'i','\xed':'i','\xee':'i','\xef':'i','\xd1':'N','\xf1':'n','\xd2':'O','\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O','\xf2':'o','\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o','\xd9':'U','\xda':'U','\xdb':'U','\xdc':'U','\xf9':'u','\xfa':'u','\xfb':'u','\xfc':'u','\xdd':'Y','\xfd':'y','\xff':'y','\xc6':'Ae','\xe6':'ae','\xde':'Th','\xfe':'th','\xdf':'ss',// Latin Extended-A block.
'\u0100':'A','\u0102':'A','\u0104':'A','\u0101':'a','\u0103':'a','\u0105':'a','\u0106':'C','\u0108':'C','\u010A':'C','\u010C':'C','\u0107':'c','\u0109':'c','\u010B':'c','\u010D':'c','\u010E':'D','\u0110':'D','\u010F':'d','\u0111':'d','\u0112':'E','\u0114':'E','\u0116':'E','\u0118':'E','\u011A':'E','\u0113':'e','\u0115':'e','\u0117':'e','\u0119':'e','\u011B':'e','\u011C':'G','\u011E':'G','\u0120':'G','\u0122':'G','\u011D':'g','\u011F':'g','\u0121':'g','\u0123':'g','\u0124':'H','\u0126':'H','\u0125':'h','\u0127':'h','\u0128':'I','\u012A':'I','\u012C':'I','\u012E':'I','\u0130':'I','\u0129':'i','\u012B':'i','\u012D':'i','\u012F':'i','\u0131':'i','\u0134':'J','\u0135':'j','\u0136':'K','\u0137':'k','\u0138':'k','\u0139':'L','\u013B':'L','\u013D':'L','\u013F':'L','\u0141':'L','\u013A':'l','\u013C':'l','\u013E':'l','\u0140':'l','\u0142':'l','\u0143':'N','\u0145':'N','\u0147':'N','\u014A':'N','\u0144':'n','\u0146':'n','\u0148':'n','\u014B':'n','\u014C':'O','\u014E':'O','\u0150':'O','\u014D':'o','\u014F':'o','\u0151':'o','\u0154':'R','\u0156':'R','\u0158':'R','\u0155':'r','\u0157':'r','\u0159':'r','\u015A':'S','\u015C':'S','\u015E':'S','\u0160':'S','\u015B':'s','\u015D':'s','\u015F':'s','\u0161':'s','\u0162':'T','\u0164':'T','\u0166':'T','\u0163':'t','\u0165':'t','\u0167':'t','\u0168':'U','\u016A':'U','\u016C':'U','\u016E':'U','\u0170':'U','\u0172':'U','\u0169':'u','\u016B':'u','\u016D':'u','\u016F':'u','\u0171':'u','\u0173':'u','\u0174':'W','\u0175':'w','\u0176':'Y','\u0177':'y','\u0178':'Y','\u0179':'Z','\u017B':'Z','\u017D':'Z','\u017A':'z','\u017C':'z','\u017E':'z','\u0132':'IJ','\u0133':'ij','\u0152':'Oe','\u0153':'oe','\u0149':"'n",'\u017F':'s'};/** Used to map characters to HTML entities. */var htmlEscapes={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'};/** Used to map HTML entities to characters. */var htmlUnescapes={'&amp;':'&','&lt;':'<','&gt;':'>','&quot;':'"','&#39;':"'"};/** Used to escape characters for inclusion in compiled string literals. */var stringEscapes={'\\':'\\',"'":"'",'\n':'n','\r':'r','\u2028':'u2028','\u2029':'u2029'};/** Built-in method references without a dependency on `root`. */var freeParseFloat=parseFloat,freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=(typeof global==='undefined'?'undefined':_typeof(global))=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=(typeof self==='undefined'?'undefined':_typeof(self))=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=(typeof exports==='undefined'?'undefined':_typeof(exports))=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&(typeof module==='undefined'?'undefined':_typeof(module))=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,nodeIsDate=nodeUtil&&nodeUtil.isDate,nodeIsMap=nodeUtil&&nodeUtil.isMap,nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,nodeIsSet=nodeUtil&&nodeUtil.isSet,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/*--------------------------------------------------------------------------*//**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */function addMapEntry(map,pair){// Don't return `map.set` because it's not chainable in IE 11.
map.set(pair[0],pair[1]);return map;}/**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */function addSetEntry(set,value){// Don't return `set.add` because it's not chainable in IE 11.
set.add(value);return set;}/**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}/**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array==null?0:array.length;while(++index<length){var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}/**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */function arrayEach(array,iteratee){var index=-1,length=array==null?0:array.length;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */function arrayEachRight(array,iteratee){var length=array==null?0:array.length;while(length--){if(iteratee(array[length],length,array)===false){break;}}return array;}/**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */function arrayEvery(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(!predicate(array[index],index,array)){return false;}}return true;}/**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}/**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */function arrayIncludes(array,value){var length=array==null?0:array.length;return!!length&&baseIndexOf(array,value,0)>-1;}/**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */function arrayIncludesWith(array,value,comparator){var index=-1,length=array==null?0:array.length;while(++index<length){if(comparator(value,array[index])){return true;}}return false;}/**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array==null?0:array.length;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array==null?0:array.length;if(initAccum&&length){accumulator=array[--length];}while(length--){accumulator=iteratee(accumulator,array[length],length,array);}return accumulator;}/**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}/**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */var asciiSize=baseProperty('length');/**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */function asciiToArray(string){return string.split('');}/**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */function asciiWords(string){return string.match(reAsciiWord)||[];}/**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */function baseFindKey(collection,predicate,eachFunc){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result=key;return false;}});return result;}/**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function baseFindIndex(array,predicate,fromIndex,fromRight){var length=array.length,index=fromIndex+(fromRight?1:-1);while(fromRight?index--:++index<length){if(predicate(array[index],index,array)){return index;}}return-1;}/**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function baseIndexOf(array,value,fromIndex){return value===value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex);}/**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function baseIndexOfWith(array,value,fromIndex,comparator){var index=fromIndex-1,length=array.length;while(++index<length){if(comparator(array[index],value)){return index;}}return-1;}/**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */function baseIsNaN(value){return value!==value;}/**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */function baseMean(array,iteratee){var length=array==null?0:array.length;return length?baseSum(array,iteratee)/length:NAN;}/**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */function baseProperty(key){return function(object){return object==null?undefined:object[key];};}/**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */function basePropertyOf(object){return function(key){return object==null?undefined:object[key];};}/**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator=initAccum?(initAccum=false,value):iteratee(accumulator,value,index,collection);});return accumulator;}/**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--){array[length]=array[length].value;}return array;}/**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index<length){var current=iteratee(array[index]);if(current!==undefined){result=result===undefined?current:result+current;}}return result;}/**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */function baseToPairs(object,props){return arrayMap(props,function(key){return[key,object[key]];});}/**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */function baseUnary(func){return function(value){return func(value);};}/**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */function cacheHas(cache,key){return cache.has(key);}/**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */function countHolders(array,placeholder){var length=array.length,result=0;while(length--){if(array[length]===placeholder){++result;}}return result;}/**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */var deburrLetter=basePropertyOf(deburredLetters);/**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */var escapeHtmlChar=basePropertyOf(htmlEscapes);/**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */function escapeStringChar(chr){return'\\'+stringEscapes[chr];}/**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */function getValue(object,key){return object==null?undefined:object[key];}/**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */function hasUnicode(string){return reHasUnicode.test(string);}/**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */function hasUnicodeWord(string){return reHasUnicodeWord.test(string);}/**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */function iteratorToArray(iterator){var data,result=[];while(!(data=iterator.next()).done){result.push(data.value);}return result;}/**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value===placeholder||value===PLACEHOLDER){array[index]=PLACEHOLDER;result[resIndex++]=index;}}return result;}/**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */function setToPairs(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=[value,value];});return result;}/**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function strictIndexOf(array,value,fromIndex){var index=fromIndex-1,length=array.length;while(++index<length){if(array[index]===value){return index;}}return-1;}/**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function strictLastIndexOf(array,value,fromIndex){var index=fromIndex+1;while(index--){if(array[index]===value){return index;}}return index;}/**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */function stringSize(string){return hasUnicode(string)?unicodeSize(string):asciiSize(string);}/**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */function stringToArray(string){return hasUnicode(string)?unicodeToArray(string):asciiToArray(string);}/**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */var unescapeHtmlChar=basePropertyOf(htmlUnescapes);/**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */function unicodeSize(string){var result=reUnicode.lastIndex=0;while(reUnicode.test(string)){++result;}return result;}/**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */function unicodeToArray(string){return string.match(reUnicode)||[];}/**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */function unicodeWords(string){return string.match(reUnicodeWord)||[];}/*--------------------------------------------------------------------------*//**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */var runInContext=function runInContext(context){context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));/** Built-in constructor references. */var Array=context.Array,Date=context.Date,Error=context.Error,Function=context.Function,Math=context.Math,Object=context.Object,RegExp=context.RegExp,String=context.String,TypeError=context.TypeError;/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=context['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to generate unique IDs. */var idCounter=0;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */var nativeObjectToString=objectProto.toString;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/** Used to restore the original `_` reference in `_.noConflict`. */var oldDash=root._;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?context.Buffer:undefined,_Symbol=context.Symbol,Uint8Array=context.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:undefined,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:undefined,symIterator=_Symbol?_Symbol.iterator:undefined,symToStringTag=_Symbol?_Symbol.toStringTag:undefined;var defineProperty=function(){try{var func=getNative(Object,'defineProperty');func({},'',{});return func;}catch(e){}}();/** Mocked built-ins. */var ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,ctxNow=Date&&Date.now!==root.Date.now&&Date.now,ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=overArg(Object.keys,Object),nativeMax=Math.max,nativeMin=Math.min,nativeNow=Date.now,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;/* Built-in method references that are verified to be native. */var DataView=getNative(context,'DataView'),Map=getNative(context,'Map'),Promise=getNative(context,'Promise'),Set=getNative(context,'Set'),WeakMap=getNative(context,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to store function metadata. */var metaMap=WeakMap&&new WeakMap();/** Used to lookup unminified function names. */var realNames={};/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined,symbolValueOf=symbolProto?symbolProto.valueOf:undefined,symbolToString=symbolProto?symbolProto.toString:undefined;/*------------------------------------------------------------------------*//**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */function lodash(value){if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,'__wrapped__')){return wrapperClone(value);}}return new LodashWrapper(value);}/**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto)){return{};}if(objectCreate){return objectCreate(proto);}object.prototype=proto;var result=new object();object.prototype=undefined;return result;};}();/**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */function baseLodash(){}// No operation performed.
/**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */function LodashWrapper(value,chainAll){this.__wrapped__=value;this.__actions__=[];this.__chain__=!!chainAll;this.__index__=0;this.__values__=undefined;}/**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */lodash.templateSettings={/**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */'escape':reEscape,/**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */'evaluate':reEvaluate,/**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */'interpolate':reInterpolate,/**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */'variable':'',/**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */'imports':{/**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */'_':lodash}};// Ensure wrappers are instances of `baseLodash`.
lodash.prototype=baseLodash.prototype;lodash.prototype.constructor=lodash;LodashWrapper.prototype=baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor=LodashWrapper;/*------------------------------------------------------------------------*//**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */function LazyWrapper(value){this.__wrapped__=value;this.__actions__=[];this.__dir__=1;this.__filtered__=false;this.__iteratees__=[];this.__takeCount__=MAX_ARRAY_LENGTH;this.__views__=[];}/**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__=copyArray(this.__actions__);result.__dir__=this.__dir__;result.__filtered__=this.__filtered__;result.__iteratees__=copyArray(this.__iteratees__);result.__takeCount__=this.__takeCount__;result.__views__=copyArray(this.__views__);return result;}/**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__=-1;result.__filtered__=true;}else{result=this.clone();result.__dir__*=-1;}return result;}/**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir<0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end-start,index=isRight?end:start-1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr||!isRight&&arrLength==length&&takeCount==length){return baseWrapperValue(array,this.__actions__);}var result=[];outer:while(length--&&resIndex<takeCount){index+=dir;var iterIndex=-1,value=array[index];while(++iterIndex<iterLength){var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type==LAZY_MAP_FLAG){value=computed;}else if(!computed){if(type==LAZY_FILTER_FLAG){continue outer;}else{break outer;}}}result[resIndex++]=value;}return result;}// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype=baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor=LazyWrapper;/*------------------------------------------------------------------------*//**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(data,key)?data[key]:undefined;}/**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);}/**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/*------------------------------------------------------------------------*//**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */function listCacheClear(){this.__data__=[];this.size=0;}/**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}--this.size;return true;}/**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined:data[index][1];}/**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else{data[index][1]=value;}return this;}// Add methods to `ListCache`.
ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/*------------------------------------------------------------------------*//**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.
MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/*------------------------------------------------------------------------*//**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}/**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}/**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */function setCacheHas(value){return this.__data__.has(value);}// Add methods to `SetCache`.
SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;/*------------------------------------------------------------------------*//**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */function stackClear(){this.__data__=new ListCache();this.size=0;}/**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function stackGet(key){return this.__data__.get(key);}/**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function stackHas(key){return this.__data__.has(key);}/**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.
Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/*------------------------------------------------------------------------*//**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
isIndex(key,length)))){result.push(key);}}return result;}/**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */function arraySample(array){var length=array.length;return length?array[baseRandom(0,length-1)]:undefined;}/**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */function arraySampleSize(array,n){return shuffleSelf(copyArray(array),baseClamp(n,0,array.length));}/**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */function assignMergeValue(object,key,value){if(value!==undefined&&!eq(object[key],value)||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return-1;}/**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}/**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */function baseAssignIn(object,source){return object&&copyObject(source,keysIn(source),object);}/**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */function baseAssignValue(object,key,value){if(key=='__proto__'&&defineProperty){defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else{object[key]=value;}}/**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */function baseAt(object,paths){var index=-1,length=paths.length,result=Array(length),skip=object==null;while(++index<length){result[index]=skip?undefined:get(object,paths[index]);}return result;}/**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined){number=number<=upper?number:upper;}if(lower!==undefined){number=number>=lower?number:lower;}}return number;}/**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=bitmask&CLONE_DEEP_FLAG,isFlat=bitmask&CLONE_FLAT_FLAG,isFull=bitmask&CLONE_SYMBOLS_FLAG;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else{var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){result=isFlat||isFunc?{}:initCloneObject(value);if(!isDeep){return isFlat?copySymbolsIn(value,baseAssignIn(result,value)):copySymbols(value,baseAssign(result,value));}}else{if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,baseClone,isDeep);}}// Check for circular references and return its corresponding clone.
stack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);var keysFunc=isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys;var props=isArr?undefined:keysFunc(value);arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).
assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}/**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */function baseConforms(source){var props=keys(source);return function(object){return baseConformsTo(object,source,props);};}/**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */function baseConformsTo(object,source,props){var length=props.length;if(object==null){return!length;}object=Object(object);while(length--){var key=props[length],predicate=source[key],value=object[key];if(value===undefined&&!(key in object)||!predicate(value)){return false;}}return true;}/**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */function baseDelay(func,wait,args){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined,args);},wait);}/**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values=arrayMap(values,baseUnary(iteratee));}if(comparator){includes=arrayIncludesWith;isCommon=false;}else if(values.length>=LARGE_ARRAY_SIZE){includes=cacheHas;isCommon=false;values=new SetCache(values);}outer:while(++index<length){var value=array[index],computed=iteratee==null?value:iteratee(value);value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var valuesIndex=valuesLength;while(valuesIndex--){if(values[valuesIndex]===computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}/**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */var baseEach=createBaseEach(baseForOwn);/**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */var baseEachRight=createBaseEach(baseForOwnRight,true);/**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result=!!predicate(value,index,collection);return result;});return result;}/**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index<length){var value=array[index],current=iteratee(value);if(current!=null&&(computed===undefined?current===current&&!isSymbol(current):comparator(current,computed))){var computed=current,result=value;}}return result;}/**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */function baseFill(array,value,start,end){var length=array.length;start=toInteger(start);if(start<0){start=-start>length?0:length+start;}end=end===undefined||end>length?length:toInteger(end);if(end<0){end+=length;}end=start>end?0:toLength(end);while(start<end){array[start++]=value;}return array;}/**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}/**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;predicate||(predicate=isFlattenable);result||(result=[]);while(++index<length){var value=array[index];if(depth>0&&predicate(value)){if(depth>1){// Recursively flatten arrays (susceptible to call stack limits).
baseFlatten(value,depth-1,predicate,isStrict,result);}else{arrayPush(result,value);}}else if(!isStrict){result[result.length]=value;}}return result;}/**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */var baseFor=createBaseFor();/**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */var baseForRight=createBaseFor(true);/**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys);}/**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */function baseForOwnRight(object,iteratee){return object&&baseForRight(object,iteratee,keys);}/**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}/**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */function baseGet(object,path){path=castPath(path,object);var index=0,length=path.length;while(object!=null&&index<length){object=object[toKey(path[index++])];}return index&&index==length?object:undefined;}/**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */function baseGt(value,other){return value>other;}/**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */function baseHas(object,key){return object!=null&&hasOwnProperty.call(object,key);}/**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */function baseHasIn(object,key){return object!=null&&key in Object(object);}/**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */function baseInRange(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end);}/**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=Infinity,result=[];while(othIndex--){var array=arrays[othIndex];if(othIndex&&iteratee){array=arrayMap(array,baseUnary(iteratee));}maxLength=nativeMin(array.length,maxLength);caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?new SetCache(othIndex&&array):undefined;}array=arrays[0];var index=-1,seen=caches[0];outer:while(++index<length&&result.length<maxLength){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){othIndex=othLength;while(--othIndex){var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}/**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}/**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */function baseInvoke(object,path,args){path=castPath(path,object);object=parent(object,path);var func=object==null?object:object[toKey(last(path))];return func==null?undefined:apply(func,object,args);}/**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */function baseIsArrayBuffer(value){return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag;}/**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */function baseIsDate(value){return isObjectLike(value)&&baseGetTag(value)==dateTag;}/**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}/**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}/**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */function baseIsMap(value){return isObjectLike(value)&&getTag(value)==mapTag;}/**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object==null){return!length;}object=Object(object);while(index--){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object)){return false;}}while(++index<length){data=matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(objValue===undefined&&!(key in object)){return false;}}else{var stack=new Stack();if(customizer){var result=customizer(objValue,srcValue,key,object,source,stack);}if(!(result===undefined?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):result)){return false;}}}return true;}/**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */function baseIsRegExp(value){return isObjectLike(value)&&baseGetTag(value)==regexpTag;}/**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */function baseIsSet(value){return isObjectLike(value)&&getTag(value)==setTag;}/**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */function baseIteratee(value){// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
if(typeof value=='function'){return value;}if(value==null){return identity;}if((typeof value==='undefined'?'undefined':_typeof(value))=='object'){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}/**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}/**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */function baseLt(value,other){return value<other;}/**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}/**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */function baseMatches(source){var matchData=getMatchData(source);if(matchData.length==1&&matchData[0][2]){return matchesStrictComparable(matchData[0][0],matchData[0][1]);}return function(object){return object===source||baseIsMatch(object,source,matchData);};}/**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}/**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */function baseMerge(object,source,srcIndex,customizer,stack){if(object===source){return;}baseFor(source,function(srcValue,key){if(isObject(srcValue)){stack||(stack=new Stack());baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else{var newValue=customizer?customizer(object[key],srcValue,key+'',object,source,stack):undefined;if(newValue===undefined){newValue=srcValue;}assignMergeValue(object,key,newValue);}},keysIn);}/**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=object[key],srcValue=source[key],stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key+'',object,source,stack):undefined;var isCommon=newValue===undefined;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue;if(isArr||isBuff||isTyped){if(isArray(objValue)){newValue=objValue;}else if(isArrayLikeObject(objValue)){newValue=copyArray(objValue);}else if(isBuff){isCommon=false;newValue=cloneBuffer(srcValue,true);}else if(isTyped){isCommon=false;newValue=cloneTypedArray(srcValue,true);}else{newValue=[];}}else if(isPlainObject(srcValue)||isArguments(srcValue)){newValue=objValue;if(isArguments(objValue)){newValue=toPlainObject(objValue);}else if(!isObject(objValue)||srcIndex&&isFunction(objValue)){newValue=initCloneObject(srcValue);}}else{isCommon=false;}}if(isCommon){// Recursively merge objects and arrays (susceptible to call stack limits).
stack.set(srcValue,newValue);mergeFunc(newValue,srcValue,srcIndex,customizer,stack);stack['delete'](srcValue);}assignMergeValue(object,key,newValue);}/**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */function baseNth(array,n){var length=array.length;if(!length){return;}n+=n<0?length:0;return isIndex(n,length)?array[n]:undefined;}/**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */function baseOrderBy(collection,iteratees,orders){var index=-1;iteratees=arrayMap(iteratees.length?iteratees:[identity],baseUnary(getIteratee()));var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return{'criteria':criteria,'index':++index,'value':value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}/**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */function basePick(object,paths){return basePickBy(object,paths,function(value,path){return hasIn(object,path);});}/**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */function basePickBy(object,paths,predicate){var index=-1,length=paths.length,result={};while(++index<length){var path=paths[index],value=baseGet(object,path);if(predicate(value,path)){baseSet(result,castPath(path,object),value);}}return result;}/**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */function basePropertyDeep(path){return function(object){return baseGet(object,path);};}/**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */function basePullAll(array,values,iteratee,comparator){var indexOf=comparator?baseIndexOfWith:baseIndexOf,index=-1,length=values.length,seen=array;if(array===values){values=copyArray(values);}if(iteratee){seen=arrayMap(array,baseUnary(iteratee));}while(++index<length){var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){if(seen!==array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}/**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length-1;while(length--){var index=indexes[length];if(length==lastIndex||index!==previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else{baseUnset(array,index);}}}return array;}/**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end-start)/(step||1)),0),result=Array(length);while(length--){result[fromRight?length:++index]=start;start+=step;}return result;}/**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */function baseRepeat(string,n){var result='';if(!string||n<1||n>MAX_SAFE_INTEGER){return result;}// Leverage the exponentiation by squaring algorithm for a faster repeat.
// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
do{if(n%2){result+=string;}n=nativeFloor(n/2);if(n){string+=string;}}while(n);return result;}/**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */function baseRest(func,start){return setToString(overRest(func,start,identity),func+'');}/**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */function baseSample(collection){return arraySample(values(collection));}/**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */function baseSampleSize(collection,n){var array=values(collection);return shuffleSelf(array,baseClamp(n,0,array.length));}/**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */function baseSet(object,path,value,customizer){if(!isObject(object)){return object;}path=castPath(path,object);var index=-1,length=path.length,lastIndex=length-1,nested=object;while(nested!=null&&++index<length){var key=toKey(path[index]),newValue=value;if(index!=lastIndex){var objValue=nested[key];newValue=customizer?customizer(objValue,key,nested):undefined;if(newValue===undefined){newValue=isObject(objValue)?objValue:isIndex(path[index+1])?[]:{};}}assignValue(nested,key,newValue);nested=nested[key];}return object;}/**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};/**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */var baseSetToString=!defineProperty?identity:function(func,string){return defineProperty(func,'toString',{'configurable':true,'enumerable':false,'value':constant(string),'writable':true});};/**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */function baseSlice(array,start,end){var index=-1,length=array.length;if(start<0){start=-start>length?0:length+start;}end=end>length?length:end;if(end<0){end+=length;}length=start>end?0:end-start>>>0;start>>>=0;var result=Array(length);while(++index<length){result[index]=array[index+start];}return result;}/**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result=predicate(value,index,collection);return!result;});return!!result;}/**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */function baseSortedIndex(array,value,retHighest){var low=0,high=array==null?low:array.length;if(typeof value=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){while(low<high){var mid=low+high>>>1,computed=array[mid];if(computed!==null&&!isSymbol(computed)&&(retHighest?computed<=value:computed<value)){low=mid+1;}else{high=mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}/**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */function baseSortedIndexBy(array,value,iteratee,retHighest){value=iteratee(value);var low=0,high=array==null?0:array.length,valIsNaN=value!==value,valIsNull=value===null,valIsSymbol=isSymbol(value),valIsUndefined=value===undefined;while(low<high){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=computed!==undefined,othIsNull=computed===null,othIsReflexive=computed===computed,othIsSymbol=isSymbol(computed);if(valIsNaN){var setLow=retHighest||othIsReflexive;}else if(valIsUndefined){setLow=othIsReflexive&&(retHighest||othIsDefined);}else if(valIsNull){setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);}else if(valIsSymbol){setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);}else if(othIsNull||othIsSymbol){setLow=false;}else{setLow=retHighest?computed<=value:computed<value;}if(setLow){low=mid+1;}else{high=mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}/**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */function baseSortedUniq(array,iteratee){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;if(!index||!eq(computed,seen)){var seen=computed;result[resIndex++]=value===0?0:value;}}return result;}/**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */function baseToNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}return+value;}/**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
if(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).
return arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon=false;includes=arrayIncludesWith;}else if(length>=LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon=false;includes=cacheHas;seen=new SetCache();}else{seen=iteratee?[]:result;}outer:while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var seenIndex=seen.length;while(seenIndex--){if(seen[seenIndex]===computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen!==result){seen.push(computed);}result.push(value);}}return result;}/**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */function baseUnset(object,path){path=castPath(path,object);object=parent(object,path);return object==null||delete object[toKey(last(path))];}/**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */function baseUpdate(object,path,updater,customizer){return baseSet(object,path,updater(baseGet(object,path)),customizer);}/**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index<length)&&predicate(array[index],index,array)){}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index+1:length):baseSlice(array,fromRight?index+1:0,fromRight?length:index);}/**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result=result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}/**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2){return length?baseUniq(arrays[0]):[];}var index=-1,result=Array(length);while(++index<length){var array=arrays[index],othIndex=-1;while(++othIndex<length){if(othIndex!=index){result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);}}}return baseUniq(baseFlatten(result,1),iteratee,comparator);}/**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index<length){var value=index<valsLength?values[index]:undefined;assignFunc(result,props[index],value);}return result;}/**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */function castArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}/**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */function castFunction(value){return typeof value=='function'?value:identity;}/**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */function castPath(value,object){if(isArray(value)){return value;}return isKey(value,object)?[value]:stringToPath(toString(value));}/**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */var castRest=baseRest;/**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */function castSlice(array,start,end){var length=array.length;end=end===undefined?length:end;return!start&&end>=length?array:baseSlice(array,start,end);}/**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */var clearTimeout=ctxClearTimeout||function(id){return root.clearTimeout(id);};/**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);buffer.copy(result);return result;}/**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */function cloneMap(map,isDeep,cloneFunc){var array=isDeep?cloneFunc(mapToArray(map),CLONE_DEEP_FLAG):mapToArray(map);return arrayReduce(array,addMapEntry,new map.constructor());}/**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */function cloneSet(set,isDeep,cloneFunc){var array=isDeep?cloneFunc(setToArray(set),CLONE_DEEP_FLAG):setToArray(set);return arrayReduce(array,addSetEntry,new set.constructor());}/**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */function compareAscending(value,other){if(value!==other){var valIsDefined=value!==undefined,valIsNull=value===null,valIsReflexive=value===value,valIsSymbol=isSymbol(value);var othIsDefined=other!==undefined,othIsNull=other===null,othIsReflexive=other===other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive){return 1;}if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive){return-1;}}return 0;}/**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index<length){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength){return result;}var order=orders[index];return result*(order=='desc'?-1:1);}}// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
// that causes it, under certain circumstances, to provide the same value for
// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
// for more details.
//
// This also ensures a stable sort in V8 and other engines.
// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
return object.index-other.index;}/**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */function composeArgs(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersLength=holders.length,leftIndex=-1,leftLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(leftLength+rangeLength),isUncurried=!isCurried;while(++leftIndex<leftLength){result[leftIndex]=partials[leftIndex];}while(++argsIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[holders[argsIndex]]=args[argsIndex];}}while(rangeLength--){result[leftIndex++]=args[argsIndex++];}return result;}/**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */function composeArgsRight(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersIndex=-1,holdersLength=holders.length,rightIndex=-1,rightLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(rangeLength+rightLength),isUncurried=!isCurried;while(++argsIndex<rangeLength){result[argsIndex]=args[argsIndex];}var offset=argsIndex;while(++rightIndex<rightLength){result[offset+rightIndex]=partials[rightIndex];}while(++holdersIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[offset+holders[holdersIndex]]=args[argsIndex++];}}return result;}/**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined;if(newValue===undefined){newValue=source[key];}if(isNew){baseAssignValue(object,key,newValue);}else{assignValue(object,key,newValue);}}return object;}/**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */function copySymbolsIn(source,object){return copyObject(source,getSymbolsIn(source),object);}/**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee,2),accumulator);};}/**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */function createAssigner(assigner){return baseRest(function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:undefined,guard=length>2?sources[2]:undefined;customizer=assigner.length>3&&typeof customizer=='function'?(length--,customizer):undefined;if(guard&&isIterateeCall(sources[0],sources[1],guard)){customizer=length<3?undefined:customizer;length=1;}object=Object(object);while(++index<length){var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}/**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection==null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index<length){if(iteratee(iterable[index],index,iterable)===false){break;}}return collection;};}/**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}/**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createBind(func,bitmask,thisArg){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}/**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */function createCaseFirst(methodName){return function(string){string=toString(string);var strSymbols=hasUnicode(string)?stringToArray(string):undefined;var chr=strSymbols?strSymbols[0]:string.charAt(0);var trailing=strSymbols?castSlice(strSymbols,1).join(''):string.slice(1);return chr[methodName]()+trailing;};}/**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,'')),callback,'');};}/**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */function createCtor(Ctor){return function(){// Use a `switch` statement to work with class constructors. See
// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
// for more details.
var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);// Mimic the constructor's `return` behavior.
// See https://es5.github.io/#x13.2.2 for more details.
return isObject(result)?result:thisBinding;};}/**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createCurry(func,bitmask,arity){var Ctor=createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length,placeholder=getHolder(wrapper);while(index--){args[index]=arguments[index];}var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?[]:replaceHolders(args,placeholder);length-=holders.length;if(length<arity){return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,undefined,args,holders,undefined,undefined,arity-length);}var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return apply(fn,this,args);}return wrapper;}/**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */function createFind(findIndexFunc){return function(collection,predicate,fromIndex){var iterable=Object(collection);if(!isArrayLike(collection)){var iteratee=getIteratee(predicate,3);collection=keys(collection);predicate=function predicate(key){return iteratee(iterable[key],key,iterable);};}var index=findIndexFunc(collection,predicate,fromIndex);return index>-1?iterable[iteratee?collection[index]:index]:undefined;};}/**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */function createFlow(fromRight){return flatRest(function(funcs){var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--){var func=funcs[index];if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){var wrapper=new LodashWrapper([],true);}}index=wrapper?index:length;while(++index<length){func=funcs[index];var funcName=getFuncName(func),data=funcName=='wrapper'?getData(func):undefined;if(data&&isLaziable(data[0])&&data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&!data[4].length&&data[9]==1){wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else{wrapper=func.length==1&&isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper&&args.length==1&&isArray(value)){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index<length){result=funcs[index].call(this,result);}return result;};});}/**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask&WRAP_ARY_FLAG,isBind=bitmask&WRAP_BIND_FLAG,isBindKey=bitmask&WRAP_BIND_KEY_FLAG,isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),isFlip=bitmask&WRAP_FLIP_FLAG,Ctor=isBindKey?undefined:createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length;while(index--){args[index]=arguments[index];}if(isCurried){var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);}if(partials){args=composeArgs(args,partials,holders,isCurried);}if(partialsRight){args=composeArgsRight(args,partialsRight,holdersRight,isCurried);}length-=holdersCount;if(isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length);}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;length=args.length;if(argPos){args=reorder(args,argPos);}else if(isFlip&&length>1){args.reverse();}if(isAry&&ary<length){args.length=ary;}if(this&&this!==root&&this instanceof wrapper){fn=Ctor||createCtor(fn);}return fn.apply(thisBinding,args);}return wrapper;}/**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}/**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */function createMathOperation(operator,defaultValue){return function(value,other){var result;if(value===undefined&&other===undefined){return defaultValue;}if(value!==undefined){result=value;}if(other!==undefined){if(result===undefined){return other;}if(typeof value=='string'||typeof other=='string'){value=baseToString(value);other=baseToString(other);}else{value=baseToNumber(value);other=baseToNumber(other);}result=operator(value,other);}return result;};}/**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */function createOver(arrayFunc){return flatRest(function(iteratees){iteratees=arrayMap(iteratees,baseUnary(getIteratee()));return baseRest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}/**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */function createPadding(length,chars){chars=chars===undefined?' ':baseToString(chars);var charsLength=chars.length;if(charsLength<2){return charsLength?baseRepeat(chars,length):chars;}var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));return hasUnicode(chars)?castSlice(stringToArray(result),0,length).join(''):result.slice(0,length);}/**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */function createPartial(func,bitmask,thisArg,partials){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength+argsLength),fn=this&&this!==root&&this instanceof wrapper?Ctor:func;while(++leftIndex<leftLength){args[leftIndex]=partials[leftIndex];}while(argsLength--){args[leftIndex++]=arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}/**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */function createRange(fromRight){return function(start,end,step){if(step&&typeof step!='number'&&isIterateeCall(start,end,step)){end=step=undefined;}// Ensure the sign of `-0` is preserved.
start=toFinite(start);if(end===undefined){end=start;start=0;}else{end=toFinite(end);}step=step===undefined?start<end?1:-1:toFinite(step);return baseRange(start,end,step,fromRight);};}/**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */function createRelationalOperation(operator){return function(value,other){if(!(typeof value=='string'&&typeof other=='string')){value=toNumber(value);other=toNumber(other);}return operator(value,other);};}/**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask&WRAP_CURRY_FLAG,newHolders=isCurry?holders:undefined,newHoldersRight=isCurry?undefined:holders,newPartials=isCurry?partials:undefined,newPartialsRight=isCurry?undefined:partials;bitmask|=isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG;bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,newHoldersRight,argPos,ary,arity];var result=wrapFunc.apply(undefined,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder=placeholder;return setWrapToString(result,func,bitmask);}/**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */function createRound(methodName){var func=Math[methodName];return function(number,precision){number=toNumber(number);precision=precision==null?0:nativeMin(toInteger(precision),292);if(precision){// Shift with exponential notation to avoid floating-point issues.
// See [MDN](https://mdn.io/round#Examples) for more details.
var pair=(toString(number)+'e').split('e'),value=func(pair[0]+'e'+(+pair[1]+precision));pair=(toString(value)+'e').split('e');return+(pair[0]+'e'+(+pair[1]-precision));}return func(number);};}/**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */var createSet=!(Set&&1/setToArray(new Set([,-0]))[1]==INFINITY)?noop:function(values){return new Set(values);};/**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */function createToPairs(keysFunc){return function(object){var tag=getTag(object);if(tag==mapTag){return mapToArray(object);}if(tag==setTag){return setToPairs(object);}return baseToPairs(object,keysFunc(object));};}/**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask&WRAP_BIND_KEY_FLAG;if(!isBindKey&&typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);partials=holders=undefined;}ary=ary===undefined?ary:nativeMax(toInteger(ary),0);arity=arity===undefined?arity:toInteger(arity);length-=holders?holders.length:0;if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials=holders=undefined;}var data=isBindKey?undefined:getData(func);var newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func=newData[0];bitmask=newData[1];thisArg=newData[2];partials=newData[3];holders=newData[4];arity=newData[9]=newData[9]===undefined?isBindKey?0:func.length:nativeMax(newData[9]-length,0);if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);}if(!bitmask||bitmask==WRAP_BIND_FLAG){var result=createBind(func,bitmask,thisArg);}else if(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){result=createCurry(func,bitmask,arity);}else if((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){result=createPartial(func,bitmask,thisArg,partials);}else{result=createHybrid.apply(undefined,newData);}var setter=data?baseSetData:setData;return setWrapToString(setter(result,newData),func,bitmask);}/**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */function customDefaultsAssignIn(objValue,srcValue,key,object){if(objValue===undefined||eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)){return srcValue;}return objValue;}/**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */function customDefaultsMerge(objValue,srcValue,key,object,source,stack){if(isObject(objValue)&&isObject(srcValue)){// Recursively merge objects and arrays (susceptible to call stack limits).
stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined,customDefaultsMerge,stack);stack['delete'](srcValue);}return objValue;}/**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */function customOmitClone(value){return isPlainObject(value)?undefined:value;}/**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Assume cyclic values are equal.
var stacked=stack.get(array);if(stacked&&stack.get(other)){return stacked==other;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.
while(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).
if(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}/**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.
// Invalid dates are coerced to `NaN`.
return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,
// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
// for more details.
return object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.
var stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}/**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Assume cyclic values are equal.
var stacked=stack.get(object);if(stacked&&stack.get(other)){return stacked==other;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).
if(!(compared===undefined?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.
if(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}/**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */function flatRest(func){return setToString(overRest(func,undefined,flatten),func+'');}/**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */function getAllKeysIn(object){return baseGetAllKeys(object,keysIn,getSymbolsIn);}/**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */var getData=!metaMap?noop:function(func){return metaMap.get(func);};/**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */function getFuncName(func){var result=func.name+'',array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--){var data=array[length],otherFunc=data.func;if(otherFunc==null||otherFunc==func){return data.name;}}return result;}/**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */function getHolder(func){var object=hasOwnProperty.call(lodash,'placeholder')?lodash:func;return object.placeholder;}/**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */function getIteratee(){var result=lodash.iteratee||iteratee;result=result===iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}/**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */function getMatchData(object){var result=keys(object),length=result.length;while(length--){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)];}return result;}/**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined;}/**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else{delete value[symToStringTag];}}return result;}/**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return[];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};/**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */var getSymbolsIn=!nativeGetSymbols?stubArray:function(object){var result=[];while(object){arrayPush(result,getSymbols(object));object=getPrototype(object);}return result;};/**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index<length){var data=transforms[index],size=data.size;switch(data.type){case'drop':start+=size;break;case'dropRight':end-=size;break;case'take':end=nativeMin(end,start+size);break;case'takeRight':start=nativeMax(start,end-size);break;}}return{'start':start,'end':end};}/**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */function getWrapDetails(source){var match=source.match(reWrapDetails);return match?match[1].split(reSplitDetails):[];}/**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */function hasPath(object,path,hasFunc){path=castPath(path,object);var index=-1,length=path.length,result=false;while(++index<length){var key=toKey(path[index]);if(!(result=object!=null&&hasFunc(object,key))){break;}object=object[key];}if(result||++index!=length){return result;}length=object==null?0:object.length;return!!length&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object));}/**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */function initCloneArray(array){var length=array.length,result=array.constructor(length);// Add properties assigned by `RegExp#exec`.
if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */function initCloneByTag(object,tag,cloneFunc,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return cloneMap(object,isDeep,cloneFunc);case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return cloneSet(object,isDeep,cloneFunc);case symbolTag:return cloneSymbol(object);}}/**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */function insertWrapDetails(source,details){var length=details.length;if(!length){return source;}var lastIndex=length-1;details[lastIndex]=(length>1?'& ':'')+details[lastIndex];details=details.join(length>2?', ':' ');return source.replace(reWrapComment,'{\n/* [wrapped with '+details+'] */\n');}/**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol]);}/**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */function isIndex(value,length){length=length==null?MAX_SAFE_INTEGER:length;return!!length&&(typeof value=='number'||reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=typeof index==='undefined'?'undefined':_typeof(index);if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}/**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */function isKey(value,object){if(isArray(value)){return false;}var type=typeof value==='undefined'?'undefined':_typeof(value);if(type=='number'||type=='symbol'||type=='boolean'||value==null||isSymbol(value)){return true;}return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||object!=null&&value in Object(object);}/**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */function isKeyable(value){var type=typeof value==='undefined'?'undefined':_typeof(value);return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other!='function'||!(funcName in LazyWrapper.prototype)){return false;}if(func===other){return true;}var data=getData(other);return!!data&&func===data[0];}/**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */function isMasked(func){return!!maskSrcKey&&maskSrcKey in func;}/**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */var isMaskable=coreJsData?isFunction:stubFalse;/**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */function isStrictComparable(value){return value===value&&!isObject(value);}/**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */function matchesStrictComparable(key,srcValue){return function(object){if(object==null){return false;}return object[key]===srcValue&&(srcValue!==undefined||key in Object(object));};}/**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}/**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask|srcBitmask,isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);var isCombo=srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_CURRY_FLAG||srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_REARG_FLAG&&data[7].length<=source[8]||srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG)&&source[7].length<=source[8]&&bitmask==WRAP_CURRY_FLAG;// Exit early if metadata can't be merged.
if(!(isCommon||isCombo)){return data;}// Use source `thisArg` if available.
if(srcBitmask&WRAP_BIND_FLAG){data[2]=source[2];// Set when currying a bound function.
newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;}// Compose partial arguments.
var value=source[3];if(value){var partials=data[3];data[3]=partials?composeArgs(partials,value,source[4]):value;data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];}// Compose partial right arguments.
value=source[5];if(value){partials=data[5];data[5]=partials?composeArgsRight(partials,value,source[6]):value;data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];}// Use source `argPos` if available.
value=source[7];if(value){data[7]=value;}// Use source `ary` if it's smaller.
if(srcBitmask&WRAP_ARY_FLAG){data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);}// Use source `arity` if one is not provided.
if(data[9]==null){data[9]=source[9];}// Use source `func` and merge bitmasks.
data[0]=source[0];data[1]=newBitmask;return data;}/**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}/**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */function objectToString(value){return nativeObjectToString.call(value);}/**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */function overRest(func,start,transform){start=nativeMax(start===undefined?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index];}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index];}otherArgs[start]=transform(array);return apply(func,this,otherArgs);};}/**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1));}/**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--){var index=indexes[length];array[length]=isIndex(index,arrLength)?oldArray[index]:undefined;}return array;}/**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */var setData=shortOut(baseSetData);/**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */var setTimeout=ctxSetTimeout||function(func,wait){return root.setTimeout(func,wait);};/**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */var setToString=shortOut(baseSetToString);/**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */function setWrapToString(wrapper,reference,bitmask){var source=reference+'';return setToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));}/**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=HOT_SPAN-(stamp-lastCalled);lastCalled=stamp;if(remaining>0){if(++count>=HOT_COUNT){return arguments[0];}}else{count=0;}return func.apply(undefined,arguments);};}/**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */var stringToPath=memoizeCapped(function(string){var result=[];if(reLeadingDot.test(string)){result.push('');}string.replace(rePropName,function(match,number,quote,string){result.push(quote?string.replace(reEscapeChar,'$1'):number||match);});return result;});/**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */function toKey(value){if(typeof value=='string'||isSymbol(value)){return value;}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return'';}/**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */function updateWrapDetails(details,bitmask){arrayEach(wrapFlags,function(pair){var value='_.'+pair[0];if(bitmask&pair[1]&&!arrayIncludes(details,value)){details.push(value);}});return details.sort();}/**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__=copyArray(wrapper.__actions__);result.__index__=wrapper.__index__;result.__values__=wrapper.__values__;return result;}/*------------------------------------------------------------------------*//**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */function chunk(array,size,guard){if(guard?isIterateeCall(array,size,guard):size===undefined){size=1;}else{size=nativeMax(toInteger(size),0);}var length=array==null?0:array.length;if(!length||size<1){return[];}var index=0,resIndex=0,result=Array(nativeCeil(length/size));while(index<length){result[resIndex++]=baseSlice(array,index,index+=size);}return result;}/**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */function compact(array){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value){result[resIndex++]=value;}}return result;}/**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */function concat(){var length=arguments.length;if(!length){return[];}var args=Array(length-1),array=arguments[0],index=length;while(index--){args[index-1]=arguments[index];}return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));}/**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */var difference=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):[];});/**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */var differenceBy=baseRest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2)):[];});/**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */var differenceWith=baseRest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator=undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined,comparator):[];});/**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */function drop(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,n<0?0:n,length);}/**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */function dropRight(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);n=length-n;return baseSlice(array,0,n<0?0:n);}/**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */function dropRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}/**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */function dropWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true):[];}/**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */function fill(array,value,start,end){var length=array==null?0:array.length;if(!length){return[];}if(start&&typeof start!='number'&&isIterateeCall(array,value,start)){start=0;end=length;}return baseFill(array,value,start,end);}/**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */function findIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseFindIndex(array,getIteratee(predicate,3),index);}/**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */function findLastIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=length-1;if(fromIndex!==undefined){index=toInteger(fromIndex);index=fromIndex<0?nativeMax(length+index,0):nativeMin(index,length-1);}return baseFindIndex(array,getIteratee(predicate,3),index,true);}/**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */function flatten(array){var length=array==null?0:array.length;return length?baseFlatten(array,1):[];}/**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */function flattenDeep(array){var length=array==null?0:array.length;return length?baseFlatten(array,INFINITY):[];}/**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */function flattenDepth(array,depth){var length=array==null?0:array.length;if(!length){return[];}depth=depth===undefined?1:toInteger(depth);return baseFlatten(array,depth);}/**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */function fromPairs(pairs){var index=-1,length=pairs==null?0:pairs.length,result={};while(++index<length){var pair=pairs[index];result[pair[0]]=pair[1];}return result;}/**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */function head(array){return array&&array.length?array[0]:undefined;}/**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */function indexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseIndexOf(array,value,index);}/**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */function initial(array){var length=array==null?0:array.length;return length?baseSlice(array,0,-1):[];}/**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */var intersection=baseRest(function(arrays){var mapped=arrayMap(arrays,castArrayLikeObject);return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped):[];});/**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */var intersectionBy=baseRest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);if(iteratee===last(mapped)){iteratee=undefined;}else{mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,getIteratee(iteratee,2)):[];});/**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */var intersectionWith=baseRest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);comparator=typeof comparator=='function'?comparator:undefined;if(comparator){mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,undefined,comparator):[];});/**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */function join(array,separator){return array==null?'':nativeJoin.call(array,separator);}/**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */function last(array){var length=array==null?0:array.length;return length?array[length-1]:undefined;}/**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */function lastIndexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=length;if(fromIndex!==undefined){index=toInteger(fromIndex);index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);}return value===value?strictLastIndexOf(array,value,index):baseFindIndex(array,baseIsNaN,index,true);}/**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */function nth(array,n){return array&&array.length?baseNth(array,toInteger(n)):undefined;}/**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */var pull=baseRest(pullAll);/**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */function pullAll(array,values){return array&&array.length&&values&&values.length?basePullAll(array,values):array;}/**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */function pullAllBy(array,values,iteratee){return array&&array.length&&values&&values.length?basePullAll(array,values,getIteratee(iteratee,2)):array;}/**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */function pullAllWith(array,values,comparator){return array&&array.length&&values&&values.length?basePullAll(array,values,undefined,comparator):array;}/**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */var pullAt=flatRest(function(array,indexes){var length=array==null?0:array.length,result=baseAt(array,indexes);basePullAt(array,arrayMap(indexes,function(index){return isIndex(index,length)?+index:index;}).sort(compareAscending));return result;});/**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */function remove(array,predicate){var result=[];if(!(array&&array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate=getIteratee(predicate,3);while(++index<length){var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}/**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */function reverse(array){return array==null?array:nativeReverse.call(array);}/**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */function slice(array,start,end){var length=array==null?0:array.length;if(!length){return[];}if(end&&typeof end!='number'&&isIterateeCall(array,start,end)){start=0;end=length;}else{start=start==null?0:toInteger(start);end=end===undefined?length:toInteger(end);}return baseSlice(array,start,end);}/**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */function sortedIndex(array,value){return baseSortedIndex(array,value);}/**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2));}/**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */function sortedIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value);if(index<length&&eq(array[index],value)){return index;}}return-1;}/**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}/**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2),true);}/**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */function sortedLastIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value,true)-1;if(eq(array[index],value)){return index;}}return-1;}/**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */function sortedUniq(array){return array&&array.length?baseSortedUniq(array):[];}/**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */function sortedUniqBy(array,iteratee){return array&&array.length?baseSortedUniq(array,getIteratee(iteratee,2)):[];}/**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */function tail(array){var length=array==null?0:array.length;return length?baseSlice(array,1,length):[];}/**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */function take(array,n,guard){if(!(array&&array.length)){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,0,n<0?0:n);}/**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */function takeRight(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);n=length-n;return baseSlice(array,n<0?0:n,length);}/**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */function takeRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}/**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */function takeWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3)):[];}/**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */var union=baseRest(function(arrays){return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));});/**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */var unionBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));});/**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */var unionWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined;return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined,comparator);});/**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */function uniq(array){return array&&array.length?baseUniq(array):[];}/**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */function uniqBy(array,iteratee){return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[];}/**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */function uniqWith(array,comparator){comparator=typeof comparator=='function'?comparator:undefined;return array&&array.length?baseUniq(array,undefined,comparator):[];}/**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */function unzip(array){if(!(array&&array.length)){return[];}var length=0;array=arrayFilter(array,function(group){if(isArrayLikeObject(group)){length=nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}/**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */function unzipWith(array,iteratee){if(!(array&&array.length)){return[];}var result=unzip(array);if(iteratee==null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined,group);});}/**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */var without=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});/**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */var xor=baseRest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});/**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */var xorBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));});/**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */var xorWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined;return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined,comparator);});/**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */var zip=baseRest(unzip);/**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */function zipObject(props,values){return baseZipObject(props||[],values||[],assignValue);}/**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */function zipObjectDeep(props,values){return baseZipObject(props||[],values||[],baseSet);}/**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */var zipWith=baseRest(function(arrays){var length=arrays.length,iteratee=length>1?arrays[length-1]:undefined;iteratee=typeof iteratee=='function'?(arrays.pop(),iteratee):undefined;return unzipWith(arrays,iteratee);});/*------------------------------------------------------------------------*//**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */function chain(value){var result=lodash(value);result.__chain__=true;return result;}/**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */function tap(value,interceptor){interceptor(value);return value;}/**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */function thru(value,interceptor){return interceptor(value);}/**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */var wrapperAt=flatRest(function(paths){var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length>1||this.__actions__.length||!(value instanceof LazyWrapper)||!isIndex(start)){return this.thru(interceptor);}value=value.slice(start,+start+(length?1:0));value.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length&&!array.length){array.push(undefined);}return array;});});/**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */function wrapperChain(){return chain(this);}/**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}/**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */function wrapperNext(){if(this.__values__===undefined){this.__values__=toArray(this.value());}var done=this.__index__>=this.__values__.length,value=done?undefined:this.__values__[this.__index__++];return{'done':done,'value':value};}/**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */function wrapperToIterator(){return this;}/**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash){var clone=wrapperClone(parent);clone.__index__=0;clone.__values__=undefined;if(result){previous.__wrapped__=clone;}else{result=clone;}var previous=clone;parent=parent.__wrapped__;}previous.__wrapped__=value;return result;}/**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped=new LazyWrapper(this);}wrapped=wrapped.reverse();wrapped.__actions__.push({'func':thru,'args':[reverse],'thisArg':undefined});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}/**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}/*------------------------------------------------------------------------*//**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */var countBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){++result[key];}else{baseAssignValue(result,key,1);}});/**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined;}return func(collection,getIteratee(predicate,3));}/**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}/**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */var find=createFind(findIndex);/**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */var findLast=createFind(findLastIndex);/**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee),1);}/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */function flatMapDeep(collection,iteratee){return baseFlatten(map(collection,iteratee),INFINITY);}/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */function flatMapDepth(collection,iteratee,depth){depth=depth===undefined?1:toInteger(depth);return baseFlatten(map(collection,iteratee),depth);}/**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */function forEach(collection,iteratee){var func=isArray(collection)?arrayEach:baseEach;return func(collection,getIteratee(iteratee,3));}/**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */function forEachRight(collection,iteratee){var func=isArray(collection)?arrayEachRight:baseEachRight;return func(collection,getIteratee(iteratee,3));}/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else{baseAssignValue(result,key,[value]);}});/**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */function includes(collection,value,fromIndex,guard){collection=isArrayLike(collection)?collection:values(collection);fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex<0){fromIndex=nativeMax(length+fromIndex,0);}return isString(collection)?fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:!!length&&baseIndexOf(collection,value,fromIndex)>-1;}/**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */var invokeMap=baseRest(function(collection,path,args){var index=-1,isFunc=typeof path=='function',result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);});return result;});/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */var keyBy=createAggregator(function(result,value,key){baseAssignValue(result,key,value);});/**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}/**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */function orderBy(collection,iteratees,orders,guard){if(collection==null){return[];}if(!isArray(iteratees)){iteratees=iteratees==null?[]:[iteratees];}orders=guard?undefined:orders;if(!isArray(orders)){orders=orders==null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}/**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return[[],[]];});/**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}/**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}/**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,negate(getIteratee(predicate,3)));}/**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */function sample(collection){var func=isArray(collection)?arraySample:baseSample;return func(collection);}/**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */function sampleSize(collection,n,guard){if(guard?isIterateeCall(collection,n,guard):n===undefined){n=1;}else{n=toInteger(n);}var func=isArray(collection)?arraySampleSize:baseSampleSize;return func(collection,n);}/**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */function size(collection){if(collection==null){return 0;}if(isArrayLike(collection)){return isString(collection)?stringSize(collection):collection.length;}var tag=getTag(collection);if(tag==mapTag||tag==setTag){return collection.size;}return baseKeys(collection).length;}/**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined;}return func(collection,getIteratee(predicate,3));}/**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */var sortBy=baseRest(function(collection,iteratees){if(collection==null){return[];}var length=iteratees.length;if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees=[];}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees=[iteratees[0]];}return baseOrderBy(collection,baseFlatten(iteratees,1),[]);});/*------------------------------------------------------------------------*//**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */var now=ctxNow||function(){return root.Date.now();};/*------------------------------------------------------------------------*//**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */function after(n,func){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n<1){return func.apply(this,arguments);}};}/**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */function ary(func,n,guard){n=guard?undefined:n;n=func&&n==null?func.length:n;return createWrap(func,WRAP_ARY_FLAG,undefined,undefined,undefined,undefined,n);}/**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */function before(n,func){var result;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n>0){result=func.apply(this,arguments);}if(n<=1){func=undefined;}return result;};}/**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */var bind=baseRest(function(func,thisArg,partials){var bitmask=WRAP_BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bind));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(func,bitmask,thisArg,partials,holders);});/**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */var bindKey=baseRest(function(object,key,partials){var bitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bindKey));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(key,bitmask,object,partials,holders);});/**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */function curry(func,arity,guard){arity=guard?undefined:arity;var result=createWrap(func,WRAP_CURRY_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder=curry.placeholder;return result;}/**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */function curryRight(func,arity,guard){arity=guard?undefined:arity;var result=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder=curryRight.placeholder;return result;}/**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
lastInvokeTime=time;// Start the timer for the trailing edge.
timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,result=wait-timeSinceLastCall;return maxing?nativeMin(result,maxWait-timeSinceLastInvoke):result;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
// trailing edge, the system time has gone backwards and we're treating
// it as the trailing edge, or we've hit the `maxWait` limit.
return lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */var defer=baseRest(function(func,args){return baseDelay(func,1,args);});/**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */var delay=baseRest(function(func,wait,args){return baseDelay(func,toNumber(wait)||0,args);});/**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */function flip(func){return createWrap(func,WRAP_FLIP_FLAG);}/**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */function memoize(func,resolver){if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache=cache.set(key,result)||cache;return result;};memoized.cache=new(memoize.Cache||MapCache)();return memoized;}// Expose `MapCache`.
memoize.Cache=MapCache;/**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */function negate(predicate){if(typeof predicate!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return function(){var args=arguments;switch(args.length){case 0:return!predicate.call(this);case 1:return!predicate.call(this,args[0]);case 2:return!predicate.call(this,args[0],args[1]);case 3:return!predicate.call(this,args[0],args[1],args[2]);}return!predicate.apply(this,args);};}/**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */function once(func){return before(2,func);}/**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */var overArgs=castRest(function(func,transforms){transforms=transforms.length==1&&isArray(transforms[0])?arrayMap(transforms[0],baseUnary(getIteratee())):arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));var funcsLength=transforms.length;return baseRest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index<length){args[index]=transforms[index].call(this,args[index]);}return apply(func,this,args);});});/**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */var partial=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partial));return createWrap(func,WRAP_PARTIAL_FLAG,undefined,partials,holders);});/**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */var partialRight=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partialRight));return createWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined,partials,holders);});/**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */var rearg=flatRest(function(func,indexes){return createWrap(func,WRAP_REARG_FLAG,undefined,undefined,undefined,indexes);});/**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */function rest(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start===undefined?start:toInteger(start);return baseRest(func,start);}/**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */function spread(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start==null?0:nativeMax(toInteger(start),0);return baseRest(function(args){var array=args[start],otherArgs=castSlice(args,0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}/**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */function unary(func){return ary(func,1);}/**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */function wrap(value,wrapper){return partial(castFunction(wrapper),value);}/*------------------------------------------------------------------------*//**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */function castArray(){if(!arguments.length){return[];}var value=arguments[0];return isArray(value)?value:[value];}/**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */function clone(value){return baseClone(value,CLONE_SYMBOLS_FLAG);}/**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */function cloneWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseClone(value,CLONE_SYMBOLS_FLAG,customizer);}/**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */function cloneDeep(value){return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);}/**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */function cloneDeepWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);}/**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */function conformsTo(object,source){return source==null||baseConformsTo(object,source,keys(source));}/**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */function eq(value,other){return value===other||value!==value&&other!==other;}/**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */var gt=createRelationalOperation(baseGt);/**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */var gte=createRelationalOperation(function(value,other){return value>=other;});/**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */var isArray=Array.isArray;/**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */var isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;/**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */function isBoolean(value){return value===true||value===false||isObjectLike(value)&&baseGetTag(value)==boolTag;}/**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */var isBuffer=nativeIsBuffer||stubFalse;/**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */var isDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;/**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */function isElement(value){return isObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);}/**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */function isEmpty(value){if(value==null){return true;}if(isArrayLike(value)&&(isArray(value)||typeof value=='string'||typeof value.splice=='function'||isBuffer(value)||isTypedArray(value)||isArguments(value))){return!value.length;}var tag=getTag(value);if(tag==mapTag||tag==setTag){return!value.size;}if(isPrototype(value)){return!baseKeys(value).length;}for(var key in value){if(hasOwnProperty.call(value,key)){return false;}}return true;}/**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */function isEqual(value,other){return baseIsEqual(value,other);}/**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */function isEqualWith(value,other,customizer){customizer=typeof customizer=='function'?customizer:undefined;var result=customizer?customizer(value,other):undefined;return result===undefined?baseIsEqual(value,other,undefined,customizer):!!result;}/**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */function isError(value){if(!isObjectLike(value)){return false;}var tag=baseGetTag(value);return tag==errorTag||tag==domExcTag||typeof value.message=='string'&&typeof value.name=='string'&&!isPlainObject(value);}/**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */function isFinite(value){return typeof value=='number'&&nativeIsFinite(value);}/**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 9 which returns 'object' for typed arrays and other constructors.
var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */function isInteger(value){return typeof value=='number'&&value==toInteger(value);}/**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */function isObject(value){var type=typeof value==='undefined'?'undefined':_typeof(value);return value!=null&&(type=='object'||type=='function');}/**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */function isObjectLike(value){return value!=null&&(typeof value==='undefined'?'undefined':_typeof(value))=='object';}/**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */var isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;/**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */function isMatch(object,source){return object===source||baseIsMatch(object,source,getMatchData(source));}/**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */function isMatchWith(object,source,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseIsMatch(object,source,getMatchData(source),customizer);}/**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */function isNaN(value){// An `NaN` primitive is the only value that is not equal to itself.
// Perform the `toStringTag` check first to avoid errors with some
// ActiveX objects in IE.
return isNumber(value)&&value!=+value;}/**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */function isNative(value){if(isMaskable(value)){throw new Error(CORE_ERROR_TEXT);}return baseIsNative(value);}/**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */function isNull(value){return value===null;}/**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */function isNil(value){return value==null;}/**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */function isNumber(value){return typeof value=='number'||isObjectLike(value)&&baseGetTag(value)==numberTag;}/**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}/**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;/**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */function isSafeInteger(value){return isInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;}/**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */var isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;/**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;}/**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */function isSymbol(value){return(typeof value==='undefined'?'undefined':_typeof(value))=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */function isUndefined(value){return value===undefined;}/**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */function isWeakMap(value){return isObjectLike(value)&&getTag(value)==weakMapTag;}/**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */function isWeakSet(value){return isObjectLike(value)&&baseGetTag(value)==weakSetTag;}/**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */var lt=createRelationalOperation(baseLt);/**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */var lte=createRelationalOperation(function(value,other){return value<=other;});/**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */function toArray(value){if(!value){return[];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(symIterator&&value[symIterator]){return iteratorToArray(value[symIterator]());}var tag=getTag(value),func=tag==mapTag?mapToArray:tag==setTag?setToArray:values;return func(value);}/**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */function toFinite(value){if(!value){return value===0?value:0;}value=toNumber(value);if(value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER;}return value===value?value:0;}/**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0;}/**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}/**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=value.replace(reTrim,'');var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */function toPlainObject(value){return copyObject(value,keysIn(value));}/**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */function toSafeInteger(value){return value?baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER):value===0?value:0;}/**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */function toString(value){return value==null?'':baseToString(value);}/*------------------------------------------------------------------------*//**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */var assign=createAssigner(function(object,source){if(isPrototype(source)||isArrayLike(source)){copyObject(source,keys(source),object);return;}for(var key in source){if(hasOwnProperty.call(source,key)){assignValue(object,key,source[key]);}}});/**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});/**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keysIn(source),object,customizer);});/**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keys(source),object,customizer);});/**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */var at=flatRest(baseAt);/**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */function create(prototype,properties){var result=baseCreate(prototype);return properties==null?result:baseAssign(result,properties);}/**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */var defaults=baseRest(function(args){args.push(undefined,customDefaultsAssignIn);return apply(assignInWith,undefined,args);});/**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */var defaultsDeep=baseRest(function(args){args.push(undefined,customDefaultsMerge);return apply(mergeWith,undefined,args);});/**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */function findKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwn);}/**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */function findLastKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight);}/**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */function forIn(object,iteratee){return object==null?object:baseFor(object,getIteratee(iteratee,3),keysIn);}/**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */function forInRight(object,iteratee){return object==null?object:baseForRight(object,getIteratee(iteratee,3),keysIn);}/**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */function forOwn(object,iteratee){return object&&baseForOwn(object,getIteratee(iteratee,3));}/**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */function forOwnRight(object,iteratee){return object&&baseForOwnRight(object,getIteratee(iteratee,3));}/**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */function functions(object){return object==null?[]:baseFunctions(object,keys(object));}/**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */function functionsIn(object){return object==null?[]:baseFunctions(object,keysIn(object));}/**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */function get(object,path,defaultValue){var result=object==null?undefined:baseGet(object,path);return result===undefined?defaultValue:result;}/**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */function has(object,path){return object!=null&&hasPath(object,path,baseHas);}/**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */function hasIn(object,path){return object!=null&&hasPath(object,path,baseHasIn);}/**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */var invert=createInverter(function(result,value,key){result[value]=key;},constant(identity));/**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */var invertBy=createInverter(function(result,value,key){if(hasOwnProperty.call(result,value)){result[value].push(key);}else{result[value]=[key];}},getIteratee);/**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */var invoke=baseRest(baseInvoke);/**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}/**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */function mapKeys(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,iteratee(value,key,object),value);});return result;}/**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */function mapValues(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,key,iteratee(value,key,object));});return result;}/**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});/**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});/**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */var omit=flatRest(function(object,paths){var result={};if(object==null){return result;}var isDeep=false;paths=arrayMap(paths,function(path){path=castPath(path,object);isDeep||(isDeep=path.length>1);return path;});copyObject(object,getAllKeysIn(object),result);if(isDeep){result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);}var length=paths.length;while(length--){baseUnset(result,paths[length]);}return result;});/**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */function omitBy(object,predicate){return pickBy(object,negate(getIteratee(predicate)));}/**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */var pick=flatRest(function(object,paths){return object==null?{}:basePick(object,paths);});/**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */function pickBy(object,predicate){if(object==null){return{};}var props=arrayMap(getAllKeysIn(object),function(prop){return[prop];});predicate=getIteratee(predicate);return basePickBy(object,props,function(value,path){return predicate(value,path[0]);});}/**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */function result(object,path,defaultValue){path=castPath(path,object);var index=-1,length=path.length;// Ensure the loop is entered when path is empty.
if(!length){length=1;object=undefined;}while(++index<length){var value=object==null?undefined:object[toKey(path[index])];if(value===undefined){index=length;value=defaultValue;}object=isFunction(value)?value.call(object):value;}return object;}/**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */function set(object,path,value){return object==null?object:baseSet(object,path,value);}/**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */function setWith(object,path,value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return object==null?object:baseSet(object,path,value,customizer);}/**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */var toPairs=createToPairs(keys);/**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */var toPairsIn=createToPairs(keysIn);/**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */function transform(object,iteratee,accumulator){var isArr=isArray(object),isArrLike=isArr||isBuffer(object)||isTypedArray(object);iteratee=getIteratee(iteratee,4);if(accumulator==null){var Ctor=object&&object.constructor;if(isArrLike){accumulator=isArr?new Ctor():[];}else if(isObject(object)){accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};}else{accumulator={};}}(isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}/**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */function unset(object,path){return object==null?true:baseUnset(object,path);}/**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */function update(object,path,updater){return object==null?object:baseUpdate(object,path,castFunction(updater));}/**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */function updateWith(object,path,updater,customizer){customizer=typeof customizer=='function'?customizer:undefined;return object==null?object:baseUpdate(object,path,castFunction(updater),customizer);}/**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */function valuesIn(object){return object==null?[]:baseValues(object,keysIn(object));}/*------------------------------------------------------------------------*//**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */function clamp(number,lower,upper){if(upper===undefined){upper=lower;lower=undefined;}if(upper!==undefined){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}/**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */function inRange(number,start,end){start=toFinite(start);if(end===undefined){end=start;start=0;}else{end=toFinite(end);}number=toNumber(number);return baseInRange(number,start,end);}/**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */function random(lower,upper,floating){if(floating&&typeof floating!='boolean'&&isIterateeCall(lower,upper,floating)){upper=floating=undefined;}if(floating===undefined){if(typeof upper=='boolean'){floating=upper;upper=undefined;}else if(typeof lower=='boolean'){floating=lower;lower=undefined;}}if(lower===undefined&&upper===undefined){lower=0;upper=1;}else{lower=toFinite(lower);if(upper===undefined){upper=lower;lower=0;}else{upper=toFinite(upper);}}if(lower>upper){var temp=lower;lower=upper;upper=temp;}if(floating||lower%1||upper%1){var rand=nativeRandom();return nativeMin(lower+rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1))),upper);}return baseRandom(lower,upper);}/*------------------------------------------------------------------------*//**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */var camelCase=createCompounder(function(result,word,index){word=word.toLowerCase();return result+(index?capitalize(word):word);});/**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */function capitalize(string){return upperFirst(toString(string).toLowerCase());}/**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */function deburr(string){string=toString(string);return string&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');}/**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */function endsWith(string,target,position){string=toString(string);target=baseToString(target);var length=string.length;position=position===undefined?length:baseClamp(toInteger(position),0,length);var end=position;position-=target.length;return position>=0&&string.slice(position,end)==target;}/**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */function escape(string){string=toString(string);return string&&reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}/**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */function escapeRegExp(string){string=toString(string);return string&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,'\\$&'):string;}/**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */var kebabCase=createCompounder(function(result,word,index){return result+(index?'-':'')+word.toLowerCase();});/**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */var lowerCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toLowerCase();});/**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */var lowerFirst=createCaseFirst('toLowerCase');/**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */function pad(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;if(!length||strLength>=length){return string;}var mid=(length-strLength)/2;return createPadding(nativeFloor(mid),chars)+string+createPadding(nativeCeil(mid),chars);}/**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */function padEnd(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?string+createPadding(length-strLength,chars):string;}/**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */function padStart(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?createPadding(length-strLength,chars)+string:string;}/**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */function parseInt(string,radix,guard){if(guard||radix==null){radix=0;}else if(radix){radix=+radix;}return nativeParseInt(toString(string).replace(reTrimStart,''),radix||0);}/**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */function repeat(string,n,guard){if(guard?isIterateeCall(string,n,guard):n===undefined){n=1;}else{n=toInteger(n);}return baseRepeat(toString(string),n);}/**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */function replace(){var args=arguments,string=toString(args[0]);return args.length<3?string:string.replace(args[1],args[2]);}/**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */var snakeCase=createCompounder(function(result,word,index){return result+(index?'_':'')+word.toLowerCase();});/**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */function split(string,separator,limit){if(limit&&typeof limit!='number'&&isIterateeCall(string,separator,limit)){separator=limit=undefined;}limit=limit===undefined?MAX_ARRAY_LENGTH:limit>>>0;if(!limit){return[];}string=toString(string);if(string&&(typeof separator=='string'||separator!=null&&!isRegExp(separator))){separator=baseToString(separator);if(!separator&&hasUnicode(string)){return castSlice(stringToArray(string),0,limit);}}return string.split(separator,limit);}/**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */var startCase=createCompounder(function(result,word,index){return result+(index?' ':'')+upperFirst(word);});/**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */function startsWith(string,target,position){string=toString(string);position=position==null?0:baseClamp(toInteger(position),0,string.length);target=baseToString(target);return string.slice(position,position+target.length)==target;}/**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */function template(string,options,guard){// Based on John Resig's `tmpl` implementation
// (http://ejohn.org/blog/javascript-micro-templating/)
// and Laura Doktorova's doT.js (https://github.com/olado/doT).
var settings=lodash.templateSettings;if(guard&&isIterateeCall(string,options,guard)){options=undefined;}string=toString(string);options=assignInWith({},options,settings,customDefaultsAssignIn);var imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate||reNoMatch,source="__p += '";// Compile the regexp to match each delimiter.
var reDelimiters=RegExp((options.escape||reNoMatch).source+'|'+interpolate.source+'|'+(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+(options.evaluate||reNoMatch).source+'|$','g');// Use a sourceURL for easier debugging.
var sourceURL='//# sourceURL='+('sourceURL'in options?options.sourceURL:'lodash.templateSources['+ ++templateCounter+']')+'\n';string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue||(interpolateValue=esTemplateValue);// Escape characters that can't be included in string literals.
source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);// Replace delimiters with snippets.
if(escapeValue){isEscaping=true;source+="' +\n__e("+escapeValue+") +\n'";}if(evaluateValue){isEvaluating=true;source+="';\n"+evaluateValue+";\n__p += '";}if(interpolateValue){source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'";}index=offset+match.length;// The JS engine embedded in Adobe products needs `match` returned in
// order to produce the correct `offset` value.
return match;});source+="';\n";// If `variable` is not specified wrap a with-statement around the generated
// code to add the data object to the top of the scope chain.
var variable=options.variable;if(!variable){source='with (obj) {\n'+source+'\n}\n';}// Cleanup code by stripping empty strings.
source=(isEvaluating?source.replace(reEmptyStringLeading,''):source).replace(reEmptyStringMiddle,'$1').replace(reEmptyStringTrailing,'$1;');// Frame code as the function body.
source='function('+(variable||'obj')+') {\n'+(variable?'':'obj || (obj = {});\n')+"var __t, __p = ''"+(isEscaping?', __e = _.escape':'')+(isEvaluating?', __j = Array.prototype.join;\n'+"function print() { __p += __j.call(arguments, '') }\n":';\n')+source+'return __p\n}';var result=attempt(function(){return Function(importsKeys,sourceURL+'return '+source).apply(undefined,importsValues);});// Provide the compiled function's source by its `toString` method or
// the `source` property as a convenience for inlining compiled templates.
result.source=source;if(isError(result)){throw result;}return result;}/**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */function toLower(value){return toString(value).toLowerCase();}/**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */function toUpper(value){return toString(value).toUpperCase();}/**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */function trim(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrim,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars),start=charsStartIndex(strSymbols,chrSymbols),end=charsEndIndex(strSymbols,chrSymbols)+1;return castSlice(strSymbols,start,end).join('');}/**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */function trimEnd(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrimEnd,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),end=charsEndIndex(strSymbols,stringToArray(chars))+1;return castSlice(strSymbols,0,end).join('');}/**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */function trimStart(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrimStart,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),start=charsStartIndex(strSymbols,stringToArray(chars));return castSlice(strSymbols,start).join('');}/**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator='separator'in options?options.separator:separator;length='length'in options?toInteger(options.length):length;omission='omission'in options?baseToString(options.omission):omission;}string=toString(string);var strLength=string.length;if(hasUnicode(string)){var strSymbols=stringToArray(string);strLength=strSymbols.length;}if(length>=strLength){return string;}var end=length-stringSize(omission);if(end<1){return omission;}var result=strSymbols?castSlice(strSymbols,0,end).join(''):string.slice(0,end);if(separator===undefined){return result+omission;}if(strSymbols){end+=result.length-end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');}separator.lastIndex=0;while(match=separator.exec(substring)){var newEnd=match.index;}result=result.slice(0,newEnd===undefined?end:newEnd);}}else if(string.indexOf(baseToString(separator),end)!=end){var index=result.lastIndexOf(separator);if(index>-1){result=result.slice(0,index);}}return result+omission;}/**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */function unescape(string){string=toString(string);return string&&reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}/**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */var upperCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toUpperCase();});/**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */var upperFirst=createCaseFirst('toUpperCase');/**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */function words(string,pattern,guard){string=toString(string);pattern=guard?undefined:pattern;if(pattern===undefined){return hasUnicodeWord(string)?unicodeWords(string):asciiWords(string);}return string.match(pattern)||[];}/*------------------------------------------------------------------------*//**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */var attempt=baseRest(function(func,args){try{return apply(func,undefined,args);}catch(e){return isError(e)?e:new Error(e);}});/**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */var bindAll=flatRest(function(object,methodNames){arrayEach(methodNames,function(key){key=toKey(key);baseAssignValue(object,key,bind(object[key],object));});return object;});/**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */function cond(pairs){var length=pairs==null?0:pairs.length,toIteratee=getIteratee();pairs=!length?[]:arrayMap(pairs,function(pair){if(typeof pair[1]!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return[toIteratee(pair[0]),pair[1]];});return baseRest(function(args){var index=-1;while(++index<length){var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}/**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */function conforms(source){return baseConforms(baseClone(source,CLONE_DEEP_FLAG));}/**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */function constant(value){return function(){return value;};}/**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */function defaultTo(value,defaultValue){return value==null||value!==value?defaultValue:value;}/**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */var flow=createFlow();/**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */var flowRight=createFlow(true);/**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */function identity(value){return value;}/**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */function iteratee(func){return baseIteratee(typeof func=='function'?func:baseClone(func,CLONE_DEEP_FLAG));}/**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */function matches(source){return baseMatches(baseClone(source,CLONE_DEEP_FLAG));}/**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));}/**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */var method=baseRest(function(path,args){return function(object){return baseInvoke(object,path,args);};});/**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */var methodOf=baseRest(function(object,args){return function(path){return baseInvoke(object,path,args);};});/**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options==null&&!(isObject(source)&&(methodNames.length||!props.length))){options=source;source=object;object=this;methodNames=baseFunctions(source,keys(source));}var chain=!(isObject(options)&&'chain'in options)||!!options.chain,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName]=func;if(isFunc){object.prototype[methodName]=function(){var chainAll=this.__chain__;if(chain||chainAll){var result=object(this.__wrapped__),actions=result.__actions__=copyArray(this.__actions__);actions.push({'func':func,'args':arguments,'thisArg':object});result.__chain__=chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}/**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */function noConflict(){if(root._===this){root._=oldDash;}return this;}/**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */function noop(){}// No operation performed.
/**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */function nthArg(n){n=toInteger(n);return baseRest(function(args){return baseNth(args,n);});}/**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */var over=createOver(arrayMap);/**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */var overEvery=createOver(arrayEvery);/**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */var overSome=createOver(arraySome);/**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */function property(path){return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);}/**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */function propertyOf(object){return function(path){return object==null?undefined:baseGet(object,path);};}/**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */var range=createRange();/**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */var rangeRight=createRange(true);/**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */function stubArray(){return[];}/**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */function stubFalse(){return false;}/**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */function stubObject(){return{};}/**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */function stubString(){return'';}/**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */function stubTrue(){return true;}/**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */function times(n,iteratee){n=toInteger(n);if(n<1||n>MAX_SAFE_INTEGER){return[];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee=getIteratee(iteratee);n-=MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index<n){iteratee(index);}return result;}/**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */function toPath(value){if(isArray(value)){return arrayMap(value,toKey);}return isSymbol(value)?[value]:copyArray(stringToPath(toString(value)));}/**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */function uniqueId(prefix){var id=++idCounter;return toString(prefix)+id;}/*------------------------------------------------------------------------*//**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */var add=createMathOperation(function(augend,addend){return augend+addend;},0);/**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */var ceil=createRound('ceil');/**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */var divide=createMathOperation(function(dividend,divisor){return dividend/divisor;},1);/**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */var floor=createRound('floor');/**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */function max(array){return array&&array.length?baseExtremum(array,identity,baseGt):undefined;}/**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */function maxBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseGt):undefined;}/**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */function mean(array){return baseMean(array,identity);}/**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */function meanBy(array,iteratee){return baseMean(array,getIteratee(iteratee,2));}/**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */function min(array){return array&&array.length?baseExtremum(array,identity,baseLt):undefined;}/**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */function minBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseLt):undefined;}/**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */var multiply=createMathOperation(function(multiplier,multiplicand){return multiplier*multiplicand;},1);/**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */var round=createRound('round');/**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */var subtract=createMathOperation(function(minuend,subtrahend){return minuend-subtrahend;},0);/**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */function sum(array){return array&&array.length?baseSum(array,identity):0;}/**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */function sumBy(array,iteratee){return array&&array.length?baseSum(array,getIteratee(iteratee,2)):0;}/*------------------------------------------------------------------------*/// Add methods that return wrapped values in chain sequences.
lodash.after=after;lodash.ary=ary;lodash.assign=assign;lodash.assignIn=assignIn;lodash.assignInWith=assignInWith;lodash.assignWith=assignWith;lodash.at=at;lodash.before=before;lodash.bind=bind;lodash.bindAll=bindAll;lodash.bindKey=bindKey;lodash.castArray=castArray;lodash.chain=chain;lodash.chunk=chunk;lodash.compact=compact;lodash.concat=concat;lodash.cond=cond;lodash.conforms=conforms;lodash.constant=constant;lodash.countBy=countBy;lodash.create=create;lodash.curry=curry;lodash.curryRight=curryRight;lodash.debounce=debounce;lodash.defaults=defaults;lodash.defaultsDeep=defaultsDeep;lodash.defer=defer;lodash.delay=delay;lodash.difference=difference;lodash.differenceBy=differenceBy;lodash.differenceWith=differenceWith;lodash.drop=drop;lodash.dropRight=dropRight;lodash.dropRightWhile=dropRightWhile;lodash.dropWhile=dropWhile;lodash.fill=fill;lodash.filter=filter;lodash.flatMap=flatMap;lodash.flatMapDeep=flatMapDeep;lodash.flatMapDepth=flatMapDepth;lodash.flatten=flatten;lodash.flattenDeep=flattenDeep;lodash.flattenDepth=flattenDepth;lodash.flip=flip;lodash.flow=flow;lodash.flowRight=flowRight;lodash.fromPairs=fromPairs;lodash.functions=functions;lodash.functionsIn=functionsIn;lodash.groupBy=groupBy;lodash.initial=initial;lodash.intersection=intersection;lodash.intersectionBy=intersectionBy;lodash.intersectionWith=intersectionWith;lodash.invert=invert;lodash.invertBy=invertBy;lodash.invokeMap=invokeMap;lodash.iteratee=iteratee;lodash.keyBy=keyBy;lodash.keys=keys;lodash.keysIn=keysIn;lodash.map=map;lodash.mapKeys=mapKeys;lodash.mapValues=mapValues;lodash.matches=matches;lodash.matchesProperty=matchesProperty;lodash.memoize=memoize;lodash.merge=merge;lodash.mergeWith=mergeWith;lodash.method=method;lodash.methodOf=methodOf;lodash.mixin=mixin;lodash.negate=negate;lodash.nthArg=nthArg;lodash.omit=omit;lodash.omitBy=omitBy;lodash.once=once;lodash.orderBy=orderBy;lodash.over=over;lodash.overArgs=overArgs;lodash.overEvery=overEvery;lodash.overSome=overSome;lodash.partial=partial;lodash.partialRight=partialRight;lodash.partition=partition;lodash.pick=pick;lodash.pickBy=pickBy;lodash.property=property;lodash.propertyOf=propertyOf;lodash.pull=pull;lodash.pullAll=pullAll;lodash.pullAllBy=pullAllBy;lodash.pullAllWith=pullAllWith;lodash.pullAt=pullAt;lodash.range=range;lodash.rangeRight=rangeRight;lodash.rearg=rearg;lodash.reject=reject;lodash.remove=remove;lodash.rest=rest;lodash.reverse=reverse;lodash.sampleSize=sampleSize;lodash.set=set;lodash.setWith=setWith;lodash.shuffle=shuffle;lodash.slice=slice;lodash.sortBy=sortBy;lodash.sortedUniq=sortedUniq;lodash.sortedUniqBy=sortedUniqBy;lodash.split=split;lodash.spread=spread;lodash.tail=tail;lodash.take=take;lodash.takeRight=takeRight;lodash.takeRightWhile=takeRightWhile;lodash.takeWhile=takeWhile;lodash.tap=tap;lodash.throttle=throttle;lodash.thru=thru;lodash.toArray=toArray;lodash.toPairs=toPairs;lodash.toPairsIn=toPairsIn;lodash.toPath=toPath;lodash.toPlainObject=toPlainObject;lodash.transform=transform;lodash.unary=unary;lodash.union=union;lodash.unionBy=unionBy;lodash.unionWith=unionWith;lodash.uniq=uniq;lodash.uniqBy=uniqBy;lodash.uniqWith=uniqWith;lodash.unset=unset;lodash.unzip=unzip;lodash.unzipWith=unzipWith;lodash.update=update;lodash.updateWith=updateWith;lodash.values=values;lodash.valuesIn=valuesIn;lodash.without=without;lodash.words=words;lodash.wrap=wrap;lodash.xor=xor;lodash.xorBy=xorBy;lodash.xorWith=xorWith;lodash.zip=zip;lodash.zipObject=zipObject;lodash.zipObjectDeep=zipObjectDeep;lodash.zipWith=zipWith;// Add aliases.
lodash.entries=toPairs;lodash.entriesIn=toPairsIn;lodash.extend=assignIn;lodash.extendWith=assignInWith;// Add methods to `lodash.prototype`.
mixin(lodash,lodash);/*------------------------------------------------------------------------*/// Add methods that return unwrapped values in chain sequences.
lodash.add=add;lodash.attempt=attempt;lodash.camelCase=camelCase;lodash.capitalize=capitalize;lodash.ceil=ceil;lodash.clamp=clamp;lodash.clone=clone;lodash.cloneDeep=cloneDeep;lodash.cloneDeepWith=cloneDeepWith;lodash.cloneWith=cloneWith;lodash.conformsTo=conformsTo;lodash.deburr=deburr;lodash.defaultTo=defaultTo;lodash.divide=divide;lodash.endsWith=endsWith;lodash.eq=eq;lodash.escape=escape;lodash.escapeRegExp=escapeRegExp;lodash.every=every;lodash.find=find;lodash.findIndex=findIndex;lodash.findKey=findKey;lodash.findLast=findLast;lodash.findLastIndex=findLastIndex;lodash.findLastKey=findLastKey;lodash.floor=floor;lodash.forEach=forEach;lodash.forEachRight=forEachRight;lodash.forIn=forIn;lodash.forInRight=forInRight;lodash.forOwn=forOwn;lodash.forOwnRight=forOwnRight;lodash.get=get;lodash.gt=gt;lodash.gte=gte;lodash.has=has;lodash.hasIn=hasIn;lodash.head=head;lodash.identity=identity;lodash.includes=includes;lodash.indexOf=indexOf;lodash.inRange=inRange;lodash.invoke=invoke;lodash.isArguments=isArguments;lodash.isArray=isArray;lodash.isArrayBuffer=isArrayBuffer;lodash.isArrayLike=isArrayLike;lodash.isArrayLikeObject=isArrayLikeObject;lodash.isBoolean=isBoolean;lodash.isBuffer=isBuffer;lodash.isDate=isDate;lodash.isElement=isElement;lodash.isEmpty=isEmpty;lodash.isEqual=isEqual;lodash.isEqualWith=isEqualWith;lodash.isError=isError;lodash.isFinite=isFinite;lodash.isFunction=isFunction;lodash.isInteger=isInteger;lodash.isLength=isLength;lodash.isMap=isMap;lodash.isMatch=isMatch;lodash.isMatchWith=isMatchWith;lodash.isNaN=isNaN;lodash.isNative=isNative;lodash.isNil=isNil;lodash.isNull=isNull;lodash.isNumber=isNumber;lodash.isObject=isObject;lodash.isObjectLike=isObjectLike;lodash.isPlainObject=isPlainObject;lodash.isRegExp=isRegExp;lodash.isSafeInteger=isSafeInteger;lodash.isSet=isSet;lodash.isString=isString;lodash.isSymbol=isSymbol;lodash.isTypedArray=isTypedArray;lodash.isUndefined=isUndefined;lodash.isWeakMap=isWeakMap;lodash.isWeakSet=isWeakSet;lodash.join=join;lodash.kebabCase=kebabCase;lodash.last=last;lodash.lastIndexOf=lastIndexOf;lodash.lowerCase=lowerCase;lodash.lowerFirst=lowerFirst;lodash.lt=lt;lodash.lte=lte;lodash.max=max;lodash.maxBy=maxBy;lodash.mean=mean;lodash.meanBy=meanBy;lodash.min=min;lodash.minBy=minBy;lodash.stubArray=stubArray;lodash.stubFalse=stubFalse;lodash.stubObject=stubObject;lodash.stubString=stubString;lodash.stubTrue=stubTrue;lodash.multiply=multiply;lodash.nth=nth;lodash.noConflict=noConflict;lodash.noop=noop;lodash.now=now;lodash.pad=pad;lodash.padEnd=padEnd;lodash.padStart=padStart;lodash.parseInt=parseInt;lodash.random=random;lodash.reduce=reduce;lodash.reduceRight=reduceRight;lodash.repeat=repeat;lodash.replace=replace;lodash.result=result;lodash.round=round;lodash.runInContext=runInContext;lodash.sample=sample;lodash.size=size;lodash.snakeCase=snakeCase;lodash.some=some;lodash.sortedIndex=sortedIndex;lodash.sortedIndexBy=sortedIndexBy;lodash.sortedIndexOf=sortedIndexOf;lodash.sortedLastIndex=sortedLastIndex;lodash.sortedLastIndexBy=sortedLastIndexBy;lodash.sortedLastIndexOf=sortedLastIndexOf;lodash.startCase=startCase;lodash.startsWith=startsWith;lodash.subtract=subtract;lodash.sum=sum;lodash.sumBy=sumBy;lodash.template=template;lodash.times=times;lodash.toFinite=toFinite;lodash.toInteger=toInteger;lodash.toLength=toLength;lodash.toLower=toLower;lodash.toNumber=toNumber;lodash.toSafeInteger=toSafeInteger;lodash.toString=toString;lodash.toUpper=toUpper;lodash.trim=trim;lodash.trimEnd=trimEnd;lodash.trimStart=trimStart;lodash.truncate=truncate;lodash.unescape=unescape;lodash.uniqueId=uniqueId;lodash.upperCase=upperCase;lodash.upperFirst=upperFirst;// Add aliases.
lodash.each=forEach;lodash.eachRight=forEachRight;lodash.first=head;mixin(lodash,function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName]=func;}});return source;}(),{'chain':false});/*------------------------------------------------------------------------*//**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */lodash.VERSION=VERSION;// Assign default placeholders.
arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){lodash[methodName].placeholder=lodash;});// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
arrayEach(['drop','take'],function(methodName,index){LazyWrapper.prototype[methodName]=function(n){n=n===undefined?1:nativeMax(toInteger(n),0);var result=this.__filtered__&&!index?new LazyWrapper(this):this.clone();if(result.__filtered__){result.__takeCount__=nativeMin(n,result.__takeCount__);}else{result.__views__.push({'size':nativeMin(n,MAX_ARRAY_LENGTH),'type':methodName+(result.__dir__<0?'Right':'')});}return result;};LazyWrapper.prototype[methodName+'Right']=function(n){return this.reverse()[methodName](n).reverse();};});// Add `LazyWrapper` methods that accept an `iteratee` value.
arrayEach(['filter','map','takeWhile'],function(methodName,index){var type=index+1,isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName]=function(iteratee){var result=this.clone();result.__iteratees__.push({'iteratee':getIteratee(iteratee,3),'type':type});result.__filtered__=result.__filtered__||isFilter;return result;};});// Add `LazyWrapper` methods for `_.head` and `_.last`.
arrayEach(['head','last'],function(methodName,index){var takeName='take'+(index?'Right':'');LazyWrapper.prototype[methodName]=function(){return this[takeName](1).value()[0];};});// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
arrayEach(['initial','tail'],function(methodName,index){var dropName='drop'+(index?'':'Right');LazyWrapper.prototype[methodName]=function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact=function(){return this.filter(identity);};LazyWrapper.prototype.find=function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast=function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap=baseRest(function(path,args){if(typeof path=='function'){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject=function(predicate){return this.filter(negate(getIteratee(predicate)));};LazyWrapper.prototype.slice=function(start,end){start=toInteger(start);var result=this;if(result.__filtered__&&(start>0||end<0)){return new LazyWrapper(result);}if(start<0){result=result.takeRight(-start);}else if(start){result=result.drop(start);}if(end!==undefined){end=toInteger(end);result=end<0?result.dropRight(-end):result.take(end-start);}return result;};LazyWrapper.prototype.takeRightWhile=function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray=function(){return this.take(MAX_ARRAY_LENGTH);};// Add `LazyWrapper` methods to `lodash.prototype`.
baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?'take'+(methodName=='last'?'Right':''):methodName],retUnwrapped=isTaker||/^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName]=function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy||isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker&&chainAll?result[0]:result;};if(useLazy&&checkIteratee&&typeof iteratee=='function'&&iteratee.length!=1){// Avoid lazy use if the iteratee has a "length" value other than `1`.
isLazy=useLazy=false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped&&!chainAll,onlyLazy=isLazy&&!isHybrid;if(!retUnwrapped&&useLazy){value=onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});return new LodashWrapper(result,chainAll);}if(isUnwrapped&&onlyLazy){return func.apply(this,args);}result=this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});// Add `Array` methods to `lodash.prototype`.
arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName]=function(){var args=arguments;if(retUnwrapped&&!this.__chain__){var value=this.value();return func.apply(isArray(value)?value:[],args);}return this[chainName](function(value){return func.apply(isArray(value)?value:[],args);});};});// Map minified method names to their real names.
baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name+'',names=realNames[key]||(realNames[key]=[]);names.push({'name':methodName,'func':lodashFunc});}});realNames[createHybrid(undefined,WRAP_BIND_KEY_FLAG).name]=[{'name':'wrapper','func':undefined}];// Add methods to `LazyWrapper`.
LazyWrapper.prototype.clone=lazyClone;LazyWrapper.prototype.reverse=lazyReverse;LazyWrapper.prototype.value=lazyValue;// Add chain sequence methods to the `lodash` wrapper.
lodash.prototype.at=wrapperAt;lodash.prototype.chain=wrapperChain;lodash.prototype.commit=wrapperCommit;lodash.prototype.next=wrapperNext;lodash.prototype.plant=wrapperPlant;lodash.prototype.reverse=wrapperReverse;lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;// Add lazy aliases.
lodash.prototype.first=lodash.prototype.head;if(symIterator){lodash.prototype[symIterator]=wrapperToIterator;}return lodash;};/*--------------------------------------------------------------------------*/// Export lodash.
var _=runInContext();// Some AMD build optimizers, like r.js, check for condition patterns like:
if(typeof define=='function'&&_typeof(define.amd)=='object'&&define.amd){// Expose Lodash on the global object to prevent errors when Lodash is
// loaded by a script tag in the presence of an AMD loader.
// See http://requirejs.org/docs/errors.html#mismatch for more details.
// Use `_.noConflict` to remove Lodash from the global object.
root._=_;// Define as an anonymous module so, through path mapping, it can be
// referenced as the "underscore" module.
define(function(){return _;});}// Check for `exports` after `define` in case a build optimizer adds it.
else if(freeModule){// Export for Node.js.
(freeModule.exports=_)._=_;// Export for CommonJS support.
freeExports._=_;}else{// Export to the global object.
root._=_;}}).call(undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],327:[function(require,module,exports){
arguments[4][125][0].apply(exports,arguments)
},{"./_arrayMap":211,"./_baseIteratee":232,"./_baseMap":235,"./isArray":313,"dup":125}],328:[function(require,module,exports){
'use strict';var baseExtremum=require('./_baseExtremum'),baseGt=require('./_baseGt'),identity=require('./identity');/**
 * Computes the maximum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * _.max([4, 2, 8, 6]);
 * // => 8
 *
 * _.max([]);
 * // => undefined
 */function max(array){return array&&array.length?baseExtremum(array,identity,baseGt):undefined;}module.exports=max;

},{"./_baseExtremum":217,"./_baseGt":224,"./identity":311}],329:[function(require,module,exports){
'use strict';var baseExtremum=require('./_baseExtremum'),baseGt=require('./_baseGt'),baseIteratee=require('./_baseIteratee');/**
 * This method is like `_.max` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.maxBy(objects, function(o) { return o.n; });
 * // => { 'n': 2 }
 *
 * // The `_.property` iteratee shorthand.
 * _.maxBy(objects, 'n');
 * // => { 'n': 2 }
 */function maxBy(array,iteratee){return array&&array.length?baseExtremum(array,baseIteratee(iteratee,2),baseGt):undefined;}module.exports=maxBy;

},{"./_baseExtremum":217,"./_baseGt":224,"./_baseIteratee":232}],330:[function(require,module,exports){
arguments[4][126][0].apply(exports,arguments)
},{"./_MapCache":201,"dup":126}],331:[function(require,module,exports){
'use strict';var baseExtremum=require('./_baseExtremum'),baseLt=require('./_baseLt'),identity=require('./identity');/**
 * Computes the minimum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * _.min([4, 2, 8, 6]);
 * // => 2
 *
 * _.min([]);
 * // => undefined
 */function min(array){return array&&array.length?baseExtremum(array,identity,baseLt):undefined;}module.exports=min;

},{"./_baseExtremum":217,"./_baseLt":234,"./identity":311}],332:[function(require,module,exports){
'use strict';var baseExtremum=require('./_baseExtremum'),baseIteratee=require('./_baseIteratee'),baseLt=require('./_baseLt');/**
 * This method is like `_.min` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.minBy(objects, function(o) { return o.n; });
 * // => { 'n': 1 }
 *
 * // The `_.property` iteratee shorthand.
 * _.minBy(objects, 'n');
 * // => { 'n': 1 }
 */function minBy(array,iteratee){return array&&array.length?baseExtremum(array,baseIteratee(iteratee,2),baseLt):undefined;}module.exports=minBy;

},{"./_baseExtremum":217,"./_baseIteratee":232,"./_baseLt":234}],333:[function(require,module,exports){
arguments[4][128][0].apply(exports,arguments)
},{"./_baseProperty":238,"./_basePropertyDeep":239,"./_isKey":270,"./_toKey":303,"dup":128}],334:[function(require,module,exports){
arguments[4][129][0].apply(exports,arguments)
},{"dup":129}],335:[function(require,module,exports){
arguments[4][130][0].apply(exports,arguments)
},{"dup":130}],336:[function(require,module,exports){
'use strict';var baseSum=require('./_baseSum'),identity=require('./identity');/**
 * Computes the sum of the values in `array`.
 *
 * @static
 * @memberOf _
 * @since 3.4.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {number} Returns the sum.
 * @example
 *
 * _.sum([4, 2, 8, 6]);
 * // => 20
 */function sum(array){return array&&array.length?baseSum(array,identity):0;}module.exports=sum;

},{"./_baseSum":240,"./identity":311}],337:[function(require,module,exports){
arguments[4][132][0].apply(exports,arguments)
},{"./isObject":320,"./isSymbol":323,"dup":132}],338:[function(require,module,exports){
arguments[4][133][0].apply(exports,arguments)
},{"./_baseToString":242,"dup":133}],339:[function(require,module,exports){
'use strict';var baseValues=require('./_baseValues'),keys=require('./keys');/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */function values(object){return object==null?[]:baseValues(object,keys(object));}module.exports=values;

},{"./_baseValues":244,"./keys":325}],340:[function(require,module,exports){
'use strict';// shim for using process in browser
var process=module.exports={};// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations
return setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined
if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
return cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
return cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations
return clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined
if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
return cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
// Some versions of I.E. have different rules for clearTimeout vs setTimeout
return cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects
function Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';// empty string to avoid regexp issues
process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};

},{}],341:[function(require,module,exports){
'use strict';if(typeof Object.create==='function'){// implementation from standard node.js 'util' module
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{// old school shim for old browsers
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}

},{}],342:[function(require,module,exports){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};module.exports=function isBuffer(arg){return arg&&(typeof arg==='undefined'?'undefined':_typeof(arg))==='object'&&typeof arg.copy==='function'&&typeof arg.fill==='function'&&typeof arg.readUInt8==='function';};

},{}],343:[function(require,module,exports){
(function (process,global){
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var formatRegExp=/%[sdj%]/g;exports.format=function(f){if(!isString(f)){var objects=[];for(var i=0;i<arguments.length;i++){objects.push(inspect(arguments[i]));}return objects.join(' ');}var i=1;var args=arguments;var len=args.length;var str=String(f).replace(formatRegExp,function(x){if(x==='%%')return'%';if(i>=len)return x;switch(x){case'%s':return String(args[i++]);case'%d':return Number(args[i++]);case'%j':try{return JSON.stringify(args[i++]);}catch(_){return'[Circular]';}default:return x;}});for(var x=args[i];i<len;x=args[++i]){if(isNull(x)||!isObject(x)){str+=' '+x;}else{str+=' '+inspect(x);}}return str;};// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate=function(fn,msg){// Allow for deprecating things in the process of starting up.
if(isUndefined(global.process)){return function(){return exports.deprecate(fn,msg).apply(this,arguments);};}if(process.noDeprecation===true){return fn;}var warned=false;function deprecated(){if(!warned){if(process.throwDeprecation){throw new Error(msg);}else if(process.traceDeprecation){console.trace(msg);}else{console.error(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;};var debugs={};var debugEnviron;exports.debuglog=function(set){if(isUndefined(debugEnviron))debugEnviron=process.env.NODE_DEBUG||'';set=set.toUpperCase();if(!debugs[set]){if(new RegExp('\\b'+set+'\\b','i').test(debugEnviron)){var pid=process.pid;debugs[set]=function(){var msg=exports.format.apply(exports,arguments);console.error('%s %d: %s',set,pid,msg);};}else{debugs[set]=function(){};}}return debugs[set];};/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 *//* legacy: obj, showHidden, depth, colors*/function inspect(obj,opts){// default options
var ctx={seen:[],stylize:stylizeNoColor};// legacy...
if(arguments.length>=3)ctx.depth=arguments[2];if(arguments.length>=4)ctx.colors=arguments[3];if(isBoolean(opts)){// legacy...
ctx.showHidden=opts;}else if(opts){// got an "options" object
exports._extend(ctx,opts);}// set default options
if(isUndefined(ctx.showHidden))ctx.showHidden=false;if(isUndefined(ctx.depth))ctx.depth=2;if(isUndefined(ctx.colors))ctx.colors=false;if(isUndefined(ctx.customInspect))ctx.customInspect=true;if(ctx.colors)ctx.stylize=stylizeWithColor;return formatValue(ctx,obj,ctx.depth);}exports.inspect=inspect;// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors={'bold':[1,22],'italic':[3,23],'underline':[4,24],'inverse':[7,27],'white':[37,39],'grey':[90,39],'black':[30,39],'blue':[34,39],'cyan':[36,39],'green':[32,39],'magenta':[35,39],'red':[31,39],'yellow':[33,39]};// Don't use 'blue' not visible on cmd.exe
inspect.styles={'special':'cyan','number':'yellow','boolean':'yellow','undefined':'grey','null':'bold','string':'green','date':'magenta',// "name": intentionally not styling
'regexp':'red'};function stylizeWithColor(str,styleType){var style=inspect.styles[styleType];if(style){return'\x1B['+inspect.colors[style][0]+'m'+str+'\x1B['+inspect.colors[style][1]+'m';}else{return str;}}function stylizeNoColor(str,styleType){return str;}function arrayToHash(array){var hash={};array.forEach(function(val,idx){hash[val]=true;});return hash;}function formatValue(ctx,value,recurseTimes){// Provide a hook for user-specified inspect functions.
// Check that value is an object with an inspect function on it
if(ctx.customInspect&&value&&isFunction(value.inspect)&&// Filter out the util module, it's inspect function is special
value.inspect!==exports.inspect&&// Also filter out any prototype objects using the circular check.
!(value.constructor&&value.constructor.prototype===value)){var ret=value.inspect(recurseTimes,ctx);if(!isString(ret)){ret=formatValue(ctx,ret,recurseTimes);}return ret;}// Primitive types cannot have properties
var primitive=formatPrimitive(ctx,value);if(primitive){return primitive;}// Look up the keys of the object.
var keys=Object.keys(value);var visibleKeys=arrayToHash(keys);if(ctx.showHidden){keys=Object.getOwnPropertyNames(value);}// IE doesn't make error fields non-enumerable
// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
if(isError(value)&&(keys.indexOf('message')>=0||keys.indexOf('description')>=0)){return formatError(value);}// Some type of object without properties can be shortcutted.
if(keys.length===0){if(isFunction(value)){var name=value.name?': '+value.name:'';return ctx.stylize('[Function'+name+']','special');}if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}if(isDate(value)){return ctx.stylize(Date.prototype.toString.call(value),'date');}if(isError(value)){return formatError(value);}}var base='',array=false,braces=['{','}'];// Make Array say that they are Array
if(isArray(value)){array=true;braces=['[',']'];}// Make functions say that they are functions
if(isFunction(value)){var n=value.name?': '+value.name:'';base=' [Function'+n+']';}// Make RegExps say that they are RegExps
if(isRegExp(value)){base=' '+RegExp.prototype.toString.call(value);}// Make dates with properties first say the date
if(isDate(value)){base=' '+Date.prototype.toUTCString.call(value);}// Make error with message first say the error
if(isError(value)){base=' '+formatError(value);}if(keys.length===0&&(!array||value.length==0)){return braces[0]+base+braces[1];}if(recurseTimes<0){if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}else{return ctx.stylize('[Object]','special');}}ctx.seen.push(value);var output;if(array){output=formatArray(ctx,value,recurseTimes,visibleKeys,keys);}else{output=keys.map(function(key){return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);});}ctx.seen.pop();return reduceToSingleString(output,base,braces);}function formatPrimitive(ctx,value){if(isUndefined(value))return ctx.stylize('undefined','undefined');if(isString(value)){var simple='\''+JSON.stringify(value).replace(/^"|"$/g,'').replace(/'/g,"\\'").replace(/\\"/g,'"')+'\'';return ctx.stylize(simple,'string');}if(isNumber(value))return ctx.stylize(''+value,'number');if(isBoolean(value))return ctx.stylize(''+value,'boolean');// For some reason typeof null is "object", so special case here.
if(isNull(value))return ctx.stylize('null','null');}function formatError(value){return'['+Error.prototype.toString.call(value)+']';}function formatArray(ctx,value,recurseTimes,visibleKeys,keys){var output=[];for(var i=0,l=value.length;i<l;++i){if(hasOwnProperty(value,String(i))){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),true));}else{output.push('');}}keys.forEach(function(key){if(!key.match(/^\d+$/)){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,key,true));}});return output;}function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str,desc;desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]};if(desc.get){if(desc.set){str=ctx.stylize('[Getter/Setter]','special');}else{str=ctx.stylize('[Getter]','special');}}else{if(desc.set){str=ctx.stylize('[Setter]','special');}}if(!hasOwnProperty(visibleKeys,key)){name='['+key+']';}if(!str){if(ctx.seen.indexOf(desc.value)<0){if(isNull(recurseTimes)){str=formatValue(ctx,desc.value,null);}else{str=formatValue(ctx,desc.value,recurseTimes-1);}if(str.indexOf('\n')>-1){if(array){str=str.split('\n').map(function(line){return'  '+line;}).join('\n').substr(2);}else{str='\n'+str.split('\n').map(function(line){return'   '+line;}).join('\n');}}}else{str=ctx.stylize('[Circular]','special');}}if(isUndefined(name)){if(array&&key.match(/^\d+$/)){return str;}name=JSON.stringify(''+key);if(name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)){name=name.substr(1,name.length-2);name=ctx.stylize(name,'name');}else{name=name.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'");name=ctx.stylize(name,'string');}}return name+': '+str;}function reduceToSingleString(output,base,braces){var numLinesEst=0;var length=output.reduce(function(prev,cur){numLinesEst++;if(cur.indexOf('\n')>=0)numLinesEst++;return prev+cur.replace(/\u001b\[\d\d?m/g,'').length+1;},0);if(length>60){return braces[0]+(base===''?'':base+'\n ')+' '+output.join(',\n  ')+' '+braces[1];}return braces[0]+base+' '+output.join(', ')+' '+braces[1];}// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar){return Array.isArray(ar);}exports.isArray=isArray;function isBoolean(arg){return typeof arg==='boolean';}exports.isBoolean=isBoolean;function isNull(arg){return arg===null;}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null;}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==='number';}exports.isNumber=isNumber;function isString(arg){return typeof arg==='string';}exports.isString=isString;function isSymbol(arg){return(typeof arg==='undefined'?'undefined':_typeof(arg))==='symbol';}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0;}exports.isUndefined=isUndefined;function isRegExp(re){return isObject(re)&&objectToString(re)==='[object RegExp]';}exports.isRegExp=isRegExp;function isObject(arg){return(typeof arg==='undefined'?'undefined':_typeof(arg))==='object'&&arg!==null;}exports.isObject=isObject;function isDate(d){return isObject(d)&&objectToString(d)==='[object Date]';}exports.isDate=isDate;function isError(e){return isObject(e)&&(objectToString(e)==='[object Error]'||e instanceof Error);}exports.isError=isError;function isFunction(arg){return typeof arg==='function';}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||(typeof arg==='undefined'?'undefined':_typeof(arg))==='symbol'||// ES6 symbol
typeof arg==='undefined';}exports.isPrimitive=isPrimitive;exports.isBuffer=require('./support/isBuffer');function objectToString(o){return Object.prototype.toString.call(o);}function pad(n){return n<10?'0'+n.toString(10):n.toString(10);}var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];// 26 Feb 16:19:34
function timestamp(){var d=new Date();var time=[pad(d.getHours()),pad(d.getMinutes()),pad(d.getSeconds())].join(':');return[d.getDate(),months[d.getMonth()],time].join(' ');}// log is just a thin wrapper to console.log that prepends a timestamp
exports.log=function(){console.log('%s - %s',timestamp(),exports.format.apply(exports,arguments));};/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */exports.inherits=require('inherits');exports._extend=function(origin,add){// Don't do anything if add isn't an object
if(!add||!isObject(add))return origin;var keys=Object.keys(add);var i=keys.length;while(i--){origin[keys[i]]=add[keys[i]];}return origin;};function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":342,"_process":340,"inherits":341}],344:[function(require,module,exports){
'use strict';module.exports={Map:require('./map/Map'),Layer:require('./layer/exports'),Renderer:require('./render/exports'),Requestor:require('./request/Requestor')};

},{"./layer/exports":348,"./map/Map":359,"./render/exports":361,"./request/Requestor":380}],345:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var lumo=require('lumo');var Debug=function(_lumo$Layer){_inherits(Debug,_lumo$Layer);function Debug(options){_classCallCheck(this,Debug);return _possibleConstructorReturn(this,(Debug.__proto__||Object.getPrototypeOf(Debug)).call(this,options));}_createClass(Debug,[{key:'requestTile',value:function requestTile(coord,done){done(coord);}}]);return Debug;}(lumo.Layer);module.exports=Debug;

},{"lumo":155}],346:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var lumo=require('lumo');var EventEmitter=require('events');var defaultTo=require('lodash/defaultTo');var broadcast=function broadcast(group,type){var handler=function handler(event){group.layers.forEach(function(layer){layer.emit(type,event);});};group.on(type,handler);group.broadcasts.set(type,handler);};var unbroadcast=function unbroadcast(group,type){group.removeListener(type,function(event){group.layers.forEach(function(layer){layer.emit(type,event);});});group.broadcasts.delete(type);};var Group=function(_EventEmitter){_inherits(Group,_EventEmitter);function Group(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Group);var _this=_possibleConstructorReturn(this,(Group.__proto__||Object.getPrototypeOf(Group)).call(this));_this.hidden=defaultTo(options.hidden,false);_this.muted=defaultTo(options.muted,false);_this.layers=defaultTo(options.layers,[]);_this.broadcasts=new Map();return _this;}_createClass(Group,[{key:'onAdd',value:function onAdd(plot){var _this2=this;if(!plot){throw'No plot argument provided';}this.plot=plot;this.layers.forEach(function(layer){layer.onAdd(_this2.plot);});broadcast(this,lumo.PAN_START);broadcast(this,lumo.PAN);broadcast(this,lumo.PAN_END);broadcast(this,lumo.ZOOM_START);broadcast(this,lumo.ZOOM);broadcast(this,lumo.ZOOM_END);return this;}},{key:'onRemove',value:function onRemove(plot){if(!plot){throw'No plot argument provided';}unbroadcast(this,lumo.PAN_START);unbroadcast(this,lumo.PAN);unbroadcast(this,lumo.PAN_END);unbroadcast(this,lumo.ZOOM_START);unbroadcast(this,lumo.ZOOM);unbroadcast(this,lumo.ZOOM_END);this.layers.forEach(function(layer){layer.onRemove(plot);});this.plot=null;return this;}},{key:'add',value:function add(layer){if(!layer){throw'No layer argument provided';}if(this.layers.indexOf(layer)!==-1){throw'Provided layer is already attached to the group';}this.layers.push(layer);if(this.plot){layer.onAdd(this.plot);}return this;}},{key:'remove',value:function remove(layer){if(!layer){throw'No layer argument provided';}var index=this.layers.indexOf(layer);if(index===-1){throw'Provided layer is not attached to the group';}this.layers.splice(index,1);if(this.plot){layer.onRemove(this.plot);}return this;}},{key:'has',value:function has(layer){var index=this.layers.indexOf(layer);return index!==-1;}},{key:'show',value:function show(){this.hidden=false;return this;}},{key:'hide',value:function hide(){this.hidden=true;return this;}},{key:'isHidden',value:function isHidden(){return this.hidden;}},{key:'mute',value:function mute(){this.muted=true;return this;}},{key:'unmute',value:function unmute(){if(this.muted){this.muted=false;if(this.plot){// get visible coords
var coords=this.plot.getVisibleCoords();// request tiles
this.requestTiles(coords);}}return this;}},{key:'isMuted',value:function isMuted(){return this.muted;}},{key:'enable',value:function enable(){this.show();this.unmute();return this;}},{key:'disable',value:function disable(){this.hide();this.mute();return this;}},{key:'isDisabled',value:function isDisabled(){return this.muted&&this.hidden;}},{key:'draw',value:function draw(timestamp){if(this.hidden){this.layers.forEach(function(layer){if(layer.renderer&&layer.renderer.clear){// clear DOM based renderer
layer.renderer.clear();}});return this;}this.layers.forEach(function(layer){layer.draw(timestamp);});return this;}},{key:'refresh',value:function refresh(){this.layers.forEach(function(layer){layer.refresh();});}},{key:'requestTiles',value:function requestTiles(coords){if(this.muted){return this;}this.layers.forEach(function(layer){layer.requestTiles(coords);});}}]);return Group;}(EventEmitter);module.exports=Group;

},{"events":191,"lodash/defaultTo":306,"lumo":155}],347:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var lumo=require('lumo');var defaultTo=require('lodash/defaultTo');var isEmpty=require('lodash/isEmpty');var isFunction=require('lodash/isFunction');var TILE_ADD=Symbol();var REDRAW_TIMEOUT_MS=800;var Live=function(_lumo$Layer){_inherits(Live,_lumo$Layer);function Live(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Live);var _this=_possibleConstructorReturn(this,(Live.__proto__||Object.getPrototypeOf(Live)).call(this,options));_this.meta=meta;_this.params={};_this.query=null;_this.filters=new Map();_this.transform=defaultTo(options.transform,null);_this.redrawDebounce=null;_this.handlers=new Map();// set extrema / cache
_this.clearExtrema();return _this;}_createClass(Live,[{key:'onAdd',value:function onAdd(plot){var _this2=this;// create handler
var add=function add(event){if(_this2.transform){event.tile.data=_this2.transform(event.tile.data);}var updated=_this2.updateExtrema(event.tile.coord,event.tile.data);if(updated&&_this2.renderer&&_this2.renderer.redraw){clearTimeout(_this2.redrawDebounce);_this2.redrawDebounce=setTimeout(function(){if(_this2.renderer&&_this2.renderer.redraw){_this2.renderer.redraw(true);}// clear debounce
_this2.redrawDebounce=null;},REDRAW_TIMEOUT_MS);}};// attach handler
// NOTE: add this BEFORE calling super, this NEEDS to be the first
// `TILE_ADD` callback.
this.on(lumo.TILE_ADD,add);// store handler
this.handlers.set(TILE_ADD,add);_get(Live.prototype.__proto__||Object.getPrototypeOf(Live.prototype),'onAdd',this).call(this,plot);return this;}},{key:'onRemove',value:function onRemove(plot){// clear any pending timeout
clearTimeout(this.redrawDebounce);this.redrawDebounce=null;// detach handler
this.removeListener(lumo.TILE_ADD,this.handlers.get(TILE_ADD));// delete handler
this.handlers.delete(TILE_ADD);_get(Live.prototype.__proto__||Object.getPrototypeOf(Live.prototype),'onRemove',this).call(this,plot);return this;}},{key:'clearExtrema',value:function clearExtrema(){this.extremas=new Map();}},{key:'getExtrema',value:function getExtrema(){var level=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Math.round(this.plot.zoom);var extrema=null;if(!this.extremas.has(level)){extrema={min:Infinity,max:-Infinity};this.extremas.set(level,extrema);}else{extrema=this.extremas.get(level);}return extrema;}},{key:'updateExtrema',value:function updateExtrema(coord,data){var current=this.getExtrema(coord.z);var extrema=this.extractExtrema(data);var changed=false;if(extrema.min<current.min){changed=true;current.min=extrema.min;}if(extrema.max>current.max){changed=true;current.max=extrema.max;}return changed;}},{key:'extractExtrema',value:function extractExtrema(){return{min:Infinity,max:-Infinity};}},{key:'addFilter',value:function addFilter(id,filter){this.filters.set(id,filter);this.clearExtrema();}},{key:'removeFilter',value:function removeFilter(id){if(this.filters.has(id)){this.filters.delete(id);this.clearExtrema();}}},{key:'clearFilters',value:function clearFilters(){this.filters.clear();}},{key:'setQuery',value:function setQuery(query){if(isEmpty(query)&&!isFunction(query)){throw'Query object is empty';}this.query=query;this.clearExtrema();}},{key:'getQuery',value:function getQuery(){var _this3=this;if(isEmpty(this.query)&&!isFunction(this.query)&&this.filters.size===0){// no query / filters
return null;}var query=isFunction(this.query)?this.query(this):this.query||[];if(!Array.isArray(query)){query=[query];}this.filters.forEach(function(filter){if(query.length>0){query.push('AND');}query.push(isFunction(filter)?filter(_this3):filter);});return query;}},{key:'clearQuery',value:function clearQuery(){this.query=undefined;this.clearExtrema();}},{key:'getMeta',value:function getMeta(){return this.meta;}},{key:'getParams',value:function getParams(){return this.params;}}]);return Live;}(lumo.Layer);module.exports=Live;

},{"lodash/defaultTo":306,"lodash/isEmpty":316,"lodash/isFunction":317,"lumo":155}],348:[function(require,module,exports){
'use strict';module.exports={// debug
Debug:require('./core/Debug'),// live
Live:require('./core/Live'),// group
Group:require('./core/Group'),// types
Count:require('./type/Count'),Community:require('./type/Community'),// Frequency: require('./type/Frequency'),
Heatmap:require('./type/Heatmap'),Macro:require('./type/Macro'),Micro:require('./type/Micro'),MacroEdge:require('./type/MacroEdge'),Rest:require('./type/Rest'),TopTermCount:require('./type/TopTermCount')};

},{"./core/Debug":345,"./core/Group":346,"./core/Live":347,"./type/Community":350,"./type/Count":351,"./type/Heatmap":353,"./type/Macro":354,"./type/MacroEdge":355,"./type/Micro":356,"./type/Rest":357,"./type/TopTermCount":358}],349:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var isString=require('lodash/isString');var isNumber=require('lodash/isNumber');var Live=require('../core/Live');function isPoT(n){return n&&(n&n-1)===0;}var Bivariate=function(_Live){_inherits(Bivariate,_Live);function Bivariate(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Bivariate);var _this=_possibleConstructorReturn(this,(Bivariate.__proto__||Object.getPrototypeOf(Bivariate)).call(this,meta,options));_this.xField=defaultTo(options.xField,'x');_this.yField=defaultTo(options.xField,'y');var left=defaultTo(options.left,0);var right=defaultTo(options.right,Math.pow(2,32));var bottom=defaultTo(options.bottom,0);var top=defaultTo(options.top,Math.pow(2,32));_this.setBounds(left,right,bottom,top);_this.resolution=options.resolution;return _this;}_createClass(Bivariate,[{key:'setXField',value:function setXField(field){if(!isString(field)){throw'xField argument '+field+' must be of type String';}this.xField=field;}},{key:'setYField',value:function setYField(field){if(!isString(field)){throw'yField argument '+field+' must be of type String';}this.yField=field;}},{key:'setBounds',value:function setBounds(left,right,bottom,top){if(!isNumber(left)){throw'left argument '+left+' is invalid';}if(!isNumber(right)){throw'right argument '+right+' is invalid';}if(!isNumber(bottom)){throw'bottom argument '+bottom+' is invalid';}if(!isNumber(top)){throw'top argument '+top+' is invalid';}this.left=left;this.right=right;this.bottom=bottom;this.top=top;}},{key:'setResolution',value:function setResolution(resolution){if(!isNumber(resolution)){throw'resolution argument '+resolution+' must be of type Number';}if(!isPoT(resolution)){throw'resolution argument '+resolution+' must be a power-of-two';}this.resolution=resolution;}}]);return Bivariate;}(Live);module.exports=Bivariate;

},{"../core/Live":347,"lodash/defaultTo":306,"lodash/isNumber":319,"lodash/isString":322}],350:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var get=require('lodash/get');var minBy=require('lodash/minBy');var maxBy=require('lodash/maxBy');var Micro=require('./Micro');var Community=function(_Micro){_inherits(Community,_Micro);function Community(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Community);var _this=_possibleConstructorReturn(this,(Community.__proto__||Object.getPrototypeOf(Community)).call(this,meta,options));_this.lod=0;return _this;}_createClass(Community,[{key:'extractExtrema',value:function extractExtrema(data){var hits=data.hits;if(!hits||hits.length===0){// no hits
return{min:Infinity,max:-Infinity};}var field=this.sortField;var min=minBy(hits,function(community){return get(community,field);});var max=maxBy(hits,function(community){return get(community,field);});return{min:get(min,field),max:get(max,field)};}}]);return Community;}(Micro);module.exports=Community;

},{"./Micro":356,"lodash/get":309,"lodash/maxBy":329,"lodash/minBy":332}],351:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Bivariate=require('./Bivariate');var Count=function(_Bivariate){_inherits(Count,_Bivariate);function Count(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Count);return _possibleConstructorReturn(this,(Count.__proto__||Object.getPrototypeOf(Count)).call(this,meta,options));}_createClass(Count,[{key:'getTile',value:function getTile(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'count';var params={xField:this.xField,yField:this.yField,left:this.left,right:this.right,bottom:this.bottom,top:this.top};var tile={};tile[name]=params;return tile;}}]);return Count;}(Bivariate);module.exports=Count;

},{"./Bivariate":349}],352:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var isString=require('lodash/isString');var isNumber=require('lodash/isNumber');var Live=require('../core/Live');var setStringField=function setStringField(layer,property,value){if(!isString(value)){throw property+' argument '+value+' must be of type String';}layer[property]=value;};var Edge=function(_Live){_inherits(Edge,_Live);function Edge(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Edge);var _this=_possibleConstructorReturn(this,(Edge.__proto__||Object.getPrototypeOf(Edge)).call(this,meta,options));_this.srcXField=defaultTo(options.srcXField,'srcXField');_this.srcYField=defaultTo(options.srcYField,'srcYField');_this.dstXField=defaultTo(options.dstXField,'dstXField');_this.dstYField=defaultTo(options.dstYField,'dstYField');var left=defaultTo(options.left,0);var right=defaultTo(options.right,Math.pow(2,32));var bottom=defaultTo(options.bottom,0);var top=defaultTo(options.top,Math.pow(2,32));_this.setBounds(left,right,bottom,top);return _this;}_createClass(Edge,[{key:'setSrcXField',value:function setSrcXField(field){setStringField(this,'srcXField',field);}},{key:'setSrcYField',value:function setSrcYField(field){setStringField(this,'srcYField',field);}},{key:'setDstXField',value:function setDstXField(field){setStringField(this,'dstXField',field);}},{key:'setDstYField',value:function setDstYField(field){setStringField(this,'dstYField',field);}},{key:'setBounds',value:function setBounds(left,right,bottom,top){if(!isNumber(left)){throw'left argument '+left+' is invalid';}if(!isNumber(right)){throw'right argument '+right+' is invalid';}if(!isNumber(bottom)){throw'bottom argument '+bottom+' is invalid';}if(!isNumber(top)){throw'top argument '+top+' is invalid';}this.left=left;this.right=right;this.bottom=bottom;this.top=top;}}]);return Edge;}(Live);module.exports=Edge;

},{"../core/Live":347,"lodash/defaultTo":306,"lodash/isNumber":319,"lodash/isString":322}],353:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var min=require('lodash/min');var max=require('lodash/max');var Bivariate=require('./Bivariate');var Heatmap=function(_Bivariate){_inherits(Heatmap,_Bivariate);function Heatmap(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Heatmap);return _possibleConstructorReturn(this,(Heatmap.__proto__||Object.getPrototypeOf(Heatmap)).call(this,meta,options));}_createClass(Heatmap,[{key:'extractExtrema',value:function extractExtrema(data){var bins=new Uint32Array(data);return{min:min(bins),max:max(bins)};}},{key:'getTile',value:function getTile(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'heatmap';var params={xField:this.xField,yField:this.yField,left:this.left,right:this.right,bottom:this.bottom,top:this.top,resolution:this.resolution};var tile={};tile[name]=params;return tile;}}]);return Heatmap;}(Bivariate);module.exports=Heatmap;

},{"./Bivariate":349,"lodash/max":328,"lodash/min":331}],354:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var Bivariate=require('./Bivariate');var Macro=function(_Bivariate){_inherits(Macro,_Bivariate);function Macro(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Macro);var _this=_possibleConstructorReturn(this,(Macro.__proto__||Object.getPrototypeOf(Macro)).call(this,meta,options));_this.lod=defaultTo(options.lod,4);_this.transform=function(data){if(_this.lod>0){var view=new DataView(data);var pointsByteLength=view.getUint32(0,true/* little endian */);var offsetsByteLength=view.getUint32(4,true/* little endian */);var points=data.slice(8,8+pointsByteLength);var offsets=data.slice(8+pointsByteLength,8+pointsByteLength+offsetsByteLength);return{points:new Float32Array(points),offsets:new Uint32Array(offsets)};}return new Float32Array(data);};return _this;}_createClass(Macro,[{key:'setLOD',value:function setLOD(lod){this.lod=lod;}},{key:'getTile',value:function getTile(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'macro';var params={xField:this.xField,yField:this.yField,left:this.left,right:this.right,bottom:this.bottom,top:this.top,resolution:this.resolution,lod:this.lod};var tile={};tile[name]=params;return tile;}}]);return Macro;}(Bivariate);module.exports=Macro;

},{"./Bivariate":349,"lodash/defaultTo":306}],355:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var Edge=require('./Edge');var MacroEdge=function(_Edge){_inherits(MacroEdge,_Edge);function MacroEdge(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,MacroEdge);var _this=_possibleConstructorReturn(this,(MacroEdge.__proto__||Object.getPrototypeOf(MacroEdge)).call(this,meta,options));_this.lod=defaultTo(options.lod,4);_this.sortField=defaultTo(options.sortField,null);_this.sortOrder=defaultTo(options.sortOrder,'desc');_this.hitsCount=defaultTo(options.hitsCount,10);_this.transform=function(data){if(_this.lod>0){var view=new DataView(data);var edgesByteLength=view.getUint32(0,true/* little endian */);var offsetsByteLength=view.getUint32(4,true/* little endian */);var edges=data.slice(8,8+edgesByteLength);var offsets=data.slice(8+edgesByteLength,8+edgesByteLength+offsetsByteLength);return{edges:new Float32Array(edges),offsets:new Uint32Array(offsets)};}return new Float32Array(data);};return _this;}_createClass(MacroEdge,[{key:'setLOD',value:function setLOD(lod){this.lod=lod;}},{key:'setSortField',value:function setSortField(sortField){this.sortField=sortField;}},{key:'setSortOrder',value:function setSortOrder(sortOrder){this.sortOrder=sortOrder;}},{key:'setHitsCount',value:function setHitsCount(hitsCount){this.hitsCount=hitsCount;}},{key:'getTile',value:function getTile(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'macro-edge';var params={srcXField:this.srcXField,srcYField:this.srcYField,dstXField:this.dstXField,dstYField:this.dstYField,left:this.left,right:this.right,bottom:this.bottom,top:this.top,lod:this.lod,sortField:this.sortField,sortOrder:this.sortOrder,hitsCount:this.hitsCount};var tile={};tile[name]=params;return tile;}}]);return MacroEdge;}(Edge);module.exports=MacroEdge;

},{"./Edge":352,"lodash/defaultTo":306}],356:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var Bivariate=require('./Bivariate');var Micro=function(_Bivariate){_inherits(Micro,_Bivariate);function Micro(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Micro);var _this=_possibleConstructorReturn(this,(Micro.__proto__||Object.getPrototypeOf(Micro)).call(this,meta,options));_this.lod=defaultTo(options.lod,4);_this.sortField=defaultTo(options.sortField,null);_this.sortOrder=defaultTo(options.sortOrder,'desc');_this.hitsCount=defaultTo(options.hitsCount,10);_this.includeFields=defaultTo(options.includeFields,null);_this.transform=function(data){if(_this.lod>0){return{points:new Float32Array(data.points),offsets:data.offsets,hits:data.hits};}return{points:new Float32Array(data.points),hits:data.hits};};return _this;}_createClass(Micro,[{key:'setLOD',value:function setLOD(lod){this.lod=lod;}},{key:'setSortField',value:function setSortField(sortField){this.sortField=sortField;}},{key:'setSortOrder',value:function setSortOrder(sortOrder){this.sortOrder=sortOrder;}},{key:'setHitsCount',value:function setHitsCount(hitsCount){this.hitsCount=hitsCount;}},{key:'setIncludeFields',value:function setIncludeFields(includeFields){this.includeFields=includeFields;}},{key:'getTile',value:function getTile(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'micro';var params={xField:this.xField,yField:this.yField,left:this.left,right:this.right,bottom:this.bottom,top:this.top,lod:this.lod,resolution:this.resolution,sortField:this.sortField,sortOrder:this.sortOrder,hitsCount:this.hitsCount,includeFields:this.includeFields};var tile={};tile[name]=params;return tile;}}]);return Micro;}(Bivariate);module.exports=Micro;

},{"./Bivariate":349,"lodash/defaultTo":306}],357:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var lumo=require('lumo');var defaultTo=require('lodash/defaultTo');var ImageRenderer=require('../../render/webgl/Image');var Rest=function(_lumo$Layer){_inherits(Rest,_lumo$Layer);function Rest(endpoint){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,Rest);var _this=_possibleConstructorReturn(this,(Rest.__proto__||Object.getPrototypeOf(Rest)).call(this,options));_this.ext=defaultTo(options.ext,'png');_this.scheme=defaultTo(options.ext,'http');_this.endpoint=endpoint;_this.setRenderer(new ImageRenderer());return _this;}_createClass(Rest,[{key:'setExt',value:function setExt(ext){this.ext=ext;}},{key:'setScheme',value:function setScheme(scheme){this.scheme=scheme;}},{key:'setSubDomains',value:function setSubDomains(subdomains){this.subdomains=subdomains;}},{key:'setEndpoint',value:function setEndpoint(endpoint){this.endpoint=endpoint;}},{key:'getTile',value:function getTile(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'rest';var params={ext:this.ext,endpoint:this.endpoint,scheme:this.scheme};var tile={};tile[name]=params;return tile;}}]);return Rest;}(lumo.Layer);module.exports=Rest;

},{"../../render/webgl/Image":375,"lodash/defaultTo":306,"lumo":155}],358:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var values=require('lodash/values');var defaultTo=require('lodash/defaultTo');var Bivariate=require('./Bivariate');var TopTermCount=function(_Bivariate){_inherits(TopTermCount,_Bivariate);function TopTermCount(meta){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,TopTermCount);var _this=_possibleConstructorReturn(this,(TopTermCount.__proto__||Object.getPrototypeOf(TopTermCount)).call(this,meta,options));_this.termsField=options.termsField;_this.termsCount=defaultTo(options.termsCount,10);return _this;}_createClass(TopTermCount,[{key:'extractExtrema',value:function extractExtrema(data){var vals=values(data);var min=Infinity;var max=-Infinity;for(var i=0;i<vals.length;i++){var val=vals[i];if(val>max){max=val;}if(val<min){min=val;}}return{min:min,max:max};}},{key:'setTermsField',value:function setTermsField(field){this.termsField=field;}},{key:'setTermsCount',value:function setTermsCount(count){this.termsCount=count;}},{key:'getTile',value:function getTile(){var name=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'top-term-count';var params={xField:this.xField,yField:this.yField,left:this.left,right:this.right,bottom:this.bottom,top:this.top,termsField:this.termsField,termsCount:this.termsCount};var tile={};tile[name]=params;return tile;}}]);return TopTermCount;}(Bivariate);module.exports=TopTermCount;

},{"./Bivariate":349,"lodash/defaultTo":306,"lodash/values":339}],359:[function(require,module,exports){
'use strict';function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var lumo=require('lumo');var Map=function(_lumo$Plot){_inherits(Map,_lumo$Plot);function Map(selector,options){_classCallCheck(this,Map);return _possibleConstructorReturn(this,(Map.__proto__||Object.getPrototypeOf(Map)).call(this,selector,options));}return Map;}(lumo.Plot);module.exports=Map;

},{"lumo":155}],360:[function(require,module,exports){
'use strict';var map=require('lodash/map');var sum=require('lodash/sum');var NUM_GRADIENT_STEPS=256;function rgb2lab(rgb){var r=rgb[0]>0.04045?Math.pow((rgb[0]+0.055)/1.055,2.4):rgb[0]/12.92;var g=rgb[1]>0.04045?Math.pow((rgb[1]+0.055)/1.055,2.4):rgb[1]/12.92;var b=rgb[2]>0.04045?Math.pow((rgb[2]+0.055)/1.055,2.4):rgb[2]/12.92;// Observer. = 2°, Illuminant = D65
var x=r*0.4124564+g*0.3575761+b*0.1804375;var y=r*0.2126729+g*0.7151522+b*0.0721750;var z=r*0.0193339+g*0.1191920+b*0.9503041;x=x/0.95047;// Observer= 2°, Illuminant= D65
y=y/1.00000;z=z/1.08883;x=x>0.008856?Math.pow(x,1/3):7.787037*x+16/116;y=y>0.008856?Math.pow(y,1/3):7.787037*y+16/116;z=z>0.008856?Math.pow(z,1/3):7.787037*z+16/116;return[116*y-16,500*(x-y),200*(y-z),rgb[3]];}function lab2rgb(lab){var y=(lab[0]+16)/116;var x=y+lab[1]/500;var z=y-lab[2]/200;x=x>0.206893034?x*x*x:(x-4/29)/7.787037;y=y>0.206893034?y*y*y:(y-4/29)/7.787037;z=z>0.206893034?z*z*z:(z-4/29)/7.787037;x=x*0.95047;// Observer= 2°, Illuminant= D65
y=y*1.00000;z=z*1.08883;var r=x*3.2404542+y*-1.5371385+z*-0.4985314;var g=x*-0.9692660+y*1.8760108+z*0.0415560;var b=x*0.0556434+y*-0.2040259+z*1.0572252;r=r>0.00304?1.055*Math.pow(r,1/2.4)-0.055:12.92*r;g=g>0.00304?1.055*Math.pow(g,1/2.4)-0.055:12.92*g;b=b>0.00304?1.055*Math.pow(b,1/2.4)-0.055:12.92*b;return[Math.max(Math.min(r,1),0),Math.max(Math.min(g,1),0),Math.max(Math.min(b,1),0),lab[3]];}function distance(c1,c2){return Math.sqrt((c1[0]-c2[0])*(c1[0]-c2[0])+(c1[1]-c2[1])*(c1[1]-c2[1])+(c1[2]-c2[2])*(c1[2]-c2[2])+(c1[3]-c2[3])*(c1[3]-c2[3]));}var buildFlatLookupTable=function buildFlatLookupTable(color){var output=[];output.push(color[0]);output.push(color[1]);output.push(color[2]);output.push(color[3]);return output;};// Interpolate between a set of colors using even perceptual distance and interpolation in CIE L*a*b* space
var buildPerceptualLookupTable=function buildPerceptualLookupTable(baseColors){var outputGradient=new Uint8Array(NUM_GRADIENT_STEPS*4);// Calculate perceptual spread in L*a*b* space
var labs=map(baseColors,function(color){return rgb2lab([color[0]/255,color[1]/255,color[2]/255,color[3]/255]);});var distances=map(labs,function(color,index,colors){return index>0?distance(color,colors[index-1]):0;});// Calculate cumulative distances in [0,1]
var totalDistance=sum(distances);distances=map(distances,function(d){return d/totalDistance;});var distanceTraversed=0;var key=0;var progress=void 0;var stepProgress=void 0;var rgb=void 0;for(var i=0;i<NUM_GRADIENT_STEPS;i++){progress=i/(NUM_GRADIENT_STEPS-1);if(progress>distanceTraversed+distances[key+1]&&key+1<labs.length-1){key+=1;distanceTraversed+=distances[key];}stepProgress=(progress-distanceTraversed)/distances[key+1];rgb=lab2rgb([labs[key][0]+(labs[key+1][0]-labs[key][0])*stepProgress,labs[key][1]+(labs[key+1][1]-labs[key][1])*stepProgress,labs[key][2]+(labs[key+1][2]-labs[key][2])*stepProgress,labs[key][3]+(labs[key+1][3]-labs[key][3])*stepProgress]);outputGradient[i*4]=rgb[0]*255;outputGradient[i*4+1]=rgb[1]*255;outputGradient[i*4+2]=rgb[2]*255;outputGradient[i*4+3]=rgb[3]*255;}return outputGradient;};var COOL=buildPerceptualLookupTable([[0x04,0x20,0x40,0x50],[0x08,0x40,0x81,0x7f],[0x08,0x68,0xac,0xff],[0x2b,0x8c,0xbe,0xff],[0x4e,0xb3,0xd3,0xff],[0x7b,0xcc,0xc4,0xff],[0xa8,0xdd,0xb5,0xff],[0xcc,0xeb,0xc5,0xff],[0xe0,0xf3,0xdb,0xff],[0xf7,0xfc,0xf0,0xff]]);var HOT=buildPerceptualLookupTable([[0x40,0x00,0x13,0x50],[0x80,0x00,0x26,0x7f],[0xbd,0x00,0x26,0xff],[0xe3,0x1a,0x1c,0xff],[0xfc,0x4e,0x2a,0xff],[0xfd,0x8d,0x3c,0xff],[0xfe,0xb2,0x4c,0xff],[0xfe,0xd9,0x76,0xff],[0xff,0xed,0xa0,0xff]]);var VERDANT=buildPerceptualLookupTable([[0x00,0x40,0x26,0x50],[0x00,0x5a,0x32,0x7f],[0x23,0x84,0x43,0xff],[0x41,0xab,0x5d,0xff],[0x78,0xc6,0x79,0xff],[0xad,0xdd,0x8e,0xff],[0xd9,0xf0,0xa3,0xff],[0xf7,0xfc,0xb9,0xff],[0xff,0xff,0xe5,0xff]]);var SPECTRAL=buildPerceptualLookupTable([[0x26,0x1a,0x40,0x50],[0x44,0x2f,0x72,0x7f],[0xe1,0x2b,0x02,0xff],[0x02,0xdc,0x01,0xff],[0xff,0xd2,0x02,0xff],[0xff,0xff,0xff,0xff]]);var TEMPERATURE=buildPerceptualLookupTable([[0x00,0x16,0x40,0x50],[0x00,0x39,0x66,0x7f],[0x31,0x3d,0x66,0xff],[0xe1,0x2b,0x02,0xff],[0xff,0xd2,0x02,0xff],[0xff,0xff,0xff,0xff]]);var GREYSCALE=buildPerceptualLookupTable([[0x00,0x00,0x00,0x7f],[0x40,0x40,0x40,0xff],[0xff,0xff,0xff,0xff]]);var GOLD=buildPerceptualLookupTable([[0x84,0x54,0x0F,0xFF],[0xA6,0x7B,0x3E,0xFF],[0xC9,0xA3,0x6D,0xFF],[0xEC,0xCB,0x9C,0xFF],[0xff,0xff,0xff,0xff]]);var FLAT=buildFlatLookupTable([0xff,0xff,0xff,0xff]);var buildLookupFunction=function buildLookupFunction(RAMP){return function(scaledValue,inColor){var index=Math.floor(scaledValue*(RAMP.length/4-1));inColor[0]=RAMP[index*4];inColor[1]=RAMP[index*4+1];inColor[2]=RAMP[index*4+2];inColor[3]=RAMP[index*4+3];return inColor;};};var colorTables={cool:COOL,hot:HOT,verdant:VERDANT,spectral:SPECTRAL,temperature:TEMPERATURE,gold:GOLD,grey:GREYSCALE,flat:FLAT};var colorRamps={cool:buildLookupFunction(COOL),hot:buildLookupFunction(HOT),verdant:buildLookupFunction(VERDANT),spectral:buildLookupFunction(SPECTRAL),temperature:buildLookupFunction(TEMPERATURE),gold:buildLookupFunction(GOLD),grey:buildLookupFunction(GREYSCALE),flat:buildLookupFunction(FLAT)};var getTable=function getTable(type){if(!colorTables[type]){throw'Color table '+type+' does not exist';}return colorTables[type];};var getFunc=function getFunc(type){if(!colorRamps[type]){throw'Color table '+type+' does not exist';}return colorRamps[type];};var createRamp=function createRamp(type,baseColors){colorTables[type]=buildPerceptualLookupTable(baseColors);colorRamps[type]=buildLookupFunction(colorTables[type]);return colorRamps[type];};var getBuckets=function getBuckets(type,numBuckets){var ramp=getFunc(type);var buckets=[];var color=[];for(var i=0;i<numBuckets;i++){ramp(i/(numBuckets-1),color);buckets.push([color[0]/255,color[1]/255,color[2]/255,color[3]/255]);}return buckets;};module.exports={getTable:getTable,getFunc:getFunc,getBuckets:getBuckets,createRamp:createRamp,NUM_GRADIENT_STEPS:NUM_GRADIENT_STEPS};

},{"lodash/map":327,"lodash/sum":336}],361:[function(require,module,exports){
'use strict';var lumo=require('lumo');// core renderers
var Core={HTML:lumo.HTMLRenderer,SVG:lumo.SVGRenderer,WebGL:lumo.WebGLRenderer};// html renderers
var HTML={CommunityLabel:require('./html/CommunityLabel'),Debug:require('./html/Debug'),WordCloud:require('./html/WordCloud')};// webgl renderers
var WebGL={Community:require('./webgl/Community'),CommunityBucket:require('./webgl/CommunityBucket'),Heatmap:require('./webgl/Heatmap'),Micro:require('./webgl/Micro'),Macro:require('./webgl/Macro'),MacroEdge:require('./webgl/MacroEdge'),Repeat:require('./webgl/Repeat')};module.exports={Core:Core,HTML:HTML,WebGL:WebGL};

},{"./html/CommunityLabel":362,"./html/Debug":363,"./html/WordCloud":364,"./webgl/Community":372,"./webgl/CommunityBucket":373,"./webgl/Heatmap":374,"./webgl/Macro":376,"./webgl/MacroEdge":377,"./webgl/Micro":378,"./webgl/Repeat":379,"lumo":155}],362:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var $=require('jquery');var get=require('lodash/get');var defaultTo=require('lodash/defaultTo');var lumo=require('lumo');var Transform=require('../transform/Transform');var HEIGHT_BUFFER=4;var getMouseButton=function getMouseButton(event){if(event.which===1){return'left';}else if(event.which===2){return'middle';}else if(event.which===3){return'right';}};var CommunityLabel=function(_lumo$HTMLRenderer){_inherits(CommunityLabel,_lumo$HTMLRenderer);function CommunityLabel(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,CommunityLabel);var _this=_possibleConstructorReturn(this,(CommunityLabel.__proto__||Object.getPrototypeOf(CommunityLabel)).call(this,options));_this.transform=defaultTo(options.transform,'log10');_this.minFontSize=defaultTo(options.minFontSize,10);_this.maxFontSize=defaultTo(options.maxFontSize,24);_this.minOpacity=defaultTo(options.minOpacity,0.6);_this.maxOpacity=defaultTo(options.maxOpacity,1.0);_this.labelMaxLength=defaultTo(options.labelMaxLength,256);_this.labelThreshold=defaultTo(options.labelThreshold,0.6);_this.labelField=defaultTo(options.labelField,'metadata');_this.labelDeconflict=defaultTo(options.labelDeconflict,true);return _this;}_createClass(CommunityLabel,[{key:'onAdd',value:function onAdd(layer){var _this2=this;_get(CommunityLabel.prototype.__proto__||Object.getPrototypeOf(CommunityLabel.prototype),'onAdd',this).call(this,layer);this.mouseover=function(event){_this2.onMouseOver(event);};this.mouseout=function(event){_this2.onMouseOut(event);};this.click=function(event){_this2.onClick(event);};if(this.labelDeconflict){this.deconflict=function(){var tree=new lumo.RTree({collisionType:lumo.RECTANGLE,nodeCapacity:64});// grab all labels
var $labels=$(_this2.container).find('.community-label');// sort based on size / importance
$labels.sort(function(a,b){return b.offsetHeight-a.offsetHeight;});// check if they conflict, if so, hide them
$labels.each(function(index,element){var position=$(element).offset();var point={minX:position.left,maxX:position.left+element.offsetWidth,minY:position.top,maxY:position.top+element.offsetHeight};var collision=tree.searchRectangle(point.minX,point.maxX,point.minY,point.maxY);if(collision){element.style.visibility='hidden';}else{element.style.visibility='visible';tree.insert([point]);}});};this.on(lumo.POST_DRAW,this.deconflict);}$(this.container).on('mouseover',this.mouseover);$(this.container).on('mouseout',this.mouseout);$(this.container).on('click',this.click);}},{key:'onRemove',value:function onRemove(layer){$(this.container).off('mouseover',this.mouseover);$(this.container).off('mouseout',this.mouseout);$(this.container).off('click',this.click);if(this.labelDeconflict){this.removeListener(lumo.POST_DRAW,this.deconflict);}this.mouseover=null;this.mouseout=null;this.click=null;_get(CommunityLabel.prototype.__proto__||Object.getPrototypeOf(CommunityLabel.prototype),'onRemove',this).call(this,layer);}},{key:'onMouseOver',value:function onMouseOver(event){var data=$(event.target).data('community');if(data){var plot=this.layer.plot;this.emit(lumo.MOUSE_OVER,new lumo.MouseEvent(this.layer,getMouseButton(event),plot.mouseToViewPx(event),plot.mouseToPlotPx(event),data));}}},{key:'onMouseOut',value:function onMouseOut(event){var data=$(event.target).data('community');if(data){var plot=this.layer.plot;this.emit(lumo.MOUSE_OUT,new lumo.MouseEvent(this.layer,getMouseButton(event),plot.mouseToViewPx(event),plot.mouseToPlotPx(event)));}}},{key:'onClick',value:function onClick(event){var data=$(event.target).data('community');if(data){var plot=this.layer.plot;this.emit(lumo.CLICK,new lumo.MouseEvent(this.layer,getMouseButton(event),plot.mouseToViewPx(event),plot.mouseToPlotPx(event),data));}}},{key:'drawTile',value:function drawTile(element,tile){var _this3=this;var hits=tile.data.hits;var points=tile.data.points;if(!hits){return;}var layer=this.layer;var sortField=layer.sortField;var extrema=layer.getExtrema(tile.coord.z);var divs=$();hits.forEach(function(community,index){var label=get(community,_this3.labelField);if(!label){return;}var val=get(community,sortField);var nval=Transform.transform(val,_this3.transform,extrema);if(nval<_this3.labelThreshold){return;}// normalize the nval as it is currently in the range [this.labelThreshold : 1]
var rnval=(nval-_this3.labelThreshold)/(1.0-_this3.labelThreshold);var zIndex=Math.ceil(100*rnval);var fontSize=_this3.minFontSize+rnval*(_this3.maxFontSize-_this3.minFontSize);var opacity=_this3.minOpacity+rnval*(_this3.maxOpacity-_this3.minOpacity);var height=fontSize+HEIGHT_BUFFER;// add buffer to prevent cutoff of some letters
// get position
var x=points[index*2]-_this3.labelMaxLength/2;var y=points[index*2+1]-height/2;var div=$('\n\t\t\t\t<div class="community-label" style="\n\t\t\t\t\tleft: '+x+'px;\n\t\t\t\t\tbottom: '+y+'px;\n\t\t\t\t\topacity: '+opacity+';\n\t\t\t\t\tz-index: '+zIndex+';\n\t\t\t\t\twidth: '+_this3.labelMaxLength+'px;\n\t\t\t\t\theight: '+height+'px;\n\t\t\t\t\tfont-size: '+fontSize+'px;\n\t\t\t\t\tline-height: '+fontSize+'px;">'+label+'</div>\n\t\t\t\t');div.data('community',community);divs=divs.add(div);});$(element).empty().append(divs);}}]);return CommunityLabel;}(lumo.HTMLRenderer);module.exports=CommunityLabel;

},{"../transform/Transform":371,"jquery":192,"lodash/defaultTo":306,"lodash/get":309,"lumo":155}],363:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var $=require('jquery');var lumo=require('lumo');var Debug=function(_lumo$HTMLRenderer){_inherits(Debug,_lumo$HTMLRenderer);function Debug(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Debug);return _possibleConstructorReturn(this,(Debug.__proto__||Object.getPrototypeOf(Debug)).call(this,options));}_createClass(Debug,[{key:'drawTile',value:function drawTile(element,coord){$(element).empty().append('<div style="top:0; left:0;">'+coord.z+', '+coord.x+', '+coord.y+'</div>');}}]);return Debug;}(lumo.HTMLRenderer);module.exports=Debug;

},{"jquery":192,"lumo":155}],364:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var $=require('jquery');var map=require('lodash/map');var defaultTo=require('lodash/defaultTo');var lumo=require('lumo');var Transform=require('../transform/Transform');var VERTICAL_OFFSET=24;var HORIZONTAL_OFFSET=10;var NUM_ATTEMPTS=1;/**
 * Given an initial position, return a new position, incrementally spiralled
 * outwards.
 */var spiralPosition=function spiralPosition(pos){var pi2=2*Math.PI;var circ=pi2*pos.radius;var inc=pos.arcLength>circ/10?circ/10:pos.arcLength;var da=inc/pos.radius;var nt=pos.t+da;if(nt>pi2){nt=nt%pi2;pos.radius=pos.radius+pos.radiusInc;}pos.t=nt;pos.x=pos.radius*Math.cos(nt);pos.y=pos.radius*Math.sin(nt);return pos;};/**
 *  Returns true if bounding box a intersects bounding box b
 */var intersectTest=function intersectTest(a,b){return Math.abs(a.x-b.x)*2<a.width+b.width&&Math.abs(a.y-b.y)*2<a.height+b.height;};/**
 *  Returns true if bounding box a is not fully contained inside bounding box b
 */var overlapTest=function overlapTest(a,b){return a.x+a.width/2>b.x+b.width/2||a.x-a.width/2<b.x-b.width/2||a.y+a.height/2>b.y+b.height/2||a.y-a.height/2<b.y-b.height/2;};/**
 * Check if a word intersects another word, or is not fully contained in the
 * tile bounding box
 */var intersectWord=function intersectWord(position,word,cloud,bb){var box={x:position.x,y:position.y,height:word.height,width:word.width};for(var i=0;i<cloud.length;i++){if(intersectTest(box,cloud[i])){return true;}}// make sure it doesn't intersect the border;
if(overlapTest(box,bb)){// if it hits a border, increment collision count
// and extend arc length
position.collisions++;position.arcLength=position.radius;return true;}return false;};var getMouseButton=function getMouseButton(event){if(event.which===1){return'left';}else if(event.which===2){return'middle';}else if(event.which===3){return'right';}};var measureWords=function measureWords(renderer,wordCounts,extrema){// sort words by frequency
wordCounts=wordCounts.sort(function(a,b){return b.count-a.count;}).slice(0,renderer.maxNumWords);// build measurement html
var $html=$('<div style="height:256px; width:256px;"></div>');var minFontSize=renderer.minFontSize;var maxFontSize=renderer.maxFontSize;var transform=renderer.transform;wordCounts.forEach(function(word){word.percent=Transform.transform(word.count,transform,extrema);word.fontSize=minFontSize+word.percent*(maxFontSize-minFontSize);$html.append('\n\t\t\t<div class="word-cloud-label" style="\n\t\t\t\tvisibility:hidden;\n\t\t\t\tfont-size: '+word.fontSize+'px;">'+word.text+'</div>;\n\t\t\t');});// append measurements
$('body').append($html);$html.children().each(function(index,elem){wordCounts[index].width=elem.offsetWidth;wordCounts[index].height=elem.offsetHeight;});$html.remove();return wordCounts;};var createWordCloud=function createWordCloud(renderer,wordCounts,extrema){var tileSize=renderer.layer.plot.tileSize;var boundingBox={width:tileSize-HORIZONTAL_OFFSET*2,height:tileSize-VERTICAL_OFFSET*2,x:0,y:0};var cloud=[];// sort words by frequency
wordCounts=measureWords(renderer,wordCounts,extrema);// assemble word cloud
wordCounts.forEach(function(wordCount){// starting spiral position
var pos={radius:1,radiusInc:5,arcLength:10,x:0,y:0,t:0,collisions:0};// spiral outwards to find position
while(pos.collisions<NUM_ATTEMPTS){// increment position in a spiral
pos=spiralPosition(pos);// test for intersection
if(!intersectWord(pos,wordCount,cloud,boundingBox)){cloud.push({text:wordCount.text,fontSize:wordCount.fontSize,percent:Math.round(wordCount.percent*100/10)*10,// round to nearest 10
x:pos.x,y:pos.y,width:wordCount.width,height:wordCount.height});break;}}});return cloud;};var WordCloud=function(_lumo$HTMLRenderer){_inherits(WordCloud,_lumo$HTMLRenderer);function WordCloud(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,WordCloud);var _this=_possibleConstructorReturn(this,(WordCloud.__proto__||Object.getPrototypeOf(WordCloud)).call(this,options));_this.transform=defaultTo(options.transform,'log10');_this.maxNumWords=defaultTo(options.maxNumWords,10);_this.minFontSize=defaultTo(options.minFontSize,10);_this.maxFontSize=defaultTo(options.maxFontSize,24);return _this;}_createClass(WordCloud,[{key:'onAdd',value:function onAdd(layer){var _this2=this;_get(WordCloud.prototype.__proto__||Object.getPrototypeOf(WordCloud.prototype),'onAdd',this).call(this,layer);this.mouseover=function(event){_this2.onMouseOver(event);};this.mouseout=function(event){_this2.onMouseOut(event);};this.click=function(event){_this2.onClick(event);};$(this.container).on('mouseover',this.mouseover);$(this.container).on('mouseout',this.mouseout);$(this.container).on('click',this.click);}},{key:'onRemove',value:function onRemove(layer){$(this.container).off('mouseover',this.mouseover);$(this.container).off('mouseout',this.mouseout);$(this.container).off('click',this.click);this.mouseover=null;this.mouseout=null;this.click=null;_get(WordCloud.prototype.__proto__||Object.getPrototypeOf(WordCloud.prototype),'onRemove',this).call(this,layer);}},{key:'clearSelection',value:function clearSelection(){$(this.container).removeClass('highlight');this.highlight=null;}},{key:'setHighlight',value:function setHighlight(word){this.clearSelection();// Highlight selected word
$(this.container).addClass('highlight');$('.word-cloud-label[data-word="'+word+'"]').addClass('highlight');this.highlight=word;}},{key:'onMouseOver',value:function onMouseOver(event){$('.word-cloud-label').removeClass('hover');var word=$(event.target).attr('data-word');if(word){// highlight all instances of the word
$('.word-cloud-label[data-word="'+word+'"]').addClass('hover');// emit mouseover event
var plot=this.layer.plot;this.emit(lumo.MOUSE_OVER,new lumo.MouseEvent(this.layer,getMouseButton(event),plot.mouseToViewPx(event),plot.mouseToPlotPx(event),word));}}},{key:'onMouseOut',value:function onMouseOut(event){$('.word-cloud-label').removeClass('hover');var word=$(event.target).attr('data-word');if(word){// emit click event
var plot=this.layer.plot;this.emit(lumo.MOUSE_OUT,new lumo.MouseEvent(this.layer,getMouseButton(event),plot.mouseToViewPx(event),plot.mouseToPlotPx(event),word));}}},{key:'onClick',value:function onClick(event){// un-select any prev selected words
$('.word-cloud-label').removeClass('highlight');$(this.container).removeClass('highlight');var word=$(event.target).attr('data-word');if(word){// set highlight
this.setHighlight(word);// emit click event
var plot=this.layer.plot;this.emit(lumo.CLICK,new lumo.ClickEvent(this.layer,getMouseButton(event),plot.mouseToViewPx(event),plot.mouseToPlotPx(event),word));}else{this.clearSelection();}}},{key:'drawTile',value:function drawTile(element,tile){var _this3=this;var wordCounts=map(tile.data,function(count,text){return{text:text,count:count};});var layer=this.layer;var extrema=layer.getExtrema(tile.coord.z);// genereate the cloud
var cloud=createWordCloud(this,wordCounts,extrema);// half tile size
var halfSize=layer.plot.tileSize/2;// create html for tile
var divs=[];// for each word int he cloud
cloud.forEach(function(word){var highlight=word.text===_this3.highlight?'highlight':'';// create element for word
divs.push('\n\t\t\t\t<div class="\n\t\t\t\t\tword-cloud-label\n\t\t\t\t\tword-cloud-label-'+word.percent+'\n\t\t\t\t\t'+highlight+'"\n\t\t\t\t\tstyle="\n\t\t\t\t\t\tfont-size: '+word.fontSize+'px;\n\t\t\t\t\t\tleft: '+(halfSize+word.x-word.width/2)+'px;\n\t\t\t\t\t\ttop: '+(halfSize+word.y-word.height/2)+'px;\n\t\t\t\t\t\twidth: '+word.width+'px;\n\t\t\t\t\t\theight: '+word.height+'px;"\n\t\t\t\t\tdata-word="'+word.text+'">'+word.text+'</div>\n\t\t\t\t');});element.innerHTML=divs.join('');}}]);return WordCloud;}(lumo.HTMLRenderer);module.exports=WordCloud;

},{"../transform/Transform":371,"jquery":192,"lodash/defaultTo":306,"lodash/map":327,"lumo":155}],365:[function(require,module,exports){
'use strict';var mx=[0,1];var my=[0,2];for(var i=4;i<0xFFFF;i<<=2){for(var j=0,l=mx.length;j<l;j++){mx.push(mx[j]|i);my.push((mx[j]|i)<<1);}}function morton(x,y){return my[y&0xFF]|mx[x&0xFF];}module.exports=morton;

},{}],366:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var lumo=require('lumo');var morton=require('../morton/Morton');var INSTANCED_SHADER={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform vec2 uLODOffset;\n\t\tuniform float uLODScale;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvoid main() {\n\t\t\tvec2 wPosition = (aPosition * uScale * uLODScale) + (uTileOffset + (uScale * uLODOffset));\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform vec4 uColor;\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4(uColor.rgb, uColor.a);\n\t\t}\n\t\t'};var INDIVIDUAL_SHADER={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tuniform vec2 uPointA;\n\t\tuniform vec2 uPointB;\n\t\tvoid main() {\n\t\t\tvec2 wPosition;\n\t\t\tif (aPosition.x > 0.0) {\n\t\t\t\twPosition = (uPointA * uScale) + uTileOffset;\n\t\t\t} else {\n\t\t\t\twPosition = (uPointB * uScale) + uTileOffset;\n\t\t\t}\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform vec4 uColor;\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4(uColor.rgb, uColor.a);\n\t\t}\n\t\t'};var createLine=function createLine(gl){var vertices=new Float32Array(2);vertices[0]=1.0;vertices[1]=1.0;vertices[2]=-1.0;vertices[3]=-1.0;// create quad buffer
return new lumo.VertexBuffer(gl,vertices,{0:{size:2,type:'FLOAT'}},{mode:'LINES',count:1});};var getOffsetIndices=function getOffsetIndices(x,y,extent,lod){var partitions=Math.pow(2,lod);var xcell=x*partitions;var ycell=y*partitions;var stride=extent*partitions;var start=morton(xcell,ycell);var stop=start+stride*stride;return[start,stop];};var draw=function draw(shader,atlas,renderables){// for each renderable
renderables.forEach(function(renderable){// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);shader.setUniform('uLODScale',1);shader.setUniform('uLODOffset',[0,0]);// draw the points
atlas.draw(renderable.hash,'LINES');});};var drawLOD=function drawLOD(shader,atlas,plot,lod,renderables){var zoom=Math.round(plot.zoom);// for each renderable
renderables.forEach(function(renderable){// distance between actual zoom and the LOD of tile
var dist=Math.abs(renderable.tile.coord.z-zoom);if(dist>lod){// not even lod to support it
return;}var xOffset=renderable.uvOffset[0];var yOffset=renderable.uvOffset[1];var extent=renderable.uvOffset[3];// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);var lodScale=1/extent;var lodOffset=[-(xOffset*lodScale*plot.tileSize),-(yOffset*lodScale*plot.tileSize)];shader.setUniform('uLODScale',1/extent);shader.setUniform('uLODOffset',lodOffset);// get byte offset and count
var _getOffsetIndices=getOffsetIndices(xOffset,yOffset,extent,lod),_getOffsetIndices2=_slicedToArray(_getOffsetIndices,2),start=_getOffsetIndices2[0],stop=_getOffsetIndices2[1];var edges=renderable.tile.data.edges;var offsets=renderable.tile.data.offsets;var startByte=offsets[start];var stopByte=stop===offsets.length?edges.byteLength:offsets[stop];var offset=startByte/(atlas.stride*2*4);var count=(stopByte-startByte)/(atlas.stride*2*4);if(count>0){// draw the edges
atlas.draw(renderable.hash,'LINES',offset,count);}});};var Line=function(){function Line(renderer){_classCallCheck(this,Line);this.renderer=renderer;this.shader={instanced:renderer.createShader(INSTANCED_SHADER),individual:renderer.createShader(INDIVIDUAL_SHADER)};this.line=createLine(renderer.gl);}_createClass(Line,[{key:'drawInstanced',value:function drawInstanced(atlas,color){var shader=this.shader.instanced;var renderer=this.renderer;var layer=renderer.layer;var plot=layer.plot;var projection=renderer.getOrthoMatrix();// bind shader
shader.use();// set global uniforms
shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uColor',color);// binds the vertex atlas
atlas.bind();if(layer.lod>0){// draw using LOD
drawLOD(shader,atlas,plot,layer.lod,renderer.getRenderablesLOD());}else{// draw non-LOD
draw(shader,atlas,renderer.getRenderables());}// unbind
atlas.unbind();}},{key:'drawIndividual',value:function drawIndividual(target,color){var shader=this.shader.individual;var line=this.line;var plot=this.renderer.layer.plot;var projection=this.renderer.getOrthoMatrix();// get tile offset
var coord=target.tile.coord;var scale=Math.pow(2,plot.zoom-coord.z);var tileOffset=[coord.x*scale*plot.tileSize-plot.viewport.x,coord.y*scale*plot.tileSize-plot.viewport.y];// bind shader
shader.use();shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uTileOffset',tileOffset);shader.setUniform('uPointA',[target.a.x,target.a.y]);shader.setUniform('uPointB',[target.b.x,target.b.y]);shader.setUniform('uScale',scale);shader.setUniform('uColor',color);// binds the buffer to instance
line.bind();// draw the points
line.draw();// unbind
line.unbind();}}]);return Line;}();module.exports=Line;

},{"../morton/Morton":365,"lumo":155}],367:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var lumo=require('lumo');var morton=require('../morton/Morton');var SHADER={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tuniform float uRadius;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform vec2 uLODOffset;\n\t\tuniform float uLODScale;\n\t\tuniform float uPixelRatio;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvoid main() {\n\t\t\tvec2 wPosition = (aPosition * uScale * uLODScale) + (uTileOffset + (uScale * uLODOffset));\n\t\t\tgl_PointSize = uRadius * 2.0 * uPixelRatio;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\t#ifdef GL_OES_standard_derivatives\n\t\t\t#extension GL_OES_standard_derivatives : enable\n\t\t#endif\n\t\tuniform vec4 uColor;\n\t\tvoid main() {\n\t\t\tvec2 cxy = 2.0 * gl_PointCoord - 1.0;\n\t\t\tfloat radius = dot(cxy, cxy);\n\t\t\tfloat alpha = 1.0;\n\t\t\t#ifdef GL_OES_standard_derivatives\n\t\t\t\tfloat delta = fwidth(radius);\n\t\t\t\talpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, radius);\n\t\t\t#else\n\t\t\t\tif (radius > 1.0) {\n\t\t\t\t\tdiscard;\n\t\t\t\t}\n\t\t\t#endif\n\t\t\tgl_FragColor = vec4(uColor.rgb, uColor.a * alpha);\n\t\t}\n\t\t'};var createPoint=function createPoint(gl){var vertices=new Float32Array(2);vertices[0]=0.0;vertices[1]=0.0;// create quad buffer
return new lumo.VertexBuffer(gl,vertices,{0:{size:2,type:'FLOAT'}},{mode:'POINTS',count:1});};var getOffsetIndices=function getOffsetIndices(x,y,extent,lod){var partitions=Math.pow(2,lod);var xcell=x*partitions;var ycell=y*partitions;var stride=extent*partitions;var start=morton(xcell,ycell);var stop=start+stride*stride;return[start,stop];};var draw=function draw(shader,atlas,renderables){// for each renderable
renderables.forEach(function(renderable){// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);shader.setUniform('uLODScale',1);shader.setUniform('uLODOffset',[0,0]);// draw the points
atlas.draw(renderable.hash,'POINTS');});};var drawLOD=function drawLOD(shader,atlas,plot,lod,renderables){var zoom=Math.round(plot.zoom);// for each renderable
renderables.forEach(function(renderable){// distance between actual zoom and the LOD of tile
var dist=Math.abs(renderable.tile.coord.z-zoom);if(dist>lod){// not even lod to support it
return;}var xOffset=renderable.uvOffset[0];var yOffset=renderable.uvOffset[1];var extent=renderable.uvOffset[3];// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);var lodScale=1/extent;var lodOffset=[-(xOffset*lodScale*plot.tileSize),-(yOffset*lodScale*plot.tileSize)];shader.setUniform('uLODScale',1/extent);shader.setUniform('uLODOffset',lodOffset);// get byte offset and count
var _getOffsetIndices=getOffsetIndices(xOffset,yOffset,extent,lod),_getOffsetIndices2=_slicedToArray(_getOffsetIndices,2),start=_getOffsetIndices2[0],stop=_getOffsetIndices2[1];var points=renderable.tile.data.points;var offsets=renderable.tile.data.offsets;var startByte=offsets[start];var stopByte=stop===offsets.length?points.byteLength:offsets[stop];var offset=startByte/(atlas.stride*4);var count=(stopByte-startByte)/(atlas.stride*4);if(count>0){// draw the points
atlas.draw(renderable.hash,'POINTS',offset,count);}});};var Point=function(){function Point(renderer){_classCallCheck(this,Point);this.renderer=renderer;this.ext=renderer.gl.getExtension('OES_standard_derivatives');this.point=createPoint(renderer.gl);this.shader=renderer.createShader(SHADER);}_createClass(Point,[{key:'drawInstanced',value:function drawInstanced(atlas,radius,color){var shader=this.shader;var renderer=this.renderer;var layer=renderer.layer;var plot=layer.plot;var projection=renderer.getOrthoMatrix();// bind shader
shader.use();// set global uniforms
shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uColor',color);shader.setUniform('uRadius',radius);shader.setUniform('uPixelRatio',plot.pixelRatio);// binds the vertex atlas
atlas.bind();if(layer.lod>0){// draw using LOD
drawLOD(shader,atlas,plot,layer.lod,renderer.getRenderablesLOD());}else{// draw non-LOD
draw(shader,atlas,renderer.getRenderables());}// unbind
atlas.unbind();}},{key:'drawIndividual',value:function drawIndividual(target,radius,color){var shader=this.shader;var point=this.point;var plot=this.renderer.layer.plot;var projection=this.renderer.getOrthoMatrix();// get tile offset
var coord=target.tile.coord;var scale=Math.pow(2,plot.zoom-coord.z);var tileOffset=[coord.x*scale*plot.tileSize+scale*target.x-plot.viewport.x,coord.y*scale*plot.tileSize+scale*target.y-plot.viewport.y];// bind shader
shader.use();shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uTileOffset',tileOffset);shader.setUniform('uScale',scale);shader.setUniform('uColor',color);shader.setUniform('uRadius',radius);shader.setUniform('uPixelRatio',plot.pixelRatio);// binds the buffer to instance
point.bind();// draw the points
point.draw();// unbind
point.unbind();}}]);return Point;}();module.exports=Point;

},{"../morton/Morton":365,"lumo":155}],368:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var lumo=require('lumo');var INSTANCED_SHADER={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tattribute vec2 aOffset;\n\t\tattribute float aRadius;\n\t\tuniform float uRotation;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvoid main() {\n\t\t\tfloat s = sin(uRotation);\n\t\t\tfloat c = cos(uRotation);\n\t\t\tmat2 rotation = mat2(c, -s, s, c);\n\t\t\tvec2 radiusOffset = aRadius * vec2(0.0, 1.0);\n\t\t\tvec2 wPosition = ((rotation * (aPosition + radiusOffset)) + aOffset) * uScale + uTileOffset;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform float uOpacity;\n\t\tuniform vec4 uColor;\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4(uColor.rgb, uColor.a * uOpacity);\n\t\t}\n\t\t'};var createQuad=function createQuad(gl,left,right,bottom,top){// quad vertices
var vertices=new Float32Array([// positions
left,bottom,right,bottom,right,top,left,bottom,right,top,left,top]);// quad buffer
return new lumo.VertexBuffer(gl,vertices,{0:{size:2,type:'FLOAT'}},{count:6});};var Quad=function(){function Quad(renderer,left,right,bottom,top){_classCallCheck(this,Quad);this.renderer=renderer;this.quad=createQuad(renderer.gl,left,right,bottom,top);this.shaders={instanced:renderer.createShader(INSTANCED_SHADER)};}_createClass(Quad,[{key:'drawInstanced',value:function drawInstanced(atlas,color){var rotation=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var opacity=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var shader=this.shaders.instanced;var quad=this.quad;var projection=this.renderer.getOrthoMatrix();var renderables=this.renderer.getRenderables();// use shader
shader.use();// set uniforms
shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uRotation',rotation);shader.setUniform('uOpacity',opacity);shader.setUniform('uColor',color);// bind the quad buffer
quad.bind();// binds instance offset buffer
atlas.bindInstanced();renderables.forEach(function(renderable){// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);// draw the instances
atlas.drawInstanced(renderable.hash,quad.mode,quad.count);});// unbind instance offset buffer
atlas.unbindInstanced();// unbind the quad buffer
quad.unbind();}},{key:'drawIndividual',value:function drawIndividual(target,color,rotation){var opacity=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var shader=this.shaders.individual;var quad=this.quad;var plot=this.renderer.layer.plot;var projection=this.renderer.getOrthoMatrix();// get tile offset
var coord=target.tile.coord;var scale=Math.pow(2,plot.zoom-coord.z);var tileOffset=[coord.x*scale*plot.tileSize+scale*target.x-plot.viewport.x,coord.y*scale*plot.tileSize+scale*target.y-plot.viewport.y];// use shader
shader.use();// set uniforms
shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uRotation',rotation);shader.setUniform('uOpacity',opacity);shader.setUniform('uColor',color);shader.setUniform('uScale',scale);shader.setUniform('uTileOffset',tileOffset);// bind the quad buffer
quad.bind();// draw quad
quad.draw();// unbind the quad buffer
quad.unbind();}}]);return Quad;}();module.exports=Quad;

},{"lumo":155}],369:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var lumo=require('lumo');var NUM_SEGMENTS=64;var RADIUS_OFFSET=10;var INDIVIDUAL_SHADER={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tuniform float uRadius;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform float uRadiusOffset;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvoid main() {\n\t\t\tvec2 radiusOffset = normalize(aPosition) * (uRadius - uRadiusOffset);\n\t\t\tvec2 wPosition = ((aPosition + radiusOffset) * uScale) + uTileOffset;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform vec4 uColor;\n\t\tuniform float uOpacity;\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4(uColor.rgb, uColor.a * uOpacity);\n\t\t}\n\t\t'};var INSTANCED_SHADER={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tattribute vec2 aOffset;\n\t\tattribute float aRadius;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform float uRadiusOffset;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvoid main() {\n\t\t\tvec2 radiusOffset = normalize(aPosition) * (aRadius - uRadiusOffset);\n\t\t\tvec2 wPosition = ((aPosition + radiusOffset + aOffset) * uScale) + uTileOffset;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform vec4 uColor;\n\t\tuniform float uOpacity;\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4(uColor.rgb, uColor.a * uOpacity);\n\t\t}\n\t\t'};var createRing=function createRing(gl,numSegments,radius,ringWidth){var theta=2*Math.PI/numSegments;// pre-calculate sine and cosine
var c=Math.cos(theta);var s=Math.sin(theta);// start at angle = 0
var x0=0;var y0=radius-ringWidth/2;var x1=0;var y1=radius+ringWidth/2;var vertices=new Float32Array((numSegments+1)*(2+2));for(var i=0;i<=numSegments;i++){vertices[i*4]=x0;vertices[i*4+1]=y0;vertices[i*4+2]=x1;vertices[i*4+3]=y1;// apply the rotation
var t=x0;x0=c*x0-s*y0;y0=s*t+c*y0;t=x1;x1=c*x1-s*y1;y1=s*t+c*y1;}return new lumo.VertexBuffer(gl,vertices,{// x, y
0:{size:2,type:'FLOAT'}},{mode:'TRIANGLE_STRIP',count:vertices.length/2});};var Ring=function(){function Ring(renderer,width){_classCallCheck(this,Ring);this.renderer=renderer;this.ring=createRing(renderer.gl,NUM_SEGMENTS,RADIUS_OFFSET,width);this.shaders={instanced:renderer.createShader(INSTANCED_SHADER),individual:renderer.createShader(INDIVIDUAL_SHADER)};}_createClass(Ring,[{key:'drawInstanced',value:function drawInstanced(atlas,color){var opacity=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var shader=this.shaders.instanced;var ring=this.ring;var projection=this.renderer.getOrthoMatrix();var renderables=this.renderer.getRenderables();// use shader
shader.use();// set uniforms
shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uRadiusOffset',RADIUS_OFFSET);shader.setUniform('uOpacity',opacity);shader.setUniform('uColor',color);// bind the ring buffer
ring.bind();// binds instance offset buffer
atlas.bindInstanced();renderables.forEach(function(renderable){// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);// draw the instances
atlas.drawInstanced(renderable.hash,ring.mode,ring.count);});// unbind instance offset buffer
atlas.unbindInstanced();// unbind the ring buffer
ring.unbind();}},{key:'drawIndividual',value:function drawIndividual(target,color){var opacity=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var shader=this.shaders.individual;var ring=this.ring;var plot=this.renderer.layer.plot;var projection=this.renderer.getOrthoMatrix();// get tile offset
var coord=target.tile.coord;var scale=Math.pow(2,plot.zoom-coord.z);var tileOffset=[coord.x*scale*plot.tileSize+scale*target.x-plot.viewport.x,coord.y*scale*plot.tileSize+scale*target.y-plot.viewport.y];// use shader
shader.use();// set uniforms
shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uColor',color);shader.setUniform('uOpacity',opacity);shader.setUniform('uRadius',target.radius);shader.setUniform('uRadiusOffset',RADIUS_OFFSET);shader.setUniform('uScale',scale);shader.setUniform('uTileOffset',tileOffset);// bind the ring buffer
ring.bind();// draw ring
ring.draw();// unbind the ring buffer
ring.unbind();}}]);return Ring;}();module.exports=Ring;

},{"lumo":155}],370:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var lumo=require('lumo');var NUM_SLICES=360;var RADIUS_OFFSET=10;var INDIVIDUAL_SHADER={vert:'\n\t\tprecision highp float;\n\t\tattribute vec3 aPosition;\n\n\t\tuniform float uPercentages[NUM_SEGMENTS];\n\t\tuniform vec4 uColors[NUM_SEGMENTS];\n\t\tuniform float uRadius;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform float uRadiusOffset;\n\t\tuniform mat4 uProjectionMatrix;\n\n\t\tvarying vec4 vColor;\n\n\t\tvoid main() {\n\t\t\tvec2 radiusOffset = normalize(aPosition.xy) * (uRadius - uRadiusOffset);\n\t\t\tvec2 wPosition = ((aPosition.xy + radiusOffset) * uScale) + uTileOffset;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\n\t\t\tfloat percentage = aPosition.z;\n\t\t\tfor (int i = 0; i<NUM_SEGMENTS; i++) {\n\t\t\t\tif (percentage <= uPercentages[i]) {\n\t\t\t\t\tvColor = uColors[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform float uOpacity;\n\t\tvarying vec4 vColor;\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4(vColor.rgb, vColor.a * uOpacity);\n\t\t}\n\t\t'};var INSTANCED_SHADER={vert:'\n\t\tprecision highp float;\n\t\tattribute vec3 aPosition;\n\t\tattribute vec2 aOffset;\n\t\tattribute float aRadius;\n\t\tattribute vec4 aPercentagesA;\n\t\tattribute vec4 aPercentagesB;\n\t\tattribute vec4 aPercentagesC;\n\t\tattribute vec4 aPercentagesD;\n\n\t\tuniform vec4 uColors[NUM_SEGMENTS];\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform float uRadiusOffset;\n\t\tuniform mat4 uProjectionMatrix;\n\n\t\tvarying vec4 vColor;\n\n\t\tvoid main() {\n\t\t\tvec2 radiusOffset = normalize(aPosition.xy) * (aRadius - uRadiusOffset);\n\t\t\tvec2 wPosition = ((aPosition.xy + radiusOffset + aOffset) * uScale) + uTileOffset;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\n\t\t\tfloat percentage = aPosition.z;\n\t\t\tif (percentage <= aPercentagesA.x) {\n\t\t\t\tvColor = uColors[0];\n\t\t\t#if NUM_SEGMENTS > 1\n\t\t\t} else if (percentage <= aPercentagesA.y) {\n\t\t\t\t\tvColor = uColors[1];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 2\n\t\t\t\t} else if (percentage <= aPercentagesA.z) {\n\t\t\t\t\tvColor = uColors[2];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 3\n\t\t\t\t} else if (percentage <= aPercentagesA.w) {\n\t\t\t\t\tvColor = uColors[3];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 4\n\t\t\t\t} else if (percentage <= aPercentagesB.x) {\n\t\t\t\t\tvColor = uColors[4];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 5\n\t\t\t\t} else if (percentage <= aPercentagesB.y) {\n\t\t\t\t\tvColor = uColors[5];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 6\n\t\t\t\t} else if (percentage <= aPercentagesB.z) {\n\t\t\t\t\tvColor = uColors[6];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 7\n\t\t\t\t} else if (percentage <= aPercentagesB.w) {\n\t\t\t\t\tvColor = uColors[7];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 8\n\t\t\t\t} else if (percentage <= aPercentagesC.x) {\n\t\t\t\t\tvColor = uColors[8];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 9\n\t\t\t\t} else if (percentage <= aPercentagesC.y) {\n\t\t\t\t\tvColor = uColors[9];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 10\n\t\t\t\t} else if (percentage <= aPercentagesC.z) {\n\t\t\t\t\tvColor = uColors[10];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 11\n\t\t\t\t} else if (percentage <= aPercentagesC.w) {\n\t\t\t\t\tvColor = uColors[11];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 12\n\t\t\t\t} else if (percentage <= aPercentagesD.x) {\n\t\t\t\t\tvColor = uColors[12];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 13\n\t\t\t\t} else if (percentage <= aPercentagesD.y) {\n\t\t\t\t\tvColor = uColors[13];\n\t\t\t#endif\n\t\t\t#if NUM_SEGMENTS > 14\n\t\t\t\t} else if (percentage <= aPercentagesD.z) {\n\t\t\t\t\tvColor = uColors[14];\n\t\t\t#endif\n\t\t\t\t} else {\n\t\t\t\t\tvColor = uColors[NUM_SEGMENTS-1];\n\t\t\t\t}\n\t\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform float uOpacity;\n\t\tvarying vec4 vColor;\n\t\tvoid main() {\n\t\t\tgl_FragColor = vec4(vColor.rgb, vColor.a * uOpacity);\n\t\t}\n\t\t'};var createSegmentedRing=function createSegmentedRing(gl,numSegments,radius,ringWidth){var theta=2*Math.PI/numSegments;// pre-calculate sine and cosine
var c=Math.cos(theta);var s=Math.sin(theta);// start at angle = 0
var x0=0;var y0=radius-ringWidth/2;var x1=0;var y1=radius+ringWidth/2;var vertices=new Float32Array((numSegments+1)*(3+3));for(var i=0;i<=numSegments;i++){vertices[i*6]=x0;vertices[i*6+1]=y0;vertices[i*6+2]=i/(numSegments+1);// arc percent
vertices[i*6+3]=x1;vertices[i*6+4]=y1;vertices[i*6+5]=i/(numSegments+1);// arc percent
// apply the rotation
var t=x0;x0=c*x0-s*y0;y0=s*t+c*y0;t=x1;x1=c*x1-s*y1;y1=s*t+c*y1;}return new lumo.VertexBuffer(gl,vertices,{// x, y, percent
0:{size:3,type:'FLOAT'}},{mode:'TRIANGLE_STRIP',count:vertices.length/3});};var SegmentedRing=function(){function SegmentedRing(renderer,width,numSegments){_classCallCheck(this,SegmentedRing);this.renderer=renderer;this.ring=createSegmentedRing(renderer.gl,NUM_SLICES,RADIUS_OFFSET,width);this.shaders={instanced:renderer.createShader({define:{NUM_SEGMENTS:numSegments},vert:INSTANCED_SHADER.vert,frag:INSTANCED_SHADER.frag}),individual:renderer.createShader({define:{NUM_SEGMENTS:numSegments},vert:INDIVIDUAL_SHADER.vert,frag:INDIVIDUAL_SHADER.frag})};}_createClass(SegmentedRing,[{key:'drawInstanced',value:function drawInstanced(atlas,colors){var opacity=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var shader=this.shaders.instanced;var ring=this.ring;var projection=this.renderer.getOrthoMatrix();var renderables=this.renderer.getRenderables();// use shader
shader.use();// set uniforms
shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uRadiusOffset',RADIUS_OFFSET);shader.setUniform('uOpacity',opacity);shader.setUniform('uColors',colors);// bind the ring buffer
ring.bind();// binds instance offset buffer
atlas.bindInstanced();renderables.forEach(function(renderable){// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);// draw the instances
atlas.drawInstanced(renderable.hash,ring.mode,ring.count);});// unbind instance offset buffer
atlas.unbindInstanced();// unbind the ring buffer
ring.unbind();}},{key:'drawIndividual',value:function drawIndividual(target,colors){var opacity=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var shader=this.shaders.individual;var ring=this.ring;var plot=this.renderer.layer.plot;var projection=this.renderer.getOrthoMatrix();// get tile offset
var coord=target.tile.coord;var scale=Math.pow(2,plot.zoom-coord.z);var tileOffset=[coord.x*scale*plot.tileSize+scale*target.x-plot.viewport.x,coord.y*scale*plot.tileSize+scale*target.y-plot.viewport.y];// use shader
shader.use();// set uniforms
shader.setUniform('uProjectionMatrix',projection);shader.setUniform('uColors',colors);shader.setUniform('uPercentages',target.percentages);shader.setUniform('uOpacity',opacity);shader.setUniform('uRadius',target.radius);shader.setUniform('uRadiusOffset',RADIUS_OFFSET);shader.setUniform('uScale',scale);shader.setUniform('uTileOffset',tileOffset);// bind the ring buffer
ring.bind();// draw ring
ring.draw();// unbind the ring buffer
ring.unbind();}}]);return SegmentedRing;}();module.exports=SegmentedRing;

},{"lumo":155}],371:[function(require,module,exports){
'use strict';var clamp=require('lodash/clamp');var SIGMOID_SCALE=0.15;// log10
function log10Transform(val,min,max){var logMin=Math.log10(min||1);var logMax=Math.log10(max||1);var logVal=Math.log10(val||1);return(logVal-logMin)/(logMax-logMin||1);}function inverseLog10Transform(nval,min,max){var logMin=Math.log10(min||1);var logMax=Math.log10(max||1);return Math.pow(10,nval*logMax-nval*logMin+logMin);}// sigmoid
function sigmoidTransform(val,min,max){var absMin=Math.abs(min);var absMax=Math.abs(max);var distance=Math.max(absMin,absMax);var scaledVal=val/(SIGMOID_SCALE*distance);return 1/(1+Math.exp(-scaledVal));}function inverseSigmoidTransform(nval,min,max){var absMin=Math.abs(min);var absMax=Math.abs(max);var distance=Math.max(absMin,absMax);if(nval===0){return-distance;}if(nval===1){return distance;}return Math.log(1/nval-1)*-(SIGMOID_SCALE*distance);}// linear
function linearTransform(val,min,max){var range=max-min;if(range===0){return 1;}return(val-min)/range;}function inverseLinearTransform(nval,min,max){var range=max-min;if(range===0){return 1;}return min+nval*range;}var Transform={linear:linearTransform,log10:log10Transform,sigmoid:sigmoidTransform};var Inverse={linear:inverseLinearTransform,log10:inverseLog10Transform,sigmoid:inverseSigmoidTransform};var interpolate=function interpolate(nval,range){// interpolate between the filter range
var rMin=range.min;var rMax=range.max;var rval=(nval-rMin)/(rMax-rMin);// ensure output is [0:1]
return clamp(rval,0,1);};var transform=function transform(val,type,extrema){// clamp the value between the extreme (shouldn't be necessary)
var min=extrema.min;var max=extrema.max;var clamped=clamp(val,min,max);// normalize the value
if(min!==max){return Transform[type](clamped,min,max);}// if min === max, always return 1
return 1;};var untransform=function untransform(nval,type,extrema){var min=extrema.min;var max=extrema.max;// clamp the value between the extreme (shouldn't be necessary)
var clamped=clamp(nval,min,max);// unnormalize the value
if(min!==max){return Inverse[type](clamped,min,max);}// if min === max, always return 1
return 1;};module.exports={transform:transform,untransform:untransform,interpolate:interpolate};

},{"lodash/clamp":305}],372:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var get=require('lodash/get');var defaultTo=require('lodash/defaultTo');var lumo=require('lumo');var Ring=require('../shape/Ring');var Community=function(_lumo$WebGLInteractiv){_inherits(Community,_lumo$WebGLInteractiv);function Community(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Community);var _this=_possibleConstructorReturn(this,(Community.__proto__||Object.getPrototypeOf(Community)).call(this,options));_this.atlas=null;_this.ringFill=null;_this.ringOutline=null;_this.color=defaultTo(options.color,[1.0,1.0,1.0,1.0]);_this.outlineColor=defaultTo(options.outlineColor,[0.0,0.0,0.0,1.0]);_this.highlightedColor=defaultTo(options.highlightedColor,[1.0,0.5,1.0,1.0]);_this.selectedColor=defaultTo(options.selectedColor,[1.0,0.5,1.0,1.0]);_this.ringWidth=defaultTo(options.ringWidth,2);_this.ringOffset=defaultTo(options.ringOffset,0);_this.outlineWidth=defaultTo(options.outlineWidth,1);_this.radiusField=defaultTo(options.radiusField,'radius');return _this;}_createClass(Community,[{key:'onAdd',value:function onAdd(layer){_get(Community.prototype.__proto__||Object.getPrototypeOf(Community.prototype),'onAdd',this).call(this,layer);// ring fill
this.ringFill=new Ring(this,this.ringWidth);// ring outline
this.ringOutline=new Ring(this,this.ringWidth+this.outlineWidth*2);// offset atlas
this.atlas=this.createVertexAtlas({// offset
1:{size:2,type:'FLOAT'},// radius
2:{size:1,type:'FLOAT'}});return this;}},{key:'onRemove',value:function onRemove(layer){this.destroyVertexAtlas(this.atlas);this.atlas=null;this.ringFill=null;this.ringOutline=null;_get(Community.prototype.__proto__||Object.getPrototypeOf(Community.prototype),'onRemove',this).call(this,layer);return this;}},{key:'addTile',value:function addTile(atlas,tile){var coord=tile.coord;var data=tile.data;var hits=data.hits;var positions=data.points;var tileSize=this.layer.plot.tileSize;var xOffset=coord.x*tileSize;var yOffset=coord.y*tileSize;var radiusField=this.radiusField;var radiusScale=Math.pow(2,coord.z);var ringOffset=this.ringOffset;var totalOffset=this.ringWidth/2+// width
this.outlineWidth+// outline
this.ringOffset;// offset
var points=new Array(positions.length/2);var vertices=new Float32Array(positions.length/2*3);for(var i=0;i<positions.length/2;i++){var hit=hits[i];var x=positions[i*2];var y=positions[i*2+1];var radius=get(hit,radiusField)*radiusScale+ringOffset;// plot pixel coords
var px=x+xOffset;var py=y+yOffset;points[i]={x:x,y:y,radius:radius,minX:px-(radius+totalOffset),maxX:px+(radius+totalOffset),minY:py-(radius+totalOffset),maxY:py+(radius+totalOffset),tile:tile,data:hit};vertices[i*3]=x;vertices[i*3+1]=y;vertices[i*3+2]=radius;}this.addPoints(coord,points);atlas.set(coord.hash,vertices,points.length);}},{key:'removeTile',value:function removeTile(atlas,tile){var coord=tile.coord;atlas.delete(coord.hash);this.removePoints(coord);}},{key:'draw',value:function draw(){var _this2=this;var gl=this.gl;var opacity=this.layer.opacity;// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);// draw outline
this.ringOutline.drawInstanced(this.atlas,this.outlineColor,opacity);// draw fill
this.ringFill.drawInstanced(this.atlas,this.color,opacity);// render selected
this.selected.forEach(function(selected){_this2.ringFill.drawIndividual(selected,_this2.selectedColor,opacity);});// render highlighted
if(this.highlighted&&this.selected.indexOf(this.highlighted)===-1){this.ringFill.drawIndividual(this.highlighted,this.highlightedColor,opacity);}return this;}}]);return Community;}(lumo.WebGLInteractiveRenderer);module.exports=Community;

},{"../shape/Ring":369,"lodash/defaultTo":306,"lodash/get":309,"lumo":155}],373:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var get=require('lodash/get');var flatten=require('lodash/flatten');var defaultTo=require('lodash/defaultTo');var lumo=require('lumo');var Ring=require('../shape/Ring');var ColorRamp=require('../color/ColorRamp');var RadialQuad=require('../shape/RadialQuad');var SegmentedRing=require('../shape/SegmentedRing');var CommunityBucket=function(_lumo$WebGLInteractiv){_inherits(CommunityBucket,_lumo$WebGLInteractiv);function CommunityBucket(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,CommunityBucket);var _this=_possibleConstructorReturn(this,(CommunityBucket.__proto__||Object.getPrototypeOf(CommunityBucket)).call(this,options));_this.ringFill=null;_this.ringOutline=null;_this.quad=null;_this.atlas=null;_this.outlineWidth=defaultTo(options.outlineWidth,1);_this.outlineColor=defaultTo(options.outlineColor,[0.0,0.0,0.0,1.0]);_this.ringWidth=defaultTo(options.ringWidth,3);_this.ringOffset=defaultTo(options.ringOffset,0);_this.tickWidth=defaultTo(options.tickWidth,2);_this.tickHeight=defaultTo(options.tickHeight,8);_this.radiusField=defaultTo(options.radiusField,'radius');_this.numBuckets=defaultTo(options.numBuckets,4);_this.bucketsField=defaultTo(options.bucketsField,'buckets');_this.colorRamp=defaultTo(options.colorRamp,'verdant');var buckets=ColorRamp.getBuckets(_this.colorRamp,_this.numBuckets+2);_this.colors=flatten(buckets.slice(0,_this.numBuckets));_this.highlightedColors=flatten(buckets.slice(1,_this.numBuckets+1));_this.selectedColors=flatten(buckets.slice(2,_this.numBuckets+2));return _this;}_createClass(CommunityBucket,[{key:'onAdd',value:function onAdd(layer){_get(CommunityBucket.prototype.__proto__||Object.getPrototypeOf(CommunityBucket.prototype),'onAdd',this).call(this,layer);var fullWidth=this.ringWidth+this.outlineWidth*2;this.ringFill=new SegmentedRing(this,this.ringWidth,this.numBuckets);this.ringOutline=new Ring(this,fullWidth);this.quad=new RadialQuad(this,-this.tickWidth/2,this.tickWidth/2,-fullWidth/2,this.tickHeight);// vertex atlas for all tiles
this.atlas=this.createVertexAtlas({// offset
1:{type:'FLOAT',size:2},// radius
2:{type:'FLOAT',size:1},// percentages
3:{type:'FLOAT',size:4},4:{type:'FLOAT',size:4},5:{type:'FLOAT',size:4},6:{type:'FLOAT',size:4}});return this;}},{key:'onRemove',value:function onRemove(layer){this.destroyVertexAtlas(this.atlas);this.ringFill=null;this.ringOutline=null;this.quad=null;this.atlas=null;_get(CommunityBucket.prototype.__proto__||Object.getPrototypeOf(CommunityBucket.prototype),'onRemove',this).call(this,layer);return this;}},{key:'addTile',value:function addTile(atlas,tile){var coord=tile.coord;var data=tile.data;var hits=data.hits;var positions=data.points;var tileSize=this.layer.plot.tileSize;var xOffset=coord.x*tileSize;var yOffset=coord.y*tileSize;var radiusField=this.radiusField;var bucketsField=this.bucketsField;var radiusScale=Math.pow(2,coord.z);var ringOffset=this.ringOffset;var totalOffset=this.ringWidth/2+// width
this.outlineWidth+// outline
this.ringOffset;// offset
var stride=atlas.stride;var points=new Array(positions.length/2);var vertices=new Float32Array(positions.length/2*stride);for(var i=0;i<positions.length/2;i++){var hit=hits[i];var x=positions[i*2];var y=positions[i*2+1];var radius=get(hit,radiusField)*radiusScale+ringOffset;var buckets=get(hit,bucketsField);// plot pixel coords
var px=x+xOffset;var py=y+yOffset;// sum buckets
var sum=0;for(var j=0;j<buckets.length;j++){sum+=buckets[j];}// get cumulative percentages
var percentages=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];var current=0;for(var _j=0;_j<buckets.length;_j++){percentages[_j]=(current+buckets[_j])/sum;current+=buckets[_j];}points[i]={x:x,y:y,radius:radius,minX:px-(radius+totalOffset),maxX:px+(radius+totalOffset),minY:py-(radius+totalOffset),maxY:py+(radius+totalOffset),tile:tile,data:hit,buckets:buckets,percentages:percentages};vertices[i*stride]=x;vertices[i*stride+1]=y;vertices[i*stride+2]=radius;vertices[i*stride+3]=percentages[0];vertices[i*stride+4]=percentages[1];vertices[i*stride+5]=percentages[2];vertices[i*stride+6]=percentages[3];vertices[i*stride+7]=percentages[4];vertices[i*stride+8]=percentages[5];vertices[i*stride+9]=percentages[6];vertices[i*stride+10]=percentages[7];vertices[i*stride+11]=percentages[8];vertices[i*stride+12]=percentages[9];vertices[i*stride+13]=percentages[10];vertices[i*stride+14]=percentages[11];vertices[i*stride+15]=percentages[12];vertices[i*stride+16]=percentages[13];vertices[i*stride+17]=percentages[14];vertices[i*stride+18]=percentages[15];}this.addPoints(coord,points);atlas.set(coord.hash,vertices,points.length);}},{key:'removeTile',value:function removeTile(atlas,tile){var coord=tile.coord;atlas.delete(coord.hash);this.removePoints(coord);}},{key:'draw',value:function draw(){var _this2=this;var gl=this.gl;var opacity=this.layer.opacity;// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);// draw outline
this.ringOutline.drawInstanced(this.atlas,this.outlineColor,opacity);// draw fill
this.ringFill.drawInstanced(this.atlas,this.colors,opacity);// render selected
this.selected.forEach(function(selected){_this2.ringFill.drawIndividual(selected,_this2.selectedColor,opacity);});// render highlighted
if(this.highlighted&&this.selected.indexOf(this.highlighted)===-1){this.ringFill.drawIndividual(this.highlighted,this.highlightedColors,opacity);}// draw radial ticks
this.quad.drawInstanced(this.atlas,this.outlineColor,0.0,opacity);return this;}}]);return CommunityBucket;}(lumo.WebGLInteractiveRenderer);module.exports=CommunityBucket;

},{"../color/ColorRamp":360,"../shape/RadialQuad":368,"../shape/Ring":369,"../shape/SegmentedRing":370,"lodash/defaultTo":306,"lodash/flatten":308,"lodash/get":309,"lumo":155}],374:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var clamp=require('lodash/clamp');var defaultTo=require('lodash/defaultTo');var lumo=require('lumo');var ColorRamp=require('../color/ColorRamp');var SHADER={vert:'\n\t\tprecision highp float;\n\n\t\tattribute vec2 aPosition;\n\t\tattribute vec2 aTextureCoord;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform float uScale;\n\t\tuniform mat4 uProjectionMatrix;\n\n\t\tvarying vec2 vTextureCoord;\n\n\t\tvoid main() {\n\t\t\tvTextureCoord = aTextureCoord;\n\t\t\tvec2 wPosition = (aPosition * uScale) + uTileOffset;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\n\t\tuniform float uOpacity;\n\t\tuniform float uRangeMin;\n\t\tuniform float uRangeMax;\n\t\tuniform float uMin;\n\t\tuniform float uMax;\n\t\tuniform sampler2D uTextureSampler;\n\t\tuniform sampler2D uColorRampSampler;\n\t\tuniform float uColorRampSize;\n\n\t\tvarying vec2 vTextureCoord;\n\n\t\tfloat decodeRGBAToFloat(vec4 v) {\n\t\t\treturn\n\t\t\t\t(v.x * 255.0) +\n\t\t\t\t(v.y * 255.0 * 256.0) +\n\t\t\t\t(v.z * 255.0 * 65536.0) +\n\t\t\t\t(v.w * 255.0 * 16777216.0);\n\t\t}\n\n\t\tfloat log10(float val) {\n\t\t\treturn log(val) / log(10.0);\n\t\t}\n\n\t\tfloat log10Transform(float val, float minVal, float maxVal) {\n\t\t\tif (minVal < 1.0) { minVal = 1.0; }\n\t\t\tif (maxVal < 1.0) { maxVal = 1.0; }\n\t\t\tif (val < 1.0) { val = 1.0; }\n\t\t\tfloat logMin = log10(minVal);\n\t\t\tfloat logMax = log10(maxVal);\n\t\t\tfloat logVal = log10(val);\n\t\t\tfloat range = logMax - logMin;\n\t\t\tif (range == 0.0) { range = 1.0; }\n\t\t\treturn (logVal - logMin) / range;\n\t\t}\n\n\t\tfloat sigmoidTransform(float val, float minVal, float maxVal) {\n\t\t\tminVal = abs(minVal);\n\t\t\tmaxVal = abs(maxVal);\n\t\t\tfloat dist = max(minVal, maxVal);\n\t\t\tfloat SIGMOID_SCALE = 0.15;\n\t\t\tfloat scaledVal = val / (SIGMOID_SCALE * dist);\n\t\t\treturn 1.0 / (1.0 + exp(-scaledVal));\n\t\t}\n\n\t\tfloat linearTransform(float val, float minVal, float maxVal) {\n\t\t\tfloat range = maxVal - minVal;\n\t\t\tif (range == 0.0) { range = 1.0; }\n\t\t\treturn (val - minVal) / range;\n\t\t}\n\n\t\tfloat transform(float val) {\n\t\t\tval = clamp(val, uMin, uMax);\n\t\t\t#ifdef LINEAR_TRANSFORM\n\t\t\t\treturn linearTransform(val, uMin, uMax);\n\t\t\t#else\n\t\t\t\t#ifdef SIGMOID_TRANSFORM\n\t\t\t\t\treturn sigmoidTransform(val, uMin, uMax);\n\t\t\t\t#else\n\t\t\t\t\treturn log10Transform(val, uMin, uMax);\n\t\t\t\t#endif\n\t\t\t#endif\n\t\t}\n\n\t\tfloat interpolateToRange(float nval) {\n\t\t\tfloat rval = (nval - uRangeMin) / (uRangeMax - uRangeMin);\n\t\t\treturn clamp(rval, 0.0, 1.0);\n\t\t}\n\n\t\tvec4 colorRamp(float value) {\n\t\t\tfloat maxIndex = uColorRampSize * uColorRampSize - 1.0;\n\t\t\tfloat lookup = value * maxIndex;\n\t\t\tfloat x = mod(lookup, uColorRampSize);\n\t\t\tfloat y = floor(lookup / uColorRampSize);\n\t\t\tfloat pixel = 1.0 / uColorRampSize;\n\t\t\tfloat tx = (x / uColorRampSize) + (pixel * 0.5);\n\t\t\tfloat ty = (y / uColorRampSize) + (pixel * 0.5);\n\t\t\treturn texture2D(uColorRampSampler, vec2(tx, ty));\n\t\t}\n\n\t\tvoid main() {\n\t\t\tvec4 enc = texture2D(uTextureSampler, vTextureCoord);\n\t\t\tfloat count = decodeRGBAToFloat(enc);\n\t\t\tif (count == 0.0) {\n\t\t\t\tdiscard;\n\t\t\t}\n\t\t\tfloat nval = transform(count);\n\t\t\tfloat rval = interpolateToRange(nval);\n\t\t\tvec4 color = colorRamp(rval);\n\t\t\tgl_FragColor = vec4(color.rgb, color.a * uOpacity);\n\t\t}\n\t\t'};var createQuad=function createQuad(gl,min,max){var vertices=new Float32Array(24);// positions
vertices[0]=min;vertices[1]=min;vertices[2]=max;vertices[3]=min;vertices[4]=max;vertices[5]=max;vertices[6]=min;vertices[7]=min;vertices[8]=max;vertices[9]=max;vertices[10]=min;vertices[11]=max;// uvs
vertices[12]=0;vertices[13]=0;vertices[14]=1;vertices[15]=0;vertices[16]=1;vertices[17]=1;vertices[18]=0;vertices[19]=0;vertices[20]=1;vertices[21]=1;vertices[22]=0;vertices[23]=1;// create quad buffer
return new lumo.VertexBuffer(gl,vertices,{0:{size:2,type:'FLOAT',byteOffset:0},1:{size:2,type:'FLOAT',byteOffset:2*6*4}},{count:6});};var addTransformDefine=function addTransformDefine(shader,transform){var define={};switch(transform){case'linear':define.LINEAR_TRANSFORM=1;case'sigmoid':define.SIGMOID_TRANSFORM=1;default:define.LOG_TRANSFORM=1;}shader.define=define;return shader;};var createRampTexture=function createRampTexture(gl,type){var table=ColorRamp.getTable(type);var size=Math.sqrt(table.length/4);var texture=new lumo.Texture(gl,null,{filter:'NEAREST'});texture.bufferData(table,size,size);return texture;};var Heatmap=function(_lumo$WebGLTextureRen){_inherits(Heatmap,_lumo$WebGLTextureRen);function Heatmap(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Heatmap);options.filter='NEAREST';var _this=_possibleConstructorReturn(this,(Heatmap.__proto__||Object.getPrototypeOf(Heatmap)).call(this,options));_this.transform=defaultTo(options.transform,'log10');_this.range=defaultTo(options.range,[0,1]);_this.colorRamp=defaultTo(options.colorRamp,'verdant');_this.quad=null;_this.shader=null;_this.array=null;_this.ramp=null;return _this;}_createClass(Heatmap,[{key:'addTile',value:function addTile(array,tile){// update chunksize if layer resolution changes
if(this.array.chunkSize!==this.layer.resolution){this.array.chunkSize=this.layer.resolution;}array.set(tile.coord.hash,new Uint8Array(tile.data));}},{key:'removeTile',value:function removeTile(array,tile){array.delete(tile.coord.hash);}},{key:'onAdd',value:function onAdd(layer){_get(Heatmap.prototype.__proto__||Object.getPrototypeOf(Heatmap.prototype),'onAdd',this).call(this,layer);this.quad=createQuad(this.gl,0,layer.plot.tileSize);this.shader=this.createShader(addTransformDefine(SHADER,this.transform));this.array=this.createTextureArray(layer.resolution);this.ramp=createRampTexture(this.gl,this.colorRamp);return this;}},{key:'onRemove',value:function onRemove(layer){this.destroyTextureArray(this.array);this.quad=null;this.shader=null;this.array=null;_get(Heatmap.prototype.__proto__||Object.getPrototypeOf(Heatmap.prototype),'onRemove',this).call(this,layer);return this;}},{key:'setTransform',value:function setTransform(transform){this.transform=transform;// re-compile shader
this.shader=this.createShader(addTransformDefine(SHADER,this.transform));}},{key:'getTransform',value:function getTransform(){return this.transform;}},{key:'setValueRange',value:function setValueRange(min,max){this.range=[clamp(min,0,1),clamp(max,0,1)];}},{key:'getValueRange',value:function getValueRange(){return[this.range[0],this.range[1]];}},{key:'setColorRamp',value:function setColorRamp(colorRamp){this.colorRamp=colorRamp;this.ramp=createRampTexture(this.gl,this.colorRamp);}},{key:'getColorRamp',value:function getColorRamp(){return this.colorRamp;}},{key:'getColorRampFunc',value:function getColorRampFunc(){return ColorRamp.getFunc(this.colorRamp);}},{key:'draw',value:function draw(){var gl=this.gl;var shader=this.shader;var array=this.array;var quad=this.quad;var ramp=this.ramp;var renderables=this.getRenderables();var proj=this.getOrthoMatrix();var extrema=this.layer.getExtrema();// bind shader
shader.use();// set uniforms
shader.setUniform('uProjectionMatrix',proj);shader.setUniform('uTextureSampler',0);shader.setUniform('uColorRampSampler',1);shader.setUniform('uColorRampSize',ramp.width);shader.setUniform('uOpacity',this.layer.opacity);shader.setUniform('uRangeMin',this.range[0]);shader.setUniform('uRangeMax',this.range[1]);shader.setUniform('uMin',extrema.min);shader.setUniform('uMax',extrema.max);// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);// bind quad
quad.bind();// bind colo ramp
ramp.bind(1);var last=void 0;// for each renderable
renderables.forEach(function(renderable){var hash=renderable.hash;if(last!==hash){// bind texture
array.bind(hash,0);last=hash;}// set tile uniforms
shader.setUniform('uScale',renderable.scale);shader.setUniform('uTileOffset',renderable.tileOffset);// draw
quad.draw();// no need to unbind texture
});// unbind quad
quad.unbind();return this;}}]);return Heatmap;}(lumo.WebGLTextureRenderer);module.exports=Heatmap;

},{"../color/ColorRamp":360,"lodash/clamp":305,"lodash/defaultTo":306,"lumo":155}],375:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var lumo=require('lumo');var Image=function(_lumo$TextureRenderer){_inherits(Image,_lumo$TextureRenderer);function Image(){_classCallCheck(this,Image);return _possibleConstructorReturn(this,(Image.__proto__||Object.getPrototypeOf(Image)).apply(this,arguments));}_createClass(Image,[{key:'addTile',value:function addTile(array,tile){array.set(tile.coord.hash,new Uint8Array(tile.data));}}]);return Image;}(lumo.TextureRenderer);module.exports=Image;

},{"lumo":155}],376:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var lumo=require('lumo');var Point=require('../shape/Point');var Macro=function(_lumo$WebGLVertexRend){_inherits(Macro,_lumo$WebGLVertexRend);function Macro(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Macro);var _this=_possibleConstructorReturn(this,(Macro.__proto__||Object.getPrototypeOf(Macro)).call(this,options));_this.atlas=null;_this.point=null;_this.color=defaultTo(options.color,[1.0,0.4,0.1,0.8]);_this.radius=defaultTo(options.radius,2);return _this;}_createClass(Macro,[{key:'addTile',value:function addTile(atlas,tile){var bins=this.layer.lod>0?tile.data.points:tile.data;atlas.set(tile.coord.hash,bins,bins.length/atlas.stride);}},{key:'onAdd',value:function onAdd(layer){_get(Macro.prototype.__proto__||Object.getPrototypeOf(Macro.prototype),'onAdd',this).call(this,layer);this.point=new Point(this);this.atlas=this.createVertexAtlas({// position
0:{size:2,type:'FLOAT'}});return this;}},{key:'onRemove',value:function onRemove(layer){this.destroyVertexAtlas(this.atlas);this.point=null;this.atlas=null;_get(Macro.prototype.__proto__||Object.getPrototypeOf(Macro.prototype),'onRemove',this).call(this,layer);return this;}},{key:'draw',value:function draw(){var gl=this.gl;var layer=this.layer;var plot=layer.plot;// bind render target
plot.renderBuffer.bind();plot.renderBuffer.clear();// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE);// draw instanced points
this.point.drawInstanced(this.atlas,this.radius,this.color);// unbind render target
plot.renderBuffer.unbind();// render framebuffer to the backbuffer
plot.renderBuffer.blitToScreen(layer.opacity);return this;}}]);return Macro;}(lumo.WebGLVertexRenderer);module.exports=Macro;

},{"../shape/Point":367,"lodash/defaultTo":306,"lumo":155}],377:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var lumo=require('lumo');var Line=require('../shape/Line');var MacroEdge=function(_lumo$WebGLVertexRend){_inherits(MacroEdge,_lumo$WebGLVertexRend);function MacroEdge(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,MacroEdge);var _this=_possibleConstructorReturn(this,(MacroEdge.__proto__||Object.getPrototypeOf(MacroEdge)).call(this,options));_this.line=null;_this.atlas=null;_this.color=defaultTo(options.color,[1.0,0.4,0.1,0.8]);return _this;}_createClass(MacroEdge,[{key:'addTile',value:function addTile(atlas,tile){var edges=this.layer.lod>0?tile.data.edges:tile.data;atlas.set(tile.coord.hash,edges,edges.length/(atlas.stride*2));}},{key:'onAdd',value:function onAdd(layer){_get(MacroEdge.prototype.__proto__||Object.getPrototypeOf(MacroEdge.prototype),'onAdd',this).call(this,layer);this.line=new Line(this);this.atlas=this.createVertexAtlas({// position
0:{size:2,type:'FLOAT'}});return this;}},{key:'onRemove',value:function onRemove(layer){this.destroyVertexAtlas(this.atlas);this.atlas=null;this.line=null;_get(MacroEdge.prototype.__proto__||Object.getPrototypeOf(MacroEdge.prototype),'onRemove',this).call(this,layer);return this;}},{key:'draw',value:function draw(){var gl=this.gl;var layer=this.layer;var plot=layer.plot;// bind render target
plot.renderBuffer.bind();plot.renderBuffer.clear();// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE);// draw instances
this.line.drawInstanced(this.atlas,this.color);// unbind render target
plot.renderBuffer.unbind();// render framebuffer to the backbuffer
plot.renderBuffer.blitToScreen(this.layer.opacity);return this;}}]);return MacroEdge;}(lumo.WebGLVertexRenderer);module.exports=MacroEdge;

},{"../shape/Line":366,"lodash/defaultTo":306,"lumo":155}],378:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var defaultTo=require('lodash/defaultTo');var lumo=require('lumo');var Point=require('../shape/Point');var POINT_RADIUS=8;var POINT_RADIUS_INC=4;// const applyJitter = function(point, maxDist) {
// 	const angle = Math.random() * (Math.PI * 2);
// 	const dist = Math.random() * maxDist;
// 	point.x += Math.floor(Math.cos(angle) * dist);
// 	point.y += Math.floor(Math.sin(angle) * dist);
// };
var Micro=function(_lumo$WebGLInteractiv){_inherits(Micro,_lumo$WebGLInteractiv);function Micro(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Micro);var _this=_possibleConstructorReturn(this,(Micro.__proto__||Object.getPrototypeOf(Micro)).call(this,options));_this.point=null;_this.atlas=null;_this.color=defaultTo(options.color,[1.0,0.4,0.1,0.8]);_this.radius=defaultTo(options.radius,POINT_RADIUS);// this.jitter = defaultTo(options.radius, true);
// this.jitterDistance = defaultTo(options.jitterDistance, 10);
return _this;}_createClass(Micro,[{key:'addTile',value:function addTile(atlas,tile){var coord=tile.coord;var data=tile.data;var hits=data.hits;var vertices=data.points;var tileSize=this.layer.plot.tileSize;var xOffset=coord.x*tileSize;var yOffset=coord.y*tileSize;var radius=this.radius;var points=new Array(vertices.length/2);// const collisions = {};
for(var i=0;i<vertices.length/2;i++){var x=vertices[i*2];var y=vertices[i*2+1];// add jitter if specified
// if (this.jitter) {
// 	const hash = `${px.x}:${px.y}`;
// 	if (collisions[hash]) {
// 		applyJitter(px, this.jitterDistance);
// 	}
// 	collisions[hash] = true;
// }
// plot pixel coords
var px=x+xOffset;var py=y+yOffset;points[i]={x:x,y:y,radius:radius,minX:px-radius,maxX:px+radius,minY:py-radius,maxY:py+radius,tile:tile,data:hits?hits[i]:null};}this.addPoints(coord,points);atlas.set(coord.hash,vertices,points.length);}},{key:'removeTile',value:function removeTile(atlas,tile){var coord=tile.coord;atlas.delete(coord.hash);this.removePoints(coord);}},{key:'onAdd',value:function onAdd(layer){_get(Micro.prototype.__proto__||Object.getPrototypeOf(Micro.prototype),'onAdd',this).call(this,layer);this.point=new Point(this);this.atlas=this.createVertexAtlas({// position
0:{size:2,type:'FLOAT'}});return this;}},{key:'onRemove',value:function onRemove(layer){this.destroyVertexAtlas(this.atlas);this.atlas=null;this.point=null;_get(Micro.prototype.__proto__||Object.getPrototypeOf(Micro.prototype),'onRemove',this).call(this,layer);return this;}},{key:'draw',value:function draw(){var _this2=this;var gl=this.gl;var layer=this.layer;var plot=layer.plot;// bind render target
plot.renderBuffer.bind();plot.renderBuffer.clear();// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE);// draw instances
this.point.drawInstanced(this.atlas,this.radius,this.color);// render selected
this.selected.forEach(function(selected){_this2.point.drawIndividual(selected,_this2.radius+POINT_RADIUS_INC*2,_this2.color);});// render highlighted
if(this.highlighted&&this.selected.indexOf(this.highlighted)===-1){this.point.drawIndividual(this.highlighted,this.radius+POINT_RADIUS_INC,this.color);}// unbind render target
plot.renderBuffer.unbind();// render framebuffer to the backbuffer
plot.renderBuffer.blitToScreen(this.layer.opacity);return this;}}]);return Micro;}(lumo.WebGLInteractiveRenderer);module.exports=Micro;

},{"../shape/Point":367,"lodash/defaultTo":306,"lumo":155}],379:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var lumo=require('lumo');var TILE_ADD=Symbol();var TILE_REMOVE=Symbol();var SHADER_GLSL={vert:'\n\t\tprecision highp float;\n\t\tattribute vec2 aPosition;\n\t\tattribute vec2 aTextureCoord;\n\t\tuniform float uScale;\n\t\tuniform vec2 uTileOffset;\n\t\tuniform mat4 uProjectionMatrix;\n\t\tvarying vec2 vTextureCoord;\n\t\tvoid main() {\n\t\t\tvTextureCoord = aTextureCoord;\n\t\t\tvec2 wPosition = (aPosition * uScale) + uTileOffset;\n\t\t\tgl_Position = uProjectionMatrix * vec4(wPosition, 0.0, 1.0);\n\t\t}\n\t\t',frag:'\n\t\tprecision highp float;\n\t\tuniform sampler2D uTextureSampler;\n\t\tuniform float uOpacity;\n\t\tvarying vec2 vTextureCoord;\n\t\tvoid main() {\n\t\t\tvec4 color = texture2D(uTextureSampler, vec2(vTextureCoord.x, 1.0 - vTextureCoord.y));\n\t\t\tgl_FragColor = vec4(color.rgb, color.a * uOpacity);\n\t\t}\n\t\t'};var createQuad=function createQuad(gl,min,max){var vertices=new Float32Array(24);// positions
vertices[0]=min;vertices[1]=min;vertices[2]=max;vertices[3]=min;vertices[4]=max;vertices[5]=max;vertices[6]=min;vertices[7]=min;vertices[8]=max;vertices[9]=max;vertices[10]=min;vertices[11]=max;// uvs
vertices[12]=0;vertices[13]=0;vertices[14]=1;vertices[15]=0;vertices[16]=1;vertices[17]=1;vertices[18]=0;vertices[19]=0;vertices[20]=1;vertices[21]=1;vertices[22]=0;vertices[23]=1;// create quad buffer
return new lumo.VertexBuffer(gl,vertices,{0:{size:2,type:'FLOAT',byteOffset:0},1:{size:2,type:'FLOAT',byteOffset:2*6*4}},{count:6});};var Repeat=function(_lumo$WebGLRenderer){_inherits(Repeat,_lumo$WebGLRenderer);function Repeat(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,Repeat);var _this=_possibleConstructorReturn(this,(Repeat.__proto__||Object.getPrototypeOf(Repeat)).call(this,options));_this.quad=null;_this.texture=null;_this.handlers=new Map();return _this;}_createClass(Repeat,[{key:'onAdd',value:function onAdd(layer){var _this2=this;_get(Repeat.prototype.__proto__||Object.getPrototypeOf(Repeat.prototype),'onAdd',this).call(this,layer);this.quad=createQuad(this.gl,0,layer.plot.tileSize);this.shader=this.createShader(SHADER_GLSL);// create handlers
var add=function add(event){if(!_this2.texture){_this2.texture=new lumo.Texture(_this2.gl,event.tile.data);}};var remove=function remove(){_this2.texture=null;};// attach handlers
this.layer.on(lumo.TILE_ADD,add);this.layer.on(lumo.TILE_REMOVE,remove);// store handlers
this.handlers.set(TILE_ADD,add);this.handlers.set(TILE_REMOVE,remove);return this;}},{key:'onRemove',value:function onRemove(layer){// detach handlers
this.layer.removeListener(lumo.TILE_ADD,this.handlers.get(TILE_ADD));this.layer.removeListener(lumo.TILE_REMOVE,this.handlers.get(TILE_REMOVE));// delete handlers
this.handlers.delete(TILE_ADD);this.handlers.delete(TILE_REMOVE);this.texture=null;this.quad=null;this.shader=null;_get(Repeat.prototype.__proto__||Object.getPrototypeOf(Repeat.prototype),'onRemove',this).call(this,layer);return this;}},{key:'draw',value:function draw(){if(!this.texture){return;}var texture=this.texture;var gl=this.gl;var shader=this.shader;var quad=this.quad;var proj=this.getOrthoMatrix();var plot=this.layer.plot;// bind shader
shader.use();// set global uniforms
shader.setUniform('uProjectionMatrix',proj);shader.setUniform('uTextureSampler',0);shader.setUniform('uOpacity',this.layer.opacity);// set blending func
gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);// bind texture
texture.bind(0);// bind quad
quad.bind();// get all currently visible tile coords
var coords=plot.viewport.getVisibleCoords(plot.tileSize,plot.zoom,Math.round(plot.zoom),// get tiles closest to current zoom
plot.wraparound);// draw the tile
coords.forEach(function(coord){var scale=Math.pow(2,plot.zoom-coord.z);var tileOffset=[coord.x*scale*plot.tileSize-plot.viewport.x,coord.y*scale*plot.tileSize-plot.viewport.y];// set tile uniforms
shader.setUniform('uScale',scale);shader.setUniform('uTileOffset',tileOffset);// draw
quad.draw();});// unbind quad
quad.unbind();}}]);return Repeat;}(lumo.WebGLRenderer);module.exports=Repeat;

},{"lumo":155}],380:[function(require,module,exports){
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var _=require('lodash');var $=require('jquery');var stringify=require('json-stable-stringify');var RETRY_INTERVAL=5000;function getHost(){var loc=window.location;var new_uri=loc.protocol==='https:'?'wss:':'ws:';return new_uri+'//'+loc.host+loc.pathname;}function establishConnection(requestor,callback){requestor.socket=new WebSocket(getHost()+'ws/'+requestor.url);// on open
requestor.socket.onopen=function(){requestor.isOpen=true;console.log('Websocket connection established');callback(null,requestor);};// on message
requestor.socket.onmessage=function(event){var res=JSON.parse(event.data);// save success and error here, as we need to remove them to hash
// correctly
var success=res.success;var error=res.error;var hash=requestor.getHash(res);var request=requestor.requests.get(hash);requestor.requests.delete(hash);if(success){request.resolve(requestor.getURL());}else{request.reject(new Error(error));}};// on close
requestor.socket.onclose=function(){// log close only if connection was ever open
if(requestor.isOpen){console.warn('Websocket connection closed, attempting to re-connect in',RETRY_INTERVAL);}requestor.socket=null;requestor.isOpen=false;// reject all current requests
requestor.requests.forEach(function(key,request){request.reject();});// clear request map
requestor.requests=new Map();// attempt to re-establish connection
setTimeout(function(){establishConnection(requestor,function(){// once connection is re-established, send pending requests
requestor.pending.forEach(function(key,pending){var request=pending.request;var deferred=pending.deferred;var hash=pending.hash;requestor.requests.set(hash,deferred);requestor.socket.send(JSON.stringify(request));});// clear pending map
requestor.pending=new Map();});},RETRY_INTERVAL);};}function prune(current){_.forOwn(current,function(value,key){if(_.isUndefined(value)||_.isNull(value)||_.isNaN(value)||_.isString(value)&&_.isEmpty(value)||_.isObject(value)&&_.isEmpty(prune(value))){delete current[key];}});// remove any leftover undefined values from the delete
// operation on an array
if(_.isArray(current)){_.pull(current,undefined);}return current;}function pruneEmpty(obj){// do not modify the original object, create a clone instead
return prune(_.cloneDeep(obj));}function hashReq(req){req.error=undefined;req.success=undefined;return stringify(pruneEmpty(req));}var Requestor=function(){function Requestor(url,callback){_classCallCheck(this,Requestor);this.url=url;this.requests=new Map();this.pending=new Map();this.isOpen=false;establishConnection(this,callback);}_createClass(Requestor,[{key:'getHash',value:function getHash(req){return hashReq(req);}},{key:'getURL',value:function getURL(){return this.url;}},{key:'get',value:function get(req){var hash=this.getHash(req);if(!this.isOpen){var pending=this.pending.get(hash);if(pending){return pending.deferred.promise();}// if no connection, add request to pending queue
var _deferred=new $.Deferred();pending={hash:hash,request:req,deferred:_deferred};this.pending.set(hash,pending);return _deferred.promise();}var deferred=this.requests.get(hash);if(deferred){return deferred.promise();}deferred=new $.Deferred();this.requests.set(hash,deferred);this.socket.send(JSON.stringify(req));return deferred.promise();}},{key:'close',value:function close(){this.socket.onclose=null;this.socket.close();this.socket=null;}}]);return Requestor;}();module.exports=Requestor;

},{"jquery":192,"json-stable-stringify":193,"lodash":326}]},{},[344])(344)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXRDYWNoZS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fVWludDhBcnJheS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDbGFtcC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VFYWNoLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUhhc0luLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbERlZXAuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXRlcmF0ZWUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzSW4uanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWFwLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXMuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdEZ1bmN0aW9uLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxBcnJheXMuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxPYmplY3RzLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWF0Y2hEYXRhLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9scy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXkuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNTdHJpY3RDb21wYXJhYmxlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBUb0FycmF5LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXNJbi5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyQXJnLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVIYXMuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb0FycmF5LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9QYXRoLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL190b1NvdXJjZS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xhbXAuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL2RlYm91bmNlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWZhdWx0VG8uanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9mb3JJbi5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9oYXNJbi5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL21hcC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm93LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9wcm9wZXJ0eS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkFycmF5LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbG9kYXNoL3Rocm90dGxlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9TdHJpbmcuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvbHJ1LWNhY2hlL2xpYi9scnUtY2FjaGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9ub2RlX21vZHVsZXMvcHNldWRvbWFwL21hcC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL25vZGVfbW9kdWxlcy9wc2V1ZG9tYXAvcHNldWRvbWFwLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL3F1aWNrc2VsZWN0L2luZGV4LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL3JidXNoL2luZGV4LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vbm9kZV9tb2R1bGVzL3lhbGxpc3QveWFsbGlzdC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9jb3JlL0JvdW5kcy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9jb3JlL0Jyb3dzZXIuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvY29yZS9Db29yZC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9jb3JlL0tleWJvYXJkLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL2NvcmUvVGlsZS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9ldmVudC9DbGlja0V2ZW50LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL2V2ZW50L0RyYXdFdmVudC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9ldmVudC9FdmVudC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9ldmVudC9FdmVudFR5cGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvZXZlbnQvRnJhbWVFdmVudC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9ldmVudC9Nb3VzZUV2ZW50LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL2V2ZW50L1BhbkV2ZW50LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL2V2ZW50L1Jlc2l6ZUV2ZW50LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL2V2ZW50L1RpbGVFdmVudC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9ldmVudC9ab29tRXZlbnQuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvZXhwb3J0cy5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9sYXllci9MYXllci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9sYXllci9UaWxlUHlyYW1pZC5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9wbG90L1Bsb3QuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvcGxvdC9SZXF1ZXN0LmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3Bsb3QvVmlld3BvcnQuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvcGxvdC9hbmltYXRpb24vUGFuQW5pbWF0aW9uLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3Bsb3QvYW5pbWF0aW9uL1pvb21BbmltYXRpb24uanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvcGxvdC9oYW5kbGVyL0NsaWNrSGFuZGxlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9wbG90L2hhbmRsZXIvTW91c2VIYW5kbGVyLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3Bsb3QvaGFuZGxlci9QYW5IYW5kbGVyLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3Bsb3QvaGFuZGxlci9ab29tSGFuZGxlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9yZW5kZXIvUmVuZGVyZXIuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvcmVuZGVyL2RvbS9ET01SZW5kZXJlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9yZW5kZXIvZG9tL0hUTUxSZW5kZXJlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9yZW5kZXIvZG9tL1NWR1JlbmRlcmVyLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3JlbmRlci93ZWJnbC9JbnRlcmFjdGl2ZVJlbmRlcmVyLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3JlbmRlci93ZWJnbC9Qb2ludFJlbmRlcmVyLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3JlbmRlci93ZWJnbC9TaGFwZVJlbmRlcmVyLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3JlbmRlci93ZWJnbC9UZXh0dXJlUmVuZGVyZXIuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvcmVuZGVyL3dlYmdsL1dlYkdMSW50ZXJhY3RpdmVSZW5kZXJlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9yZW5kZXIvd2ViZ2wvV2ViR0xSZW5kZXJlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9yZW5kZXIvd2ViZ2wvV2ViR0xUZXh0dXJlUmVuZGVyZXIuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvcmVuZGVyL3dlYmdsL1dlYkdMVmVydGV4UmVuZGVyZXIuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvcmVuZGVyL3dlYmdsL3J0cmVlL0NvbGxpc2lvblR5cGUuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvcmVuZGVyL3dlYmdsL3J0cmVlL1JUcmVlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3JlbmRlci93ZWJnbC9zaGFkZXIvU2hhZGVyLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3JlbmRlci93ZWJnbC9zaGFkZXIvcGFyc2VTaGFkZXIuanMiLCIuLi8uLi9Ecm9wYm94L2dhbWVkZXYvbHVtby9zcmMvcmVuZGVyL3dlYmdsL3NoYWRlci9wcmVwcm9jZXNzLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3JlbmRlci93ZWJnbC90ZXh0dXJlL1JlbmRlckJ1ZmZlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9yZW5kZXIvd2ViZ2wvdGV4dHVyZS9UZXh0dXJlLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3JlbmRlci93ZWJnbC90ZXh0dXJlL1RleHR1cmVBcnJheS5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy9yZW5kZXIvd2ViZ2wvdmVydGV4L1ZlcnRleEF0bGFzLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3JlbmRlci93ZWJnbC92ZXJ0ZXgvVmVydGV4QnVmZmVyLmpzIiwiLi4vLi4vRHJvcGJveC9nYW1lZGV2L2x1bW8vc3JjL3V0aWwvbG9hZEJ1ZmZlci5qcyIsIi4uLy4uL0Ryb3Bib3gvZ2FtZWRldi9sdW1vL3NyYy91dGlsL2xvYWRJbWFnZS5qcyIsIm5vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIm5vZGVfbW9kdWxlcy9qc29uLXN0YWJsZS1zdHJpbmdpZnkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvanNvbmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9qc29uaWZ5L2xpYi9wYXJzZS5qcyIsIm5vZGVfbW9kdWxlcy9qc29uaWZ5L2xpYi9zdHJpbmdpZnkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRXh0cmVtdW0uanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmxhdHRlbi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHdC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VMdC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTdW0uanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVmFsdWVzLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzRmxhdHRlbmFibGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2ZsYXR0ZW4uanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzRW1wdHkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzTnVtYmVyLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9tYXguanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL21heEJ5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9taW4uanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL21pbkJ5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9zdW0uanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL3ZhbHVlcy5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdXRpbC9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qcyIsInNjcmlwdHMvZXhwb3J0cy5qcyIsInNjcmlwdHMvbGF5ZXIvY29yZS9EZWJ1Zy5qcyIsInNjcmlwdHMvbGF5ZXIvY29yZS9Hcm91cC5qcyIsInNjcmlwdHMvbGF5ZXIvY29yZS9MaXZlLmpzIiwic2NyaXB0cy9sYXllci9leHBvcnRzLmpzIiwic2NyaXB0cy9sYXllci90eXBlL0JpdmFyaWF0ZS5qcyIsInNjcmlwdHMvbGF5ZXIvdHlwZS9Db21tdW5pdHkuanMiLCJzY3JpcHRzL2xheWVyL3R5cGUvQ291bnQuanMiLCJzY3JpcHRzL2xheWVyL3R5cGUvRWRnZS5qcyIsInNjcmlwdHMvbGF5ZXIvdHlwZS9IZWF0bWFwLmpzIiwic2NyaXB0cy9sYXllci90eXBlL01hY3JvLmpzIiwic2NyaXB0cy9sYXllci90eXBlL01hY3JvRWRnZS5qcyIsInNjcmlwdHMvbGF5ZXIvdHlwZS9NaWNyby5qcyIsInNjcmlwdHMvbGF5ZXIvdHlwZS9SZXN0LmpzIiwic2NyaXB0cy9sYXllci90eXBlL1RvcFRlcm1Db3VudC5qcyIsInNjcmlwdHMvbWFwL01hcC5qcyIsInNjcmlwdHMvcmVuZGVyL2NvbG9yL0NvbG9yUmFtcC5qcyIsInNjcmlwdHMvcmVuZGVyL2V4cG9ydHMuanMiLCJzY3JpcHRzL3JlbmRlci9odG1sL0NvbW11bml0eUxhYmVsLmpzIiwic2NyaXB0cy9yZW5kZXIvaHRtbC9EZWJ1Zy5qcyIsInNjcmlwdHMvcmVuZGVyL2h0bWwvV29yZENsb3VkLmpzIiwic2NyaXB0cy9yZW5kZXIvbW9ydG9uL01vcnRvbi5qcyIsInNjcmlwdHMvcmVuZGVyL3NoYXBlL0xpbmUuanMiLCJzY3JpcHRzL3JlbmRlci9zaGFwZS9Qb2ludC5qcyIsInNjcmlwdHMvcmVuZGVyL3NoYXBlL1JhZGlhbFF1YWQuanMiLCJzY3JpcHRzL3JlbmRlci9zaGFwZS9SaW5nLmpzIiwic2NyaXB0cy9yZW5kZXIvc2hhcGUvU2VnbWVudGVkUmluZy5qcyIsInNjcmlwdHMvcmVuZGVyL3RyYW5zZm9ybS9UcmFuc2Zvcm0uanMiLCJzY3JpcHRzL3JlbmRlci93ZWJnbC9Db21tdW5pdHkuanMiLCJzY3JpcHRzL3JlbmRlci93ZWJnbC9Db21tdW5pdHlCdWNrZXQuanMiLCJzY3JpcHRzL3JlbmRlci93ZWJnbC9IZWF0bWFwLmpzIiwic2NyaXB0cy9yZW5kZXIvd2ViZ2wvSW1hZ2UuanMiLCJzY3JpcHRzL3JlbmRlci93ZWJnbC9NYWNyby5qcyIsInNjcmlwdHMvcmVuZGVyL3dlYmdsL01hY3JvRWRnZS5qcyIsInNjcmlwdHMvcmVuZGVyL3dlYmdsL01pY3JvLmpzIiwic2NyaXB0cy9yZW5kZXIvd2ViZ2wvUmVwZWF0LmpzIiwic2NyaXB0cy9yZXF1ZXN0L1JlcXVlc3Rvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTthQ0FBLEdBQUksV0FBWSxRQUFRLGNBQVIsQ0FBaEIsQ0FDSSxLQUFPLFFBQVEsU0FBUixDQURYLENBR0EsZ0VBQ0EsR0FBSSxVQUFXLFVBQVUsSUFBVixDQUFnQixVQUFoQixDQUFmLENBRUEsT0FBTyxPQUFQLENBQWlCLFFBQWpCOzs7YUNOQSxHQUFJLFdBQVksUUFBUSxjQUFSLENBQWhCLENBQ0ksV0FBYSxRQUFRLGVBQVIsQ0FEakIsQ0FFSSxRQUFVLFFBQVEsWUFBUixDQUZkLENBR0ksUUFBVSxRQUFRLFlBQVIsQ0FIZCxDQUlJLFFBQVUsUUFBUSxZQUFSLENBSmQsQ0FNQTs7Ozs7O0dBT0EsUUFBUyxLQUFULENBQWMsT0FBZCxDQUF1QixDQUNyQixHQUFJLE9BQVEsQ0FB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SUFBbkIsQ0FWdUMsQ0FBM0IsQ0FBYixDQWFBLEdBQU0sS0FBTSwyQkFBMkIsQ0FDdEMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FEc0MsQ0FFdEMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FGc0MsQ0FHdEMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FIc0MsQ0FJdEMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FKc0MsQ0FLdEMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FMc0MsQ0FNdEMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FOc0MsQ0FPdEMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FQc0MsQ0FRdEMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FSc0MsQ0FTdEMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FUc0MsQ0FBM0IsQ0FBWixDQVlBLEdBQU0sU0FBVSwyQkFBMkIsQ0FDMUMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FEMEMsQ0FFMUMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FGMEMsQ0FHMUMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FIMEMsQ0FJMUMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FKMEMsQ0FLMUMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FMMEMsQ0FNMUMsQ0FBQyxJQUFELENBQU8sSUFBUCxDQUFhLElBQWIsQ0FBbUIsSUFBbkIsQ0FOMEMsQ0FPMUMsQ0FBQyxJ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QUFNLElBUkssQ0FTWCxLQUFNLEdBVEssQ0FVWCxRQUFTLE9BVkUsQ0FXWCxZQUFhLFdBWEYsQ0FBWixDQWNBLFNBQVMsRUFBRSxNQUFYLEVBQXFCLENBQXJCLENBQ0EsU0FBUyxFQUFFLE1BQUYsQ0FBUyxDQUFsQixFQUF1QixDQUF2QixDQUNBLFNBQVMsRUFBRSxNQUFGLENBQVMsQ0FBbEIsRUFBdUIsTUFBdkIsQ0FDQSxTQUFTLEVBQUUsTUFBRixDQUFTLENBQWxCLEVBQXVCLFlBQVksQ0FBWixDQUF2QixDQUNBLFNBQVMsRUFBRSxNQUFGLENBQVMsQ0FBbEIsRUFBdUIsWUFBWSxDQUFaLENBQXZCLENBQ0EsU0FBUyxFQUFFLE1BQUYsQ0FBUyxDQUFsQixFQUF1QixZQUFZLENBQVosQ0FBdkIsQ0FDQSxTQUFTLEVBQUUsTUFBRixDQUFTLENBQWxCLEVBQXVCLFlBQVksQ0FBWixDQUF2QixDQUNBLFNBQVMsRUFBRSxNQUFGLENBQVMsQ0FBbEIsRUFBdUIsWUFBWSxDQUFaLENBQXZCLENBQ0EsU0FBUyxFQUFFLE1BQUYsQ0FBUyxDQUFsQixFQUF1QixZQUFZLENBQVosQ0FBdkIsQ0FDQSxTQUFTLEVBQUUsTUFBRixDQUFTLENBQWxCLEVBQXVCLFlBQVksQ0FBWixDQUF2QixDQUNBLFNBQVMsRUFBRSxNQUFGLENBQVMsRUFBbEIsRUFBd0IsWUFBWSxDQUFaLENBQXhCLENBQ0EsU0FBUyxFQUFFLE1BQUYsQ0FBUyxFQUFsQixFQUF3QixZQUFZLENBQVosQ0FBeEIsQ0FDQSxTQUFTLEVBQUUsTUFBRixDQUFTLEVBQWxCLEVBQXdCLFlBQVksQ0FBWixDQUF4QixDQUNBLFNBQVMsRUFBRSxNQUFGLENBQVMsRUFBbEIsRUFBd0IsWUFBWSxFQUFaLENBQXhCLENBQ0EsU0FBUyxFQUFFLE1BQUYsQ0FBUyxFQUFsQixFQUF3QixZQUFZLEVBQVosQ0FBeEIsQ0FDQSxTQUFTLEVBQUUsTUFBRixDQUFTLEVBQWxCLEVBQXdCLFlBQVksRUFBWixDQUF4QixDQUNBLFNBQVMsRUFBRSxNQUFGLENBQVMsRUFBbEIsRUFB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InNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgfVxuICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ2xhbXA7XG4iLCJ2YXIgYmFzZUZvck93biA9IHJlcXVpcmUoJy4vX2Jhc2VGb3JPd24nKSxcbiAgICBjcmVhdGVCYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VFYWNoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKi9cbnZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VFYWNoO1xuIiwidmFyIGNyZWF0ZUJhc2VGb3IgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRm9yJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yO1xuIiwidmFyIGJhc2VGb3IgPSByZXF1aXJlKCcuL19iYXNlRm9yJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvck93bjtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXQ7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldEFsbEtleXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhc0luO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWw7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gIWxlbmd0aDtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWF0Y2g7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgYmFzZU1hdGNoZXMgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlcycpLFxuICAgIGJhc2VNYXRjaGVzUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlc1Byb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIHByb3BlcnR5ID0gcmVxdWlyZSgnLi9wcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJdGVyYXRlZTtcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzSW4gPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5c0luO1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWFwO1xuIiwidmFyIGJhc2VJc01hdGNoID0gcmVxdWlyZSgnLi9fYmFzZUlzTWF0Y2gnKSxcbiAgICBnZXRNYXRjaERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXRjaERhdGEnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzO1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKSxcbiAgICBnZXQgPSByZXF1aXJlKCcuL2dldCcpLFxuICAgIGhhc0luID0gcmVxdWlyZSgnLi9oYXNJbicpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5O1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eURlZXA7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUaW1lcztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0RnVuY3Rpb247XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0UGF0aDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCJ2YXIgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUVhY2g7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRm9yO1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgbWFwVG9BcnJheSA9IHJlcXVpcmUoJy4vX21hcFRvQXJyYXknKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQnlUYWc7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1BhdGg7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCJ2YXIgbWVtb2l6ZSA9IHJlcXVpcmUoJy4vbWVtb2l6ZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZUNhcHBlZDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzSW47XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVMZWFkaW5nRG90ID0gL15cXC4vLFxuICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChyZUxlYWRpbmdEb3QudGVzdChzdHJpbmcpKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsInZhciBiYXNlQ2xhbXAgPSByZXF1aXJlKCcuL19iYXNlQ2xhbXAnKSxcbiAgICB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqXG4gKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE51bWJlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICogLy8gPT4gLTVcbiAqXG4gKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gKiAvLyA9PiA1XG4gKi9cbmZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdXBwZXIgPSBsb3dlcjtcbiAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICB9XG4gIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gIH1cbiAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYW1wO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIG5vdyA9IHJlcXVpcmUoJy4vbm93JyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCIvKipcbiAqIENoZWNrcyBgdmFsdWVgIHRvIGRldGVybWluZSB3aGV0aGVyIGEgZGVmYXVsdCB2YWx1ZSBzaG91bGQgYmUgcmV0dXJuZWQgaW5cbiAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAqIG9yIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICogLy8gPT4gMVxuICpcbiAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICogLy8gPT4gMTBcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0VG87XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBiYXNlRm9yID0gcmVxdWlyZSgnLi9fYmFzZUZvcicpLFxuICAgIGNhc3RGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2Nhc3RGdW5jdGlvbicpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQHNlZSBfLmZvckluUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICovXG5mdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgID8gb2JqZWN0XG4gICAgOiBiYXNlRm9yKG9iamVjdCwgY2FzdEZ1bmN0aW9uKGl0ZXJhdGVlKSwga2V5c0luKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JJbjtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0O1xuIiwidmFyIGJhc2VIYXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VIYXNJbicpLFxuICAgIGhhc1BhdGggPSByZXF1aXJlKCcuL19oYXNQYXRoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNJbjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKSxcbiAgICBzdHViRmFsc2UgPSByZXF1aXJlKCcuL3N0dWJGYWxzZScpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNCdWZmZXI7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzSW4gPSByZXF1aXJlKCcuL19iYXNlS2V5c0luJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZU1hcCA9IHJlcXVpcmUoJy4vX2Jhc2VNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF1cbiAqXG4gKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICogXTtcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKi9cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm93O1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpLFxuICAgIGJhc2VQcm9wZXJ0eURlZXAgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHlEZWVwJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbXG4gKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAqIF07XG4gKlxuICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICogLy8gPT4gWzIsIDFdXG4gKlxuICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAqIC8vID0+IFsxLCAyXVxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViQXJyYXk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsIm1vZHVsZS5leHBvcnRzID0gTFJVQ2FjaGVcblxuLy8gVGhpcyB3aWxsIGJlIGEgcHJvcGVyIGl0ZXJhYmxlICdNYXAnIGluIGVuZ2luZXMgdGhhdCBzdXBwb3J0IGl0LFxuLy8gb3IgYSBmYWtleS1mYWtlIFBzZXVkb01hcCBpbiBvbGRlciB2ZXJzaW9ucy5cbnZhciBNYXAgPSByZXF1aXJlKCdwc2V1ZG9tYXAnKVxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJylcblxuLy8gQSBsaW5rZWQgbGlzdCB0byBrZWVwIHRyYWNrIG9mIHJlY2VudGx5LXVzZWQtbmVzc1xudmFyIFlhbGxpc3QgPSByZXF1aXJlKCd5YWxsaXN0JylcblxuLy8gdXNlIHN5bWJvbHMgaWYgcG9zc2libGUsIG90aGVyd2lzZSBqdXN0IF9wcm9wc1xudmFyIHN5bWJvbHMgPSB7fVxudmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbidcbnZhciBtYWtlU3ltYm9sXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChoYXNTeW1ib2wpIHtcbiAgbWFrZVN5bWJvbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gU3ltYm9sLmZvcihrZXkpXG4gIH1cbn0gZWxzZSB7XG4gIG1ha2VTeW1ib2wgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICdfJyArIGtleVxuICB9XG59XG5cbmZ1bmN0aW9uIHByaXYgKG9iaiwga2V5LCB2YWwpIHtcbiAgdmFyIHN5bVxuICBpZiAoc3ltYm9sc1trZXldKSB7XG4gICAgc3ltID0gc3ltYm9sc1trZXldXG4gIH0gZWxzZSB7XG4gICAgc3ltID0gbWFrZVN5bWJvbChrZXkpXG4gICAgc3ltYm9sc1trZXldID0gc3ltXG4gIH1cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICByZXR1cm4gb2JqW3N5bV1cbiAgfSBlbHNlIHtcbiAgICBvYmpbc3ltXSA9IHZhbFxuICAgIHJldHVybiB2YWxcbiAgfVxufVxuXG5mdW5jdGlvbiBuYWl2ZUxlbmd0aCAoKSB7IHJldHVybiAxIH1cblxuLy8gbHJ1TGlzdCBpcyBhIHlhbGxpc3Qgd2hlcmUgdGhlIGhlYWQgaXMgdGhlIHlvdW5nZXN0XG4vLyBpdGVtLCBhbmQgdGhlIHRhaWwgaXMgdGhlIG9sZGVzdC4gIHRoZSBsaXN0IGNvbnRhaW5zIHRoZSBIaXRcbi8vIG9iamVjdHMgYXMgdGhlIGVudHJpZXMuXG4vLyBFYWNoIEhpdCBvYmplY3QgaGFzIGEgcmVmZXJlbmNlIHRvIGl0cyBZYWxsaXN0Lk5vZGUuICBUaGlzXG4vLyBuZXZlciBjaGFuZ2VzLlxuLy9cbi8vIGNhY2hlIGlzIGEgTWFwIChvciBQc2V1ZG9NYXApIHRoYXQgbWF0Y2hlcyB0aGUga2V5cyB0b1xuLy8gdGhlIFlhbGxpc3QuTm9kZSBvYmplY3QuXG5mdW5jdGlvbiBMUlVDYWNoZSAob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTFJVQ2FjaGUpKSB7XG4gICAgcmV0dXJuIG5ldyBMUlVDYWNoZShvcHRpb25zKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuICAgIG9wdGlvbnMgPSB7IG1heDogb3B0aW9ucyB9XG4gIH1cblxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHZhciBtYXggPSBwcml2KHRoaXMsICdtYXgnLCBvcHRpb25zLm1heClcbiAgLy8gS2luZCBvZiB3ZWlyZCB0byBoYXZlIGEgZGVmYXVsdCBtYXggb2YgSW5maW5pdHksIGJ1dCBvaCB3ZWxsLlxuICBpZiAoIW1heCB8fFxuICAgICAgISh0eXBlb2YgbWF4ID09PSAnbnVtYmVyJykgfHxcbiAgICAgIG1heCA8PSAwKSB7XG4gICAgcHJpdih0aGlzLCAnbWF4JywgSW5maW5pdHkpXG4gIH1cblxuICB2YXIgbGMgPSBvcHRpb25zLmxlbmd0aCB8fCBuYWl2ZUxlbmd0aFxuICBpZiAodHlwZW9mIGxjICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgbGMgPSBuYWl2ZUxlbmd0aFxuICB9XG4gIHByaXYodGhpcywgJ2xlbmd0aENhbGN1bGF0b3InLCBsYylcblxuICBwcml2KHRoaXMsICdhbGxvd1N0YWxlJywgb3B0aW9ucy5zdGFsZSB8fCBmYWxzZSlcbiAgcHJpdih0aGlzLCAnbWF4QWdlJywgb3B0aW9ucy5tYXhBZ2UgfHwgMClcbiAgcHJpdih0aGlzLCAnZGlzcG9zZScsIG9wdGlvbnMuZGlzcG9zZSlcbiAgdGhpcy5yZXNldCgpXG59XG5cbi8vIHJlc2l6ZSB0aGUgY2FjaGUgd2hlbiB0aGUgbWF4IGNoYW5nZXMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTFJVQ2FjaGUucHJvdG90eXBlLCAnbWF4Jywge1xuICBzZXQ6IGZ1bmN0aW9uIChtTCkge1xuICAgIGlmICghbUwgfHwgISh0eXBlb2YgbUwgPT09ICdudW1iZXInKSB8fCBtTCA8PSAwKSB7XG4gICAgICBtTCA9IEluZmluaXR5XG4gICAgfVxuICAgIHByaXYodGhpcywgJ21heCcsIG1MKVxuICAgIHRyaW0odGhpcylcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHByaXYodGhpcywgJ21heCcpXG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWVcbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShMUlVDYWNoZS5wcm90b3R5cGUsICdhbGxvd1N0YWxlJywge1xuICBzZXQ6IGZ1bmN0aW9uIChhbGxvd1N0YWxlKSB7XG4gICAgcHJpdih0aGlzLCAnYWxsb3dTdGFsZScsICEhYWxsb3dTdGFsZSlcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHByaXYodGhpcywgJ2FsbG93U3RhbGUnKVxuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlXG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTFJVQ2FjaGUucHJvdG90eXBlLCAnbWF4QWdlJywge1xuICBzZXQ6IGZ1bmN0aW9uIChtQSkge1xuICAgIGlmICghbUEgfHwgISh0eXBlb2YgbUEgPT09ICdudW1iZXInKSB8fCBtQSA8IDApIHtcbiAgICAgIG1BID0gMFxuICAgIH1cbiAgICBwcml2KHRoaXMsICdtYXhBZ2UnLCBtQSlcbiAgICB0cmltKHRoaXMpXG4gIH0sXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcml2KHRoaXMsICdtYXhBZ2UnKVxuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlXG59KVxuXG4vLyByZXNpemUgdGhlIGNhY2hlIHdoZW4gdGhlIGxlbmd0aENhbGN1bGF0b3IgY2hhbmdlcy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShMUlVDYWNoZS5wcm90b3R5cGUsICdsZW5ndGhDYWxjdWxhdG9yJywge1xuICBzZXQ6IGZ1bmN0aW9uIChsQykge1xuICAgIGlmICh0eXBlb2YgbEMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGxDID0gbmFpdmVMZW5ndGhcbiAgICB9XG4gICAgaWYgKGxDICE9PSBwcml2KHRoaXMsICdsZW5ndGhDYWxjdWxhdG9yJykpIHtcbiAgICAgIHByaXYodGhpcywgJ2xlbmd0aENhbGN1bGF0b3InLCBsQylcbiAgICAgIHByaXYodGhpcywgJ2xlbmd0aCcsIDApXG4gICAgICBwcml2KHRoaXMsICdscnVMaXN0JykuZm9yRWFjaChmdW5jdGlvbiAoaGl0KSB7XG4gICAgICAgIGhpdC5sZW5ndGggPSBwcml2KHRoaXMsICdsZW5ndGhDYWxjdWxhdG9yJykuY2FsbCh0aGlzLCBoaXQudmFsdWUsIGhpdC5rZXkpXG4gICAgICAgIHByaXYodGhpcywgJ2xlbmd0aCcsIHByaXYodGhpcywgJ2xlbmd0aCcpICsgaGl0Lmxlbmd0aClcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICAgIHRyaW0odGhpcylcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcml2KHRoaXMsICdsZW5ndGhDYWxjdWxhdG9yJykgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KExSVUNhY2hlLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcml2KHRoaXMsICdsZW5ndGgnKSB9LFxuICBlbnVtZXJhYmxlOiB0cnVlXG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTFJVQ2FjaGUucHJvdG90eXBlLCAnaXRlbUNvdW50Jywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByaXYodGhpcywgJ2xydUxpc3QnKS5sZW5ndGggfSxcbiAgZW51bWVyYWJsZTogdHJ1ZVxufSlcblxuTFJVQ2FjaGUucHJvdG90eXBlLnJmb3JFYWNoID0gZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgZm9yICh2YXIgd2Fsa2VyID0gcHJpdih0aGlzLCAnbHJ1TGlzdCcpLnRhaWw7IHdhbGtlciAhPT0gbnVsbDspIHtcbiAgICB2YXIgcHJldiA9IHdhbGtlci5wcmV2XG4gICAgZm9yRWFjaFN0ZXAodGhpcywgZm4sIHdhbGtlciwgdGhpc3ApXG4gICAgd2Fsa2VyID0gcHJldlxuICB9XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTdGVwIChzZWxmLCBmbiwgbm9kZSwgdGhpc3ApIHtcbiAgdmFyIGhpdCA9IG5vZGUudmFsdWVcbiAgaWYgKGlzU3RhbGUoc2VsZiwgaGl0KSkge1xuICAgIGRlbChzZWxmLCBub2RlKVxuICAgIGlmICghcHJpdihzZWxmLCAnYWxsb3dTdGFsZScpKSB7XG4gICAgICBoaXQgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cbiAgaWYgKGhpdCkge1xuICAgIGZuLmNhbGwodGhpc3AsIGhpdC52YWx1ZSwgaGl0LmtleSwgc2VsZilcbiAgfVxufVxuXG5MUlVDYWNoZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChmbiwgdGhpc3ApIHtcbiAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gIGZvciAodmFyIHdhbGtlciA9IHByaXYodGhpcywgJ2xydUxpc3QnKS5oZWFkOyB3YWxrZXIgIT09IG51bGw7KSB7XG4gICAgdmFyIG5leHQgPSB3YWxrZXIubmV4dFxuICAgIGZvckVhY2hTdGVwKHRoaXMsIGZuLCB3YWxrZXIsIHRoaXNwKVxuICAgIHdhbGtlciA9IG5leHRcbiAgfVxufVxuXG5MUlVDYWNoZS5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHByaXYodGhpcywgJ2xydUxpc3QnKS50b0FycmF5KCkubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIGsua2V5XG4gIH0sIHRoaXMpXG59XG5cbkxSVUNhY2hlLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBwcml2KHRoaXMsICdscnVMaXN0JykudG9BcnJheSgpLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBrLnZhbHVlXG4gIH0sIHRoaXMpXG59XG5cbkxSVUNhY2hlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHByaXYodGhpcywgJ2Rpc3Bvc2UnKSAmJlxuICAgICAgcHJpdih0aGlzLCAnbHJ1TGlzdCcpICYmXG4gICAgICBwcml2KHRoaXMsICdscnVMaXN0JykubGVuZ3RoKSB7XG4gICAgcHJpdih0aGlzLCAnbHJ1TGlzdCcpLmZvckVhY2goZnVuY3Rpb24gKGhpdCkge1xuICAgICAgcHJpdih0aGlzLCAnZGlzcG9zZScpLmNhbGwodGhpcywgaGl0LmtleSwgaGl0LnZhbHVlKVxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBwcml2KHRoaXMsICdjYWNoZScsIG5ldyBNYXAoKSkgLy8gaGFzaCBvZiBpdGVtcyBieSBrZXlcbiAgcHJpdih0aGlzLCAnbHJ1TGlzdCcsIG5ldyBZYWxsaXN0KCkpIC8vIGxpc3Qgb2YgaXRlbXMgaW4gb3JkZXIgb2YgdXNlIHJlY2VuY3lcbiAgcHJpdih0aGlzLCAnbGVuZ3RoJywgMCkgLy8gbGVuZ3RoIG9mIGl0ZW1zIGluIHRoZSBsaXN0XG59XG5cbkxSVUNhY2hlLnByb3RvdHlwZS5kdW1wID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcHJpdih0aGlzLCAnbHJ1TGlzdCcpLm1hcChmdW5jdGlvbiAoaGl0KSB7XG4gICAgaWYgKCFpc1N0YWxlKHRoaXMsIGhpdCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGs6IGhpdC5rZXksXG4gICAgICAgIHY6IGhpdC52YWx1ZSxcbiAgICAgICAgZTogaGl0Lm5vdyArIChoaXQubWF4QWdlIHx8IDApXG4gICAgICB9XG4gICAgfVxuICB9LCB0aGlzKS50b0FycmF5KCkuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgcmV0dXJuIGhcbiAgfSlcbn1cblxuTFJVQ2FjaGUucHJvdG90eXBlLmR1bXBMcnUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBwcml2KHRoaXMsICdscnVMaXN0Jylcbn1cblxuTFJVQ2FjaGUucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiAobiwgb3B0cykge1xuICB2YXIgc3RyID0gJ0xSVUNhY2hlIHsnXG4gIHZhciBleHRyYXMgPSBmYWxzZVxuXG4gIHZhciBhcyA9IHByaXYodGhpcywgJ2FsbG93U3RhbGUnKVxuICBpZiAoYXMpIHtcbiAgICBzdHIgKz0gJ1xcbiAgYWxsb3dTdGFsZTogdHJ1ZSdcbiAgICBleHRyYXMgPSB0cnVlXG4gIH1cblxuICB2YXIgbWF4ID0gcHJpdih0aGlzLCAnbWF4JylcbiAgaWYgKG1heCAmJiBtYXggIT09IEluZmluaXR5KSB7XG4gICAgaWYgKGV4dHJhcykge1xuICAgICAgc3RyICs9ICcsJ1xuICAgIH1cbiAgICBzdHIgKz0gJ1xcbiAgbWF4OiAnICsgdXRpbC5pbnNwZWN0KG1heCwgb3B0cylcbiAgICBleHRyYXMgPSB0cnVlXG4gIH1cblxuICB2YXIgbWF4QWdlID0gcHJpdih0aGlzLCAnbWF4QWdlJylcbiAgaWYgKG1heEFnZSkge1xuICAgIGlmIChleHRyYXMpIHtcbiAgICAgIHN0ciArPSAnLCdcbiAgICB9XG4gICAgc3RyICs9ICdcXG4gIG1heEFnZTogJyArIHV0aWwuaW5zcGVjdChtYXhBZ2UsIG9wdHMpXG4gICAgZXh0cmFzID0gdHJ1ZVxuICB9XG5cbiAgdmFyIGxjID0gcHJpdih0aGlzLCAnbGVuZ3RoQ2FsY3VsYXRvcicpXG4gIGlmIChsYyAmJiBsYyAhPT0gbmFpdmVMZW5ndGgpIHtcbiAgICBpZiAoZXh0cmFzKSB7XG4gICAgICBzdHIgKz0gJywnXG4gICAgfVxuICAgIHN0ciArPSAnXFxuICBsZW5ndGg6ICcgKyB1dGlsLmluc3BlY3QocHJpdih0aGlzLCAnbGVuZ3RoJyksIG9wdHMpXG4gICAgZXh0cmFzID0gdHJ1ZVxuICB9XG5cbiAgdmFyIGRpZEZpcnN0ID0gZmFsc2VcbiAgcHJpdih0aGlzLCAnbHJ1TGlzdCcpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoZGlkRmlyc3QpIHtcbiAgICAgIHN0ciArPSAnLFxcbiAgJ1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZXh0cmFzKSB7XG4gICAgICAgIHN0ciArPSAnLFxcbidcbiAgICAgIH1cbiAgICAgIGRpZEZpcnN0ID0gdHJ1ZVxuICAgICAgc3RyICs9ICdcXG4gICdcbiAgICB9XG4gICAgdmFyIGtleSA9IHV0aWwuaW5zcGVjdChpdGVtLmtleSkuc3BsaXQoJ1xcbicpLmpvaW4oJ1xcbiAgJylcbiAgICB2YXIgdmFsID0geyB2YWx1ZTogaXRlbS52YWx1ZSB9XG4gICAgaWYgKGl0ZW0ubWF4QWdlICE9PSBtYXhBZ2UpIHtcbiAgICAgIHZhbC5tYXhBZ2UgPSBpdGVtLm1heEFnZVxuICAgIH1cbiAgICBpZiAobGMgIT09IG5haXZlTGVuZ3RoKSB7XG4gICAgICB2YWwubGVuZ3RoID0gaXRlbS5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGlzU3RhbGUodGhpcywgaXRlbSkpIHtcbiAgICAgIHZhbC5zdGFsZSA9IHRydWVcbiAgICB9XG5cbiAgICB2YWwgPSB1dGlsLmluc3BlY3QodmFsLCBvcHRzKS5zcGxpdCgnXFxuJykuam9pbignXFxuICAnKVxuICAgIHN0ciArPSBrZXkgKyAnID0+ICcgKyB2YWxcbiAgfSlcblxuICBpZiAoZGlkRmlyc3QgfHwgZXh0cmFzKSB7XG4gICAgc3RyICs9ICdcXG4nXG4gIH1cbiAgc3RyICs9ICd9J1xuXG4gIHJldHVybiBzdHJcbn1cblxuTFJVQ2FjaGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBtYXhBZ2UpIHtcbiAgbWF4QWdlID0gbWF4QWdlIHx8IHByaXYodGhpcywgJ21heEFnZScpXG5cbiAgdmFyIG5vdyA9IG1heEFnZSA/IERhdGUubm93KCkgOiAwXG4gIHZhciBsZW4gPSBwcml2KHRoaXMsICdsZW5ndGhDYWxjdWxhdG9yJykuY2FsbCh0aGlzLCB2YWx1ZSwga2V5KVxuXG4gIGlmIChwcml2KHRoaXMsICdjYWNoZScpLmhhcyhrZXkpKSB7XG4gICAgaWYgKGxlbiA+IHByaXYodGhpcywgJ21heCcpKSB7XG4gICAgICBkZWwodGhpcywgcHJpdih0aGlzLCAnY2FjaGUnKS5nZXQoa2V5KSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHZhciBub2RlID0gcHJpdih0aGlzLCAnY2FjaGUnKS5nZXQoa2V5KVxuICAgIHZhciBpdGVtID0gbm9kZS52YWx1ZVxuXG4gICAgLy8gZGlzcG9zZSBvZiB0aGUgb2xkIG9uZSBiZWZvcmUgb3ZlcndyaXRpbmdcbiAgICBpZiAocHJpdih0aGlzLCAnZGlzcG9zZScpKSB7XG4gICAgICBwcml2KHRoaXMsICdkaXNwb3NlJykuY2FsbCh0aGlzLCBrZXksIGl0ZW0udmFsdWUpXG4gICAgfVxuXG4gICAgaXRlbS5ub3cgPSBub3dcbiAgICBpdGVtLm1heEFnZSA9IG1heEFnZVxuICAgIGl0ZW0udmFsdWUgPSB2YWx1ZVxuICAgIHByaXYodGhpcywgJ2xlbmd0aCcsIHByaXYodGhpcywgJ2xlbmd0aCcpICsgKGxlbiAtIGl0ZW0ubGVuZ3RoKSlcbiAgICBpdGVtLmxlbmd0aCA9IGxlblxuICAgIHRoaXMuZ2V0KGtleSlcbiAgICB0cmltKHRoaXMpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHZhciBoaXQgPSBuZXcgRW50cnkoa2V5LCB2YWx1ZSwgbGVuLCBub3csIG1heEFnZSlcblxuICAvLyBvdmVyc2l6ZWQgb2JqZWN0cyBmYWxsIG91dCBvZiBjYWNoZSBhdXRvbWF0aWNhbGx5LlxuICBpZiAoaGl0Lmxlbmd0aCA+IHByaXYodGhpcywgJ21heCcpKSB7XG4gICAgaWYgKHByaXYodGhpcywgJ2Rpc3Bvc2UnKSkge1xuICAgICAgcHJpdih0aGlzLCAnZGlzcG9zZScpLmNhbGwodGhpcywga2V5LCB2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBwcml2KHRoaXMsICdsZW5ndGgnLCBwcml2KHRoaXMsICdsZW5ndGgnKSArIGhpdC5sZW5ndGgpXG4gIHByaXYodGhpcywgJ2xydUxpc3QnKS51bnNoaWZ0KGhpdClcbiAgcHJpdih0aGlzLCAnY2FjaGUnKS5zZXQoa2V5LCBwcml2KHRoaXMsICdscnVMaXN0JykuaGVhZClcbiAgdHJpbSh0aGlzKVxuICByZXR1cm4gdHJ1ZVxufVxuXG5MUlVDYWNoZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICBpZiAoIXByaXYodGhpcywgJ2NhY2hlJykuaGFzKGtleSkpIHJldHVybiBmYWxzZVxuICB2YXIgaGl0ID0gcHJpdih0aGlzLCAnY2FjaGUnKS5nZXQoa2V5KS52YWx1ZVxuICBpZiAoaXNTdGFsZSh0aGlzLCBoaXQpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuTFJVQ2FjaGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGdldCh0aGlzLCBrZXksIHRydWUpXG59XG5cbkxSVUNhY2hlLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gZ2V0KHRoaXMsIGtleSwgZmFsc2UpXG59XG5cbkxSVUNhY2hlLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBub2RlID0gcHJpdih0aGlzLCAnbHJ1TGlzdCcpLnRhaWxcbiAgaWYgKCFub2RlKSByZXR1cm4gbnVsbFxuICBkZWwodGhpcywgbm9kZSlcbiAgcmV0dXJuIG5vZGUudmFsdWVcbn1cblxuTFJVQ2FjaGUucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgZGVsKHRoaXMsIHByaXYodGhpcywgJ2NhY2hlJykuZ2V0KGtleSkpXG59XG5cbkxSVUNhY2hlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGFycikge1xuICAvLyByZXNldCB0aGUgY2FjaGVcbiAgdGhpcy5yZXNldCgpXG5cbiAgdmFyIG5vdyA9IERhdGUubm93KClcbiAgLy8gQSBwcmV2aW91cyBzZXJpYWxpemVkIGNhY2hlIGhhcyB0aGUgbW9zdCByZWNlbnQgaXRlbXMgZmlyc3RcbiAgZm9yICh2YXIgbCA9IGFyci5sZW5ndGggLSAxOyBsID49IDA7IGwtLSkge1xuICAgIHZhciBoaXQgPSBhcnJbbF1cbiAgICB2YXIgZXhwaXJlc0F0ID0gaGl0LmUgfHwgMFxuICAgIGlmIChleHBpcmVzQXQgPT09IDApIHtcbiAgICAgIC8vIHRoZSBpdGVtIHdhcyBjcmVhdGVkIHdpdGhvdXQgZXhwaXJhdGlvbiBpbiBhIG5vbiBhZ2VkIGNhY2hlXG4gICAgICB0aGlzLnNldChoaXQuaywgaGl0LnYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtYXhBZ2UgPSBleHBpcmVzQXQgLSBub3dcbiAgICAgIC8vIGRvbnQgYWRkIGFscmVhZHkgZXhwaXJlZCBpdGVtc1xuICAgICAgaWYgKG1heEFnZSA+IDApIHtcbiAgICAgICAgdGhpcy5zZXQoaGl0LmssIGhpdC52LCBtYXhBZ2UpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkxSVUNhY2hlLnByb3RvdHlwZS5wcnVuZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHByaXYodGhpcywgJ2NhY2hlJykuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIGdldChzZWxmLCBrZXksIGZhbHNlKVxuICB9KVxufVxuXG5mdW5jdGlvbiBnZXQgKHNlbGYsIGtleSwgZG9Vc2UpIHtcbiAgdmFyIG5vZGUgPSBwcml2KHNlbGYsICdjYWNoZScpLmdldChrZXkpXG4gIGlmIChub2RlKSB7XG4gICAgdmFyIGhpdCA9IG5vZGUudmFsdWVcbiAgICBpZiAoaXNTdGFsZShzZWxmLCBoaXQpKSB7XG4gICAgICBkZWwoc2VsZiwgbm9kZSlcbiAgICAgIGlmICghcHJpdihzZWxmLCAnYWxsb3dTdGFsZScpKSBoaXQgPSB1bmRlZmluZWRcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRvVXNlKSB7XG4gICAgICAgIHByaXYoc2VsZiwgJ2xydUxpc3QnKS51bnNoaWZ0Tm9kZShub2RlKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaGl0KSBoaXQgPSBoaXQudmFsdWVcbiAgfVxuICByZXR1cm4gaGl0XG59XG5cbmZ1bmN0aW9uIGlzU3RhbGUgKHNlbGYsIGhpdCkge1xuICBpZiAoIWhpdCB8fCAoIWhpdC5tYXhBZ2UgJiYgIXByaXYoc2VsZiwgJ21heEFnZScpKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBzdGFsZSA9IGZhbHNlXG4gIHZhciBkaWZmID0gRGF0ZS5ub3coKSAtIGhpdC5ub3dcbiAgaWYgKGhpdC5tYXhBZ2UpIHtcbiAgICBzdGFsZSA9IGRpZmYgPiBoaXQubWF4QWdlXG4gIH0gZWxzZSB7XG4gICAgc3RhbGUgPSBwcml2KHNlbGYsICdtYXhBZ2UnKSAmJiAoZGlmZiA+IHByaXYoc2VsZiwgJ21heEFnZScpKVxuICB9XG4gIHJldHVybiBzdGFsZVxufVxuXG5mdW5jdGlvbiB0cmltIChzZWxmKSB7XG4gIGlmIChwcml2KHNlbGYsICdsZW5ndGgnKSA+IHByaXYoc2VsZiwgJ21heCcpKSB7XG4gICAgZm9yICh2YXIgd2Fsa2VyID0gcHJpdihzZWxmLCAnbHJ1TGlzdCcpLnRhaWw7XG4gICAgICAgICBwcml2KHNlbGYsICdsZW5ndGgnKSA+IHByaXYoc2VsZiwgJ21heCcpICYmIHdhbGtlciAhPT0gbnVsbDspIHtcbiAgICAgIC8vIFdlIGtub3cgdGhhdCB3ZSdyZSBhYm91dCB0byBkZWxldGUgdGhpcyBvbmUsIGFuZCBhbHNvXG4gICAgICAvLyB3aGF0IHRoZSBuZXh0IGxlYXN0IHJlY2VudGx5IHVzZWQga2V5IHdpbGwgYmUsIHNvIGp1c3RcbiAgICAgIC8vIGdvIGFoZWFkIGFuZCBzZXQgaXQgbm93LlxuICAgICAgdmFyIHByZXYgPSB3YWxrZXIucHJldlxuICAgICAgZGVsKHNlbGYsIHdhbGtlcilcbiAgICAgIHdhbGtlciA9IHByZXZcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVsIChzZWxmLCBub2RlKSB7XG4gIGlmIChub2RlKSB7XG4gICAgdmFyIGhpdCA9IG5vZGUudmFsdWVcbiAgICBpZiAocHJpdihzZWxmLCAnZGlzcG9zZScpKSB7XG4gICAgICBwcml2KHNlbGYsICdkaXNwb3NlJykuY2FsbCh0aGlzLCBoaXQua2V5LCBoaXQudmFsdWUpXG4gICAgfVxuICAgIHByaXYoc2VsZiwgJ2xlbmd0aCcsIHByaXYoc2VsZiwgJ2xlbmd0aCcpIC0gaGl0Lmxlbmd0aClcbiAgICBwcml2KHNlbGYsICdjYWNoZScpLmRlbGV0ZShoaXQua2V5KVxuICAgIHByaXYoc2VsZiwgJ2xydUxpc3QnKS5yZW1vdmVOb2RlKG5vZGUpXG4gIH1cbn1cblxuLy8gY2xhc3N5LCBzaW5jZSBWOCBwcmVmZXJzIHByZWRpY3RhYmxlIG9iamVjdHMuXG5mdW5jdGlvbiBFbnRyeSAoa2V5LCB2YWx1ZSwgbGVuZ3RoLCBub3csIG1heEFnZSkge1xuICB0aGlzLmtleSA9IGtleVxuICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgdGhpcy5sZW5ndGggPSBsZW5ndGhcbiAgdGhpcy5ub3cgPSBub3dcbiAgdGhpcy5tYXhBZ2UgPSBtYXhBZ2UgfHwgMFxufVxuIiwiaWYgKHByb2Nlc3MuZW52Lm5wbV9wYWNrYWdlX25hbWUgPT09ICdwc2V1ZG9tYXAnICYmXG4gICAgcHJvY2Vzcy5lbnYubnBtX2xpZmVjeWNsZV9zY3JpcHQgPT09ICd0ZXN0JylcbiAgcHJvY2Vzcy5lbnYuVEVTVF9QU0VVRE9NQVAgPSAndHJ1ZSdcblxuaWYgKHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgIXByb2Nlc3MuZW52LlRFU1RfUFNFVURPTUFQKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gTWFwXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcHNldWRvbWFwJylcbn1cbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBQc2V1ZG9NYXBcblxuZnVuY3Rpb24gUHNldWRvTWFwIChzZXQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBzZXVkb01hcCkpIC8vIHdoeXl5eXl5eVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDb25zdHJ1Y3RvciBQc2V1ZG9NYXAgcmVxdWlyZXMgJ25ldydcIilcblxuICB0aGlzLmNsZWFyKClcblxuICBpZiAoc2V0KSB7XG4gICAgaWYgKChzZXQgaW5zdGFuY2VvZiBQc2V1ZG9NYXApIHx8XG4gICAgICAgICh0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIHNldCBpbnN0YW5jZW9mIE1hcCkpXG4gICAgICBzZXQuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICB0aGlzLnNldChrZXksIHZhbHVlKVxuICAgICAgfSwgdGhpcylcbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNldCkpXG4gICAgICBzZXQuZm9yRWFjaChmdW5jdGlvbiAoa3YpIHtcbiAgICAgICAgdGhpcy5zZXQoa3ZbMF0sIGt2WzFdKVxuICAgICAgfSwgdGhpcylcbiAgICBlbHNlXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGFyZ3VtZW50JylcbiAgfVxufVxuXG5Qc2V1ZG9NYXAucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZm4sIHRoaXNwKSB7XG4gIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICBPYmplY3Qua2V5cyh0aGlzLl9kYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgaWYgKGsgIT09ICdzaXplJylcbiAgICAgIGZuLmNhbGwodGhpc3AsIHRoaXMuX2RhdGFba10udmFsdWUsIHRoaXMuX2RhdGFba10ua2V5KVxuICB9LCB0aGlzKVxufVxuXG5Qc2V1ZG9NYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrKSB7XG4gIHJldHVybiAhIWZpbmQodGhpcy5fZGF0YSwgaylcbn1cblxuUHNldWRvTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaykge1xuICB2YXIgcmVzID0gZmluZCh0aGlzLl9kYXRhLCBrKVxuICByZXR1cm4gcmVzICYmIHJlcy52YWx1ZVxufVxuXG5Qc2V1ZG9NYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrLCB2KSB7XG4gIHNldCh0aGlzLl9kYXRhLCBrLCB2KVxufVxuXG5Qc2V1ZG9NYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrKSB7XG4gIHZhciByZXMgPSBmaW5kKHRoaXMuX2RhdGEsIGspXG4gIGlmIChyZXMpIHtcbiAgICBkZWxldGUgdGhpcy5fZGF0YVtyZXMuX2luZGV4XVxuICAgIHRoaXMuX2RhdGEuc2l6ZS0tXG4gIH1cbn1cblxuUHNldWRvTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRhdGEgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gIGRhdGEuc2l6ZSA9IDBcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ19kYXRhJywge1xuICAgIHZhbHVlOiBkYXRhLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSlcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFBzZXVkb01hcC5wcm90b3R5cGUsICdzaXplJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5zaXplXG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKG4pIHt9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pXG5cblBzZXVkb01hcC5wcm90b3R5cGUudmFsdWVzID1cblBzZXVkb01hcC5wcm90b3R5cGUua2V5cyA9XG5Qc2V1ZG9NYXAucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignaXRlcmF0b3JzIGFyZSBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyB2ZXJzaW9uJylcbn1cblxuLy8gRWl0aGVyIGlkZW50aWNhbCwgb3IgYm90aCBOYU5cbmZ1bmN0aW9uIHNhbWUgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGIgfHwgYSAhPT0gYSAmJiBiICE9PSBiXG59XG5cbmZ1bmN0aW9uIEVudHJ5IChrLCB2LCBpKSB7XG4gIHRoaXMua2V5ID0ga1xuICB0aGlzLnZhbHVlID0gdlxuICB0aGlzLl9pbmRleCA9IGlcbn1cblxuZnVuY3Rpb24gZmluZCAoZGF0YSwgaykge1xuICBmb3IgKHZhciBpID0gMCwgcyA9ICdfJyArIGssIGtleSA9IHM7XG4gICAgICAgaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgICAgIGtleSA9IHMgKyBpKyspIHtcbiAgICBpZiAoc2FtZShkYXRhW2tleV0ua2V5LCBrKSlcbiAgICAgIHJldHVybiBkYXRhW2tleV1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQgKGRhdGEsIGssIHYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIHMgPSAnXycgKyBrLCBrZXkgPSBzO1xuICAgICAgIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICAgICBrZXkgPSBzICsgaSsrKSB7XG4gICAgaWYgKHNhbWUoZGF0YVtrZXldLmtleSwgaykpIHtcbiAgICAgIGRhdGFba2V5XS52YWx1ZSA9IHZcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBkYXRhLnNpemUrK1xuICBkYXRhW2tleV0gPSBuZXcgRW50cnkoaywgdiwga2V5KVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnRpYWxTb3J0O1xuXG4vLyBGbG95ZC1SaXZlc3Qgc2VsZWN0aW9uIGFsZ29yaXRobTpcbi8vIFJlYXJyYW5nZSBpdGVtcyBzbyB0aGF0IGFsbCBpdGVtcyBpbiB0aGUgW2xlZnQsIGtdIHJhbmdlIGFyZSBzbWFsbGVyIHRoYW4gYWxsIGl0ZW1zIGluIChrLCByaWdodF07XG4vLyBUaGUgay10aCBlbGVtZW50IHdpbGwgaGF2ZSB0aGUgKGsgLSBsZWZ0ICsgMSl0aCBzbWFsbGVzdCB2YWx1ZSBpbiBbbGVmdCwgcmlnaHRdXG5cbmZ1bmN0aW9uIHBhcnRpYWxTb3J0KGFyciwgaywgbGVmdCwgcmlnaHQsIGNvbXBhcmUpIHtcbiAgICBsZWZ0ID0gbGVmdCB8fCAwO1xuICAgIHJpZ2h0ID0gcmlnaHQgfHwgKGFyci5sZW5ndGggLSAxKTtcbiAgICBjb21wYXJlID0gY29tcGFyZSB8fCBkZWZhdWx0Q29tcGFyZTtcblxuICAgIHdoaWxlIChyaWdodCA+IGxlZnQpIHtcbiAgICAgICAgaWYgKHJpZ2h0IC0gbGVmdCA+IDYwMCkge1xuICAgICAgICAgICAgdmFyIG4gPSByaWdodCAtIGxlZnQgKyAxO1xuICAgICAgICAgICAgdmFyIG0gPSBrIC0gbGVmdCArIDE7XG4gICAgICAgICAgICB2YXIgeiA9IE1hdGgubG9nKG4pO1xuICAgICAgICAgICAgdmFyIHMgPSAwLjUgKiBNYXRoLmV4cCgyICogeiAvIDMpO1xuICAgICAgICAgICAgdmFyIHNkID0gMC41ICogTWF0aC5zcXJ0KHogKiBzICogKG4gLSBzKSAvIG4pICogKG0gLSBuIC8gMiA8IDAgPyAtMSA6IDEpO1xuICAgICAgICAgICAgdmFyIG5ld0xlZnQgPSBNYXRoLm1heChsZWZ0LCBNYXRoLmZsb29yKGsgLSBtICogcyAvIG4gKyBzZCkpO1xuICAgICAgICAgICAgdmFyIG5ld1JpZ2h0ID0gTWF0aC5taW4ocmlnaHQsIE1hdGguZmxvb3IoayArIChuIC0gbSkgKiBzIC8gbiArIHNkKSk7XG4gICAgICAgICAgICBwYXJ0aWFsU29ydChhcnIsIGssIG5ld0xlZnQsIG5ld1JpZ2h0LCBjb21wYXJlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ID0gYXJyW2tdO1xuICAgICAgICB2YXIgaSA9IGxlZnQ7XG4gICAgICAgIHZhciBqID0gcmlnaHQ7XG5cbiAgICAgICAgc3dhcChhcnIsIGxlZnQsIGspO1xuICAgICAgICBpZiAoY29tcGFyZShhcnJbcmlnaHRdLCB0KSA+IDApIHN3YXAoYXJyLCBsZWZ0LCByaWdodCk7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBqKSB7XG4gICAgICAgICAgICBzd2FwKGFyciwgaSwgaik7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBqLS07XG4gICAgICAgICAgICB3aGlsZSAoY29tcGFyZShhcnJbaV0sIHQpIDwgMCkgaSsrO1xuICAgICAgICAgICAgd2hpbGUgKGNvbXBhcmUoYXJyW2pdLCB0KSA+IDApIGotLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb21wYXJlKGFycltsZWZ0XSwgdCkgPT09IDApIHN3YXAoYXJyLCBsZWZ0LCBqKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgICAgICBzd2FwKGFyciwgaiwgcmlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGogPD0gaykgbGVmdCA9IGogKyAxO1xuICAgICAgICBpZiAoayA8PSBqKSByaWdodCA9IGogLSAxO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3dhcChhcnIsIGksIGopIHtcbiAgICB2YXIgdG1wID0gYXJyW2ldO1xuICAgIGFycltpXSA9IGFycltqXTtcbiAgICBhcnJbal0gPSB0bXA7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKGEsIGIpIHtcbiAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmJ1c2g7XG5cbnZhciBxdWlja3NlbGVjdCA9IHJlcXVpcmUoJ3F1aWNrc2VsZWN0Jyk7XG5cbmZ1bmN0aW9uIHJidXNoKG1heEVudHJpZXMsIGZvcm1hdCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiByYnVzaCkpIHJldHVybiBuZXcgcmJ1c2gobWF4RW50cmllcywgZm9ybWF0KTtcblxuICAgIC8vIG1heCBlbnRyaWVzIGluIGEgbm9kZSBpcyA5IGJ5IGRlZmF1bHQ7IG1pbiBub2RlIGZpbGwgaXMgNDAlIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhpcy5fbWF4RW50cmllcyA9IE1hdGgubWF4KDQsIG1heEVudHJpZXMgfHwgOSk7XG4gICAgdGhpcy5fbWluRW50cmllcyA9IE1hdGgubWF4KDIsIE1hdGguY2VpbCh0aGlzLl9tYXhFbnRyaWVzICogMC40KSk7XG5cbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICAgIHRoaXMuX2luaXRGb3JtYXQoZm9ybWF0KTtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyKCk7XG59XG5cbnJidXNoLnByb3RvdHlwZSA9IHtcblxuICAgIGFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWxsKHRoaXMuZGF0YSwgW10pO1xuICAgIH0sXG5cbiAgICBzZWFyY2g6IGZ1bmN0aW9uIChiYm94KSB7XG5cbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmRhdGEsXG4gICAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICAgIHRvQkJveCA9IHRoaXMudG9CQm94O1xuXG4gICAgICAgIGlmICghaW50ZXJzZWN0cyhiYm94LCBub2RlKSkgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICB2YXIgbm9kZXNUb1NlYXJjaCA9IFtdLFxuICAgICAgICAgICAgaSwgbGVuLCBjaGlsZCwgY2hpbGRCQm94O1xuXG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgY2hpbGRCQm94ID0gbm9kZS5sZWFmID8gdG9CQm94KGNoaWxkKSA6IGNoaWxkO1xuXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdHMoYmJveCwgY2hpbGRCQm94KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5sZWFmKSByZXN1bHQucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRhaW5zKGJib3gsIGNoaWxkQkJveCkpIHRoaXMuX2FsbChjaGlsZCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBub2Rlc1RvU2VhcmNoLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUgPSBub2Rlc1RvU2VhcmNoLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgY29sbGlkZXM6IGZ1bmN0aW9uIChiYm94KSB7XG5cbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmRhdGEsXG4gICAgICAgICAgICB0b0JCb3ggPSB0aGlzLnRvQkJveDtcblxuICAgICAgICBpZiAoIWludGVyc2VjdHMoYmJveCwgbm9kZSkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgbm9kZXNUb1NlYXJjaCA9IFtdLFxuICAgICAgICAgICAgaSwgbGVuLCBjaGlsZCwgY2hpbGRCQm94O1xuXG4gICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgY2hpbGRCQm94ID0gbm9kZS5sZWFmID8gdG9CQm94KGNoaWxkKSA6IGNoaWxkO1xuXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdHMoYmJveCwgY2hpbGRCQm94KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5sZWFmIHx8IGNvbnRhaW5zKGJib3gsIGNoaWxkQkJveCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1RvU2VhcmNoLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUgPSBub2Rlc1RvU2VhcmNoLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBsb2FkOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoIShkYXRhICYmIGRhdGEubGVuZ3RoKSkgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgdGhpcy5fbWluRW50cmllcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydChkYXRhW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVjdXJzaXZlbHkgYnVpbGQgdGhlIHRyZWUgd2l0aCB0aGUgZ2l2ZW4gZGF0YSBmcm9tIHN0cmF0Y2ggdXNpbmcgT01UIGFsZ29yaXRobVxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuX2J1aWxkKGRhdGEuc2xpY2UoKSwgMCwgZGF0YS5sZW5ndGggLSAxLCAwKTtcblxuICAgICAgICBpZiAoIXRoaXMuZGF0YS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIHNhdmUgYXMgaXMgaWYgdHJlZSBpcyBlbXB0eVxuICAgICAgICAgICAgdGhpcy5kYXRhID0gbm9kZTtcblxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5oZWlnaHQgPT09IG5vZGUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyBzcGxpdCByb290IGlmIHRyZWVzIGhhdmUgdGhlIHNhbWUgaGVpZ2h0XG4gICAgICAgICAgICB0aGlzLl9zcGxpdFJvb3QodGhpcy5kYXRhLCBub2RlKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5oZWlnaHQgPCBub2RlLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIC8vIHN3YXAgdHJlZXMgaWYgaW5zZXJ0ZWQgb25lIGlzIGJpZ2dlclxuICAgICAgICAgICAgICAgIHZhciB0bXBOb2RlID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHRtcE5vZGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGluc2VydCB0aGUgc21hbGwgdHJlZSBpbnRvIHRoZSBsYXJnZSB0cmVlIGF0IGFwcHJvcHJpYXRlIGxldmVsXG4gICAgICAgICAgICB0aGlzLl9pbnNlcnQobm9kZSwgdGhpcy5kYXRhLmhlaWdodCAtIG5vZGUuaGVpZ2h0IC0gMSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgaW5zZXJ0OiBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpZiAoaXRlbSkgdGhpcy5faW5zZXJ0KGl0ZW0sIHRoaXMuZGF0YS5oZWlnaHQgLSAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGNyZWF0ZU5vZGUoW10pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiAoaXRlbSwgZXF1YWxzRm4pIHtcbiAgICAgICAgaWYgKCFpdGVtKSByZXR1cm4gdGhpcztcblxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuZGF0YSxcbiAgICAgICAgICAgIGJib3ggPSB0aGlzLnRvQkJveChpdGVtKSxcbiAgICAgICAgICAgIHBhdGggPSBbXSxcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICAgIGksIHBhcmVudCwgaW5kZXgsIGdvaW5nVXA7XG5cbiAgICAgICAgLy8gZGVwdGgtZmlyc3QgaXRlcmF0aXZlIHRyZWUgdHJhdmVyc2FsXG4gICAgICAgIHdoaWxlIChub2RlIHx8IHBhdGgubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgIGlmICghbm9kZSkgeyAvLyBnbyB1cFxuICAgICAgICAgICAgICAgIG5vZGUgPSBwYXRoLnBvcCgpO1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpID0gaW5kZXhlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBnb2luZ1VwID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5vZGUubGVhZikgeyAvLyBjaGVjayBjdXJyZW50IG5vZGVcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZpbmRJdGVtKGl0ZW0sIG5vZGUuY2hpbGRyZW4sIGVxdWFsc0ZuKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaXRlbSBmb3VuZCwgcmVtb3ZlIHRoZSBpdGVtIGFuZCBjb25kZW5zZSB0cmVlIHVwd2FyZHNcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICBwYXRoLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbmRlbnNlKHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZ29pbmdVcCAmJiAhbm9kZS5sZWFmICYmIGNvbnRhaW5zKG5vZGUsIGJib3gpKSB7IC8vIGdvIGRvd25cbiAgICAgICAgICAgICAgICBwYXRoLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IG5vZGU7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGRyZW5bMF07XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50KSB7IC8vIGdvIHJpZ2h0XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgZ29pbmdVcCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9IGVsc2Ugbm9kZSA9IG51bGw7IC8vIG5vdGhpbmcgZm91bmRcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICB0b0JCb3g6IGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtOyB9LFxuXG4gICAgY29tcGFyZU1pblg6IGNvbXBhcmVOb2RlTWluWCxcbiAgICBjb21wYXJlTWluWTogY29tcGFyZU5vZGVNaW5ZLFxuXG4gICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmRhdGE7IH0sXG5cbiAgICBmcm9tSlNPTjogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIF9hbGw6IGZ1bmN0aW9uIChub2RlLCByZXN1bHQpIHtcbiAgICAgICAgdmFyIG5vZGVzVG9TZWFyY2ggPSBbXTtcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmxlYWYpIHJlc3VsdC5wdXNoLmFwcGx5KHJlc3VsdCwgbm9kZS5jaGlsZHJlbik7XG4gICAgICAgICAgICBlbHNlIG5vZGVzVG9TZWFyY2gucHVzaC5hcHBseShub2Rlc1RvU2VhcmNoLCBub2RlLmNoaWxkcmVuKTtcblxuICAgICAgICAgICAgbm9kZSA9IG5vZGVzVG9TZWFyY2gucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgX2J1aWxkOiBmdW5jdGlvbiAoaXRlbXMsIGxlZnQsIHJpZ2h0LCBoZWlnaHQpIHtcblxuICAgICAgICB2YXIgTiA9IHJpZ2h0IC0gbGVmdCArIDEsXG4gICAgICAgICAgICBNID0gdGhpcy5fbWF4RW50cmllcyxcbiAgICAgICAgICAgIG5vZGU7XG5cbiAgICAgICAgaWYgKE4gPD0gTSkge1xuICAgICAgICAgICAgLy8gcmVhY2hlZCBsZWFmIGxldmVsOyByZXR1cm4gbGVhZlxuICAgICAgICAgICAgbm9kZSA9IGNyZWF0ZU5vZGUoaXRlbXMuc2xpY2UobGVmdCwgcmlnaHQgKyAxKSk7XG4gICAgICAgICAgICBjYWxjQkJveChub2RlLCB0aGlzLnRvQkJveCk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyB0YXJnZXQgaGVpZ2h0IG9mIHRoZSBidWxrLWxvYWRlZCB0cmVlXG4gICAgICAgICAgICBoZWlnaHQgPSBNYXRoLmNlaWwoTWF0aC5sb2coTikgLyBNYXRoLmxvZyhNKSk7XG5cbiAgICAgICAgICAgIC8vIHRhcmdldCBudW1iZXIgb2Ygcm9vdCBlbnRyaWVzIHRvIG1heGltaXplIHN0b3JhZ2UgdXRpbGl6YXRpb25cbiAgICAgICAgICAgIE0gPSBNYXRoLmNlaWwoTiAvIE1hdGgucG93KE0sIGhlaWdodCAtIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUgPSBjcmVhdGVOb2RlKFtdKTtcbiAgICAgICAgbm9kZS5sZWFmID0gZmFsc2U7XG4gICAgICAgIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgIC8vIHNwbGl0IHRoZSBpdGVtcyBpbnRvIE0gbW9zdGx5IHNxdWFyZSB0aWxlc1xuXG4gICAgICAgIHZhciBOMiA9IE1hdGguY2VpbChOIC8gTSksXG4gICAgICAgICAgICBOMSA9IE4yICogTWF0aC5jZWlsKE1hdGguc3FydChNKSksXG4gICAgICAgICAgICBpLCBqLCByaWdodDIsIHJpZ2h0MztcblxuICAgICAgICBtdWx0aVNlbGVjdChpdGVtcywgbGVmdCwgcmlnaHQsIE4xLCB0aGlzLmNvbXBhcmVNaW5YKTtcblxuICAgICAgICBmb3IgKGkgPSBsZWZ0OyBpIDw9IHJpZ2h0OyBpICs9IE4xKSB7XG5cbiAgICAgICAgICAgIHJpZ2h0MiA9IE1hdGgubWluKGkgKyBOMSAtIDEsIHJpZ2h0KTtcblxuICAgICAgICAgICAgbXVsdGlTZWxlY3QoaXRlbXMsIGksIHJpZ2h0MiwgTjIsIHRoaXMuY29tcGFyZU1pblkpO1xuXG4gICAgICAgICAgICBmb3IgKGogPSBpOyBqIDw9IHJpZ2h0MjsgaiArPSBOMikge1xuXG4gICAgICAgICAgICAgICAgcmlnaHQzID0gTWF0aC5taW4oaiArIE4yIC0gMSwgcmlnaHQyKTtcblxuICAgICAgICAgICAgICAgIC8vIHBhY2sgZWFjaCBlbnRyeSByZWN1cnNpdmVseVxuICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4ucHVzaCh0aGlzLl9idWlsZChpdGVtcywgaiwgcmlnaHQzLCBoZWlnaHQgLSAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYWxjQkJveChub2RlLCB0aGlzLnRvQkJveCk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcblxuICAgIF9jaG9vc2VTdWJ0cmVlOiBmdW5jdGlvbiAoYmJveCwgbm9kZSwgbGV2ZWwsIHBhdGgpIHtcblxuICAgICAgICB2YXIgaSwgbGVuLCBjaGlsZCwgdGFyZ2V0Tm9kZSwgYXJlYSwgZW5sYXJnZW1lbnQsIG1pbkFyZWEsIG1pbkVubGFyZ2VtZW50O1xuXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBwYXRoLnB1c2gobm9kZSk7XG5cbiAgICAgICAgICAgIGlmIChub2RlLmxlYWYgfHwgcGF0aC5sZW5ndGggLSAxID09PSBsZXZlbCkgYnJlYWs7XG5cbiAgICAgICAgICAgIG1pbkFyZWEgPSBtaW5FbmxhcmdlbWVudCA9IEluZmluaXR5O1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGFyZWEgPSBiYm94QXJlYShjaGlsZCk7XG4gICAgICAgICAgICAgICAgZW5sYXJnZW1lbnQgPSBlbmxhcmdlZEFyZWEoYmJveCwgY2hpbGQpIC0gYXJlYTtcblxuICAgICAgICAgICAgICAgIC8vIGNob29zZSBlbnRyeSB3aXRoIHRoZSBsZWFzdCBhcmVhIGVubGFyZ2VtZW50XG4gICAgICAgICAgICAgICAgaWYgKGVubGFyZ2VtZW50IDwgbWluRW5sYXJnZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluRW5sYXJnZW1lbnQgPSBlbmxhcmdlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgbWluQXJlYSA9IGFyZWEgPCBtaW5BcmVhID8gYXJlYSA6IG1pbkFyZWE7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldE5vZGUgPSBjaGlsZDtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZW5sYXJnZW1lbnQgPT09IG1pbkVubGFyZ2VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBjaG9vc2Ugb25lIHdpdGggdGhlIHNtYWxsZXN0IGFyZWFcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZWEgPCBtaW5BcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5BcmVhID0gYXJlYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5vZGUgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZSA9IHRhcmdldE5vZGUgfHwgbm9kZS5jaGlsZHJlblswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG5cbiAgICBfaW5zZXJ0OiBmdW5jdGlvbiAoaXRlbSwgbGV2ZWwsIGlzTm9kZSkge1xuXG4gICAgICAgIHZhciB0b0JCb3ggPSB0aGlzLnRvQkJveCxcbiAgICAgICAgICAgIGJib3ggPSBpc05vZGUgPyBpdGVtIDogdG9CQm94KGl0ZW0pLFxuICAgICAgICAgICAgaW5zZXJ0UGF0aCA9IFtdO1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIGJlc3Qgbm9kZSBmb3IgYWNjb21tb2RhdGluZyB0aGUgaXRlbSwgc2F2aW5nIGFsbCBub2RlcyBhbG9uZyB0aGUgcGF0aCB0b29cbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLl9jaG9vc2VTdWJ0cmVlKGJib3gsIHRoaXMuZGF0YSwgbGV2ZWwsIGluc2VydFBhdGgpO1xuXG4gICAgICAgIC8vIHB1dCB0aGUgaXRlbSBpbnRvIHRoZSBub2RlXG4gICAgICAgIG5vZGUuY2hpbGRyZW4ucHVzaChpdGVtKTtcbiAgICAgICAgZXh0ZW5kKG5vZGUsIGJib3gpO1xuXG4gICAgICAgIC8vIHNwbGl0IG9uIG5vZGUgb3ZlcmZsb3c7IHByb3BhZ2F0ZSB1cHdhcmRzIGlmIG5lY2Vzc2FyeVxuICAgICAgICB3aGlsZSAobGV2ZWwgPj0gMCkge1xuICAgICAgICAgICAgaWYgKGluc2VydFBhdGhbbGV2ZWxdLmNoaWxkcmVuLmxlbmd0aCA+IHRoaXMuX21heEVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zcGxpdChpbnNlcnRQYXRoLCBsZXZlbCk7XG4gICAgICAgICAgICAgICAgbGV2ZWwtLTtcbiAgICAgICAgICAgIH0gZWxzZSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkanVzdCBiYm94ZXMgYWxvbmcgdGhlIGluc2VydGlvbiBwYXRoXG4gICAgICAgIHRoaXMuX2FkanVzdFBhcmVudEJCb3hlcyhiYm94LCBpbnNlcnRQYXRoLCBsZXZlbCk7XG4gICAgfSxcblxuICAgIC8vIHNwbGl0IG92ZXJmbG93ZWQgbm9kZSBpbnRvIHR3b1xuICAgIF9zcGxpdDogZnVuY3Rpb24gKGluc2VydFBhdGgsIGxldmVsKSB7XG5cbiAgICAgICAgdmFyIG5vZGUgPSBpbnNlcnRQYXRoW2xldmVsXSxcbiAgICAgICAgICAgIE0gPSBub2RlLmNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICAgIG0gPSB0aGlzLl9taW5FbnRyaWVzO1xuXG4gICAgICAgIHRoaXMuX2Nob29zZVNwbGl0QXhpcyhub2RlLCBtLCBNKTtcblxuICAgICAgICB2YXIgc3BsaXRJbmRleCA9IHRoaXMuX2Nob29zZVNwbGl0SW5kZXgobm9kZSwgbSwgTSk7XG5cbiAgICAgICAgdmFyIG5ld05vZGUgPSBjcmVhdGVOb2RlKG5vZGUuY2hpbGRyZW4uc3BsaWNlKHNwbGl0SW5kZXgsIG5vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gc3BsaXRJbmRleCkpO1xuICAgICAgICBuZXdOb2RlLmhlaWdodCA9IG5vZGUuaGVpZ2h0O1xuICAgICAgICBuZXdOb2RlLmxlYWYgPSBub2RlLmxlYWY7XG5cbiAgICAgICAgY2FsY0JCb3gobm9kZSwgdGhpcy50b0JCb3gpO1xuICAgICAgICBjYWxjQkJveChuZXdOb2RlLCB0aGlzLnRvQkJveCk7XG5cbiAgICAgICAgaWYgKGxldmVsKSBpbnNlcnRQYXRoW2xldmVsIC0gMV0uY2hpbGRyZW4ucHVzaChuZXdOb2RlKTtcbiAgICAgICAgZWxzZSB0aGlzLl9zcGxpdFJvb3Qobm9kZSwgbmV3Tm9kZSk7XG4gICAgfSxcblxuICAgIF9zcGxpdFJvb3Q6IGZ1bmN0aW9uIChub2RlLCBuZXdOb2RlKSB7XG4gICAgICAgIC8vIHNwbGl0IHJvb3Qgbm9kZVxuICAgICAgICB0aGlzLmRhdGEgPSBjcmVhdGVOb2RlKFtub2RlLCBuZXdOb2RlXSk7XG4gICAgICAgIHRoaXMuZGF0YS5oZWlnaHQgPSBub2RlLmhlaWdodCArIDE7XG4gICAgICAgIHRoaXMuZGF0YS5sZWFmID0gZmFsc2U7XG4gICAgICAgIGNhbGNCQm94KHRoaXMuZGF0YSwgdGhpcy50b0JCb3gpO1xuICAgIH0sXG5cbiAgICBfY2hvb3NlU3BsaXRJbmRleDogZnVuY3Rpb24gKG5vZGUsIG0sIE0pIHtcblxuICAgICAgICB2YXIgaSwgYmJveDEsIGJib3gyLCBvdmVybGFwLCBhcmVhLCBtaW5PdmVybGFwLCBtaW5BcmVhLCBpbmRleDtcblxuICAgICAgICBtaW5PdmVybGFwID0gbWluQXJlYSA9IEluZmluaXR5O1xuXG4gICAgICAgIGZvciAoaSA9IG07IGkgPD0gTSAtIG07IGkrKykge1xuICAgICAgICAgICAgYmJveDEgPSBkaXN0QkJveChub2RlLCAwLCBpLCB0aGlzLnRvQkJveCk7XG4gICAgICAgICAgICBiYm94MiA9IGRpc3RCQm94KG5vZGUsIGksIE0sIHRoaXMudG9CQm94KTtcblxuICAgICAgICAgICAgb3ZlcmxhcCA9IGludGVyc2VjdGlvbkFyZWEoYmJveDEsIGJib3gyKTtcbiAgICAgICAgICAgIGFyZWEgPSBiYm94QXJlYShiYm94MSkgKyBiYm94QXJlYShiYm94Mik7XG5cbiAgICAgICAgICAgIC8vIGNob29zZSBkaXN0cmlidXRpb24gd2l0aCBtaW5pbXVtIG92ZXJsYXBcbiAgICAgICAgICAgIGlmIChvdmVybGFwIDwgbWluT3ZlcmxhcCkge1xuICAgICAgICAgICAgICAgIG1pbk92ZXJsYXAgPSBvdmVybGFwO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcblxuICAgICAgICAgICAgICAgIG1pbkFyZWEgPSBhcmVhIDwgbWluQXJlYSA/IGFyZWEgOiBtaW5BcmVhO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG92ZXJsYXAgPT09IG1pbk92ZXJsYXApIHtcbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgY2hvb3NlIGRpc3RyaWJ1dGlvbiB3aXRoIG1pbmltdW0gYXJlYVxuICAgICAgICAgICAgICAgIGlmIChhcmVhIDwgbWluQXJlYSkge1xuICAgICAgICAgICAgICAgICAgICBtaW5BcmVhID0gYXJlYTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuXG4gICAgLy8gc29ydHMgbm9kZSBjaGlsZHJlbiBieSB0aGUgYmVzdCBheGlzIGZvciBzcGxpdFxuICAgIF9jaG9vc2VTcGxpdEF4aXM6IGZ1bmN0aW9uIChub2RlLCBtLCBNKSB7XG5cbiAgICAgICAgdmFyIGNvbXBhcmVNaW5YID0gbm9kZS5sZWFmID8gdGhpcy5jb21wYXJlTWluWCA6IGNvbXBhcmVOb2RlTWluWCxcbiAgICAgICAgICAgIGNvbXBhcmVNaW5ZID0gbm9kZS5sZWFmID8gdGhpcy5jb21wYXJlTWluWSA6IGNvbXBhcmVOb2RlTWluWSxcbiAgICAgICAgICAgIHhNYXJnaW4gPSB0aGlzLl9hbGxEaXN0TWFyZ2luKG5vZGUsIG0sIE0sIGNvbXBhcmVNaW5YKSxcbiAgICAgICAgICAgIHlNYXJnaW4gPSB0aGlzLl9hbGxEaXN0TWFyZ2luKG5vZGUsIG0sIE0sIGNvbXBhcmVNaW5ZKTtcblxuICAgICAgICAvLyBpZiB0b3RhbCBkaXN0cmlidXRpb25zIG1hcmdpbiB2YWx1ZSBpcyBtaW5pbWFsIGZvciB4LCBzb3J0IGJ5IG1pblgsXG4gICAgICAgIC8vIG90aGVyd2lzZSBpdCdzIGFscmVhZHkgc29ydGVkIGJ5IG1pbllcbiAgICAgICAgaWYgKHhNYXJnaW4gPCB5TWFyZ2luKSBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZU1pblgpO1xuICAgIH0sXG5cbiAgICAvLyB0b3RhbCBtYXJnaW4gb2YgYWxsIHBvc3NpYmxlIHNwbGl0IGRpc3RyaWJ1dGlvbnMgd2hlcmUgZWFjaCBub2RlIGlzIGF0IGxlYXN0IG0gZnVsbFxuICAgIF9hbGxEaXN0TWFyZ2luOiBmdW5jdGlvbiAobm9kZSwgbSwgTSwgY29tcGFyZSkge1xuXG4gICAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcblxuICAgICAgICB2YXIgdG9CQm94ID0gdGhpcy50b0JCb3gsXG4gICAgICAgICAgICBsZWZ0QkJveCA9IGRpc3RCQm94KG5vZGUsIDAsIG0sIHRvQkJveCksXG4gICAgICAgICAgICByaWdodEJCb3ggPSBkaXN0QkJveChub2RlLCBNIC0gbSwgTSwgdG9CQm94KSxcbiAgICAgICAgICAgIG1hcmdpbiA9IGJib3hNYXJnaW4obGVmdEJCb3gpICsgYmJveE1hcmdpbihyaWdodEJCb3gpLFxuICAgICAgICAgICAgaSwgY2hpbGQ7XG5cbiAgICAgICAgZm9yIChpID0gbTsgaSA8IE0gLSBtOyBpKyspIHtcbiAgICAgICAgICAgIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGV4dGVuZChsZWZ0QkJveCwgbm9kZS5sZWFmID8gdG9CQm94KGNoaWxkKSA6IGNoaWxkKTtcbiAgICAgICAgICAgIG1hcmdpbiArPSBiYm94TWFyZ2luKGxlZnRCQm94KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IE0gLSBtIC0gMTsgaSA+PSBtOyBpLS0pIHtcbiAgICAgICAgICAgIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGV4dGVuZChyaWdodEJCb3gsIG5vZGUubGVhZiA/IHRvQkJveChjaGlsZCkgOiBjaGlsZCk7XG4gICAgICAgICAgICBtYXJnaW4gKz0gYmJveE1hcmdpbihyaWdodEJCb3gpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmdpbjtcbiAgICB9LFxuXG4gICAgX2FkanVzdFBhcmVudEJCb3hlczogZnVuY3Rpb24gKGJib3gsIHBhdGgsIGxldmVsKSB7XG4gICAgICAgIC8vIGFkanVzdCBiYm94ZXMgYWxvbmcgdGhlIGdpdmVuIHRyZWUgcGF0aFxuICAgICAgICBmb3IgKHZhciBpID0gbGV2ZWw7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBleHRlbmQocGF0aFtpXSwgYmJveCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2NvbmRlbnNlOiBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAvLyBnbyB0aHJvdWdoIHRoZSBwYXRoLCByZW1vdmluZyBlbXB0eSBub2RlcyBhbmQgdXBkYXRpbmcgYmJveGVzXG4gICAgICAgIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDEsIHNpYmxpbmdzOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKHBhdGhbaV0uY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpYmxpbmdzID0gcGF0aFtpIC0gMV0uY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgICAgIHNpYmxpbmdzLnNwbGljZShzaWJsaW5ncy5pbmRleE9mKHBhdGhbaV0pLCAxKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBjYWxjQkJveChwYXRoW2ldLCB0aGlzLnRvQkJveCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2luaXRGb3JtYXQ6IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgLy8gZGF0YSBmb3JtYXQgKG1pblgsIG1pblksIG1heFgsIG1heFkgYWNjZXNzb3JzKVxuXG4gICAgICAgIC8vIHVzZXMgZXZhbC10eXBlIGZ1bmN0aW9uIGNvbXBpbGF0aW9uIGluc3RlYWQgb2YganVzdCBhY2NlcHRpbmcgYSB0b0JCb3ggZnVuY3Rpb25cbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgYWxnb3JpdGhtcyBhcmUgdmVyeSBzZW5zaXRpdmUgdG8gc29ydGluZyBmdW5jdGlvbnMgcGVyZm9ybWFuY2UsXG4gICAgICAgIC8vIHNvIHRoZXkgc2hvdWxkIGJlIGRlYWQgc2ltcGxlIGFuZCB3aXRob3V0IGlubmVyIGNhbGxzXG5cbiAgICAgICAgdmFyIGNvbXBhcmVBcnIgPSBbJ3JldHVybiBhJywgJyAtIGInLCAnOyddO1xuXG4gICAgICAgIHRoaXMuY29tcGFyZU1pblggPSBuZXcgRnVuY3Rpb24oJ2EnLCAnYicsIGNvbXBhcmVBcnIuam9pbihmb3JtYXRbMF0pKTtcbiAgICAgICAgdGhpcy5jb21wYXJlTWluWSA9IG5ldyBGdW5jdGlvbignYScsICdiJywgY29tcGFyZUFyci5qb2luKGZvcm1hdFsxXSkpO1xuXG4gICAgICAgIHRoaXMudG9CQm94ID0gbmV3IEZ1bmN0aW9uKCdhJyxcbiAgICAgICAgICAgICdyZXR1cm4ge21pblg6IGEnICsgZm9ybWF0WzBdICtcbiAgICAgICAgICAgICcsIG1pblk6IGEnICsgZm9ybWF0WzFdICtcbiAgICAgICAgICAgICcsIG1heFg6IGEnICsgZm9ybWF0WzJdICtcbiAgICAgICAgICAgICcsIG1heFk6IGEnICsgZm9ybWF0WzNdICsgJ307Jyk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gZmluZEl0ZW0oaXRlbSwgaXRlbXMsIGVxdWFsc0ZuKSB7XG4gICAgaWYgKCFlcXVhbHNGbikgcmV0dXJuIGl0ZW1zLmluZGV4T2YoaXRlbSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChlcXVhbHNGbihpdGVtLCBpdGVtc1tpXSkpIHJldHVybiBpO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbi8vIGNhbGN1bGF0ZSBub2RlJ3MgYmJveCBmcm9tIGJib3hlcyBvZiBpdHMgY2hpbGRyZW5cbmZ1bmN0aW9uIGNhbGNCQm94KG5vZGUsIHRvQkJveCkge1xuICAgIGRpc3RCQm94KG5vZGUsIDAsIG5vZGUuY2hpbGRyZW4ubGVuZ3RoLCB0b0JCb3gsIG5vZGUpO1xufVxuXG4vLyBtaW4gYm91bmRpbmcgcmVjdGFuZ2xlIG9mIG5vZGUgY2hpbGRyZW4gZnJvbSBrIHRvIHAtMVxuZnVuY3Rpb24gZGlzdEJCb3gobm9kZSwgaywgcCwgdG9CQm94LCBkZXN0Tm9kZSkge1xuICAgIGlmICghZGVzdE5vZGUpIGRlc3ROb2RlID0gY3JlYXRlTm9kZShudWxsKTtcbiAgICBkZXN0Tm9kZS5taW5YID0gSW5maW5pdHk7XG4gICAgZGVzdE5vZGUubWluWSA9IEluZmluaXR5O1xuICAgIGRlc3ROb2RlLm1heFggPSAtSW5maW5pdHk7XG4gICAgZGVzdE5vZGUubWF4WSA9IC1JbmZpbml0eTtcblxuICAgIGZvciAodmFyIGkgPSBrLCBjaGlsZDsgaSA8IHA7IGkrKykge1xuICAgICAgICBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgIGV4dGVuZChkZXN0Tm9kZSwgbm9kZS5sZWFmID8gdG9CQm94KGNoaWxkKSA6IGNoaWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdE5vZGU7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgYS5taW5YID0gTWF0aC5taW4oYS5taW5YLCBiLm1pblgpO1xuICAgIGEubWluWSA9IE1hdGgubWluKGEubWluWSwgYi5taW5ZKTtcbiAgICBhLm1heFggPSBNYXRoLm1heChhLm1heFgsIGIubWF4WCk7XG4gICAgYS5tYXhZID0gTWF0aC5tYXgoYS5tYXhZLCBiLm1heFkpO1xuICAgIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlTm9kZU1pblgoYSwgYikgeyByZXR1cm4gYS5taW5YIC0gYi5taW5YOyB9XG5mdW5jdGlvbiBjb21wYXJlTm9kZU1pblkoYSwgYikgeyByZXR1cm4gYS5taW5ZIC0gYi5taW5ZOyB9XG5cbmZ1bmN0aW9uIGJib3hBcmVhKGEpICAgeyByZXR1cm4gKGEubWF4WCAtIGEubWluWCkgKiAoYS5tYXhZIC0gYS5taW5ZKTsgfVxuZnVuY3Rpb24gYmJveE1hcmdpbihhKSB7IHJldHVybiAoYS5tYXhYIC0gYS5taW5YKSArIChhLm1heFkgLSBhLm1pblkpOyB9XG5cbmZ1bmN0aW9uIGVubGFyZ2VkQXJlYShhLCBiKSB7XG4gICAgcmV0dXJuIChNYXRoLm1heChiLm1heFgsIGEubWF4WCkgLSBNYXRoLm1pbihiLm1pblgsIGEubWluWCkpICpcbiAgICAgICAgICAgKE1hdGgubWF4KGIubWF4WSwgYS5tYXhZKSAtIE1hdGgubWluKGIubWluWSwgYS5taW5ZKSk7XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdGlvbkFyZWEoYSwgYikge1xuICAgIHZhciBtaW5YID0gTWF0aC5tYXgoYS5taW5YLCBiLm1pblgpLFxuICAgICAgICBtaW5ZID0gTWF0aC5tYXgoYS5taW5ZLCBiLm1pblkpLFxuICAgICAgICBtYXhYID0gTWF0aC5taW4oYS5tYXhYLCBiLm1heFgpLFxuICAgICAgICBtYXhZID0gTWF0aC5taW4oYS5tYXhZLCBiLm1heFkpO1xuXG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIG1heFggLSBtaW5YKSAqXG4gICAgICAgICAgIE1hdGgubWF4KDAsIG1heFkgLSBtaW5ZKTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMoYSwgYikge1xuICAgIHJldHVybiBhLm1pblggPD0gYi5taW5YICYmXG4gICAgICAgICAgIGEubWluWSA8PSBiLm1pblkgJiZcbiAgICAgICAgICAgYi5tYXhYIDw9IGEubWF4WCAmJlxuICAgICAgICAgICBiLm1heFkgPD0gYS5tYXhZO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RzKGEsIGIpIHtcbiAgICByZXR1cm4gYi5taW5YIDw9IGEubWF4WCAmJlxuICAgICAgICAgICBiLm1pblkgPD0gYS5tYXhZICYmXG4gICAgICAgICAgIGIubWF4WCA+PSBhLm1pblggJiZcbiAgICAgICAgICAgYi5tYXhZID49IGEubWluWTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9kZShjaGlsZHJlbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICBsZWFmOiB0cnVlLFxuICAgICAgICBtaW5YOiBJbmZpbml0eSxcbiAgICAgICAgbWluWTogSW5maW5pdHksXG4gICAgICAgIG1heFg6IC1JbmZpbml0eSxcbiAgICAgICAgbWF4WTogLUluZmluaXR5XG4gICAgfTtcbn1cblxuLy8gc29ydCBhbiBhcnJheSBzbyB0aGF0IGl0ZW1zIGNvbWUgaW4gZ3JvdXBzIG9mIG4gdW5zb3J0ZWQgaXRlbXMsIHdpdGggZ3JvdXBzIHNvcnRlZCBiZXR3ZWVuIGVhY2ggb3RoZXI7XG4vLyBjb21iaW5lcyBzZWxlY3Rpb24gYWxnb3JpdGhtIHdpdGggYmluYXJ5IGRpdmlkZSAmIGNvbnF1ZXIgYXBwcm9hY2hcblxuZnVuY3Rpb24gbXVsdGlTZWxlY3QoYXJyLCBsZWZ0LCByaWdodCwgbiwgY29tcGFyZSkge1xuICAgIHZhciBzdGFjayA9IFtsZWZ0LCByaWdodF0sXG4gICAgICAgIG1pZDtcblxuICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgcmlnaHQgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgbGVmdCA9IHN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGlmIChyaWdodCAtIGxlZnQgPD0gbikgY29udGludWU7XG5cbiAgICAgICAgbWlkID0gbGVmdCArIE1hdGguY2VpbCgocmlnaHQgLSBsZWZ0KSAvIG4gLyAyKSAqIG47XG4gICAgICAgIHF1aWNrc2VsZWN0KGFyciwgbWlkLCBsZWZ0LCByaWdodCwgY29tcGFyZSk7XG5cbiAgICAgICAgc3RhY2sucHVzaChsZWZ0LCBtaWQsIG1pZCwgcmlnaHQpO1xuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gWWFsbGlzdFxuXG5ZYWxsaXN0Lk5vZGUgPSBOb2RlXG5ZYWxsaXN0LmNyZWF0ZSA9IFlhbGxpc3RcblxuZnVuY3Rpb24gWWFsbGlzdCAobGlzdCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKCEoc2VsZiBpbnN0YW5jZW9mIFlhbGxpc3QpKSB7XG4gICAgc2VsZiA9IG5ldyBZYWxsaXN0KClcbiAgfVxuXG4gIHNlbGYudGFpbCA9IG51bGxcbiAgc2VsZi5oZWFkID0gbnVsbFxuICBzZWxmLmxlbmd0aCA9IDBcblxuICBpZiAobGlzdCAmJiB0eXBlb2YgbGlzdC5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBzZWxmLnB1c2goaXRlbSlcbiAgICB9KVxuICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBzZWxmLnB1c2goYXJndW1lbnRzW2ldKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZWxmXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnJlbW92ZU5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICBpZiAobm9kZS5saXN0ICE9PSB0aGlzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmluZyBub2RlIHdoaWNoIGRvZXMgbm90IGJlbG9uZyB0byB0aGlzIGxpc3QnKVxuICB9XG5cbiAgdmFyIG5leHQgPSBub2RlLm5leHRcbiAgdmFyIHByZXYgPSBub2RlLnByZXZcblxuICBpZiAobmV4dCkge1xuICAgIG5leHQucHJldiA9IHByZXZcbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5uZXh0ID0gbmV4dFxuICB9XG5cbiAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZCkge1xuICAgIHRoaXMuaGVhZCA9IG5leHRcbiAgfVxuICBpZiAobm9kZSA9PT0gdGhpcy50YWlsKSB7XG4gICAgdGhpcy50YWlsID0gcHJldlxuICB9XG5cbiAgbm9kZS5saXN0Lmxlbmd0aC0tXG4gIG5vZGUubmV4dCA9IG51bGxcbiAgbm9kZS5wcmV2ID0gbnVsbFxuICBub2RlLmxpc3QgPSBudWxsXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnVuc2hpZnROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKG5vZGUubGlzdCkge1xuICAgIG5vZGUubGlzdC5yZW1vdmVOb2RlKG5vZGUpXG4gIH1cblxuICB2YXIgaGVhZCA9IHRoaXMuaGVhZFxuICBub2RlLmxpc3QgPSB0aGlzXG4gIG5vZGUubmV4dCA9IGhlYWRcbiAgaWYgKGhlYWQpIHtcbiAgICBoZWFkLnByZXYgPSBub2RlXG4gIH1cblxuICB0aGlzLmhlYWQgPSBub2RlXG4gIGlmICghdGhpcy50YWlsKSB7XG4gICAgdGhpcy50YWlsID0gbm9kZVxuICB9XG4gIHRoaXMubGVuZ3RoKytcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucHVzaE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICBpZiAobm9kZSA9PT0gdGhpcy50YWlsKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAobm9kZS5saXN0KSB7XG4gICAgbm9kZS5saXN0LnJlbW92ZU5vZGUobm9kZSlcbiAgfVxuXG4gIHZhciB0YWlsID0gdGhpcy50YWlsXG4gIG5vZGUubGlzdCA9IHRoaXNcbiAgbm9kZS5wcmV2ID0gdGFpbFxuICBpZiAodGFpbCkge1xuICAgIHRhaWwubmV4dCA9IG5vZGVcbiAgfVxuXG4gIHRoaXMudGFpbCA9IG5vZGVcbiAgaWYgKCF0aGlzLmhlYWQpIHtcbiAgICB0aGlzLmhlYWQgPSBub2RlXG4gIH1cbiAgdGhpcy5sZW5ndGgrK1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBwdXNoKHRoaXMsIGFyZ3VtZW50c1tpXSlcbiAgfVxuICByZXR1cm4gdGhpcy5sZW5ndGhcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdW5zaGlmdCh0aGlzLCBhcmd1bWVudHNbaV0pXG4gIH1cbiAgcmV0dXJuIHRoaXMubGVuZ3RoXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLnRhaWwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICB2YXIgcmVzID0gdGhpcy50YWlsLnZhbHVlXG4gIHRoaXMudGFpbCA9IHRoaXMudGFpbC5wcmV2XG4gIGlmICh0aGlzLnRhaWwpIHtcbiAgICB0aGlzLnRhaWwubmV4dCA9IG51bGxcbiAgfVxuICB0aGlzLmxlbmd0aC0tXG4gIHJldHVybiByZXNcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5oZWFkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgdmFyIHJlcyA9IHRoaXMuaGVhZC52YWx1ZVxuICB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dFxuICBpZiAodGhpcy5oZWFkKSB7XG4gICAgdGhpcy5oZWFkLnByZXYgPSBudWxsXG4gIH1cbiAgdGhpcy5sZW5ndGgtLVxuICByZXR1cm4gcmVzXG59XG5cbllhbGxpc3QucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZm4sIHRoaXNwKSB7XG4gIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICBmb3IgKHZhciB3YWxrZXIgPSB0aGlzLmhlYWQsIGkgPSAwOyB3YWxrZXIgIT09IG51bGw7IGkrKykge1xuICAgIGZuLmNhbGwodGhpc3AsIHdhbGtlci52YWx1ZSwgaSwgdGhpcylcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG59XG5cbllhbGxpc3QucHJvdG90eXBlLmZvckVhY2hSZXZlcnNlID0gZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgZm9yICh2YXIgd2Fsa2VyID0gdGhpcy50YWlsLCBpID0gdGhpcy5sZW5ndGggLSAxOyB3YWxrZXIgIT09IG51bGw7IGktLSkge1xuICAgIGZuLmNhbGwodGhpc3AsIHdhbGtlci52YWx1ZSwgaSwgdGhpcylcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG59XG5cbllhbGxpc3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuKSB7XG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlciAhPT0gbnVsbCAmJiBpIDwgbjsgaSsrKSB7XG4gICAgLy8gYWJvcnQgb3V0IG9mIHRoZSBsaXN0IGVhcmx5IGlmIHdlIGhpdCBhIGN5Y2xlXG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxuICBpZiAoaSA9PT0gbiAmJiB3YWxrZXIgIT09IG51bGwpIHtcbiAgICByZXR1cm4gd2Fsa2VyLnZhbHVlXG4gIH1cbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuZ2V0UmV2ZXJzZSA9IGZ1bmN0aW9uIChuKSB7XG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLnRhaWw7IHdhbGtlciAhPT0gbnVsbCAmJiBpIDwgbjsgaSsrKSB7XG4gICAgLy8gYWJvcnQgb3V0IG9mIHRoZSBsaXN0IGVhcmx5IGlmIHdlIGhpdCBhIGN5Y2xlXG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuICBpZiAoaSA9PT0gbiAmJiB3YWxrZXIgIT09IG51bGwpIHtcbiAgICByZXR1cm4gd2Fsa2VyLnZhbHVlXG4gIH1cbn1cblxuWWFsbGlzdC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgdmFyIHJlcyA9IG5ldyBZYWxsaXN0KClcbiAgZm9yICh2YXIgd2Fsa2VyID0gdGhpcy5oZWFkOyB3YWxrZXIgIT09IG51bGw7KSB7XG4gICAgcmVzLnB1c2goZm4uY2FsbCh0aGlzcCwgd2Fsa2VyLnZhbHVlLCB0aGlzKSlcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG4gIHJldHVybiByZXNcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUubWFwUmV2ZXJzZSA9IGZ1bmN0aW9uIChmbiwgdGhpc3ApIHtcbiAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gIHZhciByZXMgPSBuZXcgWWFsbGlzdCgpXG4gIGZvciAodmFyIHdhbGtlciA9IHRoaXMudGFpbDsgd2Fsa2VyICE9PSBudWxsOykge1xuICAgIHJlcy5wdXNoKGZuLmNhbGwodGhpc3AsIHdhbGtlci52YWx1ZSwgdGhpcykpXG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChmbiwgaW5pdGlhbCkge1xuICB2YXIgYWNjXG4gIHZhciB3YWxrZXIgPSB0aGlzLmhlYWRcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgYWNjID0gaW5pdGlhbFxuICB9IGVsc2UgaWYgKHRoaXMuaGVhZCkge1xuICAgIHdhbGtlciA9IHRoaXMuaGVhZC5uZXh0XG4gICAgYWNjID0gdGhpcy5oZWFkLnZhbHVlXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGxpc3Qgd2l0aCBubyBpbml0aWFsIHZhbHVlJylcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyB3YWxrZXIgIT09IG51bGw7IGkrKykge1xuICAgIGFjYyA9IGZuKGFjYywgd2Fsa2VyLnZhbHVlLCBpKVxuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cblxuICByZXR1cm4gYWNjXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnJlZHVjZVJldmVyc2UgPSBmdW5jdGlvbiAoZm4sIGluaXRpYWwpIHtcbiAgdmFyIGFjY1xuICB2YXIgd2Fsa2VyID0gdGhpcy50YWlsXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIGFjYyA9IGluaXRpYWxcbiAgfSBlbHNlIGlmICh0aGlzLnRhaWwpIHtcbiAgICB3YWxrZXIgPSB0aGlzLnRhaWwucHJldlxuICAgIGFjYyA9IHRoaXMudGFpbC52YWx1ZVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBsaXN0IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpXG4gIH1cblxuICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyB3YWxrZXIgIT09IG51bGw7IGktLSkge1xuICAgIGFjYyA9IGZuKGFjYywgd2Fsa2VyLnZhbHVlLCBpKVxuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cblxuICByZXR1cm4gYWNjXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnIgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlciAhPT0gbnVsbDsgaSsrKSB7XG4gICAgYXJyW2ldID0gd2Fsa2VyLnZhbHVlXG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxuICByZXR1cm4gYXJyXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnRvQXJyYXlSZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMCwgd2Fsa2VyID0gdGhpcy50YWlsOyB3YWxrZXIgIT09IG51bGw7IGkrKykge1xuICAgIGFycltpXSA9IHdhbGtlci52YWx1ZVxuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cbiAgcmV0dXJuIGFyclxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICB0byA9IHRvIHx8IHRoaXMubGVuZ3RoXG4gIGlmICh0byA8IDApIHtcbiAgICB0byArPSB0aGlzLmxlbmd0aFxuICB9XG4gIGZyb20gPSBmcm9tIHx8IDBcbiAgaWYgKGZyb20gPCAwKSB7XG4gICAgZnJvbSArPSB0aGlzLmxlbmd0aFxuICB9XG4gIHZhciByZXQgPSBuZXcgWWFsbGlzdCgpXG4gIGlmICh0byA8IGZyb20gfHwgdG8gPCAwKSB7XG4gICAgcmV0dXJuIHJldFxuICB9XG4gIGlmIChmcm9tIDwgMCkge1xuICAgIGZyb20gPSAwXG4gIH1cbiAgaWYgKHRvID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0byA9IHRoaXMubGVuZ3RoXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPCBmcm9tOyBpKyspIHtcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG4gIGZvciAoOyB3YWxrZXIgIT09IG51bGwgJiYgaSA8IHRvOyBpKyssIHdhbGtlciA9IHdhbGtlci5uZXh0KSB7XG4gICAgcmV0LnB1c2god2Fsa2VyLnZhbHVlKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuc2xpY2VSZXZlcnNlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XG4gIHRvID0gdG8gfHwgdGhpcy5sZW5ndGhcbiAgaWYgKHRvIDwgMCkge1xuICAgIHRvICs9IHRoaXMubGVuZ3RoXG4gIH1cbiAgZnJvbSA9IGZyb20gfHwgMFxuICBpZiAoZnJvbSA8IDApIHtcbiAgICBmcm9tICs9IHRoaXMubGVuZ3RoXG4gIH1cbiAgdmFyIHJldCA9IG5ldyBZYWxsaXN0KClcbiAgaWYgKHRvIDwgZnJvbSB8fCB0byA8IDApIHtcbiAgICByZXR1cm4gcmV0XG4gIH1cbiAgaWYgKGZyb20gPCAwKSB7XG4gICAgZnJvbSA9IDBcbiAgfVxuICBpZiAodG8gPiB0aGlzLmxlbmd0aCkge1xuICAgIHRvID0gdGhpcy5sZW5ndGhcbiAgfVxuICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGgsIHdhbGtlciA9IHRoaXMudGFpbDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPiB0bzsgaS0tKSB7XG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuICBmb3IgKDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPiBmcm9tOyBpLS0sIHdhbGtlciA9IHdhbGtlci5wcmV2KSB7XG4gICAgcmV0LnB1c2god2Fsa2VyLnZhbHVlKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQgPSB0aGlzLmhlYWRcbiAgdmFyIHRhaWwgPSB0aGlzLnRhaWxcbiAgZm9yICh2YXIgd2Fsa2VyID0gaGVhZDsgd2Fsa2VyICE9PSBudWxsOyB3YWxrZXIgPSB3YWxrZXIucHJldikge1xuICAgIHZhciBwID0gd2Fsa2VyLnByZXZcbiAgICB3YWxrZXIucHJldiA9IHdhbGtlci5uZXh0XG4gICAgd2Fsa2VyLm5leHQgPSBwXG4gIH1cbiAgdGhpcy5oZWFkID0gdGFpbFxuICB0aGlzLnRhaWwgPSBoZWFkXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHB1c2ggKHNlbGYsIGl0ZW0pIHtcbiAgc2VsZi50YWlsID0gbmV3IE5vZGUoaXRlbSwgc2VsZi50YWlsLCBudWxsLCBzZWxmKVxuICBpZiAoIXNlbGYuaGVhZCkge1xuICAgIHNlbGYuaGVhZCA9IHNlbGYudGFpbFxuICB9XG4gIHNlbGYubGVuZ3RoKytcbn1cblxuZnVuY3Rpb24gdW5zaGlmdCAoc2VsZiwgaXRlbSkge1xuICBzZWxmLmhlYWQgPSBuZXcgTm9kZShpdGVtLCBudWxsLCBzZWxmLmhlYWQsIHNlbGYpXG4gIGlmICghc2VsZi50YWlsKSB7XG4gICAgc2VsZi50YWlsID0gc2VsZi5oZWFkXG4gIH1cbiAgc2VsZi5sZW5ndGgrK1xufVxuXG5mdW5jdGlvbiBOb2RlICh2YWx1ZSwgcHJldiwgbmV4dCwgbGlzdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTm9kZSkpIHtcbiAgICByZXR1cm4gbmV3IE5vZGUodmFsdWUsIHByZXYsIG5leHQsIGxpc3QpXG4gIH1cblxuICB0aGlzLmxpc3QgPSBsaXN0XG4gIHRoaXMudmFsdWUgPSB2YWx1ZVxuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5uZXh0ID0gdGhpc1xuICAgIHRoaXMucHJldiA9IHByZXZcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnByZXYgPSBudWxsXG4gIH1cblxuICBpZiAobmV4dCkge1xuICAgIG5leHQucHJldiA9IHRoaXNcbiAgICB0aGlzLm5leHQgPSBuZXh0XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5uZXh0ID0gbnVsbFxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgc2V0IG9mIGJvdW5kcy5cbiAqL1xuY2xhc3MgQm91bmRzIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IEJvdW5kcyBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IC0gVGhlIGxlZnQgYm91bmQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSByaWdodCAtIFRoZSByaWdodCBib3VuZC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGJvdHRvbSAtIFRoZSBib3R0b20gYm91bmQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB0b3AgLSBUaGUgdG9wIGJvdW5kLlxuXHQgKi9cblx0Y29uc3RydWN0b3IobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wKSB7XG5cdFx0dGhpcy5sZWZ0ID0gbGVmdDtcblx0XHR0aGlzLnJpZ2h0ID0gcmlnaHQ7XG5cdFx0dGhpcy5ib3R0b20gPSBib3R0b207XG5cdFx0dGhpcy50b3AgPSB0b3A7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSB3aWR0aCBvZiB0aGUgYm91bmRzLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgd2lkdGggb2YgdGhlIGJvdW5kcy5cblx0ICovXG5cdHdpZHRoKCkge1xuXHRcdHJldHVybiB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgaGVpZ2h0IG9mIHRoZSBib3VuZHMuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBoZWlnaHQgb2YgdGhlIGJvdW5kcy5cblx0ICovXG5cdGhlaWdodCgpIHtcblx0XHRyZXR1cm4gdGhpcy50b3AgLSB0aGlzLmJvdHRvbTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUZXN0IGlmIHRoZSBib3VuZHMgZXF1YWxzIGFub3RoZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Qm91bmRzfSBib3VuZHMgLSBUaGUgYm91bmRzIG9iamVjdCB0byB0ZXN0LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGJvdW5kcyBvYmplY3RzIGFyZSBlcXVhbC5cblx0ICovXG5cdGVxdWFscyhib3VuZHMpIHtcblx0XHRyZXR1cm4gdGhpcy5sZWZ0ID09PSBib3VuZHMubGVmdCAmJlxuXHRcdFx0dGhpcy5yaWdodCA9PT0gYm91bmRzLnJpZ2h0ICYmXG5cdFx0XHR0aGlzLmJvdHRvbSA9PT0gYm91bmRzLmJvdHRvbSAmJlxuXHRcdFx0dGhpcy50b3AgPT09IGJvdW5kcy50b3A7XG5cdH1cblxuXHQvKipcblx0ICogVGVzdCBpZiB0aGUgYm91bmRzIG92ZXJsYXBzIGFub3RoZXIuIFRlc3QgaXMgaW5jbHVzaXZlIG9mIGVkZ2VzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JvdW5kc30gb3RoZXIgLSBUaGUgYm91bmRzIG9iamVjdCB0byB0ZXN0LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGJvdW5kcyBvdmVybGFwIGVhY2hvdGhlci5cblx0ICovXG5cdG92ZXJsYXBzKGJvdW5kcykge1xuXHRcdC8vIE5PVEU6IGluY2x1c2l2ZSBvZiBlZGdlc1xuXHRcdHJldHVybiAhKHRoaXMubGVmdCA+IGJvdW5kcy5yaWdodCB8fFxuXHRcdFx0dGhpcy5yaWdodCA8IGJvdW5kcy5sZWZ0IHx8XG5cdFx0XHR0aGlzLnRvcCA8IGJvdW5kcy5ib3R0b20gfHxcblx0XHRcdHRoaXMuYm90dG9tID4gYm91bmRzLnRvcCk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJuIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIGJvdW5kcy4gVGVzdCBpcyBpbmNsdXNpdmUgb2YgZWRnZXMuIElmXG5cdCAqIHRoZSBib3VuZHMgZG8gbm90IGludGVyc2VjdCwgcmV0dXJucyB1bmRlZmluZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Qm91bmRzfSBvdGhlciAtIFRoZSBib3VuZHMgb2JqZWN0IHRvIGludGVyc2VjdC5cblx0ICpcblx0ICogQHJldHVybnMge0JvdW5kc30gVGhlIGludGVyc2VjdGlvbiBvZiBib3RoIGJvdW5kcy5cblx0ICovXG5cdGludGVyc2VjdGlvbihib3VuZHMpIHtcblx0XHQvLyBOT1RFOiBpbmNsdXNpdmUgb2YgZWRnZXNcblx0XHRpZiAoIXRoaXMub3ZlcmxhcHMoYm91bmRzKSkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBCb3VuZHMoXG5cdFx0XHRNYXRoLm1heCh0aGlzLmxlZnQsIGJvdW5kcy5sZWZ0KSxcblx0XHRcdE1hdGgubWluKHRoaXMucmlnaHQsIGJvdW5kcy5yaWdodCksXG5cdFx0XHRNYXRoLm1heCh0aGlzLmJvdHRvbSwgYm91bmRzLmJvdHRvbSksXG5cdFx0XHRNYXRoLm1pbih0aGlzLnRvcCwgYm91bmRzLnRvcCkpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQm91bmRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYXJhc2F0YXNheWdpbi9pcy5qcy9ibG9iL21hc3Rlci9pcy5qc1xuXG5jb25zdCB1c2VyQWdlbnQgPSAobmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG5jb25zdCB2ZW5kb3IgPSAobmF2aWdhdG9yICYmIG5hdmlnYXRvci52ZW5kb3IgfHwgJycpLnRvTG93ZXJDYXNlKCk7XG5cbi8qKlxuICogVGVzdCBpZiB0aGUgYnJvd3NlciBpcyBmaXJlZm94LlxuICogQHByaXZhdGVcbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9IFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIGZpcmVmb3guXG4gKi9cbmNvbnN0IGlzRmlyZWZveCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdXNlckFnZW50Lm1hdGNoKC8oPzpmaXJlZm94fGZ4aW9zKVxcLyhcXGQrKS8pO1xufTtcblxuLyoqXG4gKiBUZXN0IGlmIHRoZSBicm93c2VyIGlzIGNocm9tZS5cbiAqIEBwcml2YXRlXG4gKlxuICogQHJldHVybnMge0FycmF5fSBXaGV0aGVyIG9yIG5vdCB0aGUgYnJvd3NlciBpcyBjaHJvbWUuXG4gKi9cbmNvbnN0IGlzQ2hyb21lID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiAvZ29vZ2xlIGluYy8udGVzdCh2ZW5kb3IpID8gdXNlckFnZW50Lm1hdGNoKC8oPzpjaHJvbWV8Y3Jpb3MpXFwvKFxcZCspLykgOiBudWxsO1xufTtcblxuLyoqXG4gKiBUZXN0IGlmIHRoZSBicm93c2VyIGlzIGludGVybmV0IGV4cGxvcmVyLlxuICogQHByaXZhdGVcbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9IFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIGludGVybmV0IGV4cGxvcmVyLlxuICovXG5jb25zdCBpc0lFID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB1c2VyQWdlbnQubWF0Y2goLyg/Om1zaWUgfHRyaWRlbnQuKz87IHJ2OikoXFxkKykvKTtcbn07XG5cbi8qKlxuICogVGVzdCBpZiB0aGUgYnJvd3NlciBpcyBlZGdlLlxuICogQHByaXZhdGVcbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9IFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIGVkZ2UuXG4gKi9cbmNvbnN0IGlzRWRnZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdXNlckFnZW50Lm1hdGNoKC9lZGdlXFwvKFxcZCspLyk7XG59O1xuXG4vKipcbiAqIFRlc3QgaWYgdGhlIGJyb3dzZXIgaXMgb3BlcmEuXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX0gV2hldGhlciBvciBub3QgdGhlIGJyb3dzZXIgaXMgb3BlcmEuXG4gKi9cbmNvbnN0IGlzT3BlcmEgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHVzZXJBZ2VudC5tYXRjaCgvKD86Xm9wZXJhLis/dmVyc2lvbnxvcHIpXFwvKFxcZCspLyk7XG59O1xuXG4vKipcbiAqIFRlc3QgaWYgdGhlIGJyb3dzZXIgaXMgc2FmYXJpLlxuICogQHByaXZhdGVcbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9IFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIHNhZmFyaS5cbiAqL1xuY29uc3QgaXNTYWZhcmkgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHVzZXJBZ2VudC5tYXRjaCgvdmVyc2lvblxcLyhcXGQrKS4rP3NhZmFyaS8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIGZpcmVmb3guXG5cdCAqIEBjb25zdGFudCB7Ym9vbGVhbn1cblx0ICovXG5cdGZpcmVmb3g6ICEhaXNGaXJlZm94KCksXG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIGNocm9tZS5cblx0ICogQGNvbnN0YW50IHtib29sZWFufVxuXHQgKi9cblx0Y2hyb21lOiAhIWlzQ2hyb21lKCksXG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIGllLlxuXHQgKiBAY29uc3RhbnQge2Jvb2xlYW59XG5cdCAqL1xuXHRpZTogISFpc0lFKCksXG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIGVkZ2UuXG5cdCAqIEBjb25zdGFudCB7Ym9vbGVhbn1cblx0ICovXG5cdGVkZ2U6ICEhaXNFZGdlKCksXG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIG9wZXJhLlxuXHQgKiBAY29uc3RhbnQge2Jvb2xlYW59XG5cdCAqL1xuXHRvcGVyYTogISFpc09wZXJhKCksXG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIGlzIHNhZmFyaS5cblx0ICogQGNvbnN0YW50IHtib29sZWFufVxuXHQgKi9cblx0c2FmYXJpOiAhIWlzU2FmYXJpKClcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEJvdW5kcyA9IHJlcXVpcmUoJy4vQm91bmRzJyk7XG5cbi8vIFByaXZhdGUgTWV0aG9kc1xuXG5jb25zdCBtb2QgPSBmdW5jdGlvbihuLCBtKSB7XG5cdHJldHVybiAoKG4gJSBtKSArIG0pICUgbTtcbn07XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgdGlsZSBjb29yZGluYXRlLlxuICovXG5jbGFzcyBDb29yZCB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlcyBhIG5ldyBCb3VuZHMgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0geiAtIFRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdGlsZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHggLSBUaGUgeCBjb21wb25lbnQgb2YgdGhlIHRpbGUuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gVGhlIHkgY29tcG9uZW50IG9mIHRoZSB0aWxlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoeiwgeCwgeSkge1xuXHRcdHRoaXMueiA9IHo7XG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMuaGFzaCA9IGAke3RoaXMuen06JHt0aGlzLnh9OiR7dGhpcy55fWA7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgWFlaIFVSTCBzdHJpbmcuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBYWVogVVJMIHN0cmluZy5cblx0ICovXG5cdHh5eigpIHtcblx0XHRjb25zdCBkaW0gPSBNYXRoLnBvdygyLCB0aGlzLnopO1xuXHRcdHJldHVybiBgJHt0aGlzLnp9LyR7dGhpcy54fS8ke2RpbSAtIDEgLSB0aGlzLnl9YDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBUTVMgVVJMIHN0cmluZy5cblx0ICpcblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFRNUyBVUkwgc3RyaW5nLlxuXHQgKi9cblx0dG1zKCkge1xuXHRcdHJldHVybiBgJHt0aGlzLnp9LyR7dGhpcy54fS8ke3RoaXMueX1gO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlc3QgaWYgdGhlIGJvdW5kcyBlcXVhbHMgYW5vdGhlci5cblx0ICpcblx0ICogQHBhcmFtIHtDb29yZH0gY29vcmQgLSBUaGUgY29vcmQgb2JqZWN0IHRvIHRlc3QuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgY29vcmQgb2JqZWN0cyBhcmUgZXF1YWwuXG5cdCAqL1xuXHRlcXVhbHMoY29vcmQpIHtcblx0XHRyZXR1cm4gdGhpcy56ID09PSBjb29yZC56ICYmXG5cdFx0XHR0aGlzLnggPT09IGNvb3JkLnggJiZcblx0XHRcdHRoaXMueSA9PT0gY29vcmQueTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIGFuY2VzdG9yIGNvb3JkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldCBvZiB0aGUgYW5jZXN0b3IgZnJvbSB0aGUgY29vcmQuIE9wdGlvbmFsLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Q29vcmR9IFRoZSBhbmNlc3RvciBjb29yZC5cblx0ICovXG5cdGdldEFuY2VzdG9yKG9mZnNldCA9IDEpIHtcblx0XHRjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIG9mZnNldCk7XG5cdFx0cmV0dXJuIG5ldyBDb29yZChcblx0XHRcdHRoaXMueiAtIG9mZnNldCxcblx0XHRcdE1hdGguZmxvb3IodGhpcy54IC8gc2NhbGUpLFxuXHRcdFx0TWF0aC5mbG9vcih0aGlzLnkgLyBzY2FsZSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgZGVzY2VuZGFudHMgb2YgdGhlIGNvb3JkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldCBvZiB0aGUgZGVzY2VuZGFudHMgZnJvbSB0aGUgY29vcmQuIE9wdGlvbmFsLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBvZiBkZXNjZW5kYW50IGNvb3Jkcy5cblx0ICovXG5cdGdldERlc2NlbmRhbnRzKG9mZnNldCA9IDEpIHtcblx0XHRjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIG9mZnNldCk7XG5cdFx0Y29uc3QgY29vcmRzID0gW107XG5cdFx0Zm9yIChsZXQgeD0wOyB4PHNjYWxlOyB4KyspIHtcblx0XHRcdGZvciAobGV0IHk9MDsgeTxzY2FsZTsgeSsrKSB7XG5cdFx0XHRcdGNvb3Jkcy5wdXNoKG5ldyBDb29yZChcblx0XHRcdFx0XHR0aGlzLnogKyBvZmZzZXQsXG5cdFx0XHRcdFx0dGhpcy54ICogc2NhbGUgKyB4LFxuXHRcdFx0XHRcdHRoaXMueSAqIHNjYWxlICsgeSkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY29vcmRzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlc3QgaWYgdGhlIGNvb3JkIGlzIGFuIGFuY2VzdG9yIG9mIHRoZSBwcm92aWRlZCBjb29yZC5cblx0ICpcblx0ICogQHBhcmFtIHtDb29yZH0gY29vcmQgLSBUaGUgY29vcmQgb2JqZWN0IHRvIHRlc3QuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvdmlkZWQgY29vcmQgaXMgYW4gYW5jZXN0b3IuXG5cdCAqL1xuXHRpc0FuY2VzdG9yT2YoY2hpbGQpIHtcblx0XHRpZiAodGhpcy56ID49IGNoaWxkLnopIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Y29uc3QgZGlmZiA9IGNoaWxkLnogLSB0aGlzLno7XG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCBkaWZmKTtcblx0XHRjb25zdCB4ID0gTWF0aC5mbG9vcihjaGlsZC54IC8gc2NhbGUpO1xuXHRcdGlmICh0aGlzLnggIT09IHgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Y29uc3QgeSA9IE1hdGguZmxvb3IoY2hpbGQueSAvIHNjYWxlKTtcblx0XHRyZXR1cm4gdGhpcy55ID09PSB5O1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlc3QgaWYgdGhlIGNvb3JkIGlzIGEgZGVzY2VuZGFudCBvZiB0aGUgcHJvdmlkZWQgY29vcmQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29vcmR9IGNvb3JkIC0gVGhlIGNvb3JkIG9iamVjdCB0byB0ZXN0LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIHByb3ZpZGVkIGNvb3JkIGlzIGEgZGVzY2VuZGFudC5cblx0ICovXG5cdGlzRGVzY2VuZGFudE9mKHBhcmVudCkge1xuXHRcdHJldHVybiBwYXJlbnQuaXNBbmNlc3Rvck9mKHRoaXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG5vcm1hbGl6ZWQgY29vcmQuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtDb29yZH0gVGhlIG5vcm1hbGl6ZWQgY29vcmQuXG5cdCAqL1xuXHRub3JtYWxpemUoKSB7XG5cdFx0Y29uc3QgZGltID0gTWF0aC5wb3coMiwgdGhpcy56KTtcblx0XHRyZXR1cm4gbmV3IENvb3JkKFxuXHRcdFx0dGhpcy56LFxuXHRcdFx0bW9kKHRoaXMueCwgZGltKSxcblx0XHRcdG1vZCh0aGlzLnksIGRpbSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHBpeGVsIGJvdW5kcyBvZiB0aGUgY29vcmQuIEJvdW5kcyBlZGdlcyBhcmUgaW5jbHVzaXZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdGlsZVNpemUgLSBUaGUgZGltZW5zaW9uIG9mIHRoZSB0aWxlcywgaW4gcGl4ZWxzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdmlld3BvcnRab29tIC0gVGhlIHpvb20gb2YgdGhlIHZpZXdwb3J0LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Qm91bmRzfSBUaGUgcGl4ZWwgYm91bmRzIG9mIHRoZSB2aWV3cG9ydC5cblx0ICovXG5cdGdldFBpeGVsQm91bmRzKHRpbGVTaXplLCB2aWV3cG9ydFpvb20gPSB0aGlzLnopIHtcblx0XHQvLyBOT1RFOiBib3VuZHMgYXJlIElOQ0xVU0lWRVxuXHRcdC8vIHNjYWxlIHRoZSBwaXhlbCBib3VuZHMgZGVwZW5kaW5nIG9uIHRoZSB2aWV3cG9ydFpvb21cblx0XHRjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIHZpZXdwb3J0Wm9vbSAtIHRoaXMueik7XG5cdFx0Y29uc3Qgc2NhbGVkVGlsZVNpemUgPSB0aWxlU2l6ZSAqIHNjYWxlO1xuXHRcdGNvbnN0IHNjYWxlZFggPSB0aGlzLnggKiBzY2FsZWRUaWxlU2l6ZTtcblx0XHRjb25zdCBzY2FsZWRZID0gdGhpcy55ICogc2NhbGVkVGlsZVNpemU7XG5cdFx0cmV0dXJuIG5ldyBCb3VuZHMoXG5cdFx0XHRNYXRoLnJvdW5kKHNjYWxlZFgpLFxuXHRcdFx0TWF0aC5yb3VuZChzY2FsZWRYICsgc2NhbGVkVGlsZVNpemUgLSAxKSxcblx0XHRcdE1hdGgucm91bmQoc2NhbGVkWSksXG5cdFx0XHRNYXRoLnJvdW5kKHNjYWxlZFkgKyBzY2FsZWRUaWxlU2l6ZSAtIDEpKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvb3JkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBrZXlzID0ge1xuXHRzZWxlY3Q6IGZhbHNlLFxuXHRjdHJsOiBmYWxzZSxcblx0bWV0YTogZmFsc2Vcbn07XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudCA9PiB7XG5cdGlmIChldmVudC5zZWxlY3RLZXkpIHtcblx0XHRrZXlzLnNlbGVjdCA9IHRydWU7XG5cdH1cblx0aWYgKGV2ZW50LmN0cmxLZXkpIHtcblx0XHRrZXlzLmN0cmwgPSB0cnVlO1xuXHR9XG5cdGlmIChldmVudC5tZXRhS2V5KSB7XG5cdFx0a2V5cy5tZXRhID0gdHJ1ZTtcblx0fVxufSk7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZXZlbnQgPT4ge1xuXHRpZiAoIWV2ZW50LnNlbGVjdEtleSkge1xuXHRcdGtleXMuc2VsZWN0ID0gZmFsc2U7XG5cdH1cblx0aWYgKCFldmVudC5jdHJsS2V5KSB7XG5cdFx0a2V5cy5jdHJsID0gZmFsc2U7XG5cdH1cblx0aWYgKCFldmVudC5tZXRhS2V5KSB7XG5cdFx0a2V5cy5tZXRhID0gZmFsc2U7XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuXHQvKipcblx0ICogUG9sbCBpZiBhIG1vZGlmaWVyIGtleSBpcyBjdXJyZW50bHkgaGVsZCBkb3duLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30ga2V5IC0gVGhlIGtleSBpZGVudGlmaWVyLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGtleSBpcyBoZWxkIGRvd24uXG5cdCAqL1xuXHRwb2xsOiBmdW5jdGlvbihrZXkpIHtcblx0XHRyZXR1cm4ga2V5c1trZXldIHx8IGZhbHNlO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1heGltdW0gc2FmZSBpbnRlZ2VyLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBNQVhfU0FGRV9JTlQgPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuXG4vLyBQcml2YXRlIE1ldGhvZHNcblxubGV0IHVpZCA9IDE7XG5jb25zdCBnZXRVSUQgPSBmdW5jdGlvbigpIHtcblx0dWlkID0gKHVpZCArIDEpICUgTUFYX1NBRkVfSU5UO1xuXHRyZXR1cm4gdWlkO1xufTtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSB0aWxlLlxuICovXG5jbGFzcyBUaWxlIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IEJvdW5kcyBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29vcmR9IGNvb3JkIC0gVGhlIGNvb3JkIG9mIHRoZSB0aWxlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoY29vcmQpIHtcblx0XHR0aGlzLmNvb3JkID0gY29vcmQ7XG5cdFx0dGhpcy51aWQgPSBnZXRVSUQoKTtcblx0XHR0aGlzLmRhdGEgPSBudWxsO1xuXHRcdHRoaXMuZXJyID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRpbGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50ID0gcmVxdWlyZSgnLi9FdmVudCcpO1xuXG5jbGFzcyBDbGlja0V2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRjb25zdHJ1Y3Rvcih0YXJnZXQsIGJ1dHRvbiwgdmlld1B4LCBwbG90UHgsIGRhdGEgPSBudWxsKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnRhcmdldCA9IHRhcmdldDtcblx0XHR0aGlzLnZpZXdQeCA9IHZpZXdQeDtcblx0XHR0aGlzLnBsb3RQeCA9IHBsb3RQeDtcblx0XHR0aGlzLmJ1dHRvbiA9IGJ1dHRvbjtcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpY2tFdmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnQgPSByZXF1aXJlKCcuL0V2ZW50Jyk7XG5cbmNsYXNzIERyYXdFdmVudCBleHRlbmRzIEV2ZW50IHtcblx0Y29uc3RydWN0b3IodGltZXN0YW1wLCB0aWxlcykge1xuXHRcdHN1cGVyKHRpbWVzdGFtcCk7XG5cdFx0dGhpcy50aWxlcyA9IHRpbGVzO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhd0V2ZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBFdmVudCB7XG5cdGNvbnN0cnVjdG9yKHRpbWVzdGFtcCA9IERhdGUubm93KCkpIHtcblx0XHR0aGlzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuXHQvKipcblx0ICogRW1pdHRlZCB3aGVuIHRoZSBwbG90IGlzIGNsaWNrZWQuXG5cdCAqIEBjb25zdGFudCB7U3RyaW5nfVxuXHQgKi9cblx0Q0xJQ0s6ICdjbGljaycsXG5cblx0LyoqXG5cdCAqIEVtaXR0ZWQgd2hlbiB0aGUgcGxvdCBpcyBkb3VibGUgY2xpY2tlZC5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHREQkxfQ0xJQ0s6ICdkYmxjbGljaycsXG5cblx0LyoqXG5cdCAqIEVtaXR0ZWQgd2hlbiBhIG1vdXNlIGJ1dHRvbiBpcyBwcmVzc2VkLlxuXHQgKiBAY29uc3RhbnQge1N0cmluZ31cblx0ICovXG5cdE1PVVNFX0RPV046ICdtb3VzZWRvd24nLFxuXG5cdC8qKlxuXHQgKiBFbWl0dGVkIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcmVsZWFzZWQuXG5cdCAqIEBjb25zdGFudCB7U3RyaW5nfVxuXHQgKi9cblx0TU9VU0VfVVA6ICdtb3VzZXVwJyxcblxuXHQvKipcblx0ICogRW1pdHRlZCB3aGVuIHRoZSBtb3VzZSBpcyBtb3ZlZCBvbiB0aGUgdGFyZ2V0LlxuXHQgKiBAY29uc3RhbnQge1N0cmluZ31cblx0ICovXG5cdE1PVVNFX01PVkU6ICdtb3VzZW1vdmUnLFxuXG5cdC8qKlxuXHQgKiBFbWl0dGVkIHdoZW4gdGhlIG1vdXNlIGlzIG1vdmVkIG9udG8gdGhlIHRhcmdldC5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRNT1VTRV9PVkVSOiAnbW91c2VvdmVyJyxcblxuXHQvKipcblx0ICogRW1pdHRlZCB3aGVuIHRoZSBtb3VzZSBpcyBtb3ZlZCBvdXQgb2YgdGhlIHRhcmdldC5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRNT1VTRV9PVVQ6ICdtb3VzZW91dCcsXG5cblx0LyoqXG5cdCAqIEVtaXR0ZWQgd2hlbiBhIG5ldyBwYW4gZXZlbnQgaXMgaGFuZGxlZC5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRQQU5fU1RBUlQ6ICdwYW5zdGFydCcsXG5cblx0LyoqXG5cdCAqIEVtaXR0ZWQgZHVyaW5nIGVhY2ggZnJhbWUgb2YgYSBwYW4gYW5pbWF0aW9uLlxuXHQgKiBAY29uc3RhbnQge1N0cmluZ31cblx0ICovXG5cdFBBTjogJ3BhbicsXG5cblx0LyoqXG5cdCAqIEVtaXR0ZWQgb24gdGhlIGZpbmFsIGZyYW1lIG9mIGEgcGFuIGFuaW1hdGlvbi5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRQQU5fRU5EOiAncGFuZW5kJyxcblxuXHQvKipcblx0ICogRW1pdHRlZCB3aGVuIGEgbmV3IHpvb20gZXZlbnQgaXMgaGFuZGxlZC5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRaT09NX1NUQVJUOiAnem9vbXN0YXJ0JyxcblxuXHQvKipcblx0ICogRW1pdHRlZCBkdXJpbmcgZWFjaCBmcmFtZSBvZiBhIHpvb20gYW5pbWF0aW9uLlxuXHQgKiBAY29uc3RhbnQge1N0cmluZ31cblx0ICovXG5cdFpPT006ICd6b29tJyxcblxuXHQvKipcblx0ICogRW1pdHRlZCBvbiB0aGUgZmluYWwgZnJhbWUgb2YgYSB6b29tIGFuaW1hdGlvbi5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRaT09NX0VORDogJ3pvb21lbmQnLFxuXG5cdC8qKlxuXHQgKiBFbWl0dGVkIGJlZm9yZSBwcm9jZXNzaW5nIGEgbmV3IGZyYW1lLlxuXHQgKiBAY29uc3RhbnQge1N0cmluZ31cblx0ICovXG5cdEZSQU1FOiAnZnJhbWUnLFxuXG5cdC8qKlxuXHQgKiBFbWl0dGVkIHdoZW4gcHJvY2Vzc2luZyBhIHJlc2l6ZSBldmVudC5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRSRVNJWkU6ICdyZXNpemUnLFxuXG5cdC8qKlxuXHQgKiBFbWl0dGVkIHdoZW4gYW4gaW5pdGlhbCByZXF1ZXN0IGZvciBhIHRpbGUgaXMgbWFkZSwgdGhlIHRpbGUgaXMgbm90XG5cdCAqIHlldCBwYXJ0IG9mIHRoZSBsYXllciBhbmQgaGFzIG5vdCB5ZXQgYmVlbiByZXF1ZXN0ZWQuXG5cdCAqIEBjb25zdGFudCB7U3RyaW5nfVxuXHQgKi9cblx0VElMRV9SRVFVRVNUOiAndGlsZXJlcXVlc3QnLFxuXG5cdC8qKlxuXHQgKiBFbWl0dGVkIHdoZW4gYSB0aWxlIHJlcXVlc3QgY29tcGxldGVzIHVuc3VjY2Vzc2Z1bGx5LiBUaGUgdGlsZSBpcyBub3Rcblx0ICogYWRkZWQgdG8gdGhlIGxheWVyLlxuXHQgKiBAY29uc3RhbnQge1N0cmluZ31cblx0ICovXG5cdFRJTEVfRkFJTFVSRTogJ3RpbGVmYWlsdXJlJyxcblxuXHQvKipcblx0ICogRW1pdHRlZCB3aGVuIGEgdGlsZSByZXF1ZXN0IGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuIFRoZSB0aWxlIGlzIGFkZGVkXG5cdCAqIHRvIHRoZSBsYXllci5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRUSUxFX0FERDogJ3RpbGVhZGQnLFxuXG5cdC8qKlxuXHQgKiBFbWl0dGVkIHdoZW4gYSB0aWxlIHJlcXVlc3QgY29tcGxldGVzIHN1Y2Nlc3NmdWxseSBidXQgdGhlIHRpbGUgaXMgbm9cblx0ICogbG9uZ2VyIGluIHZpZXcuIFRoZSB0aWxlIGlzIG5vdCBhZGRlZCB0byB0aGUgbGF5ZXIuXG5cdCAqIEBjb25zdGFudCB7U3RyaW5nfVxuXHQgKi9cblx0VElMRV9ESVNDQVJEOiAndGlsZWRpc2NhcmQnLFxuXG5cdC8qKlxuXHQgKiBFbWl0dGVkIHdoZW4gYSB0aWxlIGlzIGV2aWN0ZWQgZnJvbSB0aGUgaW50ZXJuYWwgTFJVIGNhY2hlLlxuXHQgKiBAY29uc3RhbnQge1N0cmluZ31cblx0ICovXG5cdFRJTEVfUkVNT1ZFOiAndGlsZXJlbW92ZScsXG5cblx0LyoqXG5cdCAqIEVtaXR0ZWQgd2hlbiBhbGwgdmlzaWJsZSB0aWxlcyBoYXZlIGJlZW4gbG9hZGVkIGZvciBhIGxheWVyLlxuXHQgKiBAY29uc3RhbnQge1N0cmluZ31cblx0ICovXG5cdExPQUQ6ICdsb2FkJyxcblxuXHQvKipcblx0ICogRW1pdHRlZCBieSBET01SZW5kZXJlciBhZnRlciB0aWxlcyBhcmUgcmVuZGVyZWQgdG8gdGhlIERPTS5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRQT1NUX0RSQVc6ICdwb3N0ZHJhdydcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50ID0gcmVxdWlyZSgnLi9FdmVudCcpO1xuXG5jbGFzcyBGcmFtZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRjb25zdHJ1Y3Rvcih0aW1lc3RhbXApIHtcblx0XHRzdXBlcih0aW1lc3RhbXApO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRnJhbWVFdmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnQgPSByZXF1aXJlKCcuL0V2ZW50Jyk7XG5cbmNsYXNzIE1vdXNlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG5cdGNvbnN0cnVjdG9yKHRhcmdldCwgYnV0dG9uLCB2aWV3UHgsIHBsb3RQeCwgZGF0YSA9IG51bGwpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuXHRcdHRoaXMudmlld1B4ID0gdmlld1B4O1xuXHRcdHRoaXMucGxvdFB4ID0gcGxvdFB4O1xuXHRcdHRoaXMuYnV0dG9uID0gYnV0dG9uO1xuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb3VzZUV2ZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFdmVudCA9IHJlcXVpcmUoJy4vRXZlbnQnKTtcblxuY2xhc3MgUGFuRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG5cdGNvbnN0cnVjdG9yKHBsb3QsIHByZXZQeCA9IHBsb3Qudmlld3BvcnQuZ2V0UG9zaXRpb24oKSwgY3VycmVudFB4ID0gcGxvdC52aWV3cG9ydC5nZXRQb3NpdGlvbigpKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnBsb3QgPSBwbG90O1xuXHRcdHRoaXMucHJldlB4ID0gcHJldlB4O1xuXHRcdHRoaXMuY3VycmVudFB4ID0gY3VycmVudFB4O1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFuRXZlbnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50ID0gcmVxdWlyZSgnLi9FdmVudCcpO1xuXG5jbGFzcyBSZXNpemVFdmVudCBleHRlbmRzIEV2ZW50IHtcblx0Y29uc3RydWN0b3IocGxvdCwgcHJldlNpemUsIHRhcmdldFNpemUpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMucGxvdCA9IHBsb3Q7XG5cdFx0dGhpcy5wcmV2U2l6ZSA9IHByZXZTaXplO1xuXHRcdHRoaXMudGFyZ2V0U2l6ZSA9IHRhcmdldFNpemU7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXNpemVFdmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnQgPSByZXF1aXJlKCcuL0V2ZW50Jyk7XG5cbmNsYXNzIFRpbGVFdmVudCBleHRlbmRzIEV2ZW50IHtcblx0Y29uc3RydWN0b3IobGF5ZXIsIHRpbGUpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMubGF5ZXIgPSBsYXllcjtcblx0XHR0aGlzLnRpbGUgPSB0aWxlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGlsZUV2ZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFdmVudCA9IHJlcXVpcmUoJy4vRXZlbnQnKTtcblxuY2xhc3MgWm9vbUV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRjb25zdHJ1Y3RvcihwbG90LCBwcmV2Wm9vbSwgY3VycmVudFpvb20sIHRhcmdldFpvb20pIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMucGxvdCA9IHBsb3Q7XG5cdFx0dGhpcy5wcmV2Wm9vbSA9IHByZXZab29tO1xuXHRcdHRoaXMuY3VycmVudFpvb20gPSBjdXJyZW50Wm9vbTtcblx0XHR0aGlzLnRhcmdldFpvb20gPSB0YXJnZXRab29tO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gWm9vbUV2ZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFdmVudFR5cGUgPSByZXF1aXJlKCcuL2V2ZW50L0V2ZW50VHlwZScpO1xuY29uc3QgQ29sbGlzaW9uVHlwZSA9IHJlcXVpcmUoJy4vcmVuZGVyL3dlYmdsL3J0cmVlL0NvbGxpc2lvblR5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8vIGNvcmVcblx0Qm91bmRzOiByZXF1aXJlKCcuL2NvcmUvQm91bmRzJyksXG5cdEJyb3dzZXI6IHJlcXVpcmUoJy4vY29yZS9Ccm93c2VyJyksXG5cdENvb3JkOiByZXF1aXJlKCcuL2NvcmUvQ29vcmQnKSxcblx0VGlsZTogcmVxdWlyZSgnLi9jb3JlL1RpbGUnKSxcblx0Ly8gZXZlbnQgdHlwZXNcblx0Q0xJQ0s6IEV2ZW50VHlwZS5DTElDSyxcblx0REJMX0NMSUNLOiBFdmVudFR5cGUuREJMX0NMSUNLLFxuXHRNT1VTRV9ET1dOOiBFdmVudFR5cGUuTU9VU0VfRE9XTixcblx0TU9VU0VfVVA6IEV2ZW50VHlwZS5NT1VTRV9VUCxcblx0TU9VU0VfTU9WRTogRXZlbnRUeXBlLk1PVVNFX01PVkUsXG5cdE1PVVNFX09WRVI6IEV2ZW50VHlwZS5NT1VTRV9PVkVSLFxuXHRNT1VTRV9PVVQ6IEV2ZW50VHlwZS5NT1VTRV9PVVQsXG5cdFBBTl9TVEFSVDogRXZlbnRUeXBlLlBBTl9TVEFSVCxcblx0UEFOOiBFdmVudFR5cGUuUEFOLFxuXHRQQU5fRU5EOiBFdmVudFR5cGUuUEFOX0VORCxcblx0Wk9PTV9TVEFSVDogRXZlbnRUeXBlLlpPT01fU1RBUlQsXG5cdFpPT006IEV2ZW50VHlwZS5aT09NLFxuXHRaT09NX0VORDogRXZlbnRUeXBlLlpPT01fRU5ELFxuXHRGUkFNRTogRXZlbnRUeXBlLkZSQU1FLFxuXHRSRVNJWkU6IEV2ZW50VHlwZS5SRVNJWkUsXG5cdFRJTEVfUkVRVUVTVDogRXZlbnRUeXBlLlRJTEVfUkVRVUVTVCxcblx0VElMRV9GQUlMVVJFOiBFdmVudFR5cGUuVElMRV9GQUlMVVJFLFxuXHRUSUxFX0FERDogRXZlbnRUeXBlLlRJTEVfQURELFxuXHRUSUxFX0RJU0NBUkQ6IEV2ZW50VHlwZS5USUxFX0RJU0NBUkQsXG5cdFRJTEVfUkVNT1ZFOiBFdmVudFR5cGUuVElMRV9SRU1PVkUsXG5cdFBPU1RfRFJBVzogRXZlbnRUeXBlLlBPU1RfRFJBVyxcblx0Ly8gZXZlbnRcblx0RXZlbnQ6IHJlcXVpcmUoJy4vZXZlbnQvRXZlbnQnKSxcblx0RXZlbnRUeXBlOiByZXF1aXJlKCcuL2V2ZW50L0V2ZW50VHlwZScpLFxuXHRDbGlja0V2ZW50OiByZXF1aXJlKCcuL2V2ZW50L0NsaWNrRXZlbnQnKSxcblx0RHJhd0V2ZW50OiByZXF1aXJlKCcuL2V2ZW50L0RyYXdFdmVudCcpLFxuXHRGcmFtZUV2ZW50OiByZXF1aXJlKCcuL2V2ZW50L0ZyYW1lRXZlbnQnKSxcblx0TW91c2VFdmVudDogcmVxdWlyZSgnLi9ldmVudC9Nb3VzZUV2ZW50JyksXG5cdFBhbkV2ZW50OiByZXF1aXJlKCcuL2V2ZW50L1BhbkV2ZW50JyksXG5cdFJlc2l6ZUV2ZW50OiByZXF1aXJlKCcuL2V2ZW50L1Jlc2l6ZUV2ZW50JyksXG5cdFRpbGVFdmVudDogcmVxdWlyZSgnLi9ldmVudC9UaWxlRXZlbnQnKSxcblx0Wm9vbUV2ZW50OiByZXF1aXJlKCcuL2V2ZW50L1pvb21FdmVudCcpLFxuXHQvLyBjb2xsaXNpb25cblx0UlRyZWU6IHJlcXVpcmUoJy4vcmVuZGVyL3dlYmdsL3J0cmVlL1JUcmVlLmpzJyksXG5cdC8vIGNvbGxpc2lvbiB0eXBlc1xuXHRDSVJDTEU6IENvbGxpc2lvblR5cGUuQ0lSQ0xFLFxuXHRSRUNUQU5HTEU6IENvbGxpc2lvblR5cGUuUkVDVEFOR0xFLFxuXHQvLyBsYXllclxuXHRMYXllcjogcmVxdWlyZSgnLi9sYXllci9MYXllcicpLFxuXHQvLyBwbG90XG5cdFBsb3Q6IHJlcXVpcmUoJy4vcGxvdC9QbG90JyksXG5cdC8vIHJlbmRlclxuXHRSZW5kZXJlcjogcmVxdWlyZSgnLi9yZW5kZXIvUmVuZGVyZXInKSxcblx0Ly8gZG9tXG5cdERPTVJlbmRlcmVyOiByZXF1aXJlKCcuL3JlbmRlci9kb20vSFRNTFJlbmRlcmVyJyksXG5cdEhUTUxSZW5kZXJlcjogcmVxdWlyZSgnLi9yZW5kZXIvZG9tL0hUTUxSZW5kZXJlcicpLFxuXHRTVkdSZW5kZXJlcjogcmVxdWlyZSgnLi9yZW5kZXIvZG9tL1NWR1JlbmRlcmVyJyksXG5cdC8vIHdlYmdsXG5cdFdlYkdMUmVuZGVyZXI6IHJlcXVpcmUoJy4vcmVuZGVyL3dlYmdsL1dlYkdMUmVuZGVyZXInKSxcblx0V2ViR0xUZXh0dXJlUmVuZGVyZXI6IHJlcXVpcmUoJy4vcmVuZGVyL3dlYmdsL1dlYkdMVGV4dHVyZVJlbmRlcmVyJyksXG5cdFdlYkdMVmVydGV4UmVuZGVyZXI6IHJlcXVpcmUoJy4vcmVuZGVyL3dlYmdsL1dlYkdMVmVydGV4UmVuZGVyZXInKSxcblx0V2ViR0xJbnRlcmFjdGl2ZVJlbmRlcmVyOiByZXF1aXJlKCcuL3JlbmRlci93ZWJnbC9XZWJHTEludGVyYWN0aXZlUmVuZGVyZXInKSxcblx0UG9pbnRSZW5kZXJlcjogcmVxdWlyZSgnLi9yZW5kZXIvd2ViZ2wvUG9pbnRSZW5kZXJlcicpLFxuXHRTaGFwZVJlbmRlcmVyOiByZXF1aXJlKCcuL3JlbmRlci93ZWJnbC9TaGFwZVJlbmRlcmVyJyksXG5cdFRleHR1cmVSZW5kZXJlcjogcmVxdWlyZSgnLi9yZW5kZXIvd2ViZ2wvVGV4dHVyZVJlbmRlcmVyJyksXG5cdEludGVyYWN0aXZlUmVuZGVyZXI6IHJlcXVpcmUoJy4vcmVuZGVyL3dlYmdsL0ludGVyYWN0aXZlUmVuZGVyZXInKSxcblx0Ly8gc2hhZGVyXG5cdFNoYWRlcjogcmVxdWlyZSgnLi9yZW5kZXIvd2ViZ2wvc2hhZGVyL1NoYWRlcicpLFxuXHQvLyB0ZXh0dXJlXG5cdFRleHR1cmU6IHJlcXVpcmUoJy4vcmVuZGVyL3dlYmdsL3RleHR1cmUvVGV4dHVyZScpLFxuXHRUZXh0dXJlQXJyYXk6IHJlcXVpcmUoJy4vcmVuZGVyL3dlYmdsL3RleHR1cmUvVGV4dHVyZUFycmF5JyksXG5cdC8vIHZlcnRleFxuXHRWZXJ0ZXhBdGxhczogcmVxdWlyZSgnLi9yZW5kZXIvd2ViZ2wvdmVydGV4L1ZlcnRleEF0bGFzJyksXG5cdFZlcnRleEJ1ZmZlcjogcmVxdWlyZSgnLi9yZW5kZXIvd2ViZ2wvdmVydGV4L1ZlcnRleEJ1ZmZlcicpLFxuXHQvLyB1dGlsXG5cdGxvYWRCdWZmZXI6IHJlcXVpcmUoJy4vdXRpbC9sb2FkQnVmZmVyJyksXG5cdGxvYWRJbWFnZTogcmVxdWlyZSgnLi91dGlsL2xvYWRJbWFnZScpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkZWZhdWx0VG8gPSByZXF1aXJlKCdsb2Rhc2gvZGVmYXVsdFRvJyk7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKTtcbmNvbnN0IFRpbGVQeXJhbWlkID0gcmVxdWlyZSgnLi9UaWxlUHlyYW1pZCcpO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBpbmRpdmlkdWFsIGxheWVyLlxuICovXG5jbGFzcyBMYXllciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlcyBhIG5ldyBMYXllciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGxheWVyIG9wdGlvbnMuXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ9IG9wdGlvbnMucmVuZGVyZXIgLSBUaGUgbGF5ZXIgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLm9wYWNpdHkgLSBUaGUgbGF5ZXIgb3BhY2l0eS5cblx0ICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLmhpZGRlbiAtIFdoZXRoZXIgb3Igbm90IHRoZSBsYXllciBpcyB2aXNpYmxlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMubXV0ZWQgLSBXaGV0aGVyIG9yIG5vdCB0aGUgbGF5ZXIgaXMgbXV0ZWQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMub3BhY2l0eSA9IGRlZmF1bHRUbyhvcHRpb25zLm9wYWNpdHksIDEuMCk7XG5cdFx0dGhpcy5oaWRkZW4gPSBkZWZhdWx0VG8ob3B0aW9ucy5oaWRkZW4sIGZhbHNlKTtcblx0XHR0aGlzLm11dGVkID0gZGVmYXVsdFRvKG9wdGlvbnMubXV0ZWQsIGZhbHNlKTtcblx0XHR0aGlzLnJlbmRlcmVyID0gZGVmYXVsdFRvKG9wdGlvbnMucmVuZGVyZXIsIG51bGwpO1xuXHRcdHRoaXMucHlyYW1pZCA9IG5ldyBUaWxlUHlyYW1pZCh0aGlzLCBvcHRpb25zKTtcblx0XHR0aGlzLnBsb3QgPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVkIHdoZW4gdGhlIGxheWVyIGlzIGF0dGFjaGVkIHRvIGEgcGxvdC5cblx0ICpcblx0ICogQHBhcmFtIHtQbG90fSBwbG90IC0gVGhlIHBsb3QgdG8gYXR0YWNoIHRoZSBsYXllciB0by5cblx0ICpcblx0ICogQHJldHVybnMge0xheWVyfSBUaGUgbGF5ZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRvbkFkZChwbG90KSB7XG5cdFx0aWYgKCFwbG90KSB7XG5cdFx0XHR0aHJvdyAnTm8gcGxvdCBhcmd1bWVudCBwcm92aWRlZCc7XG5cdFx0fVxuXHRcdC8vIHNldCBwbG90XG5cdFx0dGhpcy5wbG90ID0gcGxvdDtcblx0XHQvLyBleGVjdXRlIHJlbmRlcmVyIGhvb2tcblx0XHRpZiAodGhpcy5yZW5kZXJlcikge1xuXHRcdFx0dGhpcy5yZW5kZXJlci5vbkFkZCh0aGlzKTtcblx0XHR9XG5cdFx0Ly8gcmVxdWVzdCBpbml0aWFsIHRpbGVzLlxuXHRcdHRoaXMucmVmcmVzaCgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVkIHdoZW4gdGhlIGxheWVyIGlzIHJlbW92ZWQgZnJvbSBhIHBsb3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGxvdH0gcGxvdCAtIFRoZSBwbG90IHRvIHJlbW92ZSB0aGUgbGF5ZXIgZnJvbS5cblx0ICpcblx0ICogQHJldHVybnMge0xheWVyfSBUaGUgbGF5ZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRvblJlbW92ZShwbG90KSB7XG5cdFx0aWYgKCFwbG90KSB7XG5cdFx0XHR0aHJvdyAnTm8gcGxvdCBhcmd1bWVudCBwcm92aWRlZCc7XG5cdFx0fVxuXHRcdC8vIGV4ZWN1dGUgcmVuZGVyZXIgaG9va1xuXHRcdGlmICh0aGlzLnJlbmRlcmVyKSB7XG5cdFx0XHR0aGlzLnJlbmRlcmVyLm9uUmVtb3ZlKHRoaXMpO1xuXHRcdH1cblx0XHQvLyByZW1vdmUgcGxvdFxuXHRcdHRoaXMucGxvdCA9IG51bGw7XG5cdFx0Ly8gY2xlYXIgdGhlIHVuZGVybHlpbmcgcHlyYW1pZFxuXHRcdHRoaXMucHlyYW1pZC5jbGVhcigpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZCBhIHJlbmRlcmVyIHRvIHRoZSBsYXllci5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIgdG8gYWRkIHRvIHRoZSBsYXllci5cblx0ICpcblx0ICogQHJldHVybnMge0xheWVyfSBUaGUgbGF5ZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRzZXRSZW5kZXJlcihyZW5kZXJlcikge1xuXHRcdGlmICghcmVuZGVyZXIpIHtcblx0XHRcdHRocm93ICdObyByZW5kZXJlciBhcmd1bWVudCBwcm92aWRlZCc7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnJlbmRlcmVyICYmIHRoaXMucGxvdCkge1xuXHRcdFx0dGhpcy5yZW5kZXJlci5vblJlbW92ZSh0aGlzKTtcblx0XHR9XG5cdFx0dGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXHRcdGlmICh0aGlzLnBsb3QpIHtcblx0XHRcdHRoaXMucmVuZGVyZXIub25BZGQodGhpcyk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZSB0aGUgcmVuZGVyZXIgZnJvbSB0aGUgbGF5ZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtMYXllcn0gVGhlIGxheWVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0cmVtb3ZlUmVuZGVyZXIoKSB7XG5cdFx0aWYgKCF0aGlzLnJlbmRlcmVyKSB7XG5cdFx0XHR0aHJvdyAnTm8gcmVuZGVyZXIgaXMgY3VycmVudGx5IGF0dGFjaGVkIHRvIHRoZSBsYXllcic7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnBsb3QpIHtcblx0XHRcdHRoaXMucmVuZGVyZXIub25SZW1vdmUodGhpcyk7XG5cdFx0fVxuXHRcdHRoaXMucmVuZGVyZXIgPSBudWxsO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1ha2UgdGhlIGxheWVyIHZpc2libGUuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtMYXllcn0gVGhlIGxheWVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0c2hvdygpIHtcblx0XHR0aGlzLmhpZGRlbiA9IGZhbHNlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1ha2UgdGhlIGxheWVyIGludmlzaWJsZS5cblx0ICpcblx0ICogQHJldHVybnMge0xheWVyfSBUaGUgbGF5ZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRoaWRlKCkge1xuXHRcdHRoaXMuaGlkZGVuID0gdHJ1ZTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGxheWVyIGlzIGhpZGRlbi5cblx0ICpcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBsYXllciBpcyBoaWRkZW4uXG5cdCAqL1xuXHRpc0hpZGRlbigpIHtcblx0XHRyZXR1cm4gdGhpcy5oaWRkZW47XG5cdH1cblxuXHQvKipcblx0ICogTXV0ZXMgdGhlIGxheWVyLCBpdCB3aWxsIG5vIGxvbmdlciBzZW5kIGFueSB0aWxlIHJlcXVlc3RzLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7TGF5ZXJ9IFRoZSBsYXllciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdG11dGUoKSB7XG5cdFx0dGhpcy5tdXRlZCA9IHRydWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVW5tdXRlcyB0aGUgbGF5ZXIgYW5kIGltbWVkaWF0ZWx5IHJlcXVlc3RzIGFsbCB2aXNpYmxlIHRpbGVzLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7TGF5ZXJ9IFRoZSBsYXllciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHVubXV0ZSgpIHtcblx0XHRpZiAodGhpcy5tdXRlZCkge1xuXHRcdFx0dGhpcy5tdXRlZCA9IGZhbHNlO1xuXHRcdFx0aWYgKHRoaXMucGxvdCkge1xuXHRcdFx0XHQvLyBnZXQgdmlzaWJsZSBjb29yZHNcblx0XHRcdFx0Y29uc3QgY29vcmRzID0gdGhpcy5wbG90LmdldFZpc2libGVDb29yZHMoKTtcblx0XHRcdFx0Ly8gcmVxdWVzdCB0aWxlc1xuXHRcdFx0XHR0aGlzLnJlcXVlc3RUaWxlcyhjb29yZHMpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGxheWVyIGlzIG11dGVkLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGxheWVyIGlzIG11dGVkLlxuXHQgKi9cblx0aXNNdXRlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5tdXRlZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBVbm11dGVzIGFuZCBzaG93cyB0aGUgbGF5ZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtMYXllcn0gVGhlIGxheWVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZW5hYmxlKCkge1xuXHRcdHRoaXMuc2hvdygpO1xuXHRcdHRoaXMudW5tdXRlKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogTXV0ZXMgYW5kIGhpZGVzIHRoZSBsYXllci5cblx0ICpcblx0ICogQHJldHVybnMge0xheWVyfSBUaGUgbGF5ZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRkaXNhYmxlKCkge1xuXHRcdHRoaXMuaGlkZSgpO1xuXHRcdHRoaXMubXV0ZSgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbGF5ZXIgaXMgZGlzYWJsZWQgKG11dGVkIGFuZCBoaWRkZW4pLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGxheWVyIGlzIGRpc2FibGVkLlxuXHQgKi9cblx0aXNEaXNhYmxlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5tdXRlZCAmJiB0aGlzLmhpZGRlbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBEcmF3IHRoZSBsYXllciBmb3IgdGhlIGZyYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdGltZXN0YW1wIC0gVGhlIGZyYW1lIHRpbWVzdGFtcC5cblx0ICpcblx0ICogQHJldHVybnMge0xheWVyfSBUaGUgbGF5ZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRkcmF3KHRpbWVzdGFtcCkge1xuXHRcdGlmICh0aGlzLmhpZGRlbikge1xuXHRcdFx0Ly8gY2xlYXIgcmVuZGVyZXIgc3RhdGVcblx0XHRcdGlmICh0aGlzLnJlbmRlcmVyKSB7XG5cdFx0XHRcdHRoaXMucmVuZGVyZXIuY2xlYXIoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAodGhpcy5yZW5kZXJlcikge1xuXHRcdFx0dGhpcy5yZW5kZXJlci5kcmF3KHRpbWVzdGFtcCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENsZWFyIGFuZCByZS1yZXF1ZXN0IGFsbCB0aWxlcyBmb3IgdGhlIGxheWVyLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7TGF5ZXJ9IFRoZSBsYXllciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHJlZnJlc2goKSB7XG5cdFx0Ly8gY2xlYXIgdGhlIHVuZGVybHlpbmcgcHlyYW1pZFxuXHRcdHRoaXMucHlyYW1pZC5jbGVhcigpO1xuXHRcdGlmICh0aGlzLnBsb3QpIHtcblx0XHRcdC8vIGNsZWFyIHJlbmRlcmVyIHN0YXRlXG5cdFx0XHRpZiAodGhpcy5yZW5kZXJlcikge1xuXHRcdFx0XHR0aGlzLnJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0XHR9XG5cdFx0XHQvLyBnZXQgdmlzaWJsZSBjb29yZHNcblx0XHRcdGNvbnN0IGNvb3JkcyA9IHRoaXMucGxvdC5nZXRWaXNpYmxlQ29vcmRzKCk7XG5cdFx0XHQvLyByZXF1ZXN0IHRpbGVzXG5cdFx0XHR0aGlzLnJlcXVlc3RUaWxlcyhjb29yZHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXF1ZXN0IGEgc3BlY2lmaWMgdGlsZS5cblx0ICpcblx0ICogQHBhcmFtIHtDb29yZH0gY29vcmQgLSBUaGUgY29vcmQgb2YgdGhlIHRpbGUgdG8gcmVxdWVzdC5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZSAtIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBleGVjdXRlIHVwb24gY29tcGxldGlvbi5cblx0ICovXG5cdHJlcXVlc3RUaWxlKGNvb3JkLCBkb25lKSB7XG5cdFx0ZG9uZShudWxsLCBudWxsKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXF1ZXN0IGFuIGFycmF5IG9mIHRpbGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb29yZHMgLSBUaGUgY29vcmRzIG9mIHRoZSB0aWxlcyB0byByZXF1ZXN0LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7TGF5ZXJ9IFRoZSBsYXllciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHJlcXVlc3RUaWxlcyhjb29yZHMpIHtcblx0XHRpZiAodGhpcy5tdXRlZCkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdHRoaXMucHlyYW1pZC5yZXF1ZXN0VGlsZXMoY29vcmRzKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExheWVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkZWZhdWx0VG8gPSByZXF1aXJlKCdsb2Rhc2gvZGVmYXVsdFRvJyk7XG5jb25zdCB0aHJvdHRsZSA9IHJlcXVpcmUoJ2xvZGFzaC90aHJvdHRsZScpO1xuY29uc3QgTFJVID0gcmVxdWlyZSgnbHJ1LWNhY2hlJyk7XG5jb25zdCBUaWxlID0gcmVxdWlyZSgnLi4vY29yZS9UaWxlJyk7XG5jb25zdCBFdmVudFR5cGUgPSByZXF1aXJlKCcuLi9ldmVudC9FdmVudFR5cGUnKTtcbmNvbnN0IFRpbGVFdmVudCA9IHJlcXVpcmUoJy4uL2V2ZW50L1RpbGVFdmVudCcpO1xuXG4vLyBDb25zdGFudHNcblxuLyoqXG4gKiBOdW1iZXIgb2YgdGhlIHRpbGVzIGhlbGQgaW4gdGhlIHB5cmFtaWQuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtOdW1iZXJ9XG4gKi9cbmNvbnN0IENBQ0hFX1NJWkUgPSAyNTY7XG5cbi8qKlxuICogTnVtYmVyIG9mIHBlcnNpc3RlbnQgem9vbSBsZXZlbHMgaGVsZCBpbiB0aGUgcHlyYW1pZHMuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtOdW1iZXJ9XG4gKi9cbmNvbnN0IFBFUlNJU1RBTlRfTEVWRUxTID0gNDtcblxuLyoqXG4gKiBMb2FkZWQgZXZlbnQgdGhyb3R0bGUgaW4gbWlsbGlzZWNvbmRzLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBMT0FERURfVEhST1RUTEVfTVMgPSAyMDA7XG5cbi8vIFByaXZhdGUgTWV0aG9kc1xuXG5jb25zdCBnZXRMT0RPZmZzZXQgPSBmdW5jdGlvbihkZXNjZW5kYW50LCBhbmNlc3Rvcikge1xuXHRjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIGRlc2NlbmRhbnQueiAtIGFuY2VzdG9yLnopO1xuXHRjb25zdCBzdGVwID0gMSAvIHNjYWxlO1xuXHRjb25zdCByb290ID0ge1xuXHRcdHg6IGFuY2VzdG9yLnggKiBzY2FsZSxcblx0XHR5OiBhbmNlc3Rvci55ICogc2NhbGVcblx0fTtcblx0cmV0dXJuIHtcblx0XHR4OiAoZGVzY2VuZGFudC54IC0gcm9vdC54KSAqIHN0ZXAsXG5cdFx0eTogKGRlc2NlbmRhbnQueSAtIHJvb3QueSkgKiBzdGVwLFxuXHRcdGV4dGVudDogc3RlcFxuXHR9O1xufTtcblxuY29uc3QgYWRkID0gZnVuY3Rpb24ocHlyYW1pZCwgdGlsZSkge1xuXHRpZiAodGlsZS5jb29yZC56IDwgcHlyYW1pZC5wZXJzaXN0ZW50TGV2ZWxzKSB7XG5cdFx0Ly8gcGVyc2lzdGVudCB0aWxlc1xuXHRcdGlmIChweXJhbWlkLnBlcnNpc3RlbnRzLmhhcyh0aWxlLmNvb3JkLmhhc2gpKSB7XG5cdFx0XHR0aHJvdyBgVGlsZSBvZiBjb29yZCAke3RpbGUuY29vcmQuaGFzaH0gYWxyZWFkeSBleGlzdHMgaW4gdGhlIHB5cmFtaWRgO1xuXHRcdH1cblx0XHRweXJhbWlkLnBlcnNpc3RlbnRzLnNldCh0aWxlLmNvb3JkLmhhc2gsIHRpbGUpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIG5vbi1wZXJzaXN0ZW50IHRpbGVzXG5cdFx0aWYgKHB5cmFtaWQudGlsZXMuaGFzKHRpbGUuY29vcmQuaGFzaCkpIHtcblx0XHRcdHRocm93IGBUaWxlIG9mIGNvb3JkICR7dGlsZS5jb29yZC5oYXNofSBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgcHlyYW1pZGA7XG5cdFx0fVxuXHRcdHB5cmFtaWQudGlsZXMuc2V0KHRpbGUuY29vcmQuaGFzaCwgdGlsZSk7XG5cdH1cblx0Ly8gc3RvcmUgaW4gbGV2ZWwgYXJyYXlzXG5cdGlmICghcHlyYW1pZC5sZXZlbHMuaGFzKHRpbGUuY29vcmQueikpIHtcblx0XHRweXJhbWlkLmxldmVscy5zZXQodGlsZS5jb29yZC56LCBbXSk7XG5cdH1cblx0cHlyYW1pZC5sZXZlbHMuZ2V0KHRpbGUuY29vcmQueikucHVzaCh0aWxlKTtcblx0Ly8gZW1pdCBhZGRcblx0cHlyYW1pZC5sYXllci5lbWl0KEV2ZW50VHlwZS5USUxFX0FERCwgbmV3IFRpbGVFdmVudChweXJhbWlkLmxheWVyLCB0aWxlKSk7XG59O1xuXG5jb25zdCByZW1vdmUgPSBmdW5jdGlvbihweXJhbWlkLCB0aWxlKSB7XG5cdC8vIG9ubHkgY2hlY2sgZm9yIHBlcnNpc3RlbnQgc2luY2Ugd2UgaXQgd2lsbCBhbHJlYWR5IGJlIHJlbW92ZWQgZnJvbSBscnVcblx0Ly8gY2FjaGVcblx0aWYgKHRpbGUuY29vcmQueiA8IHB5cmFtaWQucGVyc2lzdGVudExldmVscykge1xuXHRcdGlmICghcHlyYW1pZC5wZXJzaXN0ZW50cy5oYXModGlsZS5jb29yZC5oYXNoKSkge1xuXHRcdFx0dGhyb3cgYFRpbGUgb2YgY29vcmQgJHt0aWxlLmNvb3JkLmhhc2h9IGRvZXMgbm90IGV4aXN0cyBpbiB0aGUgcHlyYW1pZGA7XG5cdFx0fVxuXHRcdHB5cmFtaWQucGVyc2lzdGVudHMuZGVsZXRlKHRpbGUuY29vcmQuaGFzaCk7XG5cdH1cblx0Ly8gcmVtb3ZlIGZyb20gbGV2ZWxzXG5cdGNvbnN0IGxldmVsID0gcHlyYW1pZC5sZXZlbHMuZ2V0KHRpbGUuY29vcmQueik7XG5cdGxldmVsLnNwbGljZShsZXZlbC5pbmRleE9mKHRpbGUpLCAxKTtcblx0aWYgKGxldmVsLmxlbmd0aCA9PT0gMCkge1xuXHRcdHB5cmFtaWQubGV2ZWxzLmRlbGV0ZSh0aWxlLmNvb3JkLnopO1xuXHR9XG5cdC8vIGVtaXQgcmVtb3ZlXG5cdHB5cmFtaWQubGF5ZXIuZW1pdChFdmVudFR5cGUuVElMRV9SRU1PVkUsIG5ldyBUaWxlRXZlbnQocHlyYW1pZC5sYXllciwgdGlsZSkpO1xufTtcblxuY29uc3Qgc3VtUG93ZXJPZkZvdXIgPSBmdW5jdGlvbihuKSB7XG5cdHJldHVybiAoMS8zKSAqIChNYXRoLnBvdyg0LCBuKSAtIDEpO1xufTtcblxuY29uc3QgY2hlY2tJZkxvYWRlZCA9IGZ1bmN0aW9uKHB5cmFtaWQpIHtcblx0Ly8gaWYgbm8gbW9yZSBwZW5kaW5nIHRpbGVzLCBlbWl0IGxvYWRcblx0aWYgKHB5cmFtaWQucGVuZGluZy5zaXplID09PSAwKSB7XG5cdFx0cHlyYW1pZC5lbWl0TG9hZChuZXcgVGlsZUV2ZW50KHB5cmFtaWQubGF5ZXIsIG51bGwpKTtcblx0fVxufTtcblxuY29uc3Qgc29ydEFyb3VuZENlbnRlciA9IGZ1bmN0aW9uKHBsb3QsIGNvb3Jkcykge1xuXHQvLyBnZXQgdGhlIGNlbnRlciBwbG90IHBpeGVsXG5cdGNvbnN0IGNlbnRlciA9IHBsb3QuZ2V0VGFyZ2V0Q2VudGVyKCk7XG5cdGNvbnN0IHpvb20gPSBwbG90LmdldFRhcmdldFpvb20oKTtcblx0Ly8gZ2V0IHRoZSBzY2FsZWQgdGlsZSBzaXplXG5cdGNvbnN0IHRpbGVTaXplID0gcGxvdC50aWxlU2l6ZSAqIE1hdGgucG93KDIsICh6b29tIC0gTWF0aC5yb3VuZCh6b29tKSkpO1xuXHQvLyBjb252ZXJ0IGNlbnRlciB0byB0aWxlIGNvb3Jkc1xuXHRjZW50ZXIueCAvPSB0aWxlU2l6ZTtcblx0Y2VudGVyLnkgLz0gdGlsZVNpemU7XG5cdC8vIHNvcnQgdGhlIHJlcXVlc3RzIGJ5IGRpc3RhbmNlIGZyb20gY2VudGVyIHRpbGVcblx0Y29vcmRzLnNvcnQoKGEsIGIpID0+IHtcblx0XHRjb25zdCBkYXggPSBjZW50ZXIueCAtIChhLnggKyAwLjUpO1xuXHRcdGNvbnN0IGRheSA9IGNlbnRlci55IC0gKGEueSArIDAuNSk7XG5cdFx0Y29uc3QgZGJ4ID0gY2VudGVyLnggLSAoYi54ICsgMC41KTtcblx0XHRjb25zdCBkYnkgPSBjZW50ZXIueSAtIChiLnkgKyAwLjUpO1xuXHRcdGNvbnN0IGRhID0gZGF4ICogZGF4ICsgZGF5ICogZGF5O1xuXHRcdGNvbnN0IGRiID0gZGJ4ICogZGJ4ICsgZGJ5ICogZGJ5O1xuXHRcdGEuZCA9IGRhO1xuXHRcdGIuZCA9IGRiO1xuXHRcdHJldHVybiBkYSAtIGRiO1xuXHR9KTtcblx0cmV0dXJuIGNvb3Jkcztcbn07XG5cbmNvbnN0IHJlbW92ZUR1cGxpY2F0ZXMgPSBmdW5jdGlvbihjb29yZHMpIHtcblx0Y29uc3Qgc2VlbiA9IG5ldyBNYXAoKTtcblx0cmV0dXJuIGNvb3Jkcy5maWx0ZXIoZnVuY3Rpb24oY29vcmQpIHtcblx0XHRjb25zdCBuY29vcmQgPSBjb29yZC5ub3JtYWxpemUoKTtcblx0XHRyZXR1cm4gc2Vlbi5oYXMobmNvb3JkLmhhc2gpID8gZmFsc2UgOiAoc2Vlbi5zZXQobmNvb3JkLmhhc2gsIHRydWUpKTtcblx0fSk7XG59O1xuXG5jb25zdCBpc1RpbGVTdGFsZSA9IGZ1bmN0aW9uKHB5cmFtaWQsIHRpbGUpIHtcblx0Ly8gTk9URTogY29vcmQgaXMgYWxyZWFkeSBub3JtYWxpemVkXG5cdGNvbnN0IG5jb29yZCA9IHRpbGUuY29vcmQ7XG5cdGlmIChweXJhbWlkLnN0YWxlLmhhcyhuY29vcmQuaGFzaCkpIHtcblx0XHQvLyBjaGVjayBpZiB1aWQgaXMgZmxhZ2dlZCBhcyBzdGFsZVxuXHRcdGNvbnN0IHVpZHMgPSBweXJhbWlkLnN0YWxlLmdldChuY29vcmQuaGFzaCk7XG5cdFx0aWYgKHVpZHMuaGFzKHRpbGUudWlkKSkge1xuXHRcdFx0dWlkcy5kZWxldGUodGlsZS51aWQpO1xuXHRcdFx0aWYgKHVpZHMuc2l6ZSA9PT0gMCkge1xuXHRcdFx0XHRweXJhbWlkLnN0YWxlLmRlbGV0ZShuY29vcmQuaGFzaCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0Y29uc3QgcGxvdCA9IHB5cmFtaWQubGF5ZXIucGxvdDtcblx0aWYgKCFwbG90KSB7XG5cdFx0Ly8gbGF5ZXIgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHBsb3QsIHRpbGUgaXMgc3RhbGVcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHQvLyBpZiB6b29taW5nLCB1c2UgdGFyZ2V0IHpvb20sIGlmIG5vdCB1c2UgY3VycmVudCB6b29tXG5cdGNvbnN0IHZpZXdwb3J0ID0gcGxvdC5nZXRUYXJnZXRWaWV3cG9ydCgpO1xuXHRjb25zdCB6b29tID0gcGxvdC5nZXRUYXJnZXRab29tKCk7XG5cdHJldHVybiAhdmlld3BvcnQuaXNJblZpZXcocGxvdC50aWxlU2l6ZSwgdGlsZS5jb29yZCwgem9vbSk7XG59O1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHB5cmFtaWQgb2YgdGlsZXMuXG4gKi9cbmNsYXNzIFRpbGVQeXJhbWlkIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IEJvdW5kcyBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGF5ZXJ9IGxheWVyIC0gVGhlIGxheWVyIG9iamVjdC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcHlyYW1pZCBvcHRpb25zLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5jYWNoZVNpemUgLSBUaGUgc2l6ZSBvZiB0aGUgdGlsZSBjYWNoZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGVyc2lzdGVudExldmVscyAtIFRoZSBudW1iZXIgb2YgcGVyc2lzdGVudCBsZXZlbHMgaW4gdGhlIHB5cmFtaWQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihsYXllciwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0aWYgKCFsYXllcikge1xuXHRcdFx0dGhyb3cgJ05vIGxheWVyIHBhcmFtZXRlciBwcm92aWRlZCc7XG5cdFx0fVxuXHRcdHRoaXMuY2FjaGVTaXplID0gZGVmYXVsdFRvKG9wdGlvbnMuY2FjaGVTaXplLCBDQUNIRV9TSVpFKTtcblx0XHR0aGlzLnBlcnNpc3RlbnRMZXZlbHMgPSBkZWZhdWx0VG8ob3B0aW9ucy5wZXJzaXN0ZW50TGV2ZWxzLCBQRVJTSVNUQU5UX0xFVkVMUyk7XG5cdFx0dGhpcy50b3RhbENhcGFjaXR5ID0gdGhpcy5jYWNoZVNpemUgKyBzdW1Qb3dlck9mRm91cih0aGlzLnBlcnNpc3RlbnRMZXZlbHMpO1xuXHRcdHRoaXMubGF5ZXIgPSBsYXllcjtcblx0XHR0aGlzLmxldmVscyA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLnBlcnNpc3RlbnRzID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMucGVuZGluZyA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLnN0YWxlID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMudGlsZXMgPSBuZXcgTFJVKHtcblx0XHRcdG1heDogdGhpcy5jYWNoZVNpemUsXG5cdFx0XHRkaXNwb3NlOiAoa2V5LCB0aWxlKSA9PiB7XG5cdFx0XHRcdHJlbW92ZSh0aGlzLCB0aWxlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvLyBjcmVhdGUgdGhyb3R0bGVkIGVtaXQgbG9hZCBldmVudCBmb3IgdGhpcyBsYXllclxuXHRcdHRoaXMuZW1pdExvYWQgPSB0aHJvdHRsZShldmVudCA9PiB7XG5cdFx0XHR0aGlzLmxheWVyLmVtaXQoRXZlbnRUeXBlLkxPQUQsIGV2ZW50KTtcblx0XHR9LCBMT0FERURfVEhST1RUTEVfTVMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVtcHRpZXMgdGhlIGN1cnJlbnQgcHlyYW1pZCBvZiBhbGwgdGlsZXMsIGZsYWdzIGFueSBwZW5kaW5nIHRpbGVzIGFzXG5cdCAqIHN0YWxlLlxuXHQgKi9cblx0Y2xlYXIoKSB7XG5cdFx0Ly8gYW55IHBlbmRpbmcgdGlsZXMgYXJlIG5vdyBmbGFnZ2VkIGFzIHN0YWxlXG5cdFx0dGhpcy5wZW5kaW5nLmZvckVhY2goKHRpbGUsIGhhc2gpID0+IHtcblx0XHRcdC8vIGZsYWcgdWlkIGFzIHN0YWxlXG5cdFx0XHRsZXQgdWlkcyA9IHRoaXMuc3RhbGUuZ2V0KGhhc2gpO1xuXHRcdFx0aWYgKCF1aWRzKSB7XG5cdFx0XHRcdHVpZHMgPSBuZXcgTWFwKCk7XG5cdFx0XHRcdHRoaXMuc3RhbGUuc2V0KGhhc2gsIHVpZHMpO1xuXHRcdFx0fVxuXHRcdFx0dWlkcy5zZXQodGlsZS51aWQsIHRydWUpO1xuXHRcdH0pO1xuXHRcdHRoaXMucGVuZGluZyA9IG5ldyBNYXAoKTsgLy8gZnJlc2ggbWFwXG5cdFx0Ly8gY2xlYXIgcGVyc2lzdGVudCB0aWxlc1xuXHRcdHRoaXMucGVyc2lzdGVudHMuZm9yRWFjaCh0aWxlID0+IHtcblx0XHRcdHJlbW92ZSh0aGlzLCB0aWxlKTtcblx0XHR9KTtcblx0XHR0aGlzLnBlcnNpc3RlbnRzLmNsZWFyKCk7XG5cdFx0Ly8gY2xlYXIgbHJ1IGNhY2hlXG5cdFx0dGhpcy50aWxlcy5yZXNldCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlc3Qgd2hldGhlciBvciBub3QgYSBjb29yZCBpcyBoZWxkIGluIGNhY2hlIGluIHRoZSBweXJhbWlkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Nvb3JkfSBjb29yZCAtIFRoZSBjb29yZCB0byB0ZXN0LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGNvb3JkIGV4aXN0cyBpbiB0aGUgcHlyYW1pZC5cblx0ICovXG5cdGhhcyhjb29yZCkge1xuXHRcdGlmIChjb29yZC56IDwgdGhpcy5wZXJzaXN0ZW50TGV2ZWxzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wZXJzaXN0ZW50cy5oYXMoY29vcmQuaGFzaCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnRpbGVzLmhhcyhjb29yZC5oYXNoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUZXN0IHdoZXRoZXIgb3Igbm90IGEgY29vcmQgaXMgY3VycmVudGx5IHBlbmRpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29vcmR9IGNvb3JkIC0gVGhlIGNvb3JkIHRvIHRlc3QuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgY29vcmQgaXMgY3VycmVudGx5IHBlbmRpbmcuXG5cdCAqL1xuXHRpc1BlbmRpbmcoY29vcmQpIHtcblx0XHRyZXR1cm4gdGhpcy5wZW5kaW5nLmhhcyhjb29yZC5oYXNoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0aWxlIG1hdGNoaW5nIHRoZSBwcm92aWRlZCBjb29yZC4gSWYgdGhlIHRpbGUgZG9lcyBub3Rcblx0ICogZXhpc3QsIHJldHVybnMgdW5kZWZpbmVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Nvb3JkfSBjb29yZCAtIFRoZSBjb29yZCBvZiB0aGUgdGlsZSB0byByZXR1cm4uXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtUaWxlfSBUaGUgdGlsZSBvYmplY3QuXG5cdCAqL1xuXHRnZXQoY29vcmQpIHtcblx0XHRpZiAoY29vcmQueiA8IHRoaXMucGVyc2lzdGVudExldmVscykge1xuXHRcdFx0cmV0dXJuIHRoaXMucGVyc2lzdGVudHMuZ2V0KGNvb3JkLmhhc2gpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy50aWxlcy5nZXQoY29vcmQuaGFzaCk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2xvc2VzdCBhbmNlc3RvciBvZiB0aGUgcHJvdmlkZWQgY29vcmQuIElmIG5vIGFuY2VzdG9yXG5cdCAqIGV4aXN0cyBpbiB0aGUgcHlyYW1pZCwgcmV0dXJucyB1bmRlZmluZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29vcmR9IGNvb3JkIC0gVGhlIGNvb3JkIG9mIHRoZSB0aWxlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtDb29yZH0gVGhlIGNsb3Nlc3QgYXZhaWxhYmxlIGFuY2VzdG9yIG9mIHRoZSBwcm92aWRlZCBjb29yZC5cblx0ICovXG5cdGdldENsb3Nlc3RBbmNlc3Rvcihjb29yZCkge1xuXHRcdC8vIGdldCBhbmNlc3RvcnMgbGV2ZWxzLCBpbiBkZXNjZW5kaW5nIG9yZGVyXG5cdFx0Y29uc3QgbGV2ZWxzID0gWy4uLnRoaXMubGV2ZWxzLmtleXMoKV1cblx0XHRcdC5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRcdC8vIHNvcnQgYnkga2V5XG5cdFx0XHRcdHJldHVybiBiIC0gYTtcblx0XHRcdH0pLmZpbHRlcihlbnRyeSA9PiB7XG5cdFx0XHRcdC8vIGZpbHRlciBieSBrZXlcblx0XHRcdFx0cmV0dXJuIChlbnRyeSA8IGNvb3JkLnopO1xuXHRcdFx0fSk7XG5cdFx0Ly8gY2hlY2sgZm9yIGNsb3Nlc3QgYW5jZXN0b3Jcblx0XHRmb3IgKGxldCBpPTA7IGk8bGV2ZWxzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1tpXTtcblx0XHRcdGNvbnN0IGFuY2VzdG9yID0gY29vcmQuZ2V0QW5jZXN0b3IoY29vcmQueiAtIGxldmVsKTtcblx0XHRcdGlmICh0aGlzLmhhcyhhbmNlc3RvcikpIHtcblx0XHRcdFx0cmV0dXJuIGFuY2VzdG9yO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlcXVlc3RzIHRpbGVzIGZvciB0aGUgcHJvdmlkZWQgY29vcmRzLiBJZiB0aGUgdGlsZXMgYWxyZWFkeSBleGlzdFxuXHQgKiBpbiB0aGUgcHlyYW1pZCBvciBpcyBjdXJyZW50bHkgcGVuZGluZyBubyByZXF1ZXN0IGlzIG1hZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvb3JkcyAtIFRoZSBhcnJheSBvZiBjb29yZHMgdG8gcmVxdWVzdC5cblx0ICovXG5cdHJlcXVlc3RUaWxlcyhjb29yZHMpIHtcblxuXHRcdC8vIHJlbW92ZSBhbnkgZHVwbGljYXRlc1xuXHRcdGNvb3JkcyA9IHJlbW92ZUR1cGxpY2F0ZXMoY29vcmRzKTtcblxuXHRcdC8vIGZpbHRlciBvdXQgY29vcmRzIHdlIGRvbid0IG5lZWQgdG8gcmVxdWVzdFxuXHRcdGNvb3JkcyA9IGNvb3Jkcy5maWx0ZXIoY29vcmQgPT4ge1xuXHRcdFx0Ly8gZ2V0IG5vcm1hbGl6ZWQgY29vcmQsIHdlIHVzZSBub3JtYWxpemVkIGNvb3JkcyBmb3IgcmVxdWVzdHNcblx0XHRcdC8vIHNvIHRoYXQgd2UgZG8gbm90IHRyYWNrIC8gcmVxdWVzdCB0aGUgc2FtZSB0aWxlc1xuXHRcdFx0Y29uc3QgbmNvb3JkID0gY29vcmQubm9ybWFsaXplKCk7XG5cdFx0XHQvLyB3ZSBhbHJlYWR5IGhhdmUgdGhlIHRpbGUsIG9yIGl0J3MgY3VycmVudGx5IHBlbmRpbmdcblx0XHRcdC8vIE5PVEU6IHVzZSBgZ2V0YCBoZXJlIHRvIHVwZGF0ZSB0aGUgcmVjZW50bmVzcyBvZiB0aGUgdGlsZSBpbiBMUlVcblx0XHRcdHJldHVybiAhdGhpcy5nZXQobmNvb3JkKSAmJiAhdGhpcy5pc1BlbmRpbmcobmNvb3JkKTtcblx0XHR9KTtcblxuXHRcdC8vIHNvcnQgY29vcmRzIGJ5IGRpc3RhbmNlIGZyb20gdmlld3BvcnQgY2VudGVyXG5cdFx0Y29vcmRzID0gc29ydEFyb3VuZENlbnRlcih0aGlzLmxheWVyLnBsb3QsIGNvb3Jkcyk7XG5cblx0XHQvLyByZXF1ZXN0IHRpbGVzXG5cdFx0Y29vcmRzLmZvckVhY2goY29vcmQgPT4ge1xuXHRcdFx0Ly8gZ2V0IG5vcm1hbGl6ZWQgY29vcmQsIHdlIHVzZSBub3JtYWxpemVkIGNvb3JkcyBmb3IgcmVxdWVzdHNcblx0XHRcdC8vIHNvIHRoYXQgd2UgZG8gbm90IHRyYWNrIC8gcmVxdWVzdCB0aGUgc2FtZSB0aWxlc1xuXHRcdFx0Y29uc3QgbmNvb3JkID0gY29vcmQubm9ybWFsaXplKCk7XG5cdFx0XHQvLyBjcmVhdGUgdGhlIG5ldyB0aWxlXG5cdFx0XHRjb25zdCB0aWxlID0gbmV3IFRpbGUobmNvb3JkKTtcblx0XHRcdC8vIGFkZCB1dWlkIHRvIHBlbmRpbmcgYXJyYXlcblx0XHRcdHRoaXMucGVuZGluZy5zZXQobmNvb3JkLmhhc2gsIHRpbGUpO1xuXHRcdFx0Ly8gZW1pdCByZXF1ZXN0XG5cdFx0XHR0aGlzLmxheWVyLmVtaXQoRXZlbnRUeXBlLlRJTEVfUkVRVUVTVCwgbmV3IFRpbGVFdmVudCh0aGlzLmxheWVyLCB0aWxlKSk7XG5cdFx0XHQvLyByZXF1ZXN0IHRpbGVcblx0XHRcdHRoaXMubGF5ZXIucmVxdWVzdFRpbGUobmNvb3JkLCAoZXJyLCBkYXRhKSA9PiB7XG5cdFx0XHRcdC8vIHJlbW92ZSB0aWxlIGZyb20gcGVuZGluZ1xuXHRcdFx0XHR0aGlzLnBlbmRpbmcuZGVsZXRlKG5jb29yZC5oYXNoKTtcblx0XHRcdFx0Ly8gY2hlY2sgZXJyXG5cdFx0XHRcdGlmIChlcnIgIT09IG51bGwpIHtcblx0XHRcdFx0XHQvLyBhZGQgZXJyXG5cdFx0XHRcdFx0dGlsZS5lcnIgPSBlcnI7XG5cdFx0XHRcdFx0Ly8gZW1pdCBmYWlsdXJlXG5cdFx0XHRcdFx0dGhpcy5sYXllci5lbWl0KEV2ZW50VHlwZS5USUxFX0ZBSUxVUkUsIG5ldyBUaWxlRXZlbnQodGhpcy5sYXllciwgdGlsZSkpO1xuXHRcdFx0XHRcdC8vIGNoZWNrIGlmIGxvYWRlZFxuXHRcdFx0XHRcdGNoZWNrSWZMb2FkZWQodGhpcyk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGFkZCBkYXRhIHRvIHRoZSB0aWxlXG5cdFx0XHRcdHRpbGUuZGF0YSA9IGRhdGE7XG5cdFx0XHRcdC8vIGNoZWNrIGlmIHRpbGUgaXMgc3RhbGVcblx0XHRcdFx0aWYgKGlzVGlsZVN0YWxlKHRoaXMsIHRpbGUpKSB7XG5cdFx0XHRcdFx0Ly8gZW1pdCBkaXNjYXJkXG5cdFx0XHRcdFx0dGhpcy5sYXllci5lbWl0KEV2ZW50VHlwZS5USUxFX0RJU0NBUkQsIG5ldyBUaWxlRXZlbnQodGhpcy5sYXllciwgdGlsZSkpO1xuXHRcdFx0XHRcdC8vIGNoZWNrIGlmIGxvYWRlZFxuXHRcdFx0XHRcdGNoZWNrSWZMb2FkZWQodGhpcyk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGFkZCB0byB0aWxlIHB5cmFtaWRcblx0XHRcdFx0YWRkKHRoaXMsIHRpbGUpO1xuXHRcdFx0XHQvLyBjaGVjayBpZiBsb2FkZWRcblx0XHRcdFx0Y2hlY2tJZkxvYWRlZCh0aGlzKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIElmIHRoZSB0aWxlIGV4aXN0cyBpbiB0aGUgcHlyYW1pZCwgcmV0dXJuIGl0LiBPdGhlcndpc2UgcmV0dXJuIHRoZVxuXHQgKiBjbG9zZXN0IGF2YWlsYWJsZSB0aWxlLCBhbG9uZyB3aXRoIHRoZSBvZmZzZXQgYW5kIHJlbGF0aXZlIHNjYWxlLiBJZlxuXHQgKiBubyBhbmNlc3RvciBleGlzdHMsIHJldHVybiB1bmRlZmluZWQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1RpbGV9IFRoZSB0aWxlIHRoYXQgY2xvc2VzdCBtYXRjaGVzIHRoZSBwcm92aWRlZCBjb29yZC5cblx0ICovXG5cdGdldEF2YWlsYWJsZUxPRChjb29yZCkge1xuXHRcdGNvbnN0IG5jb29yZCA9IGNvb3JkLm5vcm1hbGl6ZSgpO1xuXHRcdC8vIGNoZWNrIGlmIHdlIGhhdmUgdGhlIHRpbGVcblx0XHRpZiAodGhpcy5oYXMobmNvb3JkKSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y29vcmQ6IGNvb3JkLFxuXHRcdFx0XHR0aWxlOiB0aGlzLmdldChuY29vcmQpLFxuXHRcdFx0XHRvZmZzZXQ6IHtcblx0XHRcdFx0XHR4OiAwLFxuXHRcdFx0XHRcdHk6IDAsXG5cdFx0XHRcdFx0ZXh0ZW50OiAxXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdC8vIGlmIG5vdCwgdGFrZSB0aGUgY2xvc2VzdCBhbmNlc3RvclxuXHRcdGNvbnN0IGFuY2VzdG9yID0gdGhpcy5nZXRDbG9zZXN0QW5jZXN0b3IobmNvb3JkKTtcblx0XHRpZiAoYW5jZXN0b3IpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNvb3JkOiBjb29yZCxcblx0XHRcdFx0dGlsZTogdGhpcy5nZXQoYW5jZXN0b3IpLFxuXHRcdFx0XHRvZmZzZXQ6IGdldExPRE9mZnNldChuY29vcmQsIGFuY2VzdG9yKVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRpbGVQeXJhbWlkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjbGFtcCA9IHJlcXVpcmUoJ2xvZGFzaC9jbGFtcCcpO1xuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBFdmVudFR5cGUgPSByZXF1aXJlKCcuLi9ldmVudC9FdmVudFR5cGUnKTtcbmNvbnN0IEZyYW1lRXZlbnQgPSByZXF1aXJlKCcuLi9ldmVudC9GcmFtZUV2ZW50Jyk7XG5jb25zdCBSZXNpemVFdmVudCA9IHJlcXVpcmUoJy4uL2V2ZW50L1Jlc2l6ZUV2ZW50Jyk7XG5jb25zdCBSZW5kZXJCdWZmZXIgPSByZXF1aXJlKCcuLi9yZW5kZXIvd2ViZ2wvdGV4dHVyZS9SZW5kZXJCdWZmZXInKTtcbmNvbnN0IFJlcXVlc3QgPSByZXF1aXJlKCcuL1JlcXVlc3QnKTtcbmNvbnN0IFZpZXdwb3J0ID0gcmVxdWlyZSgnLi9WaWV3cG9ydCcpO1xuY29uc3QgQ2xpY2tIYW5kbGVyID0gcmVxdWlyZSgnLi9oYW5kbGVyL0NsaWNrSGFuZGxlcicpO1xuY29uc3QgTW91c2VIYW5kbGVyID0gcmVxdWlyZSgnLi9oYW5kbGVyL01vdXNlSGFuZGxlcicpO1xuY29uc3QgUGFuSGFuZGxlciA9IHJlcXVpcmUoJy4vaGFuZGxlci9QYW5IYW5kbGVyJyk7XG5jb25zdCBab29tSGFuZGxlciA9IHJlcXVpcmUoJy4vaGFuZGxlci9ab29tSGFuZGxlcicpO1xuXG4vLyBDb25zdGFudHNcblxuLyoqXG4gKiBUaGUgbWF4aW11bSB6b29tIGxldmVsIHN1cHBvcnRlZC5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge051bWJlcn1cbiAqL1xuY29uc3QgTUFYX1pPT00gPSAyNDtcblxuLy8gUHJpdmF0ZSBNZXRob2RzXG5cbmNvbnN0IHJlc2l6ZSA9IGZ1bmN0aW9uKHBsb3QpIHtcblx0Y29uc3QgY3VycmVudCA9IHtcblx0XHR3aWR0aDogcGxvdC5jb250YWluZXIub2Zmc2V0V2lkdGgsXG5cdFx0aGVpZ2h0OiBwbG90LmNvbnRhaW5lci5vZmZzZXRIZWlnaHRcblx0fTtcblx0Y29uc3QgcHJldiA9IHtcblx0XHR3aWR0aDogcGxvdC52aWV3cG9ydC53aWR0aCxcblx0XHRoZWlnaHQ6IHBsb3Qudmlld3BvcnQuaGVpZ2h0XG5cdH07XG5cdGNvbnN0IGNlbnRlciA9IHBsb3Qudmlld3BvcnQuZ2V0Q2VudGVyKCk7XG5cblx0aWYgKHByZXYud2lkdGggIT09IGN1cnJlbnQud2lkdGggfHxcblx0XHRwcmV2LmhlaWdodCAhPT0gY3VycmVudC5oZWlnaHQgfHxcblx0XHRwbG90LnBpeGVsUmF0aW8gIT09IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSB7XG5cdFx0Ly8gc3RvcmUgZGV2aWNlIHBpeGVsIHJhdGlvXG5cdFx0cGxvdC5waXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG5cdFx0Ly8gcmVzaXplIGNhbnZhc1xuXHRcdHBsb3QuY2FudmFzLnN0eWxlLndpZHRoID0gY3VycmVudC53aWR0aCArICdweCc7XG5cdFx0cGxvdC5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gY3VycmVudC5oZWlnaHQgKyAncHgnO1xuXHRcdHBsb3QuY2FudmFzLndpZHRoID0gY3VycmVudC53aWR0aCAqIHBsb3QucGl4ZWxSYXRpbztcblx0XHRwbG90LmNhbnZhcy5oZWlnaHQgPSBjdXJyZW50LmhlaWdodCAqIHBsb3QucGl4ZWxSYXRpbztcblx0XHQvLyByZXNpemUgcmVuZGVyIHRhcmdldFxuXHRcdHBsb3QucmVuZGVyQnVmZmVyLnJlc2l6ZShcblx0XHRcdGN1cnJlbnQud2lkdGggKiBwbG90LnBpeGVsUmF0aW8sXG5cdFx0XHRjdXJyZW50LmhlaWdodCAqIHBsb3QucGl4ZWxSYXRpbyk7XG5cdFx0Ly8gdXBkYXRlIHZpZXdwb3J0XG5cdFx0cGxvdC52aWV3cG9ydC53aWR0aCA9IGN1cnJlbnQud2lkdGg7XG5cdFx0cGxvdC52aWV3cG9ydC5oZWlnaHQgPSBjdXJyZW50LmhlaWdodDtcblx0XHQvLyByZS1jZW50ZXIgdmlld3BvcnRcblx0XHRwbG90LnZpZXdwb3J0LmNlbnRlck9uKGNlbnRlcik7XG5cdFx0Ly8gcmVxdWVzdCB0aWxlc1xuXHRcdFJlcXVlc3QucmVxdWVzdFRpbGVzKHBsb3QpO1xuXHRcdC8vIGVtaXQgcmVzaXplXG5cdFx0cGxvdC5lbWl0KEV2ZW50VHlwZS5SRVNJWkUsIG5ldyBSZXNpemVFdmVudChwbG90LCBwcmV2LCBjdXJyZW50KSk7XG5cdH1cbn07XG5cbmNvbnN0IHJlc2V0ID0gZnVuY3Rpb24ocGxvdCkge1xuXHRpZiAoIXBsb3Qud3JhcGFyb3VuZCkge1xuXHRcdC8vIGlmIHRoZXJlIGlzIG5vIHdyYXBhcm91bmQsIGRvIG5vdCByZXNldFxuXHRcdHJldHVybjtcblx0fVxuXHQvLyByZXNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSB2aWV3cG9ydCByZWxhdGl2ZSB0byB0aGUgbGF5ZXIgc3VjaCB0aGF0XG5cdC8vIHRoZSBsYXllciBuYXRpdmUgY29vcmRpbmF0ZSByYW5nZSBpcyB3aXRoaW4gdGhlIHZpZXdwb3J0cyBib3VuZHMuXG5cdGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMiwgcGxvdC56b29tKTtcblx0Y29uc3QgbGF5ZXJXaWR0aCA9IHNjYWxlICogcGxvdC50aWxlU2l6ZTtcblx0Y29uc3QgbGF5ZXJTcGFucyA9IE1hdGguY2VpbChwbG90LnZpZXdwb3J0LndpZHRoIC8gbGF5ZXJXaWR0aCk7XG5cdGNvbnN0IGxheWVyTGVmdCA9IDA7XG5cdGNvbnN0IGxheWVyUmlnaHQgPSBsYXllcldpZHRoIC0gMTtcblx0Ly8gbGF5ZXIgaXMgcGFzdCB0aGUgbGVmdCBib3VuZCBvZiB0aGUgdmlld3BvcnRcblx0aWYgKHBsb3Qudmlld3BvcnQueCA+IGxheWVyUmlnaHQpIHtcblx0XHRwbG90LnZpZXdwb3J0LnggLT0gbGF5ZXJXaWR0aCAqIGxheWVyU3BhbnM7XG5cdFx0aWYgKHBsb3QuaXNQYW5uaW5nKCkpIHtcblx0XHRcdHBsb3QucGFuQW5pbWF0aW9uLnN0YXJ0LnggLT0gbGF5ZXJXaWR0aCAqIGxheWVyU3BhbnM7XG5cdFx0fVxuXHR9XG5cdC8vIGxheWVyIGlzIHBhc3QgdGhlIHJpZ2h0IGJvdW5kIG9mIHRoZSB2aWV3cG9ydFxuXHRpZiAocGxvdC52aWV3cG9ydC54ICsgcGxvdC52aWV3cG9ydC53aWR0aCA8IGxheWVyTGVmdCkge1xuXHRcdHBsb3Qudmlld3BvcnQueCArPSBsYXllcldpZHRoICogbGF5ZXJTcGFucztcblx0XHRpZiAocGxvdC5pc1Bhbm5pbmcoKSkge1xuXHRcdFx0cGxvdC5wYW5BbmltYXRpb24uc3RhcnQueCArPSBsYXllcldpZHRoICogbGF5ZXJTcGFucztcblx0XHR9XG5cdH1cbn07XG5cbmNvbnN0IGJyb2FkY2FzdCA9IGZ1bmN0aW9uKHBsb3QsIHR5cGUpIHtcblx0cGxvdC5vbih0eXBlLCBldmVudCA9PiB7XG5cdFx0cGxvdC5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG5cdFx0XHRsYXllci5lbWl0KHR5cGUsIGV2ZW50KTtcblx0XHR9KTtcblx0fSk7XG59O1xuXG5jb25zdCBmcmFtZSA9IGZ1bmN0aW9uKHBsb3QpIHtcblxuXHQvLyBnZXQgZnJhbWUgdGltZXN0YW1wXG5cdGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cblx0Ly8gZW1pdCBzdGFydCBmcmFtZVxuXHRwbG90LmVtaXQoRXZlbnRUeXBlLkZSQU1FLCBuZXcgRnJhbWVFdmVudCh0aW1lc3RhbXApKTtcblxuXHQvLyB1cGRhdGUgc2l6ZVxuXHRyZXNpemUocGxvdCk7XG5cblx0Y29uc3QgZ2wgPSBwbG90LmdsO1xuXG5cdC8vIGNsZWFyIHRoZSBiYWNrYnVmZmVyXG5cdGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XG5cdGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQpO1xuXG5cdC8vIHNldCB0aGUgdmlld3BvcnRcblx0Z2wudmlld3BvcnQoXG5cdFx0MCwgMCxcblx0XHRwbG90LnZpZXdwb3J0LndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW8sXG5cdFx0cGxvdC52aWV3cG9ydC5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG5cblx0Ly8gYXBwbHkgdGhlIHpvb20gYW5pbWF0aW9uXG5cdGlmIChwbG90LmlzWm9vbWluZygpKSB7XG5cdFx0cGxvdC56b29tQW5pbWF0aW9uLnVwZGF0ZSh0aW1lc3RhbXApO1xuXHR9XG5cblx0Ly8gYXBwbHkgdGhlIHBhbiBhbmltYXRpb25cblx0aWYgKHBsb3QuaXNQYW5uaW5nKCkpIHtcblx0XHRwbG90LnBhbkFuaW1hdGlvbi51cGRhdGUodGltZXN0YW1wKTtcblx0XHRSZXF1ZXN0LnBhblJlcXVlc3QocGxvdCk7XG5cdH1cblxuXHQvLyByZXNldCB2aWV3cG9ydCAvIHBsb3Rcblx0cmVzZXQocGxvdCk7XG5cblx0Ly8gcmVuZGVyIGVhY2ggbGF5ZXJcblx0cGxvdC5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG5cdFx0bGF5ZXIuZHJhdyh0aW1lc3RhbXApO1xuXHR9KTtcblxuXHQvLyByZXF1ZXN0IG5leHQgZnJhbWVcblx0cGxvdC5mcmFtZVJlcXVlc3QgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuXHRcdGZyYW1lKHBsb3QpO1xuXHR9KTtcbn07XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgcGxvdC5cbiAqL1xuY2xhc3MgUGxvdCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlcyBhIG5ldyBQbG90IG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yIC0gVGhlIHNlbGVjdG9yIGZvciB0aGUgY2FudmFzIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsb3Qgb3B0aW9ucy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMudGlsZVNpemUgLSBUaGUgZGltZW5zaW9uIGluIHBpeGVscyBvZiBhIHRpbGUuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnpvb20gLSBUaGUgem9vbSBvZiB0aGUgcGxvdC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMubWluWm9vbSAtIFRoZSBtaW5pbXVtIHpvb20gb2YgdGhlIHBsb3QuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLm1heFpvb20gLSBUaGUgbWF4aW11bSB6b29tIG9mIHRoZSBwbG90LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5jZW50ZXIgLSBUaGUgY2VudGVyIG9mIHRoZSBwbG90LCBpbiBwbG90IHBpeGVscy5cblx0ICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLndyYXBhcm91bmQgLSBXaGV0aGVyIG9yIG5vdCB0aGUgcGxvdCB3cmFwcyBhcm91bmQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmluZXJ0aWEgLSBXaGV0aGVyIG9yIG5vdCBwYW4gaW5lcnRpYSBpcyBlbmFibGVkLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5pbmVydGlhRWFzaW5nIC0gVGhlIGluZXJ0aWEgZWFzaW5nIGZhY3Rvci5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuaW5lcnRpYURlY2VsZXJhdGlvbiAtIFRoZSBpbmVydGlhIGRlY2VsZXJhdGlvbiBmYWN0b3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmNvbnRpbnVvdXNab29tIC0gV2hldGhlciBvciBub3QgY29udGludW91cyB6b29tIGlzIGVuYWJsZWQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnpvb21EdXJhdGlvbiAtIFRoZSBkdXJhdGlvbiBvZiB0aGUgem9vbSBhbmltYXRpb24uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLm1heENvbmN1cnJlbnRab29tcyAtIFRoZSBtYXhpbXVtIGNvbmN1cnJlbnQgem9vbXMgaW4gYSBzaW5nbGUgYmF0Y2guXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmRlbHRhUGVyWm9vbSAtIFRoZSBzY3JvbGwgZGVsdGEgcmVxdWlyZWQgcGVyIHpvb20gbGV2ZWwuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnpvb21EZWJvdW5jZSAtIFRoZSBkZWJvdW5jZSBkdXJhdGlvbiBvZiB0aGUgem9vbSBpbiBtcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG5cdFx0aWYgKCF0aGlzLmNvbnRhaW5lcikge1xuXHRcdFx0dGhyb3cgYEVsZW1lbnQgY291bGQgbm90IGJlIGZvdW5kIGZvciBzZWxlY3RvciAke3NlbGVjdG9yfWA7XG5cdFx0fVxuXG5cdFx0Ly8gY3JlYXRlIGNhbnZhcyBlbGVtZW50XG5cdFx0dGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblx0XHR0aGlzLmNhbnZhcy5zdHlsZS53aWR0aCA9IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoICsgJ3B4Jztcblx0XHR0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQgKyAncHgnO1xuXHRcdHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcblx0XHR0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcblx0XHR0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7XG5cblx0XHQvLyBnZXQgV2ViR0wgY29udGV4dFxuXHRcdHRoaXMuZ2wgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIG9wdGlvbnMpO1xuXHRcdGlmICghdGhpcy5nbCkge1xuXHRcdFx0dGhyb3cgJ1VuYWJsZSB0byBjcmVhdGUgYSBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHBsZWFzZSBlbnN1cmUgeW91ciBicm93c2VyIHN1cHBvcnRzIFdlYkdMJztcblx0XHR9XG5cblx0XHQvLyBjcmVhdGUgcmVuZGVyYnVmZmVyXG5cdFx0dGhpcy5yZW5kZXJCdWZmZXIgPSBuZXcgUmVuZGVyQnVmZmVyKFxuXHRcdFx0dGhpcy5nbCxcblx0XHRcdHRoaXMuY2FudmFzLndpZHRoLFxuXHRcdFx0dGhpcy5jYW52YXMuaGVpZ2h0KTtcblxuXHRcdC8vIHNldCB2aWV3cG9ydFxuXHRcdHRoaXMudmlld3BvcnQgPSBuZXcgVmlld3BvcnQoe1xuXHRcdFx0d2lkdGg6IHRoaXMuY2FudmFzLm9mZnNldFdpZHRoLFxuXHRcdFx0aGVpZ2h0OiB0aGlzLmNhbnZhcy5vZmZzZXRIZWlnaHRcblx0XHR9KTtcblxuXHRcdC8vIHNldCBwaXhlbCByYXRpb1xuXHRcdHRoaXMucGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuXG5cdFx0Ly8gdGlsZSBzaXplIGluIHBpeGVsc1xuXHRcdHRoaXMudGlsZVNpemUgPSBkZWZhdWx0VG8ob3B0aW9ucy50aWxlU2l6ZSwgMjU2KTtcblxuXHRcdC8vIG1pbiBhbmQgbWF4IHpvb20gb2YgdGhlIHBsb3Rcblx0XHR0aGlzLm1pblpvb20gPSBkZWZhdWx0VG8ob3B0aW9ucy5taW5ab29tLCAwKTtcblx0XHR0aGlzLm1heFpvb20gPSBkZWZhdWx0VG8ob3B0aW9ucy5tYXhab29tLCBNQVhfWk9PTSk7XG5cblx0XHQvLyBjdXJyZW50IHpvb20gb2YgdGhlIHBsb3Rcblx0XHR0aGlzLnpvb20gPSBkZWZhdWx0VG8ob3B0aW9ucy56b29tLCAwKTtcblx0XHR0aGlzLnpvb20gPSBjbGFtcCh0aGlzLnpvb20sIHRoaXMubWluWm9vbSwgdGhpcy5tYXhab29tKTtcblxuXHRcdC8vIGNlbnRlciB0aGUgcGxvdFxuXHRcdGNvbnN0IGhhbGYgPSBNYXRoLnBvdygyLCB0aGlzLnpvb20pICogdGhpcy50aWxlU2l6ZSAvIDI7XG5cdFx0Y29uc3QgY2VudGVyID0gZGVmYXVsdFRvKG9wdGlvbnMuY2VudGVyLCB7IHg6IGhhbGYsIHk6IGhhbGYgfSk7XG5cdFx0dGhpcy52aWV3cG9ydC5jZW50ZXJPbihjZW50ZXIpO1xuXG5cdFx0Ly8gd3JhcGFyb3VuZFxuXHRcdHRoaXMud3JhcGFyb3VuZCA9IGRlZmF1bHRUbyhvcHRpb25zLndyYXBhcm91bmQsIGZhbHNlKTtcblxuXHRcdC8vIGNyZWF0ZSBhbmQgZW5hYmxlIGhhbmRsZXJzXG5cdFx0dGhpcy5oYW5kbGVycyA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLmhhbmRsZXJzLnNldCgnY2xpY2snLCBuZXcgQ2xpY2tIYW5kbGVyKHRoaXMsIG9wdGlvbnMpKTtcblx0XHR0aGlzLmhhbmRsZXJzLnNldCgnbW91c2UnLCBuZXcgTW91c2VIYW5kbGVyKHRoaXMsIG9wdGlvbnMpKTtcblx0XHR0aGlzLmhhbmRsZXJzLnNldCgncGFuJywgbmV3IFBhbkhhbmRsZXIodGhpcywgb3B0aW9ucykpO1xuXHRcdHRoaXMuaGFuZGxlcnMuc2V0KCd6b29tJywgbmV3IFpvb21IYW5kbGVyKHRoaXMsIG9wdGlvbnMpKTtcblx0XHR0aGlzLmhhbmRsZXJzLmZvckVhY2goaGFuZGxlciA9PiB7XG5cdFx0XHRoYW5kbGVyLmVuYWJsZSgpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gbGF5ZXJzXG5cdFx0dGhpcy5sYXllcnMgPSBbXTtcblxuXHRcdC8vIGZyYW1lIHJlcXVlc3Rcblx0XHR0aGlzLmZyYW1lUmVxdWVzdCA9IG51bGw7XG5cblx0XHQvLyBicm9hZGNhc3Qgem9vbSAvIHBhbiBldmVudHMgdG8gbGF5ZXJzXG5cdFx0YnJvYWRjYXN0KHRoaXMsIEV2ZW50VHlwZS5aT09NX1NUQVJUKTtcblx0XHRicm9hZGNhc3QodGhpcywgRXZlbnRUeXBlLlpPT00pO1xuXHRcdGJyb2FkY2FzdCh0aGlzLCBFdmVudFR5cGUuWk9PTV9FTkQpO1xuXHRcdGJyb2FkY2FzdCh0aGlzLCBFdmVudFR5cGUuUEFOX1NUQVJUKTtcblx0XHRicm9hZGNhc3QodGhpcywgRXZlbnRUeXBlLlBBTik7XG5cdFx0YnJvYWRjYXN0KHRoaXMsIEV2ZW50VHlwZS5QQU5fRU5EKTtcblxuXHRcdC8vIGJlaW5nIGZyYW1lIGxvb3Bcblx0XHRmcmFtZSh0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGxvdHMgYXNzb2NpYXRpb24gd2l0aCB0aGUgdW5kZXJseWluZyBjYW52YXMgZWxlbWVudCBhbmRcblx0ICogZGlzYWJsZXMgYWxsIGV2ZW50IGhhbmRsZXJzLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7UGxvdH0gVGhlIHBsb3Qgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRkZXN0cm95KCkge1xuXHRcdC8vIHN0b3AgYW5pbWF0aW9uIGxvb3Bcblx0XHRjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmZyYW1lUmVxdWVzdCk7XG5cdFx0dGhpcy5mcmFtZVJlcXVlc3QgPSBudWxsO1xuXHRcdC8vIGRpc2FibGUgaGFuZGxlcnNcblx0XHR0aGlzLmhhbmRsZXJzLmZvckVhY2goaGFuZGxlciA9PiB7XG5cdFx0XHRoYW5kbGVyLmRpc2FibGUoKTtcblx0XHR9KTtcblx0XHQvLyByZW1vdmUgbGF5ZXJzXG5cdFx0dGhpcy5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG5cdFx0XHR0aGlzLnJlbW92ZUxheWVyKGxheWVyKTtcblx0XHR9KTtcblx0XHQvLyBkZXN0cm95IGNvbnRleHRcblx0XHR0aGlzLmdsID0gbnVsbDtcblx0XHQvLyByZW1vdmUgY2FudmFzXG5cdFx0dGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5jYW52YXMpO1xuXHRcdHRoaXMuY2FudmFzID0gbnVsbDtcblx0XHR0aGlzLmNvbnRhaW5lciA9IG51bGw7XG5cdFx0dGhpcy5yZW5kZXJCdWZmZXIgPSBudWxsO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBsYXllciB0byB0aGUgcGxvdC5cblx0ICpcblx0ICogQHBhcmFtIHtMYXllcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gYWRkIHRvIHRoZSBwbG90LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7UGxvdH0gVGhlIHBsb3Qgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRhZGRMYXllcihsYXllcikge1xuXHRcdGlmICghbGF5ZXIpIHtcblx0XHRcdHRocm93ICdObyBsYXllciBhcmd1bWVudCBwcm92aWRlZCc7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmxheWVycy5pbmRleE9mKGxheWVyKSAhPT0gLTEpIHtcblx0XHRcdHRocm93ICdQcm92aWRlZCBsYXllciBpcyBhbHJlYWR5IGF0dGFjaGVkIHRvIHRoZSBwbG90Jztcblx0XHR9XG5cdFx0dGhpcy5sYXllcnMucHVzaChsYXllcik7XG5cdFx0bGF5ZXIub25BZGQodGhpcyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhIGxheWVyIGZyb20gdGhlIHBsb3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGF5ZXJ9IGxheWVyIC0gVGhlIGxheWVyIHRvIHJlbW92ZSBmcm9tIHRoZSBwbG90LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7UGxvdH0gVGhlIHBsb3Qgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRyZW1vdmVMYXllcihsYXllcikge1xuXHRcdGlmICghbGF5ZXIpIHtcblx0XHRcdHRocm93ICdObyBsYXllciBhcmd1bWVudCBwcm92aWRlZCc7XG5cdFx0fVxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5sYXllcnMuaW5kZXhPZihsYXllcik7XG5cdFx0aWYgKGluZGV4ID09PSAtMSkge1xuXHRcdFx0dGhyb3cgJ1Byb3ZpZGVkIGxheWVyIGlzIG5vdCBhdHRhY2hlZCB0byB0aGUgcGxvdCc7XG5cdFx0fVxuXHRcdHRoaXMubGF5ZXJzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0bGF5ZXIub25SZW1vdmUodGhpcyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVGFrZXMgYSBtb3VzZSBldmVudCBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyB2aWV3cG9ydCBwaXhlbFxuXHQgKiBwb3NpdGlvbi4gQ29vcmRpbmF0ZSBbMCwgMF0gaXMgYm90dG9tLWxlZnQgb2YgdGhlIHZpZXdwb3J0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBtb3VzZSBldmVudC5cblx0ICpcblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIHZpZXdwb3J0IHBpeGVsIHBvc2l0aW9uLlxuXHQgKi9cblx0bW91c2VUb1ZpZXdQeChldmVudCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiBldmVudC5jbGllbnRYLFxuXHRcdFx0eTogdGhpcy52aWV3cG9ydC5oZWlnaHQgLSBldmVudC5jbGllbnRZXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUYWtlcyBhIG1vdXNlIGV2ZW50IGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBsb3QgcGl4ZWxcblx0ICogcG9zaXRpb24uIENvb3JkaW5hdGUgWzAsIDBdIGlzIGJvdHRvbS1sZWZ0IG9mIHRoZSBwbG90LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBtb3VzZSBldmVudC5cblx0ICpcblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIHBsb3QgcGl4ZWwgcG9zaXRpb24uXG5cdCAqL1xuXHRtb3VzZVRvUGxvdFB4KGV2ZW50KSB7XG5cdFx0cmV0dXJuIHRoaXMudmlld1B4VG9QbG90UHgodGhpcy5tb3VzZVRvVmlld1B4KGV2ZW50KSk7XG5cdH1cblxuXHQvKipcblx0ICogVGFrZXMgYSB2aWV3cG9ydCBwaXhlbCBwb3NpdGlvbiBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwbG90XG5cdCAqIHBpeGVsIHBvc2l0aW9uLiBDb29yZGluYXRlIFswLCAwXSBpcyBib3R0b20tbGVmdCBvZiB0aGUgcGxvdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHB4IC0gVGhlIHZpZXdwb3J0IHBpeGVsIHBvc2l0aW9uLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcGxvdCBwaXhlbCBwb3NpdGlvbi5cblx0ICovXG5cdHZpZXdQeFRvUGxvdFB4KHB4KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHRoaXMudmlld3BvcnQueCArIHB4LngsXG5cdFx0XHR5OiB0aGlzLnZpZXdwb3J0LnkgKyBweC55XG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUYWtlcyBhIHBsb3QgcGl4ZWwgcG9zaXRpb24gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgdmlld3BvcnRcblx0ICogcGl4ZWwgcG9zaXRpb24uIENvb3JkaW5hdGUgWzAsIDBdIGlzIGJvdHRvbS1sZWZ0IG9mIHRoZSB2aWV3cG9ydC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHB4IC0gVGhlIHBsb3QgcGl4ZWwgcG9zaXRpb24uXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSB2aWV3cG9ydCBwaXhlbCBwb3NpdGlvbi5cblx0ICovXG5cdHBsb3RQeFRvVmlld1B4KHB4KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHB4LnggLSB0aGlzLnZpZXdwb3J0LngsXG5cdFx0XHR5OiBweC55IC0gdGhpcy52aWV3cG9ydC55XG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0YXJnZXQgem9vbSBvZiB0aGUgcGxvdC4gSWYgdGhlIHBsb3QgaXMgYWN0aXZlbHkgem9vbWluZywgaXRcblx0ICogd2lsbCByZXR1cm4gdGhlIGRlc3RpbmF0aW9uIHpvb20uIElmIHRoZSBwbG90IGlzIG5vdCBhY3RpdmVseSB6b29taW5nLCBpdFxuXHQgKiB3aWxsIHJldHVybiB0aGUgY3VycmVudCB6b29tLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgdGFyZ2V0IHpvb20gb2YgdGhlIHBsb3QuXG5cdCAqL1xuXHRnZXRUYXJnZXRab29tKCkge1xuXHRcdGlmICh0aGlzLmlzWm9vbWluZygpKSB7XG5cdFx0XHQvLyBpZiB6b29taW5nLCB1c2UgdGhlIHRhcmdldCBsZXZlbFxuXHRcdFx0cmV0dXJuIHRoaXMuem9vbUFuaW1hdGlvbi50YXJnZXRab29tO1xuXHRcdH1cblx0XHQvLyBpZiBub3Qgem9vbWluZywgdXNlIHRoZSBjdXJyZW50IGxldmVsXG5cdFx0cmV0dXJuIHRoaXMuem9vbTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0YXJnZXQgY2VudGVyIG9mIHRoZSBwbG90IGluIHBsb3QgcGl4ZWwgY29vcmRpbmF0ZXMuIElmIHRoZVxuXHQgKiBwbG90IGlzIGFjdGl2ZWx5IHpvb21pbmcgb3IgcGFubmluZywgaXQgd2lsbCByZXR1cm4gdGhlICBkZXN0aW5hdGlvblxuXHQgKiBjZW50ZXIuIElmIHRoZSBwbG90IGlzIG5vdCBhY3RpdmVseSB6b29taW5nIG9yIHBhbm5pbmcsIGl0IHdpbGwgcmV0dXJuXG5cdCAqIHRoZSBjdXJyZW50IGNlbnRlciBpbiBwbG90IHBpeGVsIGNvb3JkaW5hdGVzLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgdGFyZ2V0IGNlbnRlciBpbiBwbG90IHBpeGVsIGNvb3JkaW5hdGVzLlxuXHQgKi9cblx0Z2V0VGFyZ2V0Q2VudGVyKCkge1xuXHRcdGlmICh0aGlzLmlzWm9vbWluZygpKSB7XG5cdFx0XHQvLyBpZiB6b29taW5nLCB1c2UgdGhlIHRhcmdldCBjZW50ZXJcblx0XHRcdHJldHVybiB0aGlzLnpvb21BbmltYXRpb24udGFyZ2V0Vmlld3BvcnQuZ2V0Q2VudGVyKCk7XG5cdFx0fVxuXHRcdC8vIGlmIG5vdCB6b29taW5nLCB1c2UgdGhlIGN1cnJlbnQgY2VudGVyXG5cdFx0cmV0dXJuIHRoaXMudmlld3BvcnQuZ2V0Q2VudGVyKCk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdGFyZ2V0IHZpZXdwb3J0IG9mIHRoZSBwbG90LiBJZiB0aGUgcGxvdCBpcyBhY3RpdmVseSB6b29taW5nLFxuXHQgKiBpdCB3aWxsIHJldHVybiB0aGUgdGFyZ2V0IHZpZXdwb3J0LiBJZiB0aGUgcGxvdCBpcyBub3QgYWN0aXZlbHkgem9vbWluZyxcblx0ICogaXQgd2lsbCByZXR1cm4gdGhlIGN1cnJlbnQgdmlld3BvcnQuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtWaWV3cG9ydH0gVGhlIHRhcmdldCB2aWV3cG9ydCBvZiB0aGUgcGxvdC5cblx0ICovXG5cdGdldFRhcmdldFZpZXdwb3J0KCkge1xuXHRcdGlmICh0aGlzLmlzWm9vbWluZygpKSB7XG5cdFx0XHQvLyBpZiB6b29taW5nLCB1c2UgdGhlIHRhcmdldCB2aWV3cG9ydFxuXHRcdFx0cmV0dXJuIHRoaXMuem9vbUFuaW1hdGlvbi50YXJnZXRWaWV3cG9ydDtcblx0XHR9XG5cdFx0Ly8gaWYgbm90IHpvb21pbmcsIHVzZSB0aGUgY3VycmVudCB2aWV3cG9ydFxuXHRcdHJldHVybiB0aGlzLnZpZXdwb3J0O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHRpbGUgY29vcmRpbmF0ZXNzIGN1cnJlbnRseSB2aXNpYmxlIGluIHRoZSB2aWV3cG9ydC5cblx0ICpcblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgb2YgdmlzaWJsZSB0aWxlIGNvb3Jkcy5cblx0ICovXG5cdGdldFZpc2libGVDb29yZHMoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFyZ2V0Vmlld3BvcnQoKS5nZXRWaXNpYmxlQ29vcmRzKFxuXHRcdFx0dGhpcy50aWxlU2l6ZSxcblx0XHRcdHRoaXMuZ2V0VGFyZ2V0Wm9vbSgpLFxuXHRcdFx0TWF0aC5yb3VuZCh0aGlzLmdldFRhcmdldFpvb20oKSksXG5cdFx0XHR0aGlzLndyYXBhcm91bmQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhbnMgdG8gdGhlIHRhcmdldCBwbG90IHBpeGVsIGNvb3JkaW5hdGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbCAtIFRoZSB0YXJnZXQgcGxvdCBwaXhlbC5cblx0ICogQHBhcmFtIHtib29sZWFufSBhbmltYXRlIC0gV2hldGhlciBvciBub3QgdG8gYW5pbWF0ZSB0aGUgcGFuLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG5cdCAqL1xuXHRwYW5UbyhwbG90UHgsIGFuaW1hdGUgPSB0cnVlKSB7XG5cdFx0Ly8gY2FuY2VsIGV4aXN0aW5nIGFuaW1hdGlvbnNcblx0XHRpZiAodGhpcy5pc1Bhbm5pbmcoKSkge1xuXHRcdFx0dGhpcy5wYW5BbmltYXRpb24uY2FuY2VsKCk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmlzWm9vbWluZygpKSB7XG5cdFx0XHR0aGlzLnpvb21BbmltYXRpb24uY2FuY2VsKCk7XG5cdFx0fVxuXHRcdHRoaXMuaGFuZGxlcnMuZ2V0KCdwYW4nKS5wYW5UbyhwbG90UHgsIGFuaW1hdGUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFpvb21zIGluIHRvIHRoZSB0YXJnZXQgem9vbSBsZXZlbC4gVGhpcyBpcyBib3VuZGVkIGJ5IHRoZSBwbG90IG9iamVjdHNcblx0ICogbWluWm9vbSBhbmQgbWF4Wm9vbSBhdHRyaWJ1dGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gbGV2ZWwgLSBUaGUgdGFyZ2V0IHpvb20gbGV2ZWwuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gYW5pbWF0ZSAtIFdoZXRoZXIgb3Igbm90IHRvIGFuaW1hdGUgdGhlIHpvb20uIERlZmF1bHRzIHRvIGB0cnVlYC5cblx0ICovXG5cdHpvb21UbyhsZXZlbCwgYW5pbWF0ZSA9IHRydWUpIHtcblx0XHRpZiAodGhpcy5pc1Bhbm5pbmcoKSkge1xuXHRcdFx0dGhpcy5wYW5BbmltYXRpb24uY2FuY2VsKCk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmlzWm9vbWluZygpKSB7XG5cdFx0XHR0aGlzLnpvb21BbmltYXRpb24uY2FuY2VsKCk7XG5cdFx0fVxuXHRcdHRoaXMuaGFuZGxlcnMuZ2V0KCd6b29tJykuem9vbVRvKGxldmVsLCBhbmltYXRlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBwbG90IGlzIGFjdGl2ZWx5IHBhbm5pbmcuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtib29sfSAtIFdoZXRoZXIgb3Igbm90IHRoZSBwbG90IGlzIHBhbm5pbmcuXG5cdCAqL1xuXHRpc1Bhbm5pbmcoKSB7XG5cdFx0cmV0dXJuICEhdGhpcy5wYW5BbmltYXRpb247XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcGxvdCBpcyBhY3RpdmVseSB6b29taW5nLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbH0gLSBXaGV0aGVyIG9yIG5vdCB0aGUgcGxvdCBpcyB6b29taW5nLlxuXHQgKi9cblx0aXNab29taW5nKCkge1xuXHRcdHJldHVybiAhIXRoaXMuem9vbUFuaW1hdGlvbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm4gdGhlIGNvbnRhaW5pbmcgZWxlbWVudCBvZiB0aGUgcGxvdC5cblx0ICpcblx0ICogQHJldHVybnMge0RPTUVsZW1lbnR9IFRoZSBjb250YWluZXIgb2YgdGhlIHBsb3QuXG5cdCAqL1xuXHRnZXRDb250YWluZXIoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY29udGFpbmVyO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGxvdDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdGhyb3R0bGUgPSByZXF1aXJlKCdsb2Rhc2gvdGhyb3R0bGUnKTtcblxuLy8gQ29uc3RhbnRzXG5cbi8qKlxuICogWm9vbSByZXF1ZXN0IHRocm90dGxlIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge051bWJlcn1cbiAqL1xuY29uc3QgWk9PTV9SRVFVRVNUX1RIUk9UVExFX01TID0gNDAwO1xuXG4vKipcbiAqIFBhbiByZXF1ZXN0IHRocm90dGxlIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge051bWJlcn1cbiAqL1xuY29uc3QgUEFOX1JFUVVFU1RfVEhST1RUTEVfTVMgPSAxMDA7XG5cbi8vIFByaXZhdGVcblxuY29uc3QgcmVxdWVzdFRpbGVzID0gZnVuY3Rpb24ocGxvdCkge1xuXHQvLyBnZXQgYWxsIHZpc2libGUgY29vcmRzIGluIHRoZSB0YXJnZXQgdmlld3BvcnRcblx0Y29uc3QgY29vcmRzID0gcGxvdC5nZXRWaXNpYmxlQ29vcmRzKCk7XG5cdC8vIGZvciBlYWNoIGxheWVyXG5cdHBsb3QubGF5ZXJzLmZvckVhY2gobGF5ZXIgPT4ge1xuXHRcdC8vIHJlcXVlc3QgdGlsZXNcblx0XHRsYXllci5yZXF1ZXN0VGlsZXMoY29vcmRzKTtcblx0fSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cmVxdWVzdFRpbGVzOiByZXF1ZXN0VGlsZXMsXG5cdHBhblJlcXVlc3Q6IHRocm90dGxlKHJlcXVlc3RUaWxlcywgUEFOX1JFUVVFU1RfVEhST1RUTEVfTVMpLFxuXHR6b29tUmVxdWVzdDogdGhyb3R0bGUocmVxdWVzdFRpbGVzLCBaT09NX1JFUVVFU1RfVEhST1RUTEVfTVMpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBCb3VuZHMgPSByZXF1aXJlKCcuLi9jb3JlL0JvdW5kcycpO1xuY29uc3QgQ29vcmQgPSByZXF1aXJlKCcuLi9jb3JlL0Nvb3JkJyk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgdmlld3BvcnQuXG4gKi9cbmNsYXNzIFZpZXdwb3J0IHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFZpZXdwb3J0IG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIFRoZSB2aWV3cG9ydCBwYXJhbWV0ZXJzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGFyYW1zLnggLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSB2aWV3cG9ydC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBhcmFtcy55IC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgdmlld3BvcnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwYXJhbXMud2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHZpZXdwb3J0LlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGFyYW1zLmhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IocGFyYW1zID0ge30pIHtcblx0XHR0aGlzLnggPSBwYXJhbXMueCA/IHBhcmFtcy54IDogMDtcblx0XHR0aGlzLnkgPSBwYXJhbXMueSA/IHBhcmFtcy55IDogMDtcblx0XHR0aGlzLndpZHRoID0gcGFyYW1zLndpZHRoID8gTWF0aC5yb3VuZChwYXJhbXMud2lkdGgpIDogMDtcblx0XHR0aGlzLmhlaWdodCA9IHBhcmFtcy5oZWlnaHQgPyBNYXRoLnJvdW5kKHBhcmFtcy5oZWlnaHQpIDogMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBwaXhlbCBib3VuZHMgb2YgdGhlIHZpZXdwb3J0LiBCb3VuZHMgZWRnZXMgYXJlIGluY2x1c2l2ZS5cblx0ICpcblx0ICogQHJldHVybnMge0JvdW5kc30gVGhlIHBpeGVsIGJvdW5kcyBvZiB0aGUgdmlld3BvcnQuXG5cdCAqL1xuXHRnZXRQaXhlbEJvdW5kcygpIHtcblx0XHQvLyBOT1RFOiBib3VuZHMgYXJlIElOQ0xVU0lWRVxuXHRcdHJldHVybiBuZXcgQm91bmRzKFxuXHRcdFx0dGhpcy54LFxuXHRcdFx0dGhpcy54ICsgdGhpcy53aWR0aCAtIDEsXG5cdFx0XHR0aGlzLnksXG5cdFx0XHR0aGlzLnkgKyB0aGlzLmhlaWdodCAtIDEpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHBpeGVsIGJvdW5kcyBvZiB0aGUgdmlld3BvcnQuIEJvdW5kcyBlZGdlcyBhcmUgaW5jbHVzaXZlLlxuXHQgKiBOT1RFOiB0aGlzIGluY2x1ZGVzIHdyYXBhcm91bmQgY29vcmRpbmF0ZXNcblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbGVTaXplIC0gVGhlIGRpbWVuc2lvbiBvZiB0aGUgdGlsZXMsIGluIHBpeGVscy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHZpZXdwb3J0Wm9vbSAtIFRoZSB6b29tIG9mIHRoZSB2aWV3cG9ydC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbGVab29tIC0gVGhlIHpvb20gb2YgdGhlIHRpbGVzIHdpdGhpbiB0aGUgdmlld3BvcnQuIE9wdGlvbmFsLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Qm91bmRzfSBUaGUgdGlsZSBib3VuZHMgb2YgdGhlIHZpZXdwb3J0LlxuXHQgKi9cblx0Z2V0VGlsZUJvdW5kcyh0aWxlU2l6ZSwgdmlld3BvcnRab29tLCB0aWxlWm9vbSA9IHZpZXdwb3J0Wm9vbSkge1xuXHRcdC8vIE5PVEU6IGJvdW5kcyBhcmUgSU5DTFVTSVZFXG5cdFx0Ly8gZ2V0IHRoZSB0aWxlIGNvb3JkaW5hdGUgYm91bmRzIGZvciB0aWxlcyBmcm9tIHRoZSB0aWxlWm9vbSB0aGF0XG5cdFx0Ly8gYXJlIHZpc2libGUgZnJvbSB0aGUgdmlld3BvcnRab29tLlxuXHRcdC8vXHQgRXguIGlmIGN1cnJlbnQgdmlld3BvcnQgem9vbSBpcyAzIGFuZCB0aWxlIHpvb20gaXMgNSwgdGhlXG5cdFx0Ly9cdFx0IHRpbGVzIHdpbGwgYmUgMjUlIG9mIHRoZXJlIG5vcm1hbCBzaXplIGNvbXBhcmVkIHRvIHRoZVxuXHRcdC8vXHRcdCB2aWV3cG9ydC5cblx0XHRjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIHZpZXdwb3J0Wm9vbSAtIHRpbGVab29tKTtcblx0XHRjb25zdCBzY2FsZWRUaWxlU2l6ZSA9IHRpbGVTaXplICogc2NhbGU7XG5cdFx0cmV0dXJuIG5ldyBCb3VuZHMoXG5cdFx0XHRNYXRoLmZsb29yKHRoaXMueCAvIHNjYWxlZFRpbGVTaXplKSxcblx0XHRcdE1hdGguY2VpbCgoKHRoaXMueCArIHRoaXMud2lkdGgpIC8gc2NhbGVkVGlsZVNpemUpIC0gMSksXG5cdFx0XHRNYXRoLmZsb29yKHRoaXMueSAvIHNjYWxlZFRpbGVTaXplKSxcblx0XHRcdE1hdGguY2VpbCgoKHRoaXMueSArIHRoaXMuaGVpZ2h0KSAvIHNjYWxlZFRpbGVTaXplKSAtIDEpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjb29yZGluYXRlcyB0aGF0IGFyZSB2aXNpYmxlIGluIHRoZSB2aWV3cG9ydC5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbGVTaXplIC0gVGhlIGRpbWVuc2lvbiBvZiB0aGUgdGlsZXMsIGluIHBpeGVscy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHZpZXdwb3J0Wm9vbSAtIFRoZSB6b29tIG9mIHRoZSB2aWV3cG9ydC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbGVab29tIC0gVGhlIHpvb20gb2YgdGhlIHRpbGVzIHdpdGhpbiB0aGUgdmlld3BvcnQuIE9wdGlvbmFsLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHdyYXBhcm91bmQgLSBUaGUgaWYgdGhlIGhvcml6b250YWwgYXhpcyBzaG91bGQgd3JhcGFyb3VuZC4gT3B0aW9uYWwuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IG9mIHZpc2libGUgdGlsZSBjb29yZHMuXG5cdCAqL1xuXHRnZXRWaXNpYmxlQ29vcmRzKHRpbGVTaXplLCB2aWV3cG9ydFpvb20sIHRpbGVab29tID0gdmlld3BvcnRab29tLCB3cmFwYXJvdW5kID0gZmFsc2UpIHtcblx0XHRjb25zdCBib3VuZHMgPSB0aGlzLmdldFRpbGVCb3VuZHModGlsZVNpemUsIHZpZXdwb3J0Wm9vbSwgdGlsZVpvb20pO1xuXHRcdC8vIG1pbiAvIG1heCB0aWxlIGNvb3Jkc1xuXHRcdGNvbnN0IGRpbSA9IE1hdGgucG93KDIsIHRpbGVab29tKTtcblx0XHRjb25zdCBtaW4gPSAwO1xuXHRcdGNvbnN0IG1heCA9IGRpbSAtIDE7XG5cdFx0Ly8gZ2V0IHRoZSBib3VuZHMgb2YgdGhlIHpvb20gbGV2ZWxcblx0XHRjb25zdCBsYXllckJvdW5kcyA9IG5ldyBCb3VuZHMoXG5cdFx0XHR3cmFwYXJvdW5kID8gLUluZmluaXR5IDogbWluLFxuXHRcdFx0d3JhcGFyb3VuZCA/IEluZmluaXR5IDogbWF4LFxuXHRcdFx0bWluLFxuXHRcdFx0bWF4KTtcblx0XHQvLyBjaGVjayBpZiB0aGUgbGF5ZXIgaXMgd2l0aGluIHRoZSB2aWV3cG9ydFxuXHRcdGlmICghYm91bmRzLm92ZXJsYXBzKGxheWVyQm91bmRzKSkge1xuXHRcdFx0Ly8gdGhlcmUgaXMgbm8gb3ZlcmxhcFxuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblx0XHQvLyBjbGFtcCBob3Jpem9udGFsIGJvdW5kcyBpZiB0aGVyZSBpcyBubyB3cmFwYXJvdW5kXG5cdFx0Y29uc3QgbGVmdCA9IHdyYXBhcm91bmQgPyBib3VuZHMubGVmdCA6IE1hdGgubWF4KG1pbiwgYm91bmRzLmxlZnQpO1xuXHRcdGNvbnN0IHJpZ2h0ID0gd3JhcGFyb3VuZCA/IGJvdW5kcy5yaWdodCA6IE1hdGgubWluKG1heCwgYm91bmRzLnJpZ2h0KTtcblx0XHQvLyBjbGFtcCB2ZXJ0aWNhbCBib3VuZHNcblx0XHRjb25zdCBib3R0b20gPSBNYXRoLm1heChtaW4sIGJvdW5kcy5ib3R0b20pO1xuXHRcdGNvbnN0IHRvcCA9IE1hdGgubWluKG1heCwgYm91bmRzLnRvcCk7XG5cdFx0Y29uc3QgY29vcmRzID0gW107XG5cdFx0Zm9yIChsZXQgeD1sZWZ0OyB4PD1yaWdodDsgeCsrKSB7XG5cdFx0XHRmb3IgKGxldCB5PWJvdHRvbTsgeTw9dG9wOyB5KyspIHtcblx0XHRcdFx0Y29vcmRzLnB1c2gobmV3IENvb3JkKHRpbGVab29tLCB4LCB5KSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjb29yZHM7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcHJvdmlkZWQgY29vcmQgaXMgd2l0aGluIHRoZSB2aWV3cG9ydC5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbGVTaXplIC0gVGhlIGRpbWVuc2lvbiBvZiB0aGUgdGlsZXMsIGluIHBpeGVscy5cblx0ICogQHBhcmFtIHtDb29yZH0gY29vcmQgLSBUaGUgY29vcmQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB2aWV3cG9ydFpvb20gLSBUaGUgem9vbSBvZiB0aGUgdmlld3BvcnQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBjb29yZCBpcyBpbiB2aWV3LlxuXHQgKi9cblx0aXNJblZpZXcodGlsZVNpemUsIGNvb3JkLCB2aWV3cG9ydFpvb20pIHtcblx0XHRjb25zdCB2aWV3cG9ydEJvdW5kcyA9IHRoaXMuZ2V0UGl4ZWxCb3VuZHMoKTtcblx0XHRjb25zdCB0aWxlQm91bmRzID0gY29vcmQuZ2V0UGl4ZWxCb3VuZHModGlsZVNpemUsIHZpZXdwb3J0Wm9vbSk7XG5cdFx0cmV0dXJuIHZpZXdwb3J0Qm91bmRzLm92ZXJsYXBzKHRpbGVCb3VuZHMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB2aWV3cG9ydCB0aGF0IGhhcyBiZWVuIHpvb21lZCBhcm91bmQgaXQncyBjZW50ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB0aWxlU2l6ZSAtIFRoZSBkaW1lbnNpb24gb2YgdGhlIHRpbGVzLCBpbiBwaXhlbHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB6b29tIC0gVGhlIGN1cnJlbnQgem9vbSBvZiB0aGUgdmlld3BvcnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB0YXJnZXRab29tIC0gVGhlIHRhcmdldCB6b29tIG9mIHRoZSB2aWV3cG9ydC5cblx0ICpcblx0ICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgb2YgdmlzaWJsZSB0aWxlIGNvb3Jkcy5cblx0ICovXG5cdHpvb21Gcm9tUGxvdENlbnRlcih0aWxlU2l6ZSwgem9vbSwgdGFyZ2V0Wm9vbSkge1xuXHRcdC8vIGdldCB0aGUgY3VycmVudCBkaW1lbnNpb25cblx0XHRjb25zdCBjdXJyZW50ID0gTWF0aC5wb3coMiwgem9vbSk7XG5cdFx0Ly8gZ2V0IHRoZSBuZXh0IGRpbWVuc2lvblxuXHRcdGNvbnN0IG5leHQgPSBNYXRoLnBvdygyLCB0YXJnZXRab29tKTtcblx0XHQvLyBkZXRlcm1pbmUgdGhlIGNoYW5nZSBpbiBwaXhlbHMgdG8gY2VudGVyIHRoZSBleGlzdGluZyBwbG90XG5cdFx0Y29uc3QgY2hhbmdlID0gdGlsZVNpemUgKiAobmV4dCAtIGN1cnJlbnQpIC8gMjtcblx0XHQvLyByZXR1cm4gbmV3IHZpZXdwb3J0XG5cdFx0Y29uc3Qgdmlld3BvcnQgPSBuZXcgVmlld3BvcnQoe1xuXHRcdFx0d2lkdGg6IHRoaXMud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuXHRcdFx0eDogdGhpcy54ICsgY2hhbmdlLFxuXHRcdFx0eTogdGhpcy55ICsgY2hhbmdlXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHZpZXdwb3J0O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB2aWV3cG9ydCB0aGF0IGhhcyBiZWVuIHpvb21lZCBhcm91bmQgYSBwcm92aWRlZCBwbG90IHBpeGVsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdGlsZVNpemUgLSBUaGUgZGltZW5zaW9uIG9mIHRoZSB0aWxlcywgaW4gcGl4ZWxzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gem9vbSAtIFRoZSBjdXJyZW50IHpvb20gb2YgdGhlIHZpZXdwb3J0LlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdGFyZ2V0Wm9vbSAtIFRoZSB0YXJnZXQgem9vbSBvZiB0aGUgdmlld3BvcnQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRQeCAtIFRoZSB0YXJnZXQgcGl4ZWwgdG8gem9vbSBhcm91bmQuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGFycmF5IG9mIHZpc2libGUgdGlsZSBjb29yZHMuXG5cdCAqL1xuXHR6b29tRnJvbVBsb3RQeCh0aWxlU2l6ZSwgem9vbSwgdGFyZ2V0Wm9vbSwgdGFyZ2V0UHgpIHtcblx0XHQvLyBnZXQgdGhlIGN1cnJlbnQgZGltZW5zaW9uXG5cdFx0Y29uc3QgY3VycmVudCA9IE1hdGgucG93KDIsIHpvb20pO1xuXHRcdC8vIGdldCB0aGUgbmV4dCBkaW1lbnNpb25cblx0XHRjb25zdCBuZXh0ID0gTWF0aC5wb3coMiwgdGFyZ2V0Wm9vbSk7XG5cdFx0Ly8gZGV0ZXJtaW5lIHRoZSBjaGFuZ2UgaW4gcGl4ZWxzIHRvIGNlbnRlciB0aGUgZXhpc3RpbmcgcGxvdFxuXHRcdGNvbnN0IGNoYW5nZSA9IHRpbGVTaXplICogKG5leHQgLSBjdXJyZW50KSAvIDI7XG5cdFx0Ly8gZ2V0IHRoZSBoYWxmIHNpemUgb2YgdGhlIHBsb3QgYXQgdGhlIGN1cnJlbnQgem9vbVxuXHRcdGNvbnN0IGhhbGYgPSB0aWxlU2l6ZSAqIGN1cnJlbnQgLyAyO1xuXHRcdC8vIGdldCB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgcGxvdCBjZW50ZXIgYXQgdGhlIGN1cnJlbnQgem9vbVxuXHRcdGNvbnN0IGRpZmYgPSB7XG5cdFx0XHR4OiB0YXJnZXRQeC54IC0gaGFsZixcblx0XHRcdHk6IHRhcmdldFB4LnkgLSBoYWxmXG5cdFx0fTtcblx0XHQvLyBnZXQgdGhlIHNjYWxpbmcgYmV0d2VlbiB0aGUgdHdvIHpvb20gbGV2ZWxzXG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCB0YXJnZXRab29tIC0gem9vbSk7XG5cdFx0Ly8gc2NhbGUgdGhlIGRpZmYsIGFuZCBzdWJ0cmFjdCBpdCdzIGN1cnJlbnQgdmFsdWVcblx0XHRjb25zdCBzY2FsZWREaWZmID0ge1xuXHRcdFx0eDogZGlmZi54ICogc2NhbGUgLSBkaWZmLngsXG5cdFx0XHR5OiBkaWZmLnkgKiBzY2FsZSAtIGRpZmYueVxuXHRcdH07XG5cdFx0Ly8gcmV0dXJuIG5ldyB2aWV3cG9ydFxuXHRcdGNvbnN0IHZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KHtcblx0XHRcdHdpZHRoOiB0aGlzLndpZHRoLFxuXHRcdFx0aGVpZ2h0OiB0aGlzLmhlaWdodCxcblx0XHRcdHg6IHRoaXMueCArIGNoYW5nZSArIHNjYWxlZERpZmYueCxcblx0XHRcdHk6IHRoaXMueSArIGNoYW5nZSArIHNjYWxlZERpZmYueVxuXHRcdH0pO1xuXHRcdHJldHVybiB2aWV3cG9ydDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBsb3dlci1sZWZ0IGNvcm5lciBwb3NpdGlvbiBvZiB0aGUgdmlld3BvcnQgaW4gcGxvdCBwaXhlbFxuXHQgKiBjb29yZGluYXRlcy5cblx0ICpcblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIHBsb3QgcGl4ZWwgcG9zaXRpb24uXG5cdCAqL1xuXHRnZXRQb3NpdGlvbigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdGhpcy54LFxuXHRcdFx0eTogdGhpcy55XG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIHZpZXdwb3J0IGluIHBsb3QgcGl4ZWwgY29vcmRpbmF0ZXMuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwbG90IHBpeGVsIGNlbnRlci5cblx0ICovXG5cdGdldENlbnRlcigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdGhpcy54ICsgdGhpcy53aWR0aCAvIDIsXG5cdFx0XHR5OiB0aGlzLnkgKyB0aGlzLmhlaWdodCAvIDJcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIENlbnRlcnMgdGhlIHZpZXdwb3J0IG9uIGEgZ2l2ZW4gcGxvdCBwaXhlbCBjb29yZGluYXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gcHggLSBUaGUgcGxvdCBwaXhlbCB0byBjZW50ZXIgdGhlIHZpZXdwb3J0IG9uLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Vmlld3BvcnR9IFRoZSB2aWV3cG9ydCBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGNlbnRlck9uKHB4KSB7XG5cdFx0dGhpcy54ID0gcHgueCAtIHRoaXMud2lkdGggLyAyO1xuXHRcdHRoaXMueSA9IHB4LnkgLSB0aGlzLmhlaWdodCAvIDI7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3cG9ydDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRUeXBlID0gcmVxdWlyZSgnLi4vLi4vZXZlbnQvRXZlbnRUeXBlJyk7XG5jb25zdCBQYW5FdmVudCA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50L1BhbkV2ZW50Jyk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgcGFuIGFuaW1hdGlvbi5cbiAqL1xuY2xhc3MgUGFuQW5pbWF0aW9uIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFBhbkFuaW1hdGlvbiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyBvZiB0aGUgYW5pbWF0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGFyYW1zLnBsb3QgLSBUaGUgcGxvdCB0YXJnZXQgb2YgdGhlIGFuaW1hdGlvbi5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBhcmFtcy5zdGFydCAtIFRoZSBzdGFydCB0aW1lc3RhbXAgb2YgdGhlIGFuaW1hdGlvbi5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBhcmFtcy5kZWx0YSAtIFRoZSBwb3NpdGlvbmFsIGRlbHRhIG9mIHRoZSBhbmltYXRpb24uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwYXJhbXMuZWFzaW5nIC0gVGhlIGVhc2luZyBmYWN0b3Igb2YgdGhlIGFuaW1hdGlvbi5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBhcmFtcy5kdXJhdGlvbiAtIFRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLlxuXHQgKi9cblx0Y29uc3RydWN0b3IocGFyYW1zID0ge30pIHtcblx0XHR0aGlzLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cdFx0dGhpcy5wbG90ID0gcGFyYW1zLnBsb3Q7XG5cdFx0dGhpcy5zdGFydCA9IHBhcmFtcy5zdGFydDtcblx0XHR0aGlzLmRlbHRhID0gcGFyYW1zLmRlbHRhO1xuXHRcdHRoaXMuZW5kID0ge1xuXHRcdFx0eDogdGhpcy5zdGFydC54ICsgdGhpcy5kZWx0YS54LFxuXHRcdFx0eTogdGhpcy5zdGFydC55ICsgdGhpcy5kZWx0YS55LFxuXHRcdH07XG5cdFx0dGhpcy5lYXNpbmcgPSBwYXJhbXMuZWFzaW5nO1xuXHRcdHRoaXMuZHVyYXRpb24gPSBwYXJhbXMuZHVyYXRpb247XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBsb3QgYmFzZWQgb24gdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlXG5cdCAqIGFuaW1hdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVzdGFtcCAtIFRoZSBmcmFtZSB0aW1lc3RhbXAuXG5cdCAqL1xuXHR1cGRhdGUodGltZXN0YW1wKSB7XG5cdFx0Y29uc3QgdCA9IE1hdGgubWluKDEuMCwgKHRpbWVzdGFtcCAtIHRoaXMudGltZXN0YW1wKSAvICh0aGlzLmR1cmF0aW9uIHx8IDEpKTtcblx0XHQvLyBjYWxjdWxhdGUgdGhlIHByb2dyZXNzIG9mIHRoZSBhbmltYXRpb25cblx0XHRjb25zdCBwcm9ncmVzcyA9IDEgLSBNYXRoLnBvdygxIC0gdCwgMSAvIHRoaXMuZWFzaW5nKTtcblx0XHQvLyBjYWNsdWxhdGUgdGhlIGN1cnJlbnQgcG9zaXRpb24gYWxvbmcgdGhlIHBhblxuXHRcdGNvbnN0IHBsb3QgPSB0aGlzLnBsb3Q7XG5cdFx0Y29uc3QgcHJldiA9IHBsb3Qudmlld3BvcnQuZ2V0UG9zaXRpb24oKTtcblx0XHRjb25zdCBjdXJyZW50ID0ge1xuXHRcdFx0eDogdGhpcy5zdGFydC54ICsgdGhpcy5kZWx0YS54ICogcHJvZ3Jlc3MsXG5cdFx0XHR5OiB0aGlzLnN0YXJ0LnkgKyB0aGlzLmRlbHRhLnkgKiBwcm9ncmVzc1xuXHRcdH07XG5cdFx0Ly8gc2V0IHRoZSB2aWV3cG9ydCBwb3NpdGlvbnNcblx0XHRwbG90LnZpZXdwb3J0LnggPSBjdXJyZW50Lng7XG5cdFx0cGxvdC52aWV3cG9ydC55ID0gY3VycmVudC55O1xuXHRcdC8vIGNyZWF0ZSBwYW4gZXZlbnRcblx0XHRjb25zdCBldmVudCA9IG5ldyBQYW5FdmVudChwbG90LCBwcmV2LCBjdXJyZW50KTtcblx0XHQvLyBjaGVjayBpZiBhbmltYXRpb24gaXMgZmluaXNoZWRcblx0XHRpZiAodCA8IDEpIHtcblx0XHRcdHBsb3QuZW1pdChFdmVudFR5cGUuUEFOLCBldmVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBsb3QuZW1pdChFdmVudFR5cGUuUEFOX0VORCwgZXZlbnQpO1xuXHRcdFx0Ly8gcmVtb3ZlIHNlbGYgZnJvbSBwbG90XG5cdFx0XHRwbG90LnBhbkFuaW1hdGlvbiA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENhbmNlbHMgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIHBsb3QuXG5cdCAqL1xuXHRjYW5jZWwoKSB7XG5cdFx0Y29uc3QgcGxvdCA9IHRoaXMucGxvdDtcblx0XHRjb25zdCBjdXJyZW50ID0gcGxvdC52aWV3cG9ydC5nZXRQb3NpdGlvbigpO1xuXHRcdC8vIGVtaXQgcGFuIGVuZFxuXHRcdHBsb3QuZW1pdChFdmVudFR5cGUuUEFOX0VORCwgbmV3IFBhbkV2ZW50KHBsb3QsIGN1cnJlbnQsIHRoaXMuZW5kKSk7XG5cdFx0Ly8gcmVtb3ZlIHNlbGYgZnJvbSBwbG90XG5cdFx0cGxvdC5wYW5BbmltYXRpb24gPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbXBsZXRlIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHBsb3QuXG5cdCAqL1xuXHRmaW5pc2goKSB7XG5cdFx0Y29uc3QgcGxvdCA9IHRoaXMucGxvdDtcblx0XHRjb25zdCBjdXJyZW50ID0gcGxvdC52aWV3cG9ydC5nZXRQb3NpdGlvbigpO1xuXHRcdC8vIHNldCB0aGUgdmlld3BvcnQgcG9zaXRpb25zXG5cdFx0cGxvdC52aWV3cG9ydC54ID0gdGhpcy5lbmQueDtcblx0XHRwbG90LnZpZXdwb3J0LnkgPSB0aGlzLmVuZC55O1xuXHRcdC8vIGVtaXQgcGFuIGVuZFxuXHRcdGNvbnN0IGV2ZW50ID0gbmV3IFBhbkV2ZW50KHBsb3QsIGN1cnJlbnQsIHRoaXMuZW5kKTtcblx0XHRwbG90LmVtaXQoRXZlbnRUeXBlLlBBTl9FTkQsIGV2ZW50KTtcblx0XHQvLyByZW1vdmUgc2VsZiBmcm9tIHBsb3Rcblx0XHRwbG90LnBhbkFuaW1hdGlvbiA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYW5BbmltYXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50VHlwZSA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50L0V2ZW50VHlwZScpO1xuY29uc3QgWm9vbUV2ZW50ID0gcmVxdWlyZSgnLi4vLi4vZXZlbnQvWm9vbUV2ZW50Jyk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgem9vbSBhbmltYXRpb24uXG4gKi9cbmNsYXNzIFpvb21BbmltYXRpb24ge1xuXG5cdC8qKlxuXHQgKiBJbnN0YW50aWF0ZXMgYSBuZXcgWm9vbUFuaW1hdGlvbiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyBvZiB0aGUgYW5pbWF0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGFyYW1zLnBsb3QgLSBUaGUgcGxvdCB0YXJnZXQgb2YgdGhlIGFuaW1hdGlvbi5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBhcmFtcy5wcmV2Wm9vbSAtIFRoZSBzdGFydGluZyB6b29tIG9mIHRoZSBhbmltYXRpb24uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwYXJhbXMudGFyZ2V0Wm9vbSAtIFRoZSB0YXJnZXQgem9vbSBvZiB0aGUgYW5pbWF0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGFyYW1zLnByZXZWaWV3cG9ydCAtIFRoZSBzdGFydGluZyB2aWV3cG9ydCBvZiB0aGUgYW5pbWF0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGFyYW1zLnRhcmdldFZpZXdwb3J0IC0gVGhlIHRhcmdldCB2aWV3cG9ydCBvZiB0aGUgYW5pbWF0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGFyYW1zLnRhcmdldFB4IC0gVGhlIHRhcmdldCBwaXhlbCBvZiB0aGUgYW5pbWF0aW9uLCBpbiBwbG90IGNvb3JkaW5hdGVzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcGFyYW1zLmR1cmF0aW9uIC0gVGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb24uXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihwYXJhbXMgPSB7fSkge1xuXHRcdHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcblx0XHR0aGlzLnBsb3QgPSBwYXJhbXMucGxvdDtcblx0XHR0aGlzLmR1cmF0aW9uID0gcGFyYW1zLmR1cmF0aW9uO1xuXHRcdHRoaXMucHJldlpvb20gPSBwYXJhbXMucHJldlpvb207XG5cdFx0dGhpcy50YXJnZXRab29tID0gcGFyYW1zLnRhcmdldFpvb207XG5cdFx0dGhpcy5wcmV2Vmlld3BvcnQgPSBwYXJhbXMucHJldlZpZXdwb3J0O1xuXHRcdHRoaXMudGFyZ2V0Vmlld3BvcnQgPSBwYXJhbXMudGFyZ2V0Vmlld3BvcnQ7XG5cdFx0dGhpcy50YXJnZXRQeCA9IHBhcmFtcy50YXJnZXRQeDtcblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSB6b29tIG9mIHRoZSBwbG90IGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZVxuXHQgKiBhbmltYXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lc3RhbXAgLSBUaGUgZnJhbWUgdGltZXN0YW1wLlxuXHQgKi9cblx0dXBkYXRlKHRpbWVzdGFtcCkge1xuXHRcdC8vIGdldCB0IHZhbHVlXG5cdFx0Y29uc3QgdCA9IE1hdGgubWluKDEuMCwgKHRpbWVzdGFtcCAtIHRoaXMudGltZXN0YW1wKSAvICh0aGlzLmR1cmF0aW9uIHx8IDEpKTtcblx0XHQvLyBjYWxjIG5ldyB6b29tXG5cdFx0Y29uc3QgcmFuZ2UgPSB0aGlzLnRhcmdldFpvb20gLSB0aGlzLnByZXZab29tO1xuXHRcdGNvbnN0IHpvb20gPSB0aGlzLnByZXZab29tICsgKHJhbmdlICogdCk7XG5cdFx0Y29uc3QgcGxvdCA9IHRoaXMucGxvdDtcblx0XHQvLyBzZXQgbmV3IHpvb21cblx0XHRwbG90Lnpvb20gPSB6b29tO1xuXHRcdC8vIGNhbGMgbmV3IHZpZXdwb3J0IHBvc2l0aW9uIGZyb20gcHJldlxuXHRcdHBsb3Qudmlld3BvcnQgPSB0aGlzLnByZXZWaWV3cG9ydC56b29tRnJvbVBsb3RQeChcblx0XHRcdHBsb3QudGlsZVNpemUsXG5cdFx0XHR0aGlzLnByZXZab29tLFxuXHRcdFx0cGxvdC56b29tLFxuXHRcdFx0dGhpcy50YXJnZXRQeCk7XG5cdFx0Ly8gY3JlYXRlIHpvb20gZXZlbnRcblx0XHRjb25zdCBldmVudCA9IG5ldyBab29tRXZlbnQocGxvdCwgdGhpcy5wcmV2Wm9vbSwgcGxvdC56b29tLCB0aGlzLnRhcmdldFpvb20pO1xuXHRcdC8vIGNoZWNrIGlmIGFuaW1hdGlvbiBpcyBmaW5pc2hlZFxuXHRcdGlmICh0IDwgMSkge1xuXHRcdFx0cGxvdC5lbWl0KEV2ZW50VHlwZS5aT09NLCBldmVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBsb3QuZW1pdChFdmVudFR5cGUuWk9PTV9FTkQsIGV2ZW50KTtcblx0XHRcdC8vIHJlbW92ZSBzZWxmIGZyb20gcGxvdFxuXHRcdFx0cGxvdC56b29tQW5pbWF0aW9uID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ2FuY2VscyB0aGUgY3VycmVudCBhbmltYXRpb24gYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgcGxvdC5cblx0ICovXG5cdGNhbmNlbCgpIHtcblx0XHRjb25zdCBwbG90ID0gdGhpcy5wbG90O1xuXHRcdGlmICghcGxvdC5jb250aW51b3VzWm9vbSkge1xuXHRcdFx0Ly8gcm91bmQgdG8gdGhlIGNsb3Nlc3Qgem9vbVxuXHRcdFx0cGxvdC56b29tID0gTWF0aC5yb3VuZChwbG90Lnpvb20pO1xuXHRcdFx0Ly8gY2FsYyB2aWV3cG9ydCBwb3NpdGlvbiBmcm9tIHByZXZcblx0XHRcdHBsb3Qudmlld3BvcnQgPSB0aGlzLnByZXZWaWV3cG9ydC56b29tRnJvbVBsb3RQeChcblx0XHRcdFx0cGxvdC50aWxlU2l6ZSxcblx0XHRcdFx0dGhpcy5wcmV2Wm9vbSxcblx0XHRcdFx0cGxvdC56b29tLFxuXHRcdFx0XHR0aGlzLnRhcmdldFB4KTtcblx0XHR9XG5cdFx0Ly8gZW1pdCB6b29tIGVuZFxuXHRcdGNvbnN0IGV2ZW50ID0gbmV3IFpvb21FdmVudChwbG90LCB0aGlzLnByZXZab29tLCBwbG90Lnpvb20sIHRoaXMudGFyZ2V0Wm9vbSk7XG5cdFx0cGxvdC5lbWl0KEV2ZW50VHlwZS5aT09NX0VORCwgZXZlbnQpO1xuXHRcdC8vIHJlbW92ZSBzZWxmIGZyb20gcGxvdFxuXHRcdHBsb3Quem9vbUFuaW1hdGlvbiA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQ29tcGxldGUgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcGxvdC5cblx0ICovXG5cdGZpbmlzaCgpIHtcblx0XHRjb25zdCBwbG90ID0gdGhpcy5wbG90O1xuXHRcdHBsb3Quem9vbSA9IHRoaXMudGFyZ2V0Wm9vbTtcblx0XHRwbG90LnZpZXdwb3J0ID0gdGhpcy50YXJnZXRWaWV3cG9ydDtcblx0XHQvLyBlbWl0IHpvb20gZW5kXG5cdFx0Y29uc3QgZXZlbnQgPSBuZXcgWm9vbUV2ZW50KHBsb3QsIHRoaXMucHJldlpvb20sIHBsb3Quem9vbSwgdGhpcy50YXJnZXRab29tKTtcblx0XHRwbG90LmVtaXQoRXZlbnRUeXBlLlpPT01fRU5ELCBldmVudCk7XG5cdFx0Ly8gcmVtb3ZlIHNlbGYgZnJvbSBwbG90XG5cdFx0cGxvdC56b29tQW5pbWF0aW9uID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFpvb21BbmltYXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50VHlwZSA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50L0V2ZW50VHlwZScpO1xuY29uc3QgQ2xpY2tFdmVudCA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50L0NsaWNrRXZlbnQnKTtcblxuLy8gQ29uc3RcblxuLyoqXG4gKiBEaXN0YW5jZSBpbiBwaXhlbHMgdGhlIG1vdXNlIGNhbiBiZSBtb3ZlZCBiZWZvcmUgdGhlIGNsaWNrIGV2ZW50IGlzXG4gKiBjYW5jZWxsZWQuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtOdW1iZXJ9XG4gKi9cbmNvbnN0IE1PVkVfVE9MRVJBTkNFID0gMTU7XG5cbi8vIFByaXZhdGUgTWV0aG9kc1xuXG5jb25zdCBnZXRNb3VzZUJ1dHRvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdGlmIChldmVudC53aGljaCkge1xuXHRcdGlmIChldmVudC53aGljaCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuICdsZWZ0Jztcblx0XHR9IGVsc2UgaWYgKGV2ZW50LndoaWNoID09PSAyKSB7XG5cdFx0XHRyZXR1cm4gJ21pZGRsZSc7XG5cdFx0fSBlbHNlIGlmIChldmVudC53aGljaCA9PT0gMykge1xuXHRcdFx0cmV0dXJuICdyaWdodCc7XG5cdFx0fVxuXHR9XG5cdGlmIChldmVudC5idXR0b24gPT09IDApIHtcblx0XHRyZXR1cm4gJ2xlZnQnO1xuXHR9IGVsc2UgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMSkge1xuXHRcdHJldHVybiAnbWlkZGxlJztcblx0fSBlbHNlIGlmIChldmVudC5idXR0b24gPT09IDIpIHtcblx0XHRyZXR1cm4gJ3JpZ2h0Jztcblx0fVxufTtcblxuY29uc3QgY3JlYXRlRXZlbnQgPSBmdW5jdGlvbihwbG90LCBldmVudCkge1xuXHRyZXR1cm4gbmV3IENsaWNrRXZlbnQoXG5cdFx0cGxvdCxcblx0XHRnZXRNb3VzZUJ1dHRvbihldmVudCksXG5cdFx0cGxvdC5tb3VzZVRvVmlld1B4KGV2ZW50KSxcblx0XHRwbG90Lm1vdXNlVG9QbG90UHgoZXZlbnQpKTtcbn07XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgY2xpY2sgaGFuZGxlci5cbiAqL1xuY2xhc3MgQ2xpY2tIYW5kbGVyIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IENsaWNrSGFuZGxlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGxvdH0gcGxvdCAtIFRoZSBwbG90IHRvIGF0dGFjaCB0aGUgaGFuZGxlciB0by5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHBsb3QpIHtcblx0XHR0aGlzLnBsb3QgPSBwbG90O1xuXHRcdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgdGhlIGhhbmRsZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtDbGlja0hhbmRsZXJ9IFRoZSBoYW5kbGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZW5hYmxlKCkge1xuXHRcdGlmICh0aGlzLmVuYWJsZWQpIHtcblx0XHRcdHRocm93ICdIYW5kbGVyIGlzIGFscmVhZHkgZW5hYmxlZCc7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcGxvdCA9IHRoaXMucGxvdDtcblxuXHRcdGxldCBsYXN0ID0gbnVsbDtcblx0XHR0aGlzLm1vdXNlZG93biA9IChldmVudCkgPT4ge1xuXHRcdFx0bGFzdCA9IHBsb3QubW91c2VUb1ZpZXdQeChldmVudCk7XG5cdFx0fTtcblxuXHRcdHRoaXMubW91c2V1cCA9IChldmVudCkgPT4ge1xuXHRcdFx0aWYgKCFsYXN0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNvbnN0IHBvcyA9IHBsb3QubW91c2VUb1ZpZXdQeChldmVudCk7XG5cdFx0XHRjb25zdCBkaWZmID0ge1xuXHRcdFx0XHR4OiBsYXN0LnggLSBwb3MueCAsXG5cdFx0XHRcdHk6IGxhc3QueSAtIHBvcy55XG5cdFx0XHR9O1xuXHRcdFx0Y29uc3QgZGlzdFNxcmQgPSBkaWZmLnggKiBkaWZmLnggKyBkaWZmLnkgKiBkaWZmLnk7XG5cdFx0XHRpZiAoZGlzdFNxcmQgPCBNT1ZFX1RPTEVSQU5DRSAqIE1PVkVfVE9MRVJBTkNFKSB7XG5cdFx0XHRcdC8vIG1vdmVtZW50IHdhcyB3aXRoaW4gdG9sZXJhbmNlLCBlbWl0IGNsaWNrXG5cdFx0XHRcdHRoaXMucGxvdC5lbWl0KEV2ZW50VHlwZS5DTElDSywgY3JlYXRlRXZlbnQocGxvdCwgZXZlbnQpKTtcblx0XHRcdH1cblx0XHRcdGxhc3QgPSBudWxsO1xuXHRcdH07XG5cblx0XHR0aGlzLmRibGNsaWNrID0gKGV2ZW50KSA9PiB7XG5cdFx0XHR0aGlzLnBsb3QuZW1pdChFdmVudFR5cGUuREJMX0NMSUNLLCBjcmVhdGVFdmVudChwbG90LCBldmVudCkpO1xuXHRcdH07XG5cblx0XHRwbG90LmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm1vdXNlZG93bik7XG5cdFx0cGxvdC5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubW91c2V1cCk7XG5cdFx0cGxvdC5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLmRibGNsaWNrKTtcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc2FibGVzIHRoZSBoYW5kbGVyLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Q2xpY2tIYW5kbGVyfSBUaGUgaGFuZGxlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGRpc2FibGUoKSB7XG5cdFx0aWYgKHRoaXMuZW5hYmxlZCkge1xuXHRcdFx0dGhyb3cgJ0hhbmRsZXIgaXMgYWxyZWFkeSBkaXNhYmxlZCc7XG5cdFx0fVxuXHRcdHRoaXMucGxvdC5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5tb3VzZWRvd24pO1xuXHRcdHRoaXMucGxvdC5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubW91c2V1cCk7XG5cdFx0dGhpcy5wbG90LmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIHRoaXMuZGJsY2xpY2spO1xuXHRcdHRoaXMubW91c2Vkb3duID0gbnVsbDtcblx0XHR0aGlzLm1vdXNldXAgPSBudWxsO1xuXHRcdHRoaXMuZGJsY2xpY2sgPSBudWxsO1xuXHRcdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpY2tIYW5kbGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFdmVudFR5cGUgPSByZXF1aXJlKCcuLi8uLi9ldmVudC9FdmVudFR5cGUnKTtcbmNvbnN0IE1vdXNlRXZlbnQgPSByZXF1aXJlKCcuLi8uLi9ldmVudC9Nb3VzZUV2ZW50Jyk7XG5cbi8vIFByaXZhdGUgTWV0aG9kc1xuXG5jb25zdCBnZXRNb3VzZUJ1dHRvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdGlmIChldmVudC53aGljaCkge1xuXHRcdGlmIChldmVudC53aGljaCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuICdsZWZ0Jztcblx0XHR9IGVsc2UgaWYgKGV2ZW50LndoaWNoID09PSAyKSB7XG5cdFx0XHRyZXR1cm4gJ21pZGRsZSc7XG5cdFx0fSBlbHNlIGlmIChldmVudC53aGljaCA9PT0gMykge1xuXHRcdFx0cmV0dXJuICdyaWdodCc7XG5cdFx0fVxuXHR9XG5cdGlmIChldmVudC5idXR0b24gPT09IDApIHtcblx0XHRyZXR1cm4gJ2xlZnQnO1xuXHR9IGVsc2UgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMSkge1xuXHRcdHJldHVybiAnbWlkZGxlJztcblx0fSBlbHNlIGlmIChldmVudC5idXR0b24gPT09IDIpIHtcblx0XHRyZXR1cm4gJ3JpZ2h0Jztcblx0fVxufTtcblxuY29uc3QgY3JlYXRlRXZlbnQgPSBmdW5jdGlvbihwbG90LCBldmVudCkge1xuXHRyZXR1cm4gbmV3IE1vdXNlRXZlbnQoXG5cdFx0cGxvdCxcblx0XHRnZXRNb3VzZUJ1dHRvbihldmVudCksXG5cdFx0cGxvdC5tb3VzZVRvVmlld1B4KGV2ZW50KSxcblx0XHRwbG90Lm1vdXNlVG9QbG90UHgoZXZlbnQpKTtcbn07XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgbW91c2UgaGFuZGxlci5cbiAqL1xuY2xhc3MgTW91c2VIYW5kbGVyIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IE1vdXNlSGFuZGxlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGxvdH0gcGxvdCAtIFRoZSBwbG90IHRvIGF0dGFjaCB0aGUgaGFuZGxlciB0by5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHBsb3QpIHtcblx0XHR0aGlzLnBsb3QgPSBwbG90O1xuXHRcdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgdGhlIGhhbmRsZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtNb3VzZUhhbmRsZXJ9IFRoZSBoYW5kbGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZW5hYmxlKCkge1xuXHRcdGlmICh0aGlzLmVuYWJsZWQpIHtcblx0XHRcdHRocm93ICdIYW5kbGVyIGlzIGFscmVhZHkgZW5hYmxlZCc7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcGxvdCA9IHRoaXMucGxvdDtcblxuXHRcdHRoaXMubW91c2Vkb3duID0gKGV2ZW50KSA9PiB7XG5cdFx0XHR0aGlzLnBsb3QuZW1pdChFdmVudFR5cGUuTU9VU0VfRE9XTiwgY3JlYXRlRXZlbnQocGxvdCwgZXZlbnQpKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5tb3VzZXVwID0gKGV2ZW50KSA9PiB7XG5cdFx0XHR0aGlzLnBsb3QuZW1pdChFdmVudFR5cGUuTU9VU0VfVVAsIGNyZWF0ZUV2ZW50KHBsb3QsIGV2ZW50KSk7XG5cdFx0fTtcblxuXHRcdHRoaXMubW91c2Vtb3ZlID0gKGV2ZW50KSA9PiB7XG5cdFx0XHR0aGlzLnBsb3QuZW1pdChFdmVudFR5cGUuTU9VU0VfTU9WRSwgY3JlYXRlRXZlbnQocGxvdCwgZXZlbnQpKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5tb3VzZW92ZXIgPSAoZXZlbnQpID0+IHtcblx0XHRcdHRoaXMucGxvdC5lbWl0KEV2ZW50VHlwZS5NT1VTRV9PVkVSLCBjcmVhdGVFdmVudChwbG90LCBldmVudCkpO1xuXHRcdH07XG5cblx0XHR0aGlzLm1vdXNlb3V0ID0gKGV2ZW50KSA9PiB7XG5cdFx0XHR0aGlzLnBsb3QuZW1pdChFdmVudFR5cGUuTU9VU0VfT1VULCBjcmVhdGVFdmVudChwbG90LCBldmVudCkpO1xuXHRcdH07XG5cblx0XHRwbG90LmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm1vdXNlZG93bik7XG5cdFx0cGxvdC5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubW91c2V1cCk7XG5cdFx0cGxvdC5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tb3VzZW1vdmUpO1xuXHRcdHBsb3QuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMubW91c2VvdmVyKTtcblx0XHRwbG90LmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIHRoaXMubW91c2VvdXQpO1xuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogRGlzYWJsZXMgdGhlIGhhbmRsZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtNb3VzZUhhbmRsZXJ9IFRoZSBoYW5kbGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZGlzYWJsZSgpIHtcblx0XHRpZiAodGhpcy5lbmFibGVkKSB7XG5cdFx0XHR0aHJvdyAnSGFuZGxlciBpcyBhbHJlYWR5IGRpc2FibGVkJztcblx0XHR9XG5cdFx0dGhpcy5wbG90LmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm1vdXNlZG93bik7XG5cdFx0dGhpcy5wbG90LmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5tb3VzZXVwKTtcblx0XHR0aGlzLnBsb3QuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2Vtb3ZlKTtcblx0XHR0aGlzLnBsb3QuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMubW91c2VvdmVyKTtcblx0XHR0aGlzLnBsb3QuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgdGhpcy5tb3VzZW91dCk7XG5cdFx0dGhpcy5tb3VzZWRvd24gPSBudWxsO1xuXHRcdHRoaXMubW91c2V1cCA9IG51bGw7XG5cdFx0dGhpcy5tb3VzZW1vdmUgPSBudWxsO1xuXHRcdHRoaXMubW91c2VvdmVyID0gbnVsbDtcblx0XHR0aGlzLm1vdXNlb3V0ID0gbnVsbDtcblx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlSGFuZGxlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgUGFuQW5pbWF0aW9uID0gcmVxdWlyZSgnLi4vYW5pbWF0aW9uL1BhbkFuaW1hdGlvbicpO1xuY29uc3QgRXZlbnRUeXBlID0gcmVxdWlyZSgnLi4vLi4vZXZlbnQvRXZlbnRUeXBlJyk7XG5jb25zdCBQYW5FdmVudCA9IHJlcXVpcmUoJy4uLy4uL2V2ZW50L1BhbkV2ZW50Jyk7XG5jb25zdCBSZXF1ZXN0ID0gcmVxdWlyZSgnLi8uLi9SZXF1ZXN0Jyk7XG5cbi8vIENvbnN0YW50c1xuXG4vKipcbiAqIFRpbWUgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSBhIHBhbiBwb2ludCBleHBpcmVzLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBQQU5fRVhQSVJZX01TID0gNTA7XG5cbi8qKlxuICogUGFuIGluZXJ0aWEgZW5hYmxlZC5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge2Jvb2xlYW59XG4gKi9cbmNvbnN0IFBBTl9JTlRFUlRJQSA9IHRydWU7XG5cbi8qKlxuICogUGFuIGluZXJ0aWEgZWFzaW5nLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBQQU5fSU5URVJUSUFfRUFTSU5HID0gMC4yO1xuXG4vKipcbiAqIFBhbiBpbmVydGlhIGRlY2VsZXJhdGlvbi5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge051bWJlcn1cbiAqL1xuY29uc3QgUEFOX0lOVEVSVElBX0RFQ0VMRVJBVElPTiA9IDM0MDA7XG5cbi8qKlxuICogUGFuIHRvIGFuaW1hdGlvbiBkdXJhdGlvblxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBQQU5fVE9fRFVSQVRJT04gPSA4MDA7XG5cbi8vIFByaXZhdGUgTWV0aG9kc1xuXG5jb25zdCBwYW4gPSBmdW5jdGlvbihwbG90LCBkZWx0YSkge1xuXHRpZiAocGxvdC5pc1pvb21pbmcoKSkge1xuXHRcdC8vIG5vIHBhbm5pbmcgd2hpbGUgem9vbWluZ1xuXHRcdHJldHVybjtcblx0fVxuXHRjb25zdCBwcmV2ID0gcGxvdC52aWV3cG9ydC5nZXRQb3NpdGlvbigpO1xuXHRjb25zdCBjdXJyZW50ID0ge1xuXHRcdHg6IHByZXYueCArPSBkZWx0YS54LFxuXHRcdHk6IHByZXYueSArPSBkZWx0YS55XG5cdH07XG5cdC8vIHVwZGF0ZSBjdXJyZW50IHZpZXdwb3J0XG5cdHBsb3Qudmlld3BvcnQueCA9IGN1cnJlbnQueDtcblx0cGxvdC52aWV3cG9ydC55ID0gY3VycmVudC55O1xuXHQvLyByZXF1ZXN0IHRpbGVzXG5cdFJlcXVlc3QucGFuUmVxdWVzdChwbG90KTtcblx0Ly8gZW1pdCBwYW5cblx0cGxvdC5lbWl0KEV2ZW50VHlwZS5QQU4sIG5ldyBQYW5FdmVudChwbG90LCBwcmV2LCBjdXJyZW50KSk7XG59O1xuXG5jb25zdCBpc1JpZ2h0QnV0dG9uID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0cmV0dXJuIChldmVudC53aGljaCkgPyBldmVudC53aGljaCA9PT0gMyA6IGV2ZW50LmJ1dHRvbiA9PT0gMjtcbn07XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgcGFuIGhhbmRsZXIuXG4gKi9cbmNsYXNzIFBhbkhhbmRsZXIge1xuXG5cdC8qKlxuXHQgKiBJbnN0YW50aWF0ZXMgYSBuZXcgUGFuSGFuZGxlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGxvdH0gcGxvdCAtIFRoZSBwbG90IHRvIGF0dGFjaCB0aGUgaGFuZGxlciB0by5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGFyYW1ldGVycyBvZiB0aGUgYW5pbWF0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5pbmVydGlhIC0gV2hldGhlciBvciBub3QgcGFuIGluZXJ0aWEgaXMgZW5hYmxlZC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuaW5lcnRpYUVhc2luZyAtIFRoZSBpbmVydGlhIGVhc2luZyBmYWN0b3IuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmluZXJ0aWFEZWNlbGVyYXRpb24gLSBUaGUgaW5lcnRpYSBkZWNlbGVyYXRpb24gZmFjdG9yLlxuXHQgKi9cblx0Y29uc3RydWN0b3IocGxvdCwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0dGhpcy5pbmVydGlhID0gZGVmYXVsdFRvKG9wdGlvbnMuaW5lcnRpYSwgUEFOX0lOVEVSVElBKTtcblx0XHR0aGlzLmluZXJ0aWFFYXNpbmcgPSBkZWZhdWx0VG8ob3B0aW9ucy5pbmVydGlhRWFzaW5nLCBQQU5fSU5URVJUSUFfRUFTSU5HKTtcblx0XHR0aGlzLmluZXJ0aWFEZWNlbGVyYXRpb24gPSBkZWZhdWx0VG8ob3B0aW9ucy5pbmVydGlhRGVjZWxlcmF0aW9uLCBQQU5fSU5URVJUSUFfREVDRUxFUkFUSU9OKTtcblx0XHR0aGlzLnBsb3QgPSBwbG90O1xuXHRcdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgdGhlIGhhbmRsZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtQYW5IYW5kbGVyfSBUaGUgaGFuZGxlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGVuYWJsZSgpIHtcblx0XHRpZiAodGhpcy5lbmFibGVkKSB7XG5cdFx0XHR0aHJvdyAnSGFuZGxlciBpcyBhbHJlYWR5IGVuYWJsZWQnO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBsb3QgPSB0aGlzLnBsb3Q7XG5cblx0XHRsZXQgZG93biA9IGZhbHNlO1xuXHRcdGxldCBsYXN0UG9zID0gbnVsbDtcblx0XHRsZXQgbGFzdFRpbWUgPSBudWxsO1xuXHRcdGxldCBwb3NpdGlvbnMgPSBbXTtcblx0XHRsZXQgdGltZXMgPSBbXTtcblxuXHRcdHRoaXMubW91c2Vkb3duID0gKGV2ZW50KSA9PiB7XG5cdFx0XHQvLyBpZ25vcmUgaWYgcmlnaHQtYnV0dG9uXG5cdFx0XHRpZiAoaXNSaWdodEJ1dHRvbihldmVudCkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Ly8gZmxhZyBhcyBkb3duXG5cdFx0XHRkb3duID0gdHJ1ZTtcblx0XHRcdC8vIHNldCBwb3NpdGlvbiBhbmQgdGltZXN0YW1wXG5cdFx0XHRsYXN0UG9zID0gcGxvdC5tb3VzZVRvVmlld1B4KGV2ZW50KTtcblx0XHRcdGxhc3RUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRcdGlmICh0aGlzLmluZXJ0aWEpIHtcblx0XHRcdFx0Ly8gY2xlYXIgZXhpc3RpbmcgcGFuIGFuaW1hdGlvblxuXHRcdFx0XHRwbG90LnBhbkFuaW1hdGlvbiA9IG51bGw7XG5cdFx0XHRcdC8vIHJlc2V0IHBvc2l0aW9uIGFuZCB0aW1lIGFycmF5c1xuXHRcdFx0XHRwb3NpdGlvbnMgPSBbXTtcblx0XHRcdFx0dGltZXMgPSBbXTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5tb3VzZW1vdmUgPSAoZXZlbnQpID0+IHtcblx0XHRcdGlmIChkb3duKSB7XG5cdFx0XHRcdC8vIGdldCBsYXRlc3QgcG9zaXRpb24gYW5kIHRpbWVzdGFtcFxuXHRcdFx0XHRsZXQgcG9zID0gcGxvdC5tb3VzZVRvVmlld1B4KGV2ZW50KTtcblx0XHRcdFx0bGV0IHRpbWUgPSBEYXRlLm5vdygpO1xuXG5cdFx0XHRcdGlmIChwb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0Ly8gZW1pdCBwYW4gc3RhcnRcblx0XHRcdFx0XHRjb25zdCBwcmV2ID0geyB4OiBsYXN0UG9zLngsIHk6IGxhc3RQb3MueSB9O1xuXHRcdFx0XHRcdGNvbnN0IGN1cnJlbnQgPSB7IHg6IHBvcy54LCB5OiBwb3MueSB9O1xuXHRcdFx0XHRcdHBsb3QuZW1pdChFdmVudFR5cGUuUEFOX1NUQVJULCBuZXcgUGFuRXZlbnQocGxvdCwgcHJldiwgY3VycmVudCkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuaW5lcnRpYSkge1xuXHRcdFx0XHRcdC8vIGFkZCB0byBwb3NpdGlvbiBhbmQgdGltZSBhcnJheXNcblx0XHRcdFx0XHRwb3NpdGlvbnMucHVzaChwb3MpO1xuXHRcdFx0XHRcdHRpbWVzLnB1c2godGltZSk7XG5cdFx0XHRcdFx0Ly8gcHJldmVudCBhcnJheSBmcm9tIGdldHRpbmcgdG9vIGJpZ1xuXHRcdFx0XHRcdGlmICh0aW1lIC0gdGltZXNbMF0gPiBQQU5fRVhQSVJZX01TKSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbnMuc2hpZnQoKTtcblx0XHRcdFx0XHRcdHRpbWVzLnNoaWZ0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbmFsIGRlbHRhXG5cdFx0XHRcdGNvbnN0IGRlbHRhID0ge1xuXHRcdFx0XHRcdHg6IGxhc3RQb3MueCAtIHBvcy54LFxuXHRcdFx0XHRcdHk6IGxhc3RQb3MueSAtIHBvcy55XG5cdFx0XHRcdH07XG5cdFx0XHRcdC8vIHBhbiB0aGUgcGxvdFxuXHRcdFx0XHRwYW4ocGxvdCwgZGVsdGEpO1xuXHRcdFx0XHQvLyB1cGRhdGUgbGFzdCBwb3NpdGlvbiBhbmQgdGltZVxuXHRcdFx0XHRsYXN0VGltZSA9IHRpbWU7XG5cdFx0XHRcdGxhc3RQb3MgPSBwb3M7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMubW91c2V1cCA9IChldmVudCkgPT4ge1xuXG5cdFx0XHQvLyBmbGFnIGFzIHVwXG5cdFx0XHRkb3duID0gZmFsc2U7XG5cblx0XHRcdGlmIChwbG90LmlzWm9vbWluZygpKSB7XG5cdFx0XHRcdC8vIG5vIHBhbm5pbmcgd2hpbGUgem9vbWluZ1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlnbm9yZSBpZiByaWdodC1idXR0b25cblx0XHRcdGlmIChpc1JpZ2h0QnV0dG9uKGV2ZW50KSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlnbm9yZSBpZiBubyBkcmFnIG9jY3VycmVkXG5cdFx0XHRpZiAocG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhpcy5pbmVydGlhKSB7XG5cdFx0XHRcdC8vIGV4aXQgZWFybHkgaWYgbm8gaW5lcnRpYSBvciBubyBtb3ZlbWVudFxuXHRcdFx0XHRwbG90LmVtaXQoRXZlbnRUeXBlLlBBTl9FTkQsIG5ldyBQYW5FdmVudChwbG90KSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2V0IHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgdGltZSA9IERhdGUubm93KCk7XG5cblx0XHRcdC8vIHN0cmlwIGFueSBwb3NpdGlvbnMgdGhhdCBhcmUgdG9vIG9sZFxuXHRcdFx0d2hpbGUgKHRpbWUgLSB0aW1lc1swXSA+IFBBTl9FWFBJUllfTVMpIHtcblx0XHRcdFx0cG9zaXRpb25zLnNoaWZ0KCk7XG5cdFx0XHRcdHRpbWVzLnNoaWZ0KCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aW1lcy5sZW5ndGggPCAyKSB7XG5cdFx0XHRcdC8vIGV4aXQgZWFybHkgaWYgbm8gcmVtYWluaW5nIHZhbGlkIHBvc2l0aW9uc1xuXHRcdFx0XHRwbG90LmVtaXQoRXZlbnRUeXBlLlBBTl9FTkQsIG5ldyBQYW5FdmVudChwbG90KSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gc2hvcnRoYW5kXG5cdFx0XHRjb25zdCBkZWNlbGVyYXRpb24gPSB0aGlzLmluZXJ0aWFEZWNlbGVyYXRpb247XG5cdFx0XHRjb25zdCBlYXNpbmcgPSB0aGlzLmluZXJ0aWFFYXNpbmc7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSBkaXJlY3Rpb24gZnJvbSBlYXJsaWVzdCB0byBsYXRlc3Rcblx0XHRcdGNvbnN0IGRpcmVjdGlvbiA9IHtcblx0XHRcdFx0eDogbGFzdFBvcy54IC0gcG9zaXRpb25zWzBdLngsXG5cdFx0XHRcdHk6IGxhc3RQb3MueSAtIHBvc2l0aW9uc1swXS55XG5cdFx0XHR9O1xuXHRcdFx0Ly8gY2FsY3VsYXRlIHRoZSB0aW1lIGRpZmZlcmVuY2Vcblx0XHRcdGNvbnN0IGRpZmYgPSAoKGxhc3RUaW1lIC0gdGltZXNbMF0pIHx8IDEpIC8gMTAwMDsgLy8gbXMgdG8gc1xuXHRcdFx0Ly8gY2FsY3VsYXRlIHZlbG9jaXR5XG5cdFx0XHRjb25zdCB2ZWxvY2l0eSA9IHtcblx0XHRcdFx0eDogZGlyZWN0aW9uLnggKiAoZWFzaW5nIC8gZGlmZiksXG5cdFx0XHRcdHk6IGRpcmVjdGlvbi55ICogKGVhc2luZyAvIGRpZmYpXG5cdFx0XHR9O1xuXHRcdFx0Ly8gY2FsY3VsYXRlIHNwZWVkXG5cdFx0XHRjb25zdCBzcGVlZCA9IE1hdGguc3FydChcblx0XHRcdFx0KHZlbG9jaXR5LnggKiB2ZWxvY2l0eS54KSArXG5cdFx0XHRcdCh2ZWxvY2l0eS55ICogdmVsb2NpdHkueSkpO1xuXHRcdFx0Ly8gY2FsY3VsYXRlIHBhbm5pbmcgZHVyYXRpb25cblx0XHRcdGNvbnN0IGR1cmF0aW9uID0gc3BlZWQgLyAoZGVjZWxlcmF0aW9uICogZWFzaW5nKTtcblx0XHRcdC8vIGNhbGN1bGF0ZSBpbmVydGlhIGRlbHRhXG5cdFx0XHRjb25zdCBkZWx0YSA9IHtcblx0XHRcdFx0eDogTWF0aC5yb3VuZCh2ZWxvY2l0eS54ICogKC1kdXJhdGlvbiAvIDIpKSxcblx0XHRcdFx0eTogTWF0aC5yb3VuZCh2ZWxvY2l0eS55ICogKC1kdXJhdGlvbiAvIDIpKVxuXHRcdFx0fTtcblx0XHRcdC8vIGdldCBjdXJyZW50IHZpZXdwb3J0IHggLyB5XG5cdFx0XHRjb25zdCBzdGFydCA9IHtcblx0XHRcdFx0eDogcGxvdC52aWV3cG9ydC54LFxuXHRcdFx0XHR5OiBwbG90LnZpZXdwb3J0Lnlcblx0XHRcdH07XG5cdFx0XHQvLyBzZXQgcGFuIGFuaW1hdGlvblxuXHRcdFx0cGxvdC5wYW5BbmltYXRpb24gPSBuZXcgUGFuQW5pbWF0aW9uKHtcblx0XHRcdFx0cGxvdDogcGxvdCxcblx0XHRcdFx0c3RhcnQ6IHN0YXJ0LFxuXHRcdFx0XHRkZWx0YTogZGVsdGEsXG5cdFx0XHRcdGVhc2luZzogZWFzaW5nLFxuXHRcdFx0XHRkdXJhdGlvbjogZHVyYXRpb24gKiAxMDAwIC8vIHMgdG8gbXNcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHR0aGlzLnBsb3QuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMubW91c2Vkb3duKTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlbW92ZSk7XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubW91c2V1cCk7XG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNhYmxlcyB0aGUgaGFuZGxlci5cblx0ICpcblx0ICogQHJldHVybnMge1BhbkhhbmRsZXJ9IFRoZSBoYW5kbGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZGlzYWJsZSgpIHtcblx0XHRpZiAoIXRoaXMuZW5hYmxlZCkge1xuXHRcdFx0dGhyb3cgJ0hhbmRsZXIgaXMgYWxyZWFkeSBkaXNhYmxlZCc7XG5cdFx0fVxuXHRcdHRoaXMucGxvdC5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5tb3VzZWRvd24pO1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW91c2Vtb3ZlKTtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5tb3VzZXVwKTtcblx0XHR0aGlzLm1vdXNlZG93biA9IG51bGw7XG5cdFx0dGhpcy5tb3VzZW1vdmUgPSBudWxsO1xuXHRcdHRoaXMubW91c2V1cCA9IG51bGw7XG5cdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogUGFucyB0byB0aGUgdGFyZ2V0IHBsb3QgcGl4ZWwgY29vcmRpbmF0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsIC0gVGhlIHRhcmdldCBwbG90IHBpeGVsLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGFuaW1hdGUgLSBXaGV0aGVyIG9yIG5vdCB0byBhbmltYXRlIHRoZSBwYW4uIERlZmF1bHRzIHRvIGB0cnVlYC5cblx0ICovXG5cdHBhblRvKHBsb3RQeCwgYW5pbWF0ZSA9IHRydWUpIHtcblx0XHRjb25zdCBwbG90ID0gdGhpcy5wbG90O1xuXHRcdGNvbnN0IGNlbnRlclB4ID0gcGxvdC52aWV3cG9ydC5nZXRDZW50ZXIoKTtcblx0XHRjb25zdCBkZWx0YSA9IHtcblx0XHRcdHg6IHBsb3RQeC54IC0gY2VudGVyUHgueCxcblx0XHRcdHk6IHBsb3RQeC55IC0gY2VudGVyUHgueVxuXHRcdH07XG5cdFx0aWYgKCFhbmltYXRlKSB7XG5cdFx0XHQvLyBkbyBub3QgYW5pbWF0ZVxuXHRcdFx0cGxvdC5lbWl0KEV2ZW50VHlwZS5QQU5fU1RBUlQsIG5ldyBQYW5FdmVudChwbG90KSk7XG5cdFx0XHRwYW4ocGxvdCwgZGVsdGEpO1xuXHRcdFx0cGxvdC5lbWl0KEV2ZW50VHlwZS5QQU5fRU5ELCBuZXcgUGFuRXZlbnQocGxvdCkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBhbmltYXRlIHBhblxuXHRcdFx0cGxvdC5lbWl0KEV2ZW50VHlwZS5QQU5fU1RBUlQsIG5ldyBQYW5FdmVudChwbG90KSk7XG5cdFx0XHRwbG90LnBhbkFuaW1hdGlvbiA9IG5ldyBQYW5BbmltYXRpb24oe1xuXHRcdFx0XHRwbG90OiBwbG90LFxuXHRcdFx0XHRzdGFydDogcGxvdC52aWV3cG9ydC5nZXRQb3NpdGlvbigpLFxuXHRcdFx0XHRkZWx0YTogZGVsdGEsXG5cdFx0XHRcdGVhc2luZzogdGhpcy5pbmVydGlhRWFzaW5nLFxuXHRcdFx0XHRkdXJhdGlvbjogUEFOX1RPX0RVUkFUSU9OXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYW5IYW5kbGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjbGFtcCA9IHJlcXVpcmUoJ2xvZGFzaC9jbGFtcCcpO1xuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgQnJvd3NlciA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvQnJvd3NlcicpO1xuY29uc3QgRXZlbnRUeXBlID0gcmVxdWlyZSgnLi4vLi4vZXZlbnQvRXZlbnRUeXBlJyk7XG5jb25zdCBab29tRXZlbnQgPSByZXF1aXJlKCcuLi8uLi9ldmVudC9ab29tRXZlbnQnKTtcbmNvbnN0IFpvb21BbmltYXRpb24gPSByZXF1aXJlKCcuLi9hbmltYXRpb24vWm9vbUFuaW1hdGlvbicpO1xuY29uc3QgUmVxdWVzdCA9IHJlcXVpcmUoJy4uL1JlcXVlc3QnKTtcbmNvbnN0IFZpZXdwb3J0ID0gcmVxdWlyZSgnLi4vVmlld3BvcnQnKTtcblxuLy8gQ29uc3RhbnRzXG5cbi8qKlxuICogQW1vdW50IG9mIHNjcm9sbCBwaXhlbHMgcGVyIHpvb20gbGV2ZWwuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtOdW1iZXJ9XG4gKi9cbmNvbnN0IFpPT01fV0hFRUxfREVMVEEgPSAzMDA7XG5cbi8qKlxuICogTGVuZ3RoIG9mIHpvb20gYW5pbWF0aW9uIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge051bWJlcn1cbiAqL1xuY29uc3QgWk9PTV9BTklNQVRJT05fTVMgPSAyNTA7XG5cbi8qKlxuICogTWF4aW11bSBjb25jdXJyZW50IGRpc2NyZXRlIHpvb21zIGluIGEgc2luZ2xlIGJhdGNoLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBNQVhfQ09OQ1VSUkVOVF9aT09NUyA9IDQ7XG5cbi8qKlxuICogWm9vbSBkZWJvdW5jZSBkZWxheSBpbiBtaWxpc2Vjb25kcy5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge051bWJlcn1cbiAqL1xuY29uc3QgWk9PTV9ERUJPVU5DRV9NUyA9IDEwMDtcblxuLyoqXG4gKiBDb250aW51b3VzIHpvb20gZW5hYmxlZC5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge2Jvb2xlYW59XG4gKi9cbmNvbnN0IENPTlRJTlVPVVNfWk9PTSA9IGZhbHNlO1xuXG4vLyBQcml2YXRlIE1ldGhvZHNcblxubGV0IGxhc3QgPSBEYXRlLm5vdygpO1xuY29uc3Qgc2tpcEludGVycG9sYXRpb24gPSBmdW5jdGlvbihhbmltYXRpb24sIGRlbHRhKSB7XG5cdC8vIE5PVEU6IGF0dGVtcHQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBzY3JvbGwgZGV2aWNlIGlzIGEgbW91c2Ugb3IgYVxuXHQvLyB0cmFja3BhZC4gTW91c2Ugc2Nyb2xsaW5nIGNyZWF0ZXMgbGFyZ2UgaW5mcmVxdWVudCBkZWx0YXMgd2hpbGVcblx0Ly8gdHJhY2twYWRzIGNyZWF0ZSB0b25zIG9mIHZlcnkgc21hbGwgZGVsdGFzLiBXZSB3YW50IHRvIGludGVycG9sYXRlXG5cdC8vIGJldHdlZW4gd2hlZWwgZXZlbnRzLCBidXQgbm90IGJldHdlZW4gdHJhY2twYWQgZXZlbnRzLlxuXHRjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXHRjb25zdCB0ZGVsdGEgPSBub3cgLSBsYXN0O1xuXHRsYXN0ID0gbm93O1xuXHRpZiAoZGVsdGEgJSA0LjAwMDI0NDE0MDYyNSA9PT0gMCkge1xuXHRcdC8vIGRlZmluaXRlbHkgYSB3aGVlbCwgaW50ZXJwb2xhdGVcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKE1hdGguYWJzKGRlbHRhKSA8IDQpIHtcblx0XHQvLyBkZWZpbml0ZWx5IHRyYWNrIHBhZCwgZG8gbm90IGludGVycG9sYXRlXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKGFuaW1hdGlvbiAmJiBhbmltYXRpb24uZHVyYXRpb24gIT09IDApIHtcblx0XHQvLyBjdXJyZW50IGFuaW1hdGlvbiBoYXMgaW50ZXJwb2xhdGlvbiwgc2hvdWxkIHByb2JhYmx5IGludGVycG9sYXRlXG5cdFx0Ly8gdGhlIG5leHQgYW5pbWF0aW9uIHRvby5cblx0XHQvLyBOT1RFOiB3aXRob3V0IHRoaXMsIHJhcGlkIHdoZWVsIHNjcm9sbGluZyB3aWxsIHRyaWdnZXIgdGhlIHNraXBcblx0XHQvLyBiZWxvd1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAodGRlbHRhIDwgNDApIHtcblx0XHQvLyBldmVudHMgYXJlIGNsb3NlIGVub3VnaCB0b2dldGhlciB0aGF0IHdlIHNob3VsZCBwcm9iYWJseVxuXHRcdC8vIG5vdCBpbnRlcnBvbGF0ZVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IGNvbXB1dGVab29tRGVsdGEgPSBmdW5jdGlvbih3aGVlbERlbHRhLCBjb250aW51b3VzWm9vbSwgZGVsdGFQZXJab29tLCBtYXhab29tcykge1xuXHRsZXQgem9vbURlbHRhID0gd2hlZWxEZWx0YSAvIGRlbHRhUGVyWm9vbTtcblx0aWYgKCFjb250aW51b3VzWm9vbSkge1xuXHRcdC8vIHNuYXAgdmFsdWUgaWYgbm90IGNvbnRpbnVvdXMgem9vbVxuXHRcdGlmICh3aGVlbERlbHRhID4gMCkge1xuXHRcdFx0em9vbURlbHRhID0gTWF0aC5jZWlsKHpvb21EZWx0YSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHpvb21EZWx0YSA9IE1hdGguZmxvb3Ioem9vbURlbHRhKTtcblx0XHR9XG5cdH1cblx0Ly8gY2xhbXAgem9vbSBkZWx0YSB0byBtYXggY29uY3VycmVudCB6b29tc1xuXHRyZXR1cm4gY2xhbXAoem9vbURlbHRhLCAtbWF4Wm9vbXMsIG1heFpvb21zKTtcbn07XG5cbmNvbnN0IGNvbXB1dGVUYXJnZXRab29tID0gZnVuY3Rpb24oem9vbURlbHRhLCBjdXJyZW50Wm9vbSwgY3VycmVudEFuaW1hdGlvbiwgbWluWm9vbSwgbWF4Wm9vbSkge1xuXHRsZXQgdGFyZ2V0Wm9vbTtcblx0aWYgKGN1cnJlbnRBbmltYXRpb24pIHtcblx0XHQvLyBhcHBlbmQgdG8gZXhpc3RpbmcgYW5pbWF0aW9uIHRhcmdldFxuXHRcdHRhcmdldFpvb20gPSBjdXJyZW50QW5pbWF0aW9uLnRhcmdldFpvb20gKyB6b29tRGVsdGE7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0Wm9vbSA9IGN1cnJlbnRab29tICsgem9vbURlbHRhO1xuXHR9XG5cdC8vIGNsYW1wIHRoZSB0YXJnZXQgem9vbSB0byBtaW4gYW5kIG1heCB6b29tIGxldmVsIG9mIHBsb3Rcblx0cmV0dXJuIGNsYW1wKHRhcmdldFpvb20sIG1pblpvb20sIG1heFpvb20pO1xufTtcblxuY29uc3Qgem9vbSA9IGZ1bmN0aW9uKHBsb3QsIHRhcmdldFB4LCB6b29tRGVsdGEsIGR1cmF0aW9uKSB7XG5cdC8vIGNhbGN1bGF0ZSB0YXJnZXQgem9vbSBsZXZlbFxuXHRjb25zdCB0YXJnZXRab29tID0gY29tcHV0ZVRhcmdldFpvb20oXG5cdFx0em9vbURlbHRhLFxuXHRcdHBsb3Quem9vbSxcblx0XHRwbG90Lnpvb21BbmltYXRpb24sXG5cdFx0cGxvdC5taW5ab29tLFxuXHRcdHBsb3QubWF4Wm9vbSk7XG5cdC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gem9vbVxuXHRpZiAodGFyZ2V0Wm9vbSAhPT0gcGxvdC56b29tKSB7XG5cdFx0Ly8gc2V0IHRhcmdldCB2aWV3cG9ydFxuXHRcdGNvbnN0IHRhcmdldFZpZXdwb3J0ID0gcGxvdC52aWV3cG9ydC56b29tRnJvbVBsb3RQeChcblx0XHRcdHBsb3QudGlsZVNpemUsXG5cdFx0XHRwbG90Lnpvb20sXG5cdFx0XHR0YXJnZXRab29tLFxuXHRcdFx0dGFyZ2V0UHgpO1xuXHRcdC8vIGNsZWFyIHBhbiBhbmltYXRpb25cblx0XHRwbG90LnBhbkFuaW1hdGlvbiA9IG51bGw7XG5cdFx0Ly8gaWYgdGhlcmUgaXMgYSBkdXJhdGlvblxuXHRcdGlmIChkdXJhdGlvbiA+IDApIHtcblx0XHRcdC8vIHNldCB6b29tIGFuaW1hdGlvblxuXHRcdFx0cGxvdC56b29tQW5pbWF0aW9uID0gbmV3IFpvb21BbmltYXRpb24oe1xuXHRcdFx0XHRwbG90OiBwbG90LFxuXHRcdFx0XHRkdXJhdGlvbjogZHVyYXRpb24sXG5cdFx0XHRcdHByZXZab29tOiBwbG90Lnpvb20sXG5cdFx0XHRcdHRhcmdldFpvb206IHRhcmdldFpvb20sXG5cdFx0XHRcdHByZXZWaWV3cG9ydDogbmV3IFZpZXdwb3J0KHBsb3Qudmlld3BvcnQpLFxuXHRcdFx0XHR0YXJnZXRWaWV3cG9ydDogdGFyZ2V0Vmlld3BvcnQsXG5cdFx0XHRcdHRhcmdldFB4OiB0YXJnZXRQeFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIHJlcXVlc3QgdGlsZXNcblx0XHRSZXF1ZXN0Lnpvb21SZXF1ZXN0KHBsb3QpO1xuXHRcdC8vIGVtaXQgem9vbSBzdGFydFxuXHRcdHBsb3QuZW1pdChFdmVudFR5cGUuWk9PTV9TVEFSVCwgbmV3IFpvb21FdmVudChwbG90LCBwbG90Lnpvb20sIHBsb3Quem9vbSwgdGFyZ2V0Wm9vbSkpO1xuXHRcdC8vIGlmIHRoZXJlIGlzbid0IGEgZHVyYXRpb25cblx0XHRpZiAoZHVyYXRpb24gPT09IDApIHtcblx0XHRcdC8vIGltbWVkaWF0ZWx5IHVwZGF0ZSBwbG90XG5cdFx0XHRwbG90Lnpvb20gPSB0YXJnZXRab29tO1xuXHRcdFx0cGxvdC52aWV3cG9ydCA9IHRhcmdldFZpZXdwb3J0O1xuXHRcdFx0Ly8gZW1pdCB6b29tIGVuZFxuXHRcdFx0cGxvdC5lbWl0KEV2ZW50VHlwZS5aT09NX0VORCwgIG5ldyBab29tRXZlbnQocGxvdCwgdGFyZ2V0Wm9vbSwgdGFyZ2V0Wm9vbSwgdGFyZ2V0Wm9vbSkpO1xuXHRcdH1cblx0fVxufTtcblxuY29uc3Qgem9vbUZyb21XaGVlbCA9IGZ1bmN0aW9uKGhhbmRsZXIsIHBsb3QsIHRhcmdldFB4LCB3aGVlbERlbHRhLCBjb250aW51b3VzWm9vbSkge1xuXHQvLyBubyB3aGVlbCBkZWx0YSwgZXhpdCBlYXJseVxuXHRpZiAod2hlZWxEZWx0YSA9PT0gMCkge1xuXHRcdHJldHVybjtcblx0fVxuXHQvLyBjYWxjdWxhdGUgem9vbSBkZWx0YSBmcm9tIHdoZWVsIGRlbHRhXG5cdGNvbnN0IHpvb21EZWx0YSA9IGNvbXB1dGVab29tRGVsdGEoXG5cdFx0d2hlZWxEZWx0YSxcblx0XHRjb250aW51b3VzWm9vbSxcblx0XHRoYW5kbGVyLmRlbHRhUGVyWm9vbSxcblx0XHRoYW5kbGVyLm1heENvbmN1cnJlbnRab29tcyk7XG5cdC8vIGdldCBkdXJhdGlvblxuXHRsZXQgZHVyYXRpb24gPSBoYW5kbGVyLnpvb21EdXJhdGlvbjtcblx0aWYgKGNvbnRpbnVvdXNab29tICYmIHNraXBJbnRlcnBvbGF0aW9uKHBsb3Quem9vbUFuaW1hdGlvbiwgd2hlZWxEZWx0YSkpIHtcblx0XHQvLyBza2lwIGFuaW1hdGlvbiBpbnRlcnBvbGF0aW9uXG5cdFx0ZHVyYXRpb24gPSAwO1xuXHR9XG5cdC8vIHByb2Nlc3MgdGhlIHpvb21cblx0em9vbShwbG90LCB0YXJnZXRQeCwgem9vbURlbHRhLCBkdXJhdGlvbik7XG59O1xuXG5jb25zdCBnZXRXaGVlbERlbHRhID0gZnVuY3Rpb24ocGxvdCwgZXZlbnQpIHtcblx0aWYgKGV2ZW50LmRlbHRhTW9kZSA9PT0gMCkge1xuXHRcdC8vIHBpeGVsc1xuXHRcdGlmIChCcm93c2VyLmZpcmVmb3gpIHtcblx0XHRcdHJldHVybiAtZXZlbnQuZGVsdGFZIC8gcGxvdC5waXhlbFJhdGlvO1xuXHRcdH1cblx0XHRyZXR1cm4gLWV2ZW50LmRlbHRhWTtcblx0fSBlbHNlIGlmIChldmVudC5kZWx0YU1vZGUgPT09IDEpIHtcblx0XHQvLyBsaW5lc1xuXHRcdHJldHVybiAtZXZlbnQuZGVsdGFZICogMjA7XG5cdH1cblx0Ly8gcGFnZXNcblx0cmV0dXJuIC1ldmVudC5kZWx0YVkgKiA2MDtcbn07XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgem9vbSBoYW5kbGVyLlxuICovXG5jbGFzcyBab29tSGFuZGxlciB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlcyBhIG5ldyBab29tSGFuZGxlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGxvdH0gcGxvdCAtIFRoZSBwbG90IHRvIGF0dGFjaCB0aGUgaGFuZGxlciB0by5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGFyYW1ldGVycyBvZiB0aGUgYW5pbWF0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5jb250aW51b3VzWm9vbSAtIFdoZXRoZXIgb3Igbm90IGNvbnRpbnVvdXMgem9vbSBpcyBlbmFibGVkLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy56b29tRHVyYXRpb24gLSBUaGUgZHVyYXRpb24gb2YgdGhlIHpvb20gYW5pbWF0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5tYXhDb25jdXJyZW50Wm9vbXMgLSBUaGUgbWF4aW11bSBjb25jdXJyZW50IHpvb21zIGluIGEgc2luZ2xlIGJhdGNoLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5kZWx0YVBlclpvb20gLSBUaGUgc2Nyb2xsIGRlbHRhIHJlcXVpcmVkIHBlciB6b29tIGxldmVsLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy56b29tRGVib3VuY2UgLSBUaGUgZGVib3VuY2UgZHVyYXRpb24gb2YgdGhlIHpvb20gaW4gbXMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihwbG90LCBvcHRpb25zID0ge30pIHtcblx0XHR0aGlzLmNvbnRpbnVvdXNab29tID0gZGVmYXVsdFRvKG9wdGlvbnMuY29udGludW91c1pvb20sIENPTlRJTlVPVVNfWk9PTSk7XG5cdFx0dGhpcy56b29tRHVyYXRpb24gPSBkZWZhdWx0VG8ob3B0aW9ucy56b29tRHVyYXRpb24sIFpPT01fQU5JTUFUSU9OX01TKTtcblx0XHR0aGlzLm1heENvbmN1cnJlbnRab29tcyA9IGRlZmF1bHRUbyhvcHRpb25zLm1heENvbmN1cnJlbnRab29tcywgTUFYX0NPTkNVUlJFTlRfWk9PTVMpO1xuXHRcdHRoaXMuZGVsdGFQZXJab29tID0gZGVmYXVsdFRvKG9wdGlvbnMuZGVsdGFQZXJab29tLCBaT09NX1dIRUVMX0RFTFRBKTtcblx0XHR0aGlzLnpvb21EZWJvdW5jZSA9IGRlZmF1bHRUbyhvcHRpb25zLnpvb21EZWJvdW5jZSwgWk9PTV9ERUJPVU5DRV9NUyk7XG5cdFx0dGhpcy5wbG90ID0gcGxvdDtcblx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFbmFibGVzIHRoZSBoYW5kbGVyLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Wm9vbUhhbmRsZXJ9IFRoZSBoYW5kbGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZW5hYmxlKCkge1xuXHRcdGlmICh0aGlzLmVuYWJsZWQpIHtcblx0XHRcdHRocm93ICdIYW5kbGVyIGlzIGFscmVhZHkgZW5hYmxlZCc7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcGxvdCA9IHRoaXMucGxvdDtcblxuXHRcdGxldCB3aGVlbERlbHRhID0gMDtcblx0XHRsZXQgdGltZW91dCA9IG51bGw7XG5cdFx0bGV0IGV2dCA9IG51bGw7XG5cblx0XHR0aGlzLmRibGNsaWNrID0gKGV2ZW50KSA9PiB7XG5cdFx0XHQvLyBnZXQgbW91c2UgcG9zaXRpb25cblx0XHRcdGNvbnN0IHRhcmdldFB4ID0gcGxvdC5tb3VzZVRvUGxvdFB4KGV2ZW50KTtcblx0XHRcdC8vIHpvb20gdGhlIHBsb3QgYnkgb25lIGxldmVsXG5cdFx0XHR6b29tKHBsb3QsIHRhcmdldFB4LCAxLCB0aGlzLnpvb21EdXJhdGlvbik7XG5cdFx0fTtcblxuXHRcdHRoaXMud2hlZWwgPSAoZXZlbnQpID0+IHtcblxuXHRcdFx0Ly8gZ2V0IG5vcm1hbGl6ZWQgZGVsdGFcblx0XHRcdGNvbnN0IGRlbHRhID0gZ2V0V2hlZWxEZWx0YShwbG90LCBldmVudCk7XG5cblx0XHRcdGlmICghdGhpcy5jb250aW51b3VzWm9vbSAmJiBNYXRoLmFicyhkZWx0YSkgPCA0KSB7XG5cdFx0XHRcdC8vIG1pdGlnYXRlIHRoZSBoeXBlciBzZW5zaXRpdnR5IG9mIGEgdHJhY2twYWRcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpbmNyZW1lbnQgd2hlZWwgZGVsdGFcblx0XHRcdHdoZWVsRGVsdGEgKz0gZGVsdGE7XG5cblx0XHRcdC8vIGNoZWNrIHpvb20gdHlwZVxuXHRcdFx0aWYgKHRoaXMuY29udGludW91c1pvb20pIHtcblx0XHRcdFx0Ly8gZ2V0IHRhcmdldCBwaXhlbCBmcm9tIG1vdXNlIHBvc2l0aW9uXG5cdFx0XHRcdGNvbnN0IHRhcmdldFB4ID0gcGxvdC5tb3VzZVRvUGxvdFB4KGV2ZW50KTtcblx0XHRcdFx0Ly8gcHJvY2VzcyBjb250aW51b3VzIHpvb20gaW1tZWRpYXRlbHlcblx0XHRcdFx0em9vbUZyb21XaGVlbCh0aGlzLCBwbG90LCB0YXJnZXRQeCwgd2hlZWxEZWx0YSwgdHJ1ZSk7XG5cdFx0XHRcdC8vIHJlc2V0IHdoZWVsIGRlbHRhXG5cdFx0XHRcdHdoZWVsRGVsdGEgPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gc2V0IGV2ZW50XG5cdFx0XHRcdGV2dCA9IGV2ZW50O1xuXHRcdFx0XHQvLyBkZWJvdW5jZSBkaXNjcmV0ZSB6b29tXG5cdFx0XHRcdGlmICghdGltZW91dCkge1xuXHRcdFx0XHRcdHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdC8vIGdldCB0YXJnZXQgcGl4ZWwgZnJvbSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHRcdFx0Ly8gTk9URTogdGhpcyBpcyBjYWxsZWQgaW5zaWRlIHRoZSBjbG9zdXJlIHRvIGVuc3VyZVxuXHRcdFx0XHRcdFx0Ly8gdGhhdCB3ZSB1c2UgdGhlIGN1cnJlbnQgdmlld3BvcnQgb2YgdGhlIHBsb3QgdG9cblx0XHRcdFx0XHRcdC8vIGNvbnZlcnQgZnJvbSBtb3VzZSB0byBwbG90IHBpeGVsc1xuXHRcdFx0XHRcdFx0Y29uc3QgdGFyZ2V0UHggPSBwbG90Lm1vdXNlVG9QbG90UHgoZXZ0KTtcblx0XHRcdFx0XHRcdC8vIHByb2Nlc3Mgem9vbSBldmVudFxuXHRcdFx0XHRcdFx0em9vbUZyb21XaGVlbCh0aGlzLCBwbG90LCB0YXJnZXRQeCwgd2hlZWxEZWx0YSwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0Ly8gcmVzZXQgd2hlZWwgZGVsdGFcblx0XHRcdFx0XHRcdHdoZWVsRGVsdGEgPSAwO1xuXHRcdFx0XHRcdFx0Ly8gY2xlYXIgdGltZW91dFxuXHRcdFx0XHRcdFx0dGltZW91dCA9IG51bGw7XG5cdFx0XHRcdFx0XHQvLyBjbGVhciBldmVudFxuXHRcdFx0XHRcdFx0ZXZ0ID0gbnVsbDtcblx0XHRcdFx0XHR9LCB0aGlzLnpvb21EZWJvdW5jZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIHByZXZlbnQgZGVmYXVsdCBiZWhhdmlvciBhbmQgc3RvcCBwcm9wYWdhdGlvbmFcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5wbG90LmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIHRoaXMuZGJsY2xpY2spO1xuXHRcdHRoaXMucGxvdC5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLndoZWVsKTtcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIERpc2FibGVzIHRoZSBoYW5kbGVyLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Wm9vbUhhbmRsZXJ9IFRoZSBoYW5kbGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZGlzYWJsZSgpIHtcblx0XHRpZiAodGhpcy5lbmFibGVkKSB7XG5cdFx0XHR0aHJvdyAnSGFuZGxlciBpcyBhbHJlYWR5IGRpc2FibGVkJztcblx0XHR9XG5cdFx0dGhpcy5wbG90LmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIHRoaXMuZGJsY2xpY2spO1xuXHRcdHRoaXMucGxvdC5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLndoZWVsKTtcblx0XHR0aGlzLmRibGNsaWNrID0gbnVsbDtcblx0XHR0aGlzLndoZWVsID0gbnVsbDtcblx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBab29tcyBpbiB0byB0aGUgdGFyZ2V0IHpvb20gbGV2ZWwuIFRoaXMgaXMgYm91bmRlZCBieSB0aGUgcGxvdCBvYmplY3RzXG5cdCAqIG1pblpvb20gYW5kIG1heFpvb20gYXR0cmlidXRlcy5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsIC0gVGhlIHRhcmdldCB6b29tIGxldmVsLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGFuaW1hdGUgLSBXaGV0aGVyIG9yIG5vdCB0byBhbmltYXRlIHRoZSB6b29tLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG5cdCAqL1xuXHR6b29tVG8obGV2ZWwsIGFuaW1hdGUgPSB0cnVlKSB7XG5cdFx0Y29uc3QgcGxvdCA9IHRoaXMucGxvdDtcblx0XHRjb25zdCB0YXJnZXRQeCA9IHRoaXMucGxvdC52aWV3cG9ydC5nZXRDZW50ZXIoKTtcblx0XHRjb25zdCB6b29tRGVsdGEgPSBsZXZlbCAtIHBsb3Quem9vbTtcblx0XHRpZiAoIWFuaW1hdGUpIHtcblx0XHRcdC8vIGRvIG5vdCBhbmltYXRlXG5cdFx0XHR6b29tKHBsb3QsIHRhcmdldFB4LCB6b29tRGVsdGEsIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBhbmltYXRlXG5cdFx0XHR6b29tKHBsb3QsIHRhcmdldFB4LCB6b29tRGVsdGEsIHRoaXMuem9vbUR1cmF0aW9uKTtcblx0XHR9XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBab29tSGFuZGxlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgcmVuZGVyZXIuXG4gKi9cbmNsYXNzIFJlbmRlcmVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFJlbmRlcmVyIG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5sYXllciA9IG51bGw7XG5cdFx0dGhpcy5oYW5kbGVycyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgYXR0YWNoZWQgdG8gYSBsYXllci5cblx0ICpcblx0ICogQHBhcmFtIHtMYXllcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gYXR0YWNoIHRoZSByZW5kZXJlciB0by5cblx0ICpcblx0ICogQHJldHVybnMge1JlbmRlcmVyfSBUaGUgcmVuZGVyZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRvbkFkZChsYXllcikge1xuXHRcdGlmICghbGF5ZXIpIHtcblx0XHRcdHRocm93ICdObyBsYXllciBwcm92aWRlZCBhcyBhcmd1bWVudCc7XG5cdFx0fVxuXHRcdHRoaXMubGF5ZXIgPSBsYXllcjtcblx0XHR0aGlzLmhhbmRsZXJzID0gbmV3IE1hcCgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVkIHdoZW4gdGhlIHJlbmRlcmVyIGlzIHJlbW92ZWQgZnJvbSBhIGxheWVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xheWVyfSBsYXllciAtIFRoZSBsYXllciB0byByZW1vdmUgdGhlIHJlbmRlcmVyIGZyb20uXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtSZW5kZXJlcn0gVGhlIHJlbmRlcmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0b25SZW1vdmUobGF5ZXIpIHtcblx0XHRpZiAoIWxheWVyKSB7XG5cdFx0XHR0aHJvdyAnTm8gbGF5ZXIgcHJvdmlkZWQgYXMgYXJndW1lbnQnO1xuXHRcdH1cblx0XHR0aGlzLmxheWVyID0gbnVsbDtcblx0XHR0aGlzLmhhbmRsZXJzID0gbnVsbDtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhcnMgYW55IHBlcnNpc3RlZCBzdGF0ZSBpbiB0aGUgcmVuZGVyZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtSZW5kZXJlcn0gVGhlIHJlbmRlcmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0Y2xlYXIoKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGRyYXcgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBwZXIgZnJhbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lc3RhbXAgLSBUaGUgZnJhbWUgdGltZXN0YW1wLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7UmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGRyYXcoKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZW5kZXJlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRHJhd0V2ZW50ID0gcmVxdWlyZSgnLi4vLi4vZXZlbnQvRHJhd0V2ZW50Jyk7XG5jb25zdCBFdmVudFR5cGUgPSByZXF1aXJlKCcuLi8uLi9ldmVudC9FdmVudFR5cGUnKTtcbmNvbnN0IFJlbmRlcmVyID0gcmVxdWlyZSgnLi4vUmVuZGVyZXInKTtcblxuLy8gQ29uc3RhbnRzXG5cbi8qKlxuICogVGhlIG1heGltdW0gbGVmdCAvIGJvdHRvbSBvZmZzZXQgb2YgdGhlIGNvbnRhaW5lciBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBNQVhfQ09OVEFJTkVSX09GRlNFVCA9IDI1NioyNTYqODtcblxuLyoqXG4gKiBEcmF3IGRlYm91bmNlIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBEUkFXX0RFQk9VTkNFX01TID0gNDAwO1xuXG4vKipcbiAqIEVyYXNlIGRlYm91bmNlIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBFUkFTRV9ERUJPVU5DRV9NUyA9IDQwMDtcblxuLyoqXG4gKiBPcGFjaXR5IHRpbWVvdXQgaW4gbWlsbGVzZWNvbmRzLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBPUEFDSVRZX1RJTUVPVVRfTVMgPSA0MDtcblxuLyoqXG4gKiBPcGFjaXR5IGZhZGUgaW4gdHJhbnNpdGlvbiBkdXJhdGlvbiBpbiBtaWxsZXNlY29uZHMuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtOdW1iZXJ9XG4gKi9cbmNvbnN0IE9QQUNJVFlfRkFERV9JTl9NUyA9IDQwMDtcblxuLy8gUHJpdmF0ZSBNZXRob2RzXG5cbmNvbnN0IGdldFN0YWxlQ29vcmRzID0gZnVuY3Rpb24ocGxvdCwgdGlsZXMpIHtcblx0Ly8gZ2V0IGFsbCBjdXJyZW50bHkgdmlzaWJsZSB0aWxlIGNvb3Jkc1xuXHRjb25zdCBjb29yZHMgPSBwbG90LmdldFZpc2libGVDb29yZHMoKTtcblx0Y29uc3QgdmlzaWJsZSA9IG5ldyBNYXAoKTtcblx0Y29vcmRzLmZvckVhY2goY29vcmQgPT4ge1xuXHRcdHZpc2libGUuc2V0KGNvb3JkLmhhc2gsIGNvb3JkKTtcblx0fSk7XG5cdC8vIGZsYWcgYW55IGNvb3JkIHRoYXQgaXMgbm90IGluIHZpZXcgYXMgc3RhbGVcblx0Y29uc3Qgc3RhbGUgPSBuZXcgTWFwKCk7XG5cdHRpbGVzLmZvckVhY2goKHRpbGUsIGhhc2gpID0+IHtcblx0XHRpZiAoIXZpc2libGUuaGFzKGhhc2gpKSB7XG5cdFx0XHRzdGFsZS5zZXQoaGFzaCwgdGlsZSk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHN0YWxlO1xufTtcblxuY29uc3QgZ2V0UmVuZGVyYWJsZXMgPSBmdW5jdGlvbihwbG90LCBweXJhbWlkKSB7XG5cdC8vIGdldCBhbGwgY3VycmVudGx5IHZpc2libGUgdGlsZSBjb29yZHNcblx0Y29uc3QgY29vcmRzID0gcGxvdC5nZXRWaXNpYmxlQ29vcmRzKCk7XG5cdC8vIGdldCBhdmFpbGFibGUgcmVuZGVyYWJsZXNcblx0Y29uc3QgcmVuZGVyYWJsZXMgPSBuZXcgTWFwKCk7XG5cdGNvb3Jkcy5mb3JFYWNoKGNvb3JkID0+IHtcblx0XHRjb25zdCBuY29vcmQgPSBjb29yZC5ub3JtYWxpemUoKTtcblx0XHQvLyBjaGVjayBpZiB3ZSBoYXZlIHRoZSB0aWxlXG5cdFx0Y29uc3QgdGlsZSA9IHB5cmFtaWQuZ2V0KG5jb29yZCk7XG5cdFx0aWYgKHRpbGUpIHtcblx0XHRcdHJlbmRlcmFibGVzLnNldChjb29yZC5oYXNoLCB7XG5cdFx0XHRcdGNvb3JkOiBjb29yZCxcblx0XHRcdFx0dGlsZTogdGlsZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHJlbmRlcmFibGVzO1xufTtcblxuY29uc3QgZHJhd1RpbGVzID0gZnVuY3Rpb24ocmVuZGVyZXIsIGNvbnRhaW5lciwgdGlsZXMsIHBsb3QsIHB5cmFtaWQsIGlnbm9yZUZhZGUgPSBmYWxzZSkge1xuXHRjb25zdCB0aWxlU2l6ZSA9IHBsb3QudGlsZVNpemU7XG5cdC8vIGNyZWF0ZSBkb2N1bWVudCBmcmFnbWVudFxuXHRjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0Ly8gYWRkIG5ldyB0aWxlcyB0byB0aGUgRE9NXG5cdGNvbnN0IHJlbmRlcmFibGVzID0gZ2V0UmVuZGVyYWJsZXMocGxvdCwgcHlyYW1pZCk7XG5cdHJlbmRlcmFibGVzLmZvckVhY2goKHJlbmRlcmFibGUsIGhhc2gpID0+IHtcblx0XHRpZiAoIXRpbGVzLmhhcyhoYXNoKSkge1xuXHRcdFx0Y29uc3QgY29vcmQgPSByZW5kZXJhYmxlLmNvb3JkO1xuXHRcdFx0Ly8gY3JlYXRlIHRpbGUgZWxlbWVudFxuXHRcdFx0Y29uc3QgZWxlbSA9IHJlbmRlcmVyLmNyZWF0ZVRpbGUodGlsZVNpemUpO1xuXHRcdFx0Ly8gcG9zaXRpb24gdGlsZVxuXHRcdFx0cmVuZGVyZXIucG9zaXRpb25UaWxlKFxuXHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRjb29yZC54ICogdGlsZVNpemUgKyByZW5kZXJlci5vZmZzZXQueCxcblx0XHRcdFx0Y29vcmQueSAqIHRpbGVTaXplICsgcmVuZGVyZXIub2Zmc2V0LnksXG5cdFx0XHRcdHRpbGVTaXplKTtcblx0XHRcdC8vIG1ha2UgdGlsZSBpbnZpc2libGVcblx0XHRcdGlmICghaWdub3JlRmFkZSkge1xuXHRcdFx0XHRlbGVtLnN0eWxlLnRyYW5zaXRpb24gPSBgb3BhY2l0eSAke09QQUNJVFlfRkFERV9JTl9NU31tc2A7XG5cdFx0XHRcdGVsZW0uc3R5bGUub3BhY2l0eSA9ICcwLjAnO1xuXHRcdFx0fVxuXHRcdFx0Ly8gZHJhdyB0aGUgdGlsZVxuXHRcdFx0cmVuZGVyZXIuZHJhd1RpbGUoZWxlbSwgcmVuZGVyYWJsZS50aWxlKTtcblx0XHRcdC8vIGFkZCB0byB0aGUgZnJhZ21lbnRcblx0XHRcdGZyYWdtZW50LmFwcGVuZChlbGVtKTtcblx0XHRcdGlmICghaWdub3JlRmFkZSkge1xuXHRcdFx0XHQvLyBmYWRlIHRpbGUgaW5cblx0XHRcdFx0c2V0VGltZW91dCgoKT0+e1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUub3BhY2l0eSA9IDEuMDtcblx0XHRcdFx0fSwgT1BBQ0lUWV9USU1FT1VUX01TKTtcblx0XHRcdH1cblx0XHRcdC8vIGFkZCB0aGUgdGlsZVxuXHRcdFx0dGlsZXMuc2V0KGhhc2gsIHtcblx0XHRcdFx0Y29vcmQ6IGNvb3JkLFxuXHRcdFx0XHRlbGVtOiBlbGVtXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXHRpZiAoZnJhZ21lbnQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuXHRcdC8vIGFwcGVuZCBhbGwgbmV3IHRpbGVzIHRvIHRoZSBjb250YWluZXJcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXHRcdC8vIGVtaXQgYSBwb3N0ZHJhdyBldmVudFxuXHRcdHJlbmRlcmVyLmVtaXQoRXZlbnRUeXBlLlBPU1RfRFJBVywgbmV3IERyYXdFdmVudChyZW5kZXJhYmxlcywgbnVsbCkpO1xuXHR9XG59O1xuXG5jb25zdCBlcmFzZVRpbGVzID0gZnVuY3Rpb24ocmVuZGVyZXIsIGNvbnRhaW5lciwgdGlsZXMsIHBsb3QpIHtcblx0Ly8gcmVtb3ZlIGFueSBzdGFsZSB0aWxlcyBmcm9tIERPTVxuXHRjb25zdCBzdGFsZSA9IGdldFN0YWxlQ29vcmRzKHBsb3QsIHRpbGVzKTtcblx0c3RhbGUuZm9yRWFjaCgodGlsZSwgaGFzaCkgPT4ge1xuXHRcdHRpbGVzLmRlbGV0ZShoYXNoKTtcblx0XHRjb250YWluZXIucmVtb3ZlQ2hpbGQodGlsZS5lbGVtKTtcblx0fSk7XG59O1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIERPTSByZW5kZXJlci5cbiAqL1xuY2xhc3MgRE9NUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlcyBhIG5ldyBET01SZW5kZXJlciBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudGlsZXMgPSBudWxsO1xuXHRcdHRoaXMuY29udGFpbmVyID0gbnVsbDtcblx0XHQvLyB0byBkZWFsIHdpdGggY3NzIHRvcCAvIGxlZnQgcHJlY2lzaW9uIGlzc3Vlcywgd2UgbmVlZCB0byBwb3NpdGlvblxuXHRcdC8vIHRoZSBsYXllciBjb250YWluZXIgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgdmlld3BvcnQgd2l0aGluIHNvbWVcblx0XHQvLyBwaXhlbCB0aHJlc2hvbGQgdG8gcHJldmVudCByZW5kZXJpbmcgaXNzdWVzLlxuXHRcdHRoaXMub2Zmc2V0ID0ge1xuXHRcdFx0eDogMCxcblx0XHRcdHk6IDBcblx0XHR9O1xuXHRcdHRoaXMuZHJhd1RpbWVvdXQgPSBudWxsO1xuXHRcdHRoaXMuZXJhc2VUaW1lb3V0ID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlZCB3aGVuIHRoZSByZW5kZXJlciBpcyBhdHRhY2hlZCB0byBhIGxheWVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xheWVyfSBsYXllciAtIFRoZSBsYXllciB0byBhdHRhY2ggdGhlIHJlbmRlcmVyIHRvLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7RE9NUmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdG9uQWRkKGxheWVyKSB7XG5cdFx0c3VwZXIub25BZGQobGF5ZXIpO1xuXHRcdHRoaXMudGlsZXMgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5jb250YWluZXIgPSB0aGlzLmNyZWF0ZUNvbnRhaW5lcigpO1xuXHRcdHRoaXMubGF5ZXIucGxvdC5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVkIHdoZW4gdGhlIHJlbmRlcmVyIGlzIHJlbW92ZWQgZnJvbSBhIGxheWVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xheWVyfSBsYXllciAtIFRoZSBsYXllciB0byByZW1vdmUgdGhlIHJlbmRlcmVyIGZyb20uXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtET01SZW5kZXJlcn0gVGhlIHJlbmRlcmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0b25SZW1vdmUobGF5ZXIpIHtcblx0XHR0aGlzLmxheWVyLnBsb3QuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuY29udGFpbmVyKTtcblx0XHR0aGlzLnRpbGVzID0gbnVsbDtcblx0XHR0aGlzLmNvbnRhaW5lciA9IG51bGw7XG5cdFx0Ly8gY2xlYXIgdGltZW91dHNcblx0XHRjbGVhclRpbWVvdXQodGhpcy5kcmF3VGltZW91dCk7XG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMuZXJhc2VUaW1lb3V0KTtcblx0XHR0aGlzLmRyYXdUaW1lb3V0ID0gbnVsbDtcblx0XHR0aGlzLmVyYXNlVGltZW91dCA9IG51bGw7XG5cdFx0c3VwZXIub25SZW1vdmUobGF5ZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBhbmQgcmV0dXJuIHRoZSBET00gRWxlbWVudCB3aGljaCBjb250YWlucyB0aGUgbGF5ZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtFbGVtZW50fSBUaGUgbGF5ZXIgY29udGFpbmVyIERPTSBlbGVtZW50LlxuXHQgKi9cblx0Y3JlYXRlQ29udGFpbmVyKCkge1xuXHRcdHRocm93ICdgY3JlYXRlQ29udGFpbmVyYCBub3QgaW1wbGVtZW50ZWQnO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBhbmQgcmV0dXJuIHRoZSBET00gRWxlbWVudCB3aGljaCByZXByZXNlbnRzIGFuIGluZGl2aWR1YWxcblx0ICogdGlsZS5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgLSB0aGUgc2l6ZSBvZiB0aGUgdGlsZSwgaW4gcGl4ZWxzLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7RWxlbWVudH0gVGhlIHRpbGUgRE9NIGVsZW1lbnQuXG5cdCAqL1xuXHRjcmVhdGVUaWxlKCkge1xuXHRcdHRocm93ICdgY3JlYXRlVGlsZWAgbm90IGltcGxlbWVudGVkJztcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBET00gRWxlbWVudCB3aGljaCByZXByZXNlbnRzIGFuIGluZGl2aWR1YWxcblx0ICogdGlsZS5cblx0ICpcblx0ICogQHBhcmFtIHtFbGVtZW50fSB0aWxlIC0gVGhlIHRpbGUgRE9NIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB4IC0gVGhlIHggcG9zaXRpb24gb2YgdGhlIHRpbGUsIGluIHBpeGVscy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHkgLSBUaGUgeSBwb3NpdGlvbiBvZiB0aGUgdGlsZSwgaW4gcGl4ZWxzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gc2l6ZSAtIHRoZSBzaXplIG9mIHRoZSB0aWxlLCBpbiBwaXhlbHMuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtFbGVtZW50fSBUaGUgdGlsZSBET00gZWxlbWVudC5cblx0ICovXG5cdHBvc2l0aW9uVGlsZSgpIHtcblx0XHR0aHJvdyAnYHBvc2l0aW9uVGlsZWAgbm90IGltcGxlbWVudGVkJztcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgZHJhdyBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIHBlciBmcmFtZS5cblx0ICpcblx0ICogQHJldHVybnMge0RPTVJlbmRlcmVyfSBUaGUgcmVuZGVyZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRkcmF3KCkge1xuXHRcdGNvbnN0IGxheWVyID0gdGhpcy5sYXllcjtcblx0XHRjb25zdCBwbG90ID0gbGF5ZXIucGxvdDtcblx0XHRjb25zdCB0aWxlcyA9IHRoaXMudGlsZXM7XG5cdFx0Y29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG5cblx0XHQvLyBnZXQgYWxsIHN0YWxlIGNvb3Jkc1xuXHRcdGNvbnN0IHN0YWxlID0gZ2V0U3RhbGVDb29yZHMocGxvdCwgdGlsZXMpO1xuXG5cdFx0aWYgKHRpbGVzLnNpemUgPiAwICYmIHN0YWxlLnNpemUgPT09IHRpbGVzLnNpemUpIHtcblx0XHRcdC8vIGFsbCB0aWxlcyBhcmUgc3RhbGUsIHJlbW92ZSB0aGVtIGFsbFxuXHRcdFx0aWYgKHRoaXMuZXJhc2VUaW1lb3V0KSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dCh0aGlzLmVyYXNlVGltZW91dCk7XG5cdFx0XHRcdHRoaXMuZXJhc2VUaW1lb3V0ID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdHRpbGVzLmNsZWFyKCk7XG5cdFx0XHRjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIG5vdCBhbGwgdGlsZXMgYXJlIHN0YWxlLCByZW1vdmUgdGhlbSBpbmRpdmlkdWFsbHlcblx0XHRcdGlmICghdGhpcy5lcmFzZVRpbWVvdXQpIHtcblx0XHRcdFx0dGhpcy5lcmFzZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpPT4ge1xuXHRcdFx0XHRcdC8vIGNsZWFyIHRpbWVvdXRcblx0XHRcdFx0XHR0aGlzLmVyYXNlVGltZW91dCA9IG51bGw7XG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIGFueSBzdGFsZSB0aWxlcyBmcm9tIERPTVxuXHRcdFx0XHRcdGVyYXNlVGlsZXMoXG5cdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0dGhpcy5jb250YWluZXIsXG5cdFx0XHRcdFx0XHR0aGlzLnRpbGVzLFxuXHRcdFx0XHRcdFx0dGhpcy5sYXllci5wbG90KTtcblx0XHRcdFx0fSwgRVJBU0VfREVCT1VOQ0VfTVMpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghdGhpcy5kcmF3VGltZW91dCkge1xuXHRcdFx0dGhpcy5kcmF3VGltZW91dCA9IHNldFRpbWVvdXQoKCk9PiB7XG5cdFx0XHRcdC8vIGNsZWFyIHRoZSB0aW1lb3V0XG5cdFx0XHRcdHRoaXMuZHJhd1RpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHQvLyBkcmF3IHRoZSByZW5kZXJhYmxlc1xuXHRcdFx0XHRkcmF3VGlsZXMoXG5cdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lcixcblx0XHRcdFx0XHR0aGlzLnRpbGVzLFxuXHRcdFx0XHRcdHRoaXMubGF5ZXIucGxvdCxcblx0XHRcdFx0XHR0aGlzLmxheWVyLnB5cmFtaWQsXG5cdFx0XHRcdFx0ZmFsc2UpO1xuXHRcdFx0fSwgRFJBV19ERUJPVU5DRV9NUyk7XG5cdFx0fVxuXG5cdFx0Ly8gZ2V0IHZpZXdwb3J0IHBvc2l0aW9uXG5cdFx0Y29uc3QgcHggPSBwbG90LnBsb3RQeFRvVmlld1B4KHsgeDogMCwgeTogMCB9KTtcblxuXHRcdC8vIGRldGVybWluZSBjb250YWluZXIgb2Zmc2V0XG5cdFx0Y29uc3QgZGVsdGEgPSB7XG5cdFx0XHR4OiBweC54IC0gdGhpcy5vZmZzZXQueCxcblx0XHRcdHk6IHB4LnkgLSB0aGlzLm9mZnNldC55XG5cdFx0fTtcblxuXHRcdGlmIChNYXRoLmFicyhkZWx0YS54KSA+IE1BWF9DT05UQUlORVJfT0ZGU0VUIHx8XG5cdFx0XHRNYXRoLmFicyhkZWx0YS55KSA+IE1BWF9DT05UQUlORVJfT0ZGU0VUKSB7XG5cdFx0XHQvLyB0aWxlIHRvIGNvbnRhaW5lciBvZmZzZXQgaXMgdG9vIGxhcmdlLCByZXNldCBpdCB0byBjdXJyZW50XG5cdFx0XHQvLyB2aWV3cG9ydCwgcmUtcG9zaXRpb24gYWxsIGN1cnJlbnQgdGlsZXMuXG5cdFx0XHR0aGlzLm9mZnNldC54ID0gcHgueDtcblx0XHRcdHRoaXMub2Zmc2V0LnkgPSBweC55O1xuXHRcdFx0ZGVsdGEueCA9IDA7XG5cdFx0XHRkZWx0YS55ID0gMDtcblx0XHRcdGNvbnN0IHRpbGVTaXplID0gcGxvdC50aWxlU2l6ZTtcblx0XHRcdHRoaXMudGlsZXMuZm9yRWFjaCh0aWxlID0+IHtcblx0XHRcdFx0Ly8gcmUtcG9zaXRpb24gdGlsZVxuXHRcdFx0XHR0aGlzLnBvc2l0aW9uVGlsZShcblx0XHRcdFx0XHR0aWxlLmVsZW0sXG5cdFx0XHRcdFx0dGlsZS5jb29yZC54ICogdGlsZVNpemUgKyB0aGlzLm9mZnNldC54LFxuXHRcdFx0XHRcdHRpbGUuY29vcmQueSAqIHRpbGVTaXplICsgdGhpcy5vZmZzZXQueSxcblx0XHRcdFx0XHR0aWxlU2l6ZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBzY2FsZSBvbiBkaWZmZXJlbmNlIGJldHdlZW4gY3VycmVudCB6b29tIGFuZCByb3VuZGVkIHRhcmdldCB6b29tXG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCBwbG90Lnpvb20gLSBNYXRoLnJvdW5kKHBsb3QuZ2V0VGFyZ2V0Wm9vbSgpKSk7XG5cblx0XHQvLyB1cGRhdGUgY29udGFpbmVyXG5cdFx0Y29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke2RlbHRhLnh9cHgsJHstZGVsdGEueX1weCwwKSBzY2FsZSgke3NjYWxlfSlgO1xuXHRcdGNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgJHt0aGlzLm9mZnNldC54fXB4ICR7LXRoaXMub2Zmc2V0Lnl9cHhgO1xuXHRcdGNvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gbGF5ZXIub3BhY2l0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZSBhbGwgcmVuZGVyZWQgdGlsZXMgZnJvbSB0aGUgRE9NLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7RE9NUmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGNsZWFyKCkge1xuXHRcdHN1cGVyLmNsZWFyKCk7XG5cdFx0Ly8gcmVtb3ZlIGFsbCB0aWxlcyBhbmQgY2xlYXIgdGhlIGNvbnRhaW5lclxuXHRcdHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuXHRcdHRoaXMudGlsZXMuY2xlYXIoKTtcblx0XHQvLyBjbGVhciB0aW1lb3V0c1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLmRyYXdUaW1lb3V0KTtcblx0XHRjbGVhclRpbWVvdXQodGhpcy5lcmFzZVRpbWVvdXQpO1xuXHRcdHRoaXMuZHJhd1RpbWVvdXQgPSBudWxsO1xuXHRcdHRoaXMuZXJhc2VUaW1lb3V0ID0gbnVsbDtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBGb3JjZXMgdGhlIHJlbmRlcmVyIHRvIGRpc2NhcmQgYWxsIGN1cnJlbnQgRE9NIHJlbmRlcmVkIHRpbGVzIGFuZFxuXHQgKiByZWNyZWF0ZSB0aGVtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGlnbm9yZUZhZGUgLSBEbyBub3QgZmFkZS1pbiByZWRyYXduIGxheWVyLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7RE9NUmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHJlZHJhdyhpZ25vcmVGYWRlID0gZmFsc2UpIHtcblx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0Ly8gZm9yY2UgZHJhd1xuXHRcdGRyYXdUaWxlcyhcblx0XHRcdHRoaXMsXG5cdFx0XHR0aGlzLmNvbnRhaW5lcixcblx0XHRcdHRoaXMudGlsZXMsXG5cdFx0XHR0aGlzLmxheWVyLnBsb3QsXG5cdFx0XHR0aGlzLmxheWVyLnB5cmFtaWQsXG5cdFx0XHR0aGlzLmxheWVyLFxuXHRcdFx0aWdub3JlRmFkZSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGRyYXcgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBwZXIgdGlsZS5cblx0ICpcblx0ICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIERPTSBFbGVtZW50IG9iamVjdC5cblx0ICogQHBhcmFtIHtUaWxlfSB0aWxlIC0gVGhlIFRpbGUgb2JqZWN0LlxuXHQgKi9cblx0ZHJhd1RpbGUoKSB7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBET01SZW5kZXJlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRE9NUmVuZGVyZXIgPSByZXF1aXJlKCcuL0RPTVJlbmRlcmVyJyk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgSFRNTCByZW5kZXJlci5cbiAqL1xuY2xhc3MgSFRNTFJlbmRlcmVyIGV4dGVuZHMgRE9NUmVuZGVyZXIge1xuXG5cdC8qKlxuXHQgKiBJbnN0YW50aWF0ZXMgYSBuZXcgSFRNTFJlbmRlcmVyIG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlIGFuZCByZXR1cm4gdGhlIEhUTUwgRWxlbWVudCB3aGljaCBjb250YWlucyB0aGUgbGF5ZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtFbGVtZW50fSBUaGUgbGF5ZXIgY29udGFpbmVyIEhUTUwgZWxlbWVudC5cblx0ICovXG5cdGNyZWF0ZUNvbnRhaW5lcigpIHtcblx0XHRjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRjb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHRcdGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gMDtcblx0XHRjb250YWluZXIuc3R5bGUuYm90dG9tID0gMDtcblx0XHRyZXR1cm4gY29udGFpbmVyO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBhbmQgcmV0dXJuIHRoZSBIVE1MIEVsZW1lbnQgd2hpY2ggcmVwcmVzZW50cyBhbiBpbmRpdmlkdWFsXG5cdCAqIHRpbGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBzaXplIC0gdGhlIHNpemUgb2YgdGhlIHRpbGUsIGluIHBpeGVscy5cblx0ICpcblx0ICogQHJldHVybnMge0VsZW1lbnR9IFRoZSB0aWxlIEhUTUwgZWxlbWVudC5cblx0ICovXG5cdGNyZWF0ZVRpbGUoc2l6ZSkge1xuXHRcdGNvbnN0IHRpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHR0aWxlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHR0aWxlLnN0eWxlLndpZHRoID0gYCR7c2l6ZX1weGA7XG5cdFx0dGlsZS5zdHlsZS5oZWlnaHQgPSBgJHtzaXplfXB4YDtcblx0XHRyZXR1cm4gdGlsZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBET00gRWxlbWVudCB3aGljaCByZXByZXNlbnRzIGFuIGluZGl2aWR1YWxcblx0ICogdGlsZS5cblx0ICpcblx0ICogQHBhcmFtIHtFbGVtZW50fSB0aWxlIC0gVGhlIHRpbGUgSFRNTCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge051bWJlcn0geCAtIFRoZSB4IHBvc2l0aW9uIG9mIHRoZSB0aWxlLCBpbiBwaXhlbHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gVGhlIHkgcG9zaXRpb24gb2YgdGhlIHRpbGUsIGluIHBpeGVscy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgLSB0aGUgc2l6ZSBvZiB0aGUgdGlsZSwgaW4gcGl4ZWxzLlxuXHQgKi9cblx0cG9zaXRpb25UaWxlKHRpbGUsIHgsIHkpIHtcblx0XHR0aWxlLnN0eWxlLmxlZnQgPSBgJHt4fXB4YDtcblx0XHR0aWxlLnN0eWxlLmJvdHRvbSA9IGAke3l9cHhgO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSFRNTFJlbmRlcmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBET01SZW5kZXJlciA9IHJlcXVpcmUoJy4vRE9NUmVuZGVyZXInKTtcblxuLy8gQ29uc3RhbnRzXG5cbi8qKlxuICogU1ZHIE5hbWVzcGFjZSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtTdHJpbmd9XG4gKi9cbmNvbnN0IFNWR19OUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cbi8qKlxuICogQXJiaXRyYXJ5IHNpemUgb2YgdGhlIHJvb3Qgc3ZnIGVsZW1lbnQsIHNpbmNlIGl0IGNhbm5vdCBiZSAweDAuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtOdW1iZXJ9XG4gKi9cbmNvbnN0IFNWR19TSVpFID0gMjA7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgU1ZHIHJlbmRlcmVyLlxuICovXG5jbGFzcyBTVkdSZW5kZXJlciBleHRlbmRzIERPTVJlbmRlcmVyIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFNWR1JlbmRlcmVyIG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlIGFuZCByZXR1cm4gdGhlIFNWRyBFbGVtZW50IHdoaWNoIGNvbnRhaW5zIHRoZSBsYXllci5cblx0ICpcblx0ICogQHJldHVybnMge0VsZW1lbnR9IFRoZSBsYXllciBjb250YWluZXIgU1ZHIGVsZW1lbnQuXG5cdCAqL1xuXHRjcmVhdGVDb250YWluZXIoKSB7XG5cdFx0Y29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgJ3N2ZycpO1xuXHRcdGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0Y29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ3Zpc2libGUnO1xuXHRcdGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gMDtcblx0XHRjb250YWluZXIuc3R5bGUuYm90dG9tID0gLVNWR19TSVpFO1xuXHRcdGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgU1ZHX1NJWkUpO1xuXHRcdGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIFNWR19TSVpFKTtcblx0XHRyZXR1cm4gY29udGFpbmVyO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBhbmQgcmV0dXJuIHRoZSBTVkcgRWxlbWVudCB3aGljaCByZXByZXNlbnRzIGFuIGluZGl2aWR1YWxcblx0ICogdGlsZS5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgLSB0aGUgc2l6ZSBvZiB0aGUgdGlsZSwgaW4gcGl4ZWxzLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7RWxlbWVudH0gVGhlIHRpbGUgU1ZHIGVsZW1lbnQuXG5cdCAqL1xuXHRjcmVhdGVUaWxlKCkge1xuXHRcdHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05TLCAnZycpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldCB0aGUgbG9jYXRpb24gb2YgdGhlIFNWRyBFbGVtZW50IHdoaWNoIHJlcHJlc2VudHMgYW4gaW5kaXZpZHVhbFxuXHQgKiB0aWxlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IHRpbGUgLSBUaGUgdGlsZSBET00gZWxlbWVudC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHggLSBUaGUgeCBwb3NpdGlvbiBvZiB0aGUgdGlsZSwgaW4gcGl4ZWxzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0geSAtIFRoZSB5IHBvc2l0aW9uIG9mIHRoZSB0aWxlLCBpbiBwaXhlbHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBzaXplIC0gdGhlIHNpemUgb2YgdGhlIHRpbGUsIGluIHBpeGVscy5cblx0ICpcblx0ICogQHJldHVybnMge0VsZW1lbnR9IFRoZSB0aWxlIFNWRyBlbGVtZW50LlxuXHQgKi9cblx0cG9zaXRpb25UaWxlKHRpbGUsIHgsIHksIHNpemUpIHtcblx0XHR0aWxlLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3h9LCR7LXkgLSBzaXplfSlgKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNWR1JlbmRlcmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkZWZhdWx0VG8gPSByZXF1aXJlKCdsb2Rhc2gvZGVmYXVsdFRvJyk7XG5jb25zdCBWZXJ0ZXhCdWZmZXIgPSByZXF1aXJlKCcuL3ZlcnRleC9WZXJ0ZXhCdWZmZXInKTtcbmNvbnN0IFdlYkdMSW50ZXJhY3RpdmVSZW5kZXJlciA9IHJlcXVpcmUoJy4vV2ViR0xJbnRlcmFjdGl2ZVJlbmRlcmVyJyk7XG5cbi8vIENvbnN0YW50c1xuXG4vKipcbiAqIEhpZ2hsaWdodGVkIHBvaW50IHJhZGl1cyBpbmNyZWFzZS5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge051bWJlcn1cbiAqL1xuY29uc3QgSElHSExJR0hURURfUkFESVVTX09GRlNFVCA9IDI7XG5cbi8qKlxuICogU2VsZWN0ZWQgcG9pbnQgcmFkaXVzIGluY3JlYXNlLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBTRUxFQ1RFRF9SQURJVVNfT0ZGU0VUID0gNDtcblxuLyoqXG4gKiBTaGFkZXIgR0xTTCBzb3VyY2UuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtPYmplY3R9XG4gKi9cbmNvbnN0IFNIQURFUl9HTFNMID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xuXHRcdGF0dHJpYnV0ZSBmbG9hdCBhUmFkaXVzO1xuXHRcdHVuaWZvcm0gZmxvYXQgdVJhZGl1c09mZnNldDtcblx0XHR1bmlmb3JtIHZlYzIgdVRpbGVPZmZzZXQ7XG5cdFx0dW5pZm9ybSBmbG9hdCB1U2NhbGU7XG5cdFx0dW5pZm9ybSBmbG9hdCB1UGl4ZWxSYXRpbztcblx0XHR1bmlmb3JtIG1hdDQgdVByb2plY3Rpb25NYXRyaXg7XG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0dmVjMiB3UG9zaXRpb24gPSAoYVBvc2l0aW9uICogdVNjYWxlKSArIHVUaWxlT2Zmc2V0O1xuXHRcdFx0Z2xfUG9pbnRTaXplID0gKGFSYWRpdXMgKyB1UmFkaXVzT2Zmc2V0KSAqIHVTY2FsZSAqIDIuMCAqIHVQaXhlbFJhdGlvO1xuXHRcdFx0Z2xfUG9zaXRpb24gPSB1UHJvamVjdGlvbk1hdHJpeCAqIHZlYzQod1Bvc2l0aW9uLCAwLjAsIDEuMCk7XG5cdFx0fVxuXHRcdGAsXG5cdGZyYWc6XG5cdFx0YFxuXHRcdCNpZmRlZiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcblx0XHRcdCNleHRlbnNpb24gR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzIDogZW5hYmxlXG5cdFx0I2VuZGlmXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdHVuaWZvcm0gdmVjNCB1Q29sb3I7XG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0dmVjMiBjeHkgPSAyLjAgKiBnbF9Qb2ludENvb3JkIC0gMS4wO1xuXHRcdFx0ZmxvYXQgcmFkaXVzID0gZG90KGN4eSwgY3h5KTtcblx0XHRcdGZsb2F0IGFscGhhID0gMS4wO1xuXHRcdFx0I2lmZGVmIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlc1xuXHRcdFx0XHRmbG9hdCBkZWx0YSA9IGZ3aWR0aChyYWRpdXMpO1xuXHRcdFx0XHRhbHBoYSA9IDEuMCAtIHNtb290aHN0ZXAoMS4wIC0gZGVsdGEsIDEuMCArIGRlbHRhLCByYWRpdXMpO1xuXHRcdFx0I2Vsc2Vcblx0XHRcdFx0aWYgKHJhZGl1cyA+IDEuMCkge1xuXHRcdFx0XHRcdGRpc2NhcmQ7XG5cdFx0XHRcdH1cblx0XHRcdCNlbmRpZlxuXHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCh1Q29sb3IucmdiLCB1Q29sb3IuYSAqIGFscGhhKTtcblx0XHR9XG5cdFx0YFxufTtcblxuLy8gUHJpdmF0ZSBNZXRob2RzXG5cbmNvbnN0IGNyZWF0ZVBvaW50ID0gZnVuY3Rpb24oZ2wpIHtcblx0Y29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KDIpO1xuXHR2ZXJ0aWNlc1swXSA9IDAuMDtcblx0dmVydGljZXNbMV0gPSAwLjA7XG5cdC8vIGNyZWF0ZSBxdWFkIGJ1ZmZlclxuXHRyZXR1cm4gbmV3IFZlcnRleEJ1ZmZlcihcblx0XHRnbCxcblx0XHR2ZXJ0aWNlcyxcblx0XHR7XG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdGJ5dGVPZmZzZXQ6IDBcblx0XHRcdH1cblx0XHR9LFxuXHRcdHtcblx0XHRcdG1vZGU6ICdQT0lOVFMnLFxuXHRcdFx0Y291bnQ6IDFcblx0XHR9KTtcbn07XG5cbmNvbnN0IHJlbmRlclRpbGVzID0gZnVuY3Rpb24oYXRsYXMsIHNoYWRlciwgcmVuZGVyYWJsZXMsIGNvbG9yKSB7XG5cdC8vIHNldCBnbG9iYWwgdW5pZm9ybXNcblx0c2hhZGVyLnNldFVuaWZvcm0oJ3VDb2xvcicsIGNvbG9yKTtcblx0c2hhZGVyLnNldFVuaWZvcm0oJ3VSYWRpdXNPZmZzZXQnLCAwKTtcblxuXHQvLyBiaW5kcyB0aGUgYnVmZmVyIHRvIGluc3RhbmNlXG5cdGF0bGFzLmJpbmQoKTtcblxuXHQvLyBmb3IgZWFjaCByZW5kZXJhYmxlXG5cdHJlbmRlcmFibGVzLmZvckVhY2gocmVuZGVyYWJsZSA9PiB7XG5cdFx0Ly8gc2V0IHRpbGUgdW5pZm9ybXNcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVNjYWxlJywgcmVuZGVyYWJsZS5zY2FsZSk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VUaWxlT2Zmc2V0JywgcmVuZGVyYWJsZS50aWxlT2Zmc2V0KTtcblx0XHQvLyBkcmF3IHBvaW50c1xuXHRcdGF0bGFzLmRyYXcocmVuZGVyYWJsZS5oYXNoLCAnUE9JTlRTJyk7XG5cdH0pO1xuXG5cdC8vIHVuYmluZFxuXHRhdGxhcy51bmJpbmQoKTtcbn07XG5cbmNvbnN0IHJlbmRlclBvaW50ID0gZnVuY3Rpb24ocG9pbnQsIHNoYWRlciwgcGxvdCwgdGFyZ2V0LCBjb2xvciwgcmFkaXVzKSB7XG5cdC8vIGdldCB0aWxlIG9mZnNldFxuXHRjb25zdCBjb29yZCA9IHRhcmdldC50aWxlLmNvb3JkO1xuXHRjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIHBsb3Quem9vbSAtIGNvb3JkLnopO1xuXHRjb25zdCB0aWxlT2Zmc2V0ID0gW1xuXHRcdChjb29yZC54ICogc2NhbGUgKiBwbG90LnRpbGVTaXplKSArIChzY2FsZSAqIHRhcmdldC54KSAtIHBsb3Qudmlld3BvcnQueCxcblx0XHQoY29vcmQueSAqIHNjYWxlICogcGxvdC50aWxlU2l6ZSkgKyAoc2NhbGUgKiB0YXJnZXQueSkgLSBwbG90LnZpZXdwb3J0Lnlcblx0XTtcblx0Ly8gc2V0IHVuaWZvcm1zXG5cdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHRpbGVPZmZzZXQpO1xuXHRzaGFkZXIuc2V0VW5pZm9ybSgndVNjYWxlJywgc2NhbGUpO1xuXHRzaGFkZXIuc2V0VW5pZm9ybSgndUNvbG9yJywgY29sb3IpO1xuXHRzaGFkZXIuc2V0VW5pZm9ybSgndVJhZGl1c09mZnNldCcsIHJhZGl1cyArIHRhcmdldC5yYWRpdXMpO1xuXG5cdC8vIGJpbmRzIHRoZSBidWZmZXIgdG8gaW5zdGFuY2Vcblx0cG9pbnQuYmluZCgpO1xuXG5cdC8vIGRyYXcgdGhlIHBvaW50c1xuXHRwb2ludC5kcmF3KCk7XG5cblx0Ly8gdW5iaW5kXG5cdHBvaW50LnVuYmluZCgpO1xufTtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gaW50ZXJhY3RpdmUgcG9pbnQgcmVuZGVyZXIuXG4gKi9cbmNsYXNzIEludGVyYWN0aXZlUmVuZGVyZXIgZXh0ZW5kcyBXZWJHTEludGVyYWN0aXZlUmVuZGVyZXIge1xuXG5cdC8qKlxuXHQgKiBJbnN0YW50aWF0ZXMgYSBuZXcgSW50ZXJhY3RpdmVSZW5kZXJlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zLnhGaWVsZCAtIFRoZSBYIGZpZWxkIG9mIHRoZSBkYXRhLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zLnlGaWVsZCAtIFRoZSBZIGZpZWxkIG9mIHRoZSBkYXRhLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zLnJhZGl1c0ZpZWxkIC0gVGhlIHJhZGl1cyBmaWVsZCBvZiB0aGUgZGF0YS5cblx0ICogQHBhcmFtIHtBcnJheX0gb3B0aW9ucy5jb2xvciAtIFRoZSBjb2xvciBvZiB0aGUgcG9pbnRzLlxuXHQgKi9cblx0Y29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG5cdFx0c3VwZXIob3B0aW9ucyk7XG5cdFx0dGhpcy5zaGFkZXIgPSBudWxsO1xuXHRcdHRoaXMucG9pbnQgPSBudWxsO1xuXHRcdHRoaXMuYXRsYXMgPSBudWxsO1xuXHRcdHRoaXMueEZpZWxkID0gZGVmYXVsdFRvKG9wdGlvbnMueEZpZWxkLCAneCcpO1xuXHRcdHRoaXMueUZpZWxkID0gZGVmYXVsdFRvKG9wdGlvbnMueUZpZWxkLCAneScpO1xuXHRcdHRoaXMucmFkaXVzRmllbGQgPSBkZWZhdWx0VG8ob3B0aW9ucy5yYWRpdXNGaWVsZCwgJ3JhZGl1cycpO1xuXHRcdHRoaXMuY29sb3IgPSBkZWZhdWx0VG8ob3B0aW9ucy5jb2xvciwgWyAxLjAsIDAuNCwgMC4xLCAwLjggXSk7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgYXR0YWNoZWQgdG8gYSBsYXllci5cblx0ICpcblx0ICogQHBhcmFtIHtMYXllcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gYXR0YWNoIHRoZSByZW5kZXJlciB0by5cblx0ICpcblx0ICogQHJldHVybnMge1JlbmRlcmVyfSBUaGUgcmVuZGVyZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRvbkFkZChsYXllcikge1xuXHRcdHN1cGVyLm9uQWRkKGxheWVyKTtcblx0XHQvLyBnZXQgdGhlIGV4dGVuc2lvbiBmb3Igc3RhbmRhcmQgZGVyaXZhdGl2ZXNcblx0XHR0aGlzLmV4dCA9IHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnKTtcblx0XHR0aGlzLnBvaW50ID0gY3JlYXRlUG9pbnQodGhpcy5nbCk7XG5cdFx0dGhpcy5zaGFkZXIgPSB0aGlzLmNyZWF0ZVNoYWRlcihTSEFERVJfR0xTTCk7XG5cdFx0dGhpcy5hdGxhcyA9IHRoaXMuY3JlYXRlVmVydGV4QXRsYXMoe1xuXHRcdFx0Ly8gcG9zaXRpb25cblx0XHRcdDA6IHtcblx0XHRcdFx0c2l6ZTogMixcblx0XHRcdFx0dHlwZTogJ0ZMT0FUJ1xuXHRcdFx0fSxcblx0XHRcdC8vIHJhZGl1c1xuXHRcdFx0MToge1xuXHRcdFx0XHRzaXplOiAxLFxuXHRcdFx0XHR0eXBlOiAnRkxPQVQnXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgcmVtb3ZlZCBmcm9tIGEgbGF5ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGF5ZXJ9IGxheWVyIC0gVGhlIGxheWVyIHRvIHJlbW92ZSB0aGUgcmVuZGVyZXIgZnJvbS5cblx0ICpcblx0ICogQHJldHVybnMge1JlbmRlcmVyfSBUaGUgcmVuZGVyZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRvblJlbW92ZShsYXllcikge1xuXHRcdHRoaXMuZGVzdHJveVZlcnRleEF0bGFzKHRoaXMuYXRsYXMpO1xuXHRcdHRoaXMuYXRsYXMgPSBudWxsO1xuXHRcdHRoaXMuc2hhZGVyID0gbnVsbDtcblx0XHR0aGlzLnBvaW50ID0gbnVsbDtcblx0XHRzdXBlci5vblJlbW92ZShsYXllcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiBhIHRpbGUgaXMgYWRkZWQgdG8gdGhlIGxheWVyIHB5cmFtaWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVydGV4QXRsYXN9IGF0bGFzIC0gVGhlIHZlcnRleCBhdGxhcyBvYmplY3QuXG5cdCAqIEBwYXJhbSB7VGlsZX0gdGlsZSAtIFRoZSBuZXcgdGlsZSBvYmplY3QgY29udGFpbmluZyBkYXRhLlxuXHQgKi9cblx0YWRkVGlsZShhdGxhcywgdGlsZSkge1xuXHRcdGNvbnN0IGNvb3JkID0gdGlsZS5jb29yZDtcblx0XHRjb25zdCBkYXRhID0gdGlsZS5kYXRhO1xuXHRcdGNvbnN0IHRpbGVTaXplID0gdGhpcy5sYXllci5wbG90LnRpbGVTaXplO1xuXHRcdGNvbnN0IHhPZmZzZXQgPSBjb29yZC54ICogdGlsZVNpemU7XG5cdFx0Y29uc3QgeU9mZnNldCA9IGNvb3JkLnkgKiB0aWxlU2l6ZTtcblx0XHRjb25zdCB4RmllbGQgPSB0aGlzLnhGaWVsZDtcblx0XHRjb25zdCB5RmllbGQgPSB0aGlzLnlGaWVsZDtcblx0XHRjb25zdCByYWRpdXNGaWVsZCA9IHRoaXMucmFkaXVzRmllbGQ7XG5cdFx0Y29uc3QgcG9pbnRzID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YS5sZW5ndGggKiAzKTtcblx0XHRmb3IgKGxldCBpPTA7IGk8ZGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgZGF0dW0gPSBkYXRhW2ldO1xuXHRcdFx0Ly8gZ2V0IHBvaW50IGF0dHJpYnV0ZXNcblx0XHRcdGNvbnN0IHggPSBkYXR1bVt4RmllbGRdO1xuXHRcdFx0Y29uc3QgeSA9IGRhdHVtW3lGaWVsZF07XG5cdFx0XHRjb25zdCByYWRpdXMgPSBkYXR1bVtyYWRpdXNGaWVsZF07XG5cdFx0XHQvLyBjb252ZXJ0IHRvIHBsb3QgcGl4ZWxzXG5cdFx0XHRjb25zdCBwbG90WCA9IHggKyB4T2Zmc2V0O1xuXHRcdFx0Y29uc3QgcGxvdFkgPSB5ICsgeU9mZnNldDtcblx0XHRcdC8vIGFkZCB0byBidWZmZXJcblx0XHRcdHZlcnRpY2VzW2kqM10gPSB4O1xuXHRcdFx0dmVydGljZXNbaSozKzFdID0geTtcblx0XHRcdHZlcnRpY2VzW2kqMysyXSA9IHJhZGl1cztcblx0XHRcdC8vIGFkZCB0byBwb2ludHNcblx0XHRcdHBvaW50c1tpXSA9IHtcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeSxcblx0XHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRcdG1pblg6IHBsb3RYIC0gcmFkaXVzLFxuXHRcdFx0XHRtYXhYOiBwbG90WCArIHJhZGl1cyxcblx0XHRcdFx0bWluWTogcGxvdFkgLSByYWRpdXMsXG5cdFx0XHRcdG1heFk6IHBsb3RZICsgcmFkaXVzLFxuXHRcdFx0XHR0aWxlOiB0aWxlLFxuXHRcdFx0XHRkYXRhOiBkYXR1bVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0Ly8gaW5kZXggcG9pbnRzXG5cdFx0dGhpcy5hZGRQb2ludHMoY29vcmQsIHBvaW50cyk7XG5cdFx0Ly8gYWRkIHRvIGF0bGFzXG5cdFx0YXRsYXMuc2V0KGNvb3JkLmhhc2gsIHZlcnRpY2VzLCBwb2ludHMubGVuZ3RoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlZCB3aGVuIGEgdGlsZSBpcyByZW1vdmVkIGZyb20gdGhlIGxheWVyIHB5cmFtaWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVydGV4QXRsYXN9IGF0bGFzIC0gVGhlIHZlcnRleCBhdGxhcyBvYmplY3QuXG5cdCAqIEBwYXJhbSB7VGlsZX0gdGlsZSAtIFRoZSBuZXcgdGlsZSBvYmplY3QgY29udGFpbmluZyBkYXRhLlxuXHQgKi9cblx0cmVtb3ZlVGlsZShhdGxhcywgdGlsZSkge1xuXHRcdGNvbnN0IGNvb3JkID0gdGlsZS5jb29yZDtcblx0XHQvLyByZW1vdmUgZnJvbSBhdGxhc1xuXHRcdGF0bGFzLmRlbGV0ZShjb29yZC5oYXNoKTtcblx0XHQvLyB1bmluZGV4IHBvaW50c1xuXHRcdHRoaXMucmVtb3ZlUG9pbnRzKGNvb3JkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgZHJhdyBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIHBlciBmcmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVzdGFtcCAtIFRoZSBmcmFtZSB0aW1lc3RhbXAuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtSZW5kZXJlcn0gVGhlIHJlbmRlcmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZHJhdygpIHtcblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cdFx0Y29uc3QgcGxvdCA9IHRoaXMubGF5ZXIucGxvdDtcblx0XHRjb25zdCBwcm9qZWN0aW9uID0gdGhpcy5nZXRPcnRob01hdHJpeCgpO1xuXHRcdGNvbnN0IHNoYWRlciA9IHRoaXMuc2hhZGVyO1xuXG5cdFx0Ly8gYmluZCByZW5kZXIgdGFyZ2V0XG5cdFx0cGxvdC5yZW5kZXJCdWZmZXIuYmluZCgpO1xuXHRcdC8vIGNsZWFyIHJlbmRlciB0YXJnZXRcblx0XHRwbG90LnJlbmRlckJ1ZmZlci5jbGVhcigpO1xuXG5cdFx0Ly8gc2V0IGJsZW5kaW5nIGZ1bmNcblx0XHRnbC5lbmFibGUoZ2wuQkxFTkQpO1xuXHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORSk7XG5cblx0XHQvLyB1c2Ugc2hhZGVyXG5cdFx0c2hhZGVyLnVzZSgpO1xuXG5cdFx0Ly8gc2V0IHVuaWZvcm1zXG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VQcm9qZWN0aW9uTWF0cml4JywgcHJvamVjdGlvbik7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VQaXhlbFJhdGlvJywgcGxvdC5waXhlbFJhdGlvKTtcblxuXHRcdC8vIHJlbmRlciB0aGUgdGlsZXNcblx0XHRyZW5kZXJUaWxlcyhcblx0XHRcdHRoaXMuYXRsYXMsXG5cdFx0XHRzaGFkZXIsXG5cdFx0XHR0aGlzLmdldFJlbmRlcmFibGVzKCksXG5cdFx0XHR0aGlzLmNvbG9yKTtcblxuXHRcdC8vIHJlbmRlciBzZWxlY3RlZFxuXHRcdHRoaXMuc2VsZWN0ZWQuZm9yRWFjaChzZWxlY3RlZCA9PiB7XG5cdFx0XHRyZW5kZXJQb2ludChcblx0XHRcdFx0dGhpcy5wb2ludCxcblx0XHRcdFx0c2hhZGVyLFxuXHRcdFx0XHRwbG90LFxuXHRcdFx0XHRzZWxlY3RlZCxcblx0XHRcdFx0dGhpcy5jb2xvcixcblx0XHRcdFx0U0VMRUNURURfUkFESVVTX09GRlNFVCk7XG5cdFx0fSk7XG5cblx0XHQvLyByZW5kZXIgaGlnaGxpZ2h0ZWRcblx0XHRpZiAodGhpcy5oaWdobGlnaHRlZCAmJlxuXHRcdFx0dGhpcy5zZWxlY3RlZC5pbmRleE9mKHRoaXMuaGlnaGxpZ2h0ZWQpID09PSAtMSkge1xuXHRcdFx0cmVuZGVyUG9pbnQoXG5cdFx0XHRcdHRoaXMucG9pbnQsXG5cdFx0XHRcdHNoYWRlcixcblx0XHRcdFx0cGxvdCxcblx0XHRcdFx0dGhpcy5oaWdobGlnaHRlZCxcblx0XHRcdFx0dGhpcy5jb2xvcixcblx0XHRcdFx0SElHSExJR0hURURfUkFESVVTX09GRlNFVCk7XG5cdFx0fVxuXG5cdFx0Ly8gdW5iaW5kIHJlbmRlciB0YXJnZXRcblx0XHRwbG90LnJlbmRlckJ1ZmZlci51bmJpbmQoKTtcblxuXHRcdC8vIHJlbmRlciBmcmFtZWJ1ZmZlciB0byB0aGUgYmFja2J1ZmZlclxuXHRcdHBsb3QucmVuZGVyQnVmZmVyLmJsaXRUb1NjcmVlbih0aGlzLmxheWVyLm9wYWNpdHkpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJhY3RpdmVSZW5kZXJlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgV2ViR0xWZXJ0ZXhSZW5kZXJlciA9IHJlcXVpcmUoJy4vV2ViR0xWZXJ0ZXhSZW5kZXJlcicpO1xuXG4vLyBDb25zdGFudHNcblxuLyoqXG4gKiBTaGFkZXIgR0xTTCBzb3VyY2UuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtPYmplY3R9XG4gKi9cbmNvbnN0IFNIQURFUl9HTFNMID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xuXHRcdGF0dHJpYnV0ZSBmbG9hdCBhUmFkaXVzO1xuXHRcdHVuaWZvcm0gdmVjMiB1VGlsZU9mZnNldDtcblx0XHR1bmlmb3JtIGZsb2F0IHVTY2FsZTtcblx0XHR1bmlmb3JtIGZsb2F0IHVQaXhlbFJhdGlvO1xuXHRcdHVuaWZvcm0gbWF0NCB1UHJvamVjdGlvbk1hdHJpeDtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWMyIHdQb3NpdGlvbiA9IChhUG9zaXRpb24gKiB1U2NhbGUpICsgdVRpbGVPZmZzZXQ7XG5cdFx0XHRnbF9Qb2ludFNpemUgPSBhUmFkaXVzICogMi4wICogdVBpeGVsUmF0aW87XG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdmVjNCh3UG9zaXRpb24sIDAuMCwgMS4wKTtcblx0XHR9XG5cdFx0YCxcblx0ZnJhZzpcblx0XHRgXG5cdFx0I2lmZGVmIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlc1xuXHRcdFx0I2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGVcblx0XHQjZW5kaWZcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0dW5pZm9ybSB2ZWM0IHVDb2xvcjtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWMyIGN4eSA9IDIuMCAqIGdsX1BvaW50Q29vcmQgLSAxLjA7XG5cdFx0XHRmbG9hdCByYWRpdXMgPSBkb3QoY3h5LCBjeHkpO1xuXHRcdFx0ZmxvYXQgYWxwaGEgPSAxLjA7XG5cdFx0XHQjaWZkZWYgR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzXG5cdFx0XHRcdGZsb2F0IGRlbHRhID0gZndpZHRoKHJhZGl1cyk7XG5cdFx0XHRcdGFscGhhID0gMS4wIC0gc21vb3Roc3RlcCgxLjAgLSBkZWx0YSwgMS4wICsgZGVsdGEsIHJhZGl1cyk7XG5cdFx0XHQjZWxzZVxuXHRcdFx0XHRpZiAocmFkaXVzID4gMS4wKSB7XG5cdFx0XHRcdFx0ZGlzY2FyZDtcblx0XHRcdFx0fVxuXHRcdFx0I2VuZGlmXG5cdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHVDb2xvci5yZ2IsIHVDb2xvci5hICogYWxwaGEpO1xuXHRcdH1cblx0XHRgXG59O1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHBvaW50IHJlbmRlcmVyLlxuICovXG5jbGFzcyBQb2ludFJlbmRlcmVyIGV4dGVuZHMgV2ViR0xWZXJ0ZXhSZW5kZXJlciB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlcyBhIG5ldyBQb2ludFJlbmRlcmVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IG9wdGlvbnMuY29sb3IgLSBUaGUgY29sb3Igb2YgdGhlIHBvaW50cy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHRcdHRoaXMuc2hhZGVyID0gbnVsbDtcblx0XHR0aGlzLmF0bGFzID0gbnVsbDtcblx0XHR0aGlzLmNvbG9yID0gZGVmYXVsdFRvKG9wdGlvbnMuY29sb3IsIFsgMS4wLCAwLjQsIDAuMSwgMC44IF0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVkIHdoZW4gdGhlIHJlbmRlcmVyIGlzIGF0dGFjaGVkIHRvIGEgbGF5ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGF5ZXJ9IGxheWVyIC0gVGhlIGxheWVyIHRvIGF0dGFjaCB0aGUgcmVuZGVyZXIgdG8uXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtSZW5kZXJlcn0gVGhlIHJlbmRlcmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0b25BZGQobGF5ZXIpIHtcblx0XHRzdXBlci5vbkFkZChsYXllcik7XG5cdFx0Ly8gZ2V0IHRoZSBleHRlbnNpb24gZm9yIHN0YW5kYXJkIGRlcml2YXRpdmVzXG5cdFx0dGhpcy5leHQgPSB0aGlzLmdsLmdldEV4dGVuc2lvbignT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJyk7XG5cdFx0dGhpcy5zaGFkZXIgPSB0aGlzLmNyZWF0ZVNoYWRlcihTSEFERVJfR0xTTCk7XG5cdFx0dGhpcy5hdGxhcyA9IHRoaXMuY3JlYXRlVmVydGV4QXRsYXMoe1xuXHRcdFx0Ly8gcG9zaXRpb25cblx0XHRcdDA6IHtcblx0XHRcdFx0c2l6ZTogMixcblx0XHRcdFx0dHlwZTogJ0ZMT0FUJ1xuXHRcdFx0fSxcblx0XHRcdC8vIHJhZGl1c1xuXHRcdFx0MToge1xuXHRcdFx0XHRzaXplOiAxLFxuXHRcdFx0XHR0eXBlOiAnRkxPQVQnXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgcmVtb3ZlZCBmcm9tIGEgbGF5ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGF5ZXJ9IGxheWVyIC0gVGhlIGxheWVyIHRvIHJlbW92ZSB0aGUgcmVuZGVyZXIgZnJvbS5cblx0ICpcblx0ICogQHJldHVybnMge1JlbmRlcmVyfSBUaGUgcmVuZGVyZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRvblJlbW92ZShsYXllcikge1xuXHRcdHRoaXMuZGVzdHJveVZlcnRleEF0bGFzKHRoaXMuYXRsYXMpO1xuXHRcdHRoaXMuYXRsYXMgPSBudWxsO1xuXHRcdHRoaXMuc2hhZGVyID0gbnVsbDtcblx0XHRzdXBlci5vblJlbW92ZShsYXllcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGRyYXcgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBwZXIgZnJhbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lc3RhbXAgLSBUaGUgZnJhbWUgdGltZXN0YW1wLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7UmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGRyYXcoKSB7XG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdGNvbnN0IHNoYWRlciA9IHRoaXMuc2hhZGVyO1xuXHRcdGNvbnN0IGF0bGFzID0gdGhpcy5hdGxhcztcblx0XHRjb25zdCBwbG90ID0gdGhpcy5sYXllci5wbG90O1xuXHRcdGNvbnN0IHJlbmRlcmFibGVzID0gdGhpcy5nZXRSZW5kZXJhYmxlcygpO1xuXHRcdGNvbnN0IHByb2ogPSB0aGlzLmdldE9ydGhvTWF0cml4KCk7XG5cblx0XHQvLyBiaW5kIHJlbmRlciB0YXJnZXRcblx0XHRwbG90LnJlbmRlckJ1ZmZlci5iaW5kKCk7XG5cdFx0Ly8gY2xlYXIgcmVuZGVyIHRhcmdldFxuXHRcdHBsb3QucmVuZGVyQnVmZmVyLmNsZWFyKCk7XG5cblx0XHQvLyBzZXQgYmxlbmRpbmcgZnVuY1xuXHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0Z2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FKTtcblxuXHRcdC8vIGJpbmQgc2hhZGVyXG5cdFx0c2hhZGVyLnVzZSgpO1xuXG5cdFx0Ly8gc2V0IGdsb2JhbCB1bmlmb3Jtc1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UHJvamVjdGlvbk1hdHJpeCcsIHByb2opO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1Q29sb3InLCB0aGlzLmNvbG9yKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVBpeGVsUmF0aW8nLCBwbG90LnBpeGVsUmF0aW8pO1xuXG5cdFx0Ly8gYmluZHMgdGhlIHZlcnRleCBhdGxhc1xuXHRcdGF0bGFzLmJpbmQoKTtcblxuXHRcdC8vIGZvciBlYWNoIHJlbmRlcmFibGVcblx0XHRyZW5kZXJhYmxlcy5mb3JFYWNoKHJlbmRlcmFibGUgPT4ge1xuXHRcdFx0Ly8gc2V0IHRpbGUgdW5pZm9ybXNcblx0XHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1U2NhbGUnLCByZW5kZXJhYmxlLnNjYWxlKTtcblx0XHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHJlbmRlcmFibGUudGlsZU9mZnNldCk7XG5cdFx0XHQvLyBkcmF3IHRoZSBwb2ludHNcblx0XHRcdGF0bGFzLmRyYXcocmVuZGVyYWJsZS5oYXNoLCAnUE9JTlRTJyk7XG5cdFx0fSk7XG5cblx0XHQvLyB1bmJpbmRcblx0XHRhdGxhcy51bmJpbmQoKTtcblxuXHRcdC8vIHVuYmluZCByZW5kZXIgdGFyZ2V0XG5cdFx0cGxvdC5yZW5kZXJCdWZmZXIudW5iaW5kKCk7XG5cblx0XHQvLyByZW5kZXIgZnJhbWVidWZmZXIgdG8gdGhlIGJhY2tidWZmZXJcblx0XHRwbG90LnJlbmRlckJ1ZmZlci5ibGl0VG9TY3JlZW4odGhpcy5sYXllci5vcGFjaXR5KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnRSZW5kZXJlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgVmVydGV4QnVmZmVyID0gcmVxdWlyZSgnLi92ZXJ0ZXgvVmVydGV4QnVmZmVyJyk7XG5jb25zdCBXZWJHTFZlcnRleFJlbmRlcmVyID0gcmVxdWlyZSgnLi9XZWJHTFZlcnRleFJlbmRlcmVyJyk7XG5cbi8vIENvbnN0YW50c1xuXG4vKipcbiAqIElubmVyIHJhZGl1cyBvZiBzdGFyLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7TnVtYmVyfVxuICovXG5jb25zdCBTVEFSX0lOTkVSX1JBRElVUyA9IDAuNDtcblxuLyoqXG4gKiBPdXRlciByYWRpdXMgb2Ygc3Rhci5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge051bWJlcn1cbiAqL1xuY29uc3QgU1RBUl9PVVRFUl9SQURJVVMgPSAxLjA7XG5cbi8qKlxuICogTnVtYmVyIG9mIHBvaW50cyBvbiB0aGUgc3Rhci5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnQge051bWJlcn1cbiAqL1xuY29uc3QgU1RBUl9OVU1fUE9JTlRTID0gNTtcblxuLyoqXG4gKiBTaGFkZXIgR0xTTCBzb3VyY2UuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtPYmplY3R9XG4gKi9cbmNvbnN0IFNIQURFUl9HTFNMID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xuXHRcdGF0dHJpYnV0ZSB2ZWMyIGFPZmZzZXQ7XG5cdFx0YXR0cmlidXRlIGZsb2F0IGFSYWRpdXM7XG5cdFx0dW5pZm9ybSB2ZWMyIHVUaWxlT2Zmc2V0O1xuXHRcdHVuaWZvcm0gZmxvYXQgdVNjYWxlO1xuXHRcdHVuaWZvcm0gbWF0NCB1UHJvamVjdGlvbk1hdHJpeDtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWMyIHdQb3NpdGlvbiA9IChhUG9zaXRpb24gKiBhUmFkaXVzKSArIChhT2Zmc2V0ICogdVNjYWxlKSArIHVUaWxlT2Zmc2V0O1xuXHRcdFx0Z2xfUG9zaXRpb24gPSB1UHJvamVjdGlvbk1hdHJpeCAqIHZlYzQod1Bvc2l0aW9uLCAwLjAsIDEuMCk7XG5cdFx0fVxuXHRcdGAsXG5cdGZyYWc6XG5cdFx0YFxuXHRcdHByZWNpc2lvbiBoaWdocCBmbG9hdDtcblx0XHR1bmlmb3JtIHZlYzQgdUNvbG9yO1xuXHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdGdsX0ZyYWdDb2xvciA9IHVDb2xvcjtcblx0XHR9XG5cdFx0YFxufTtcblxuLy8gUHJpdmF0ZSBNZXRob2RzXG5cbmNvbnN0IGNyZWF0ZVN0YXIgPSBmdW5jdGlvbihnbCkge1xuXHRjb25zdCB0aGV0YSA9ICgyICogTWF0aC5QSSkgLyBTVEFSX05VTV9QT0lOVFM7XG5cdGNvbnN0IGh0aGV0YSA9IHRoZXRhIC8gMi4wO1xuXHRjb25zdCBxdGhldGEgPSB0aGV0YSAvIDQuMDtcblx0Y29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSgoU1RBUl9OVU1fUE9JTlRTICogMikgKiAyICsgNCk7XG5cdHBvc2l0aW9uc1swXSA9IDA7XG5cdHBvc2l0aW9uc1sxXSA9IDA7XG5cdGZvciAobGV0IGk9MDsgaTxTVEFSX05VTV9QT0lOVFM7IGkrKykge1xuXHRcdGNvbnN0IGFuZ2xlID0gaSAqIHRoZXRhO1xuXHRcdGxldCBzeCA9IE1hdGguY29zKGFuZ2xlIC0gcXRoZXRhKSAqIFNUQVJfSU5ORVJfUkFESVVTO1xuXHRcdGxldCBzeSA9IE1hdGguc2luKGFuZ2xlIC0gcXRoZXRhKSAqIFNUQVJfSU5ORVJfUkFESVVTO1xuXHRcdHBvc2l0aW9uc1tpKjQrMl0gPSBzeDtcblx0XHRwb3NpdGlvbnNbaSo0KzErMl0gPSBzeTtcblx0XHRzeCA9IE1hdGguY29zKGFuZ2xlICsgaHRoZXRhIC0gcXRoZXRhKSAqIFNUQVJfT1VURVJfUkFESVVTO1xuXHRcdHN5ID0gTWF0aC5zaW4oYW5nbGUgKyBodGhldGEgLSBxdGhldGEpICogU1RBUl9PVVRFUl9SQURJVVM7XG5cdFx0cG9zaXRpb25zW2kqNCsyKzJdID0gc3g7XG5cdFx0cG9zaXRpb25zW2kqNCszKzJdID0gc3k7XG5cdH1cblx0cG9zaXRpb25zW3Bvc2l0aW9ucy5sZW5ndGgtMl0gPSBwb3NpdGlvbnNbMl07XG5cdHBvc2l0aW9uc1twb3NpdGlvbnMubGVuZ3RoLTFdID0gcG9zaXRpb25zWzNdO1xuXHRyZXR1cm4gbmV3IFZlcnRleEJ1ZmZlcihcblx0XHRnbCxcblx0XHRwb3NpdGlvbnMsXG5cdFx0e1xuXHRcdFx0MDoge1xuXHRcdFx0XHRzaXplOiAyLFxuXHRcdFx0XHR0eXBlOiAnRkxPQVQnXG5cdFx0XHR9XG5cdFx0fSxcblx0XHR7XG5cdFx0XHRtb2RlOiAnVFJJQU5HTEVfRkFOJyxcblx0XHRcdGNvdW50OiBwb3NpdGlvbnMubGVuZ3RoIC8gMlxuXHRcdH0pO1xufTtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBzaGFwZSByZW5kZXJlci5cbiAqL1xuY2xhc3MgU2hhcGVSZW5kZXJlciBleHRlbmRzIFdlYkdMVmVydGV4UmVuZGVyZXIge1xuXG5cdC8qKlxuXHQgKiBJbnN0YW50aWF0ZXMgYSBuZXcgU2hhcGVSZW5kZXJlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zLmNvbG9yIC0gVGhlIGNvbG9yIG9mIHRoZSBwb2ludHMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0XHR0aGlzLnNoYXBlID0gbnVsbDtcblx0XHR0aGlzLnNoYWRlciA9IG51bGw7XG5cdFx0dGhpcy5hdGxhcyA9IG51bGw7XG5cdFx0dGhpcy5jb2xvciA9IGRlZmF1bHRUbyhvcHRpb25zLmNvbG9yLCBbIDEuMCwgMC40LCAwLjEsIDAuOCBdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlZCB3aGVuIHRoZSByZW5kZXJlciBpcyBhdHRhY2hlZCB0byBhIGxheWVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xheWVyfSBsYXllciAtIFRoZSBsYXllciB0byBhdHRhY2ggdGhlIHJlbmRlcmVyIHRvLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7UmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdG9uQWRkKGxheWVyKSB7XG5cdFx0c3VwZXIub25BZGQobGF5ZXIpO1xuXHRcdHRoaXMuc2hhcGUgPSBjcmVhdGVTdGFyKHRoaXMuZ2wpO1xuXHRcdHRoaXMuc2hhZGVyID0gdGhpcy5jcmVhdGVTaGFkZXIoU0hBREVSX0dMU0wpO1xuXHRcdHRoaXMuYXRsYXMgPSB0aGlzLmNyZWF0ZVZlcnRleEF0bGFzKHtcblx0XHRcdC8vIG9mZnNldFxuXHRcdFx0MToge1xuXHRcdFx0XHRzaXplOiAyLFxuXHRcdFx0XHR0eXBlOiAnRkxPQVQnXG5cdFx0XHR9LFxuXHRcdFx0Ly8gcmFkaXVzXG5cdFx0XHQyOiB7XG5cdFx0XHRcdHNpemU6IDEsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCdcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlZCB3aGVuIHRoZSByZW5kZXJlciBpcyByZW1vdmVkIGZyb20gYSBsYXllci5cblx0ICpcblx0ICogQHBhcmFtIHtMYXllcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gcmVtb3ZlIHRoZSByZW5kZXJlciBmcm9tLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7UmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdG9uUmVtb3ZlKGxheWVyKSB7XG5cdFx0dGhpcy5kZXN0cm95VmVydGV4QXRsYXModGhpcy5hdGxhcyk7XG5cdFx0dGhpcy5hdGxhcyA9IG51bGw7XG5cdFx0dGhpcy5zaGFwZSA9IG51bGw7XG5cdFx0dGhpcy5zaGFkZXIgPSBudWxsO1xuXHRcdHN1cGVyLm9uUmVtb3ZlKGxheWVyKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgZHJhdyBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIHBlciBmcmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVzdGFtcCAtIFRoZSBmcmFtZSB0aW1lc3RhbXAuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtSZW5kZXJlcn0gVGhlIHJlbmRlcmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZHJhdygpIHtcblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cdFx0Y29uc3Qgc2hhZGVyID0gdGhpcy5zaGFkZXI7XG5cdFx0Y29uc3QgYXRsYXMgPSB0aGlzLmF0bGFzO1xuXHRcdGNvbnN0IHNoYXBlID0gdGhpcy5zaGFwZTtcblx0XHRjb25zdCBwbG90ID0gdGhpcy5sYXllci5wbG90O1xuXHRcdGNvbnN0IHJlbmRlcmFibGVzID0gdGhpcy5nZXRSZW5kZXJhYmxlcygpO1xuXHRcdGNvbnN0IHByb2ogPSB0aGlzLmdldE9ydGhvTWF0cml4KCk7XG5cblx0XHQvLyBiaW5kIHJlbmRlciB0YXJnZXRcblx0XHRwbG90LnJlbmRlckJ1ZmZlci5iaW5kKCk7XG5cdFx0Ly8gY2xlYXIgcmVuZGVyIHRhcmdldFxuXHRcdHBsb3QucmVuZGVyQnVmZmVyLmNsZWFyKCk7XG5cblx0XHQvLyBzZXQgYmxlbmRpbmcgZnVuY1xuXHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0Z2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FKTtcblxuXHRcdC8vIGJpbmQgc2hhZGVyXG5cdFx0c2hhZGVyLnVzZSgpO1xuXG5cdFx0Ly8gc2V0IGdsb2JhbCB1bmlmb3Jtc1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UHJvamVjdGlvbk1hdHJpeCcsIHByb2opO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1Q29sb3InLCB0aGlzLmNvbG9yKTtcblxuXHRcdC8vIGJpbmQgc2hhcGVcblx0XHRzaGFwZS5iaW5kKCk7XG5cblx0XHQvLyBiaW5kcyB0aGUgYnVmZmVyIHRvIGluc3RhbmNlXG5cdFx0YXRsYXMuYmluZEluc3RhbmNlZCgpO1xuXG5cdFx0Ly8gZm9yIGVhY2ggcmVuZGVyYWJsZVxuXHRcdHJlbmRlcmFibGVzLmZvckVhY2gocmVuZGVyYWJsZSA9PiB7XG5cdFx0XHQvLyBzZXQgdGlsZSB1bmlmb3Jtc1xuXHRcdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VTY2FsZScsIHJlbmRlcmFibGUuc2NhbGUpO1xuXHRcdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VUaWxlT2Zmc2V0JywgcmVuZGVyYWJsZS50aWxlT2Zmc2V0KTtcblx0XHRcdC8vIGRyYXcgdGhlIGluc3RhbmNlc1xuXHRcdFx0YXRsYXMuZHJhd0luc3RhbmNlZChyZW5kZXJhYmxlLmhhc2gsIHNoYXBlLm1vZGUsIHNoYXBlLmNvdW50KTtcblx0XHR9KTtcblxuXHRcdC8vIHVuYmluZFxuXHRcdGF0bGFzLnVuYmluZEluc3RhbmNlZCgpO1xuXG5cdFx0Ly8gdW5iaW5kIHF1YWRcblx0XHRzaGFwZS51bmJpbmQoKTtcblxuXHRcdC8vIHVuYmluZCByZW5kZXIgdGFyZ2V0XG5cdFx0cGxvdC5yZW5kZXJCdWZmZXIudW5iaW5kKCk7XG5cblx0XHQvLyByZW5kZXIgZnJhbWVidWZmZXIgdG8gdGhlIGJhY2tidWZmZXJcblx0XHRwbG90LnJlbmRlckJ1ZmZlci5ibGl0VG9TY3JlZW4odGhpcy5sYXllci5vcGFjaXR5KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhcGVSZW5kZXJlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgVmVydGV4QnVmZmVyID0gcmVxdWlyZSgnLi92ZXJ0ZXgvVmVydGV4QnVmZmVyJyk7XG5jb25zdCBXZWJHTFRleHR1cmVSZW5kZXJlciA9IHJlcXVpcmUoJy4vV2ViR0xUZXh0dXJlUmVuZGVyZXInKTtcblxuLy8gQ29uc3RhbnRzXG5cbi8qKlxuICogU2hhZGVyIEdMU0wgc291cmNlLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudCB7T2JqZWN0fVxuICovXG5jb25zdCBTSEFERVJfR0xTTCA9IHtcblx0dmVydDpcblx0XHRgXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdGF0dHJpYnV0ZSB2ZWMyIGFQb3NpdGlvbjtcblx0XHRhdHRyaWJ1dGUgdmVjMiBhVGV4dHVyZUNvb3JkO1xuXHRcdHVuaWZvcm0gdmVjNCB1VGV4dHVyZUNvb3JkT2Zmc2V0O1xuXHRcdHVuaWZvcm0gdmVjMiB1VGlsZU9mZnNldDtcblx0XHR1bmlmb3JtIGZsb2F0IHVTY2FsZTtcblx0XHR1bmlmb3JtIG1hdDQgdVByb2plY3Rpb25NYXRyaXg7XG5cdFx0dmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0dlRleHR1cmVDb29yZCA9IHZlYzIoXG5cdFx0XHRcdHVUZXh0dXJlQ29vcmRPZmZzZXQueCArIChhVGV4dHVyZUNvb3JkLnggKiB1VGV4dHVyZUNvb3JkT2Zmc2V0LnopLFxuXHRcdFx0XHR1VGV4dHVyZUNvb3JkT2Zmc2V0LnkgKyAoYVRleHR1cmVDb29yZC55ICogdVRleHR1cmVDb29yZE9mZnNldC53KSk7XG5cdFx0XHR2ZWMyIHdQb3NpdGlvbiA9IChhUG9zaXRpb24gKiB1U2NhbGUpICsgdVRpbGVPZmZzZXQ7XG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdmVjNCh3UG9zaXRpb24sIDAuMCwgMS4wKTtcblx0XHR9XG5cdFx0YCxcblx0ZnJhZzpcblx0XHRgXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlU2FtcGxlcjtcblx0XHR1bmlmb3JtIGZsb2F0IHVPcGFjaXR5O1xuXHRcdHZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xuXHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdHZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmVTYW1wbGVyLCB2ZWMyKHZUZXh0dXJlQ29vcmQueCwgMS4wIC0gdlRleHR1cmVDb29yZC55KSk7XG5cdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLnJnYiwgY29sb3IuYSAqIHVPcGFjaXR5KTtcblx0XHR9XG5cdFx0YFxufTtcblxuY29uc3QgY3JlYXRlUXVhZCA9IGZ1bmN0aW9uKGdsLCBtaW4sIG1heCkge1xuXHRjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoMjQpO1xuXHQvLyBwb3NpdGlvbnNcblx0dmVydGljZXNbMF0gPSBtaW47XHQgICB2ZXJ0aWNlc1sxXSA9IG1pbjtcblx0dmVydGljZXNbMl0gPSBtYXg7XHQgICB2ZXJ0aWNlc1szXSA9IG1pbjtcblx0dmVydGljZXNbNF0gPSBtYXg7XHQgICB2ZXJ0aWNlc1s1XSA9IG1heDtcblx0dmVydGljZXNbNl0gPSBtaW47XHQgICB2ZXJ0aWNlc1s3XSA9IG1pbjtcblx0dmVydGljZXNbOF0gPSBtYXg7XHQgICB2ZXJ0aWNlc1s5XSA9IG1heDtcblx0dmVydGljZXNbMTBdID0gbWluO1x0ICAgdmVydGljZXNbMTFdID0gbWF4O1xuXHQvLyB1dnNcblx0dmVydGljZXNbMTJdID0gMDtcdCAgIHZlcnRpY2VzWzEzXSA9IDA7XG5cdHZlcnRpY2VzWzE0XSA9IDE7XHQgICB2ZXJ0aWNlc1sxNV0gPSAwO1xuXHR2ZXJ0aWNlc1sxNl0gPSAxO1x0ICAgdmVydGljZXNbMTddID0gMTtcblx0dmVydGljZXNbMThdID0gMDtcdCAgIHZlcnRpY2VzWzE5XSA9IDA7XG5cdHZlcnRpY2VzWzIwXSA9IDE7XHQgICB2ZXJ0aWNlc1syMV0gPSAxO1xuXHR2ZXJ0aWNlc1syMl0gPSAwO1x0ICAgdmVydGljZXNbMjNdID0gMTtcblx0Ly8gY3JlYXRlIHF1YWQgYnVmZmVyXG5cdHJldHVybiBuZXcgVmVydGV4QnVmZmVyKFxuXHRcdGdsLFxuXHRcdHZlcnRpY2VzLFxuXHRcdHtcblx0XHRcdDA6IHtcblx0XHRcdFx0c2l6ZTogMixcblx0XHRcdFx0dHlwZTogJ0ZMT0FUJyxcblx0XHRcdFx0Ynl0ZU9mZnNldDogMFxuXHRcdFx0fSxcblx0XHRcdDE6IHtcblx0XHRcdFx0c2l6ZTogMixcblx0XHRcdFx0dHlwZTogJ0ZMT0FUJyxcblx0XHRcdFx0Ynl0ZU9mZnNldDogMiAqIDYgKiA0XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR7XG5cdFx0XHRjb3VudDogNixcblx0XHR9KTtcbn07XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgcmVuZGVyZXIuXG4gKi9cbmNsYXNzIFRleHR1cmVSZW5kZXJlciBleHRlbmRzIFdlYkdMVGV4dHVyZVJlbmRlcmVyIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFRleHR1cmVSZW5kZXJlciBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0XHR0aGlzLnF1YWQgPSBudWxsO1xuXHRcdHRoaXMuc2hhZGVyID0gbnVsbDtcblx0XHR0aGlzLmFycmF5ID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlZCB3aGVuIHRoZSByZW5kZXJlciBpcyBhdHRhY2hlZCB0byBhIGxheWVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xheWVyfSBsYXllciAtIFRoZSBsYXllciB0byBhdHRhY2ggdGhlIHJlbmRlcmVyIHRvLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7UmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdG9uQWRkKGxheWVyKSB7XG5cdFx0c3VwZXIub25BZGQobGF5ZXIpO1xuXHRcdHRoaXMucXVhZCA9IGNyZWF0ZVF1YWQodGhpcy5nbCwgMCwgbGF5ZXIucGxvdC50aWxlU2l6ZSk7XG5cdFx0dGhpcy5zaGFkZXIgPSB0aGlzLmNyZWF0ZVNoYWRlcihTSEFERVJfR0xTTCk7XG5cdFx0dGhpcy5hcnJheSA9IHRoaXMuY3JlYXRlVGV4dHVyZUFycmF5KGxheWVyLnBsb3QudGlsZVNpemUpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVkIHdoZW4gdGhlIHJlbmRlcmVyIGlzIHJlbW92ZWQgZnJvbSBhIGxheWVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xheWVyfSBsYXllciAtIFRoZSBsYXllciB0byByZW1vdmUgdGhlIHJlbmRlcmVyIGZyb20uXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtSZW5kZXJlcn0gVGhlIHJlbmRlcmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0b25SZW1vdmUobGF5ZXIpIHtcblx0XHR0aGlzLmRlc3Ryb3lUZXh0dXJlQXJyYXkodGhpcy5hcnJheSk7XG5cdFx0dGhpcy5hcnJheSA9IG51bGw7XG5cdFx0dGhpcy5xdWFkID0gbnVsbDtcblx0XHR0aGlzLnNoYWRlciA9IG51bGw7XG5cdFx0c3VwZXIub25SZW1vdmUobGF5ZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBkcmF3IGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgcGVyIGZyYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdGltZXN0YW1wIC0gVGhlIGZyYW1lIHRpbWVzdGFtcC5cblx0ICpcblx0ICogQHJldHVybnMge1JlbmRlcmVyfSBUaGUgcmVuZGVyZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRkcmF3KCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRjb25zdCBzaGFkZXIgPSB0aGlzLnNoYWRlcjtcblx0XHRjb25zdCBhcnJheSA9IHRoaXMuYXJyYXk7XG5cdFx0Y29uc3QgcXVhZCA9IHRoaXMucXVhZDtcblx0XHRjb25zdCByZW5kZXJhYmxlcyA9IHRoaXMuZ2V0UmVuZGVyYWJsZXNMT0QoKTtcblx0XHRjb25zdCBwcm9qID0gdGhpcy5nZXRPcnRob01hdHJpeCgpO1xuXG5cdFx0Ly8gYmluZCBzaGFkZXJcblx0XHRzaGFkZXIudXNlKCk7XG5cdFx0Ly8gc2V0IGdsb2JhbCB1bmlmb3Jtc1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UHJvamVjdGlvbk1hdHJpeCcsIHByb2opO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGV4dHVyZVNhbXBsZXInLCAwKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndU9wYWNpdHknLCB0aGlzLmxheWVyLm9wYWNpdHkpO1xuXG5cdFx0Ly8gc2V0IGJsZW5kaW5nIGZ1bmNcblx0XHRnbC5lbmFibGUoZ2wuQkxFTkQpO1xuXHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG5cdFx0Ly8gYmluZCBxdWFkXG5cdFx0cXVhZC5iaW5kKCk7XG5cblx0XHRsZXQgbGFzdDtcblx0XHQvLyBmb3IgZWFjaCByZW5kZXJhYmxlXG5cdFx0cmVuZGVyYWJsZXMuZm9yRWFjaChyZW5kZXJhYmxlID0+IHtcblx0XHRcdGNvbnN0IGhhc2ggPSByZW5kZXJhYmxlLmhhc2g7XG5cdFx0XHRpZiAobGFzdCAhPT0gaGFzaCkge1xuXHRcdFx0XHQvLyBiaW5kIHRleHR1cmVcblx0XHRcdFx0YXJyYXkuYmluZChoYXNoLCAwKTtcblx0XHRcdFx0bGFzdCA9IGhhc2g7XG5cdFx0XHR9XG5cdFx0XHQvLyBzZXQgdGlsZSB1bmlmb3Jtc1xuXHRcdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VUZXh0dXJlQ29vcmRPZmZzZXQnLCByZW5kZXJhYmxlLnV2T2Zmc2V0KTtcblx0XHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1U2NhbGUnLCByZW5kZXJhYmxlLnNjYWxlKTtcblx0XHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHJlbmRlcmFibGUudGlsZU9mZnNldCk7XG5cdFx0XHQvLyBkcmF3XG5cdFx0XHRxdWFkLmRyYXcoKTtcblx0XHRcdC8vIG5vIG5lZWQgdG8gdW5iaW5kIHRleHR1cmVcblx0XHR9KTtcblxuXHRcdC8vIHVuYmluZCBxdWFkXG5cdFx0cXVhZC51bmJpbmQoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHR1cmVSZW5kZXJlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgS2V5Ym9hcmQgPSByZXF1aXJlKCcuLi8uLi9jb3JlL0tleWJvYXJkJyk7XG5jb25zdCBFdmVudFR5cGUgPSByZXF1aXJlKCcuLi8uLi9ldmVudC9FdmVudFR5cGUnKTtcbmNvbnN0IENsaWNrRXZlbnQgPSByZXF1aXJlKCcuLi8uLi9ldmVudC9DbGlja0V2ZW50Jyk7XG5jb25zdCBNb3VzZUV2ZW50ID0gcmVxdWlyZSgnLi4vLi4vZXZlbnQvTW91c2VFdmVudCcpO1xuY29uc3QgUlRyZWUgPSByZXF1aXJlKCcuL3J0cmVlL1JUcmVlJyk7XG5jb25zdCBDb2xsaXNpb25UeXBlID0gcmVxdWlyZSgnLi9ydHJlZS9Db2xsaXNpb25UeXBlJyk7XG5jb25zdCBXZWJHTFZlcnRleFJlbmRlcmVyID0gcmVxdWlyZSgnLi9XZWJHTFZlcnRleFJlbmRlcmVyJyk7XG5cbi8vIENvbnN0YW50c1xuXG4vKipcbiAqIENsaWNrIGV2ZW50IGhhbmRsZXIgc3ltYm9sLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBDTElDSyA9IFN5bWJvbCgpO1xuXG4vKipcbiAqIE1vdXNlbW92ZSBldmVudCBoYW5kbGVyIHN5bWJvbC5cbiAqIEBwcml2YXRlXG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTU9VU0VfTU9WRSA9IFN5bWJvbCgpO1xuXG4vKipcbiAqIFpvb20gZW5kIGV2ZW50IGhhbmRsZXIgc3ltYm9sLlxuICogQHByaXZhdGVcbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBaT09NX1NUQVJUID0gU3ltYm9sKCk7XG5cbi8vIFByaXZhdGUgTWV0aG9kc1xuXG5jb25zdCBnZXRDb2xsaXNpb24gPSBmdW5jdGlvbihyZW5kZXJlciwgcGxvdFB4KSB7XG5cdGNvbnN0IHBsb3QgPSByZW5kZXJlci5sYXllci5wbG90O1xuXHQvLyBkb24ndCByZXR1cm4gY29sbGlzaW9uIGlmIHpvb21pbmdcblx0aWYgKHBsb3QuaXNab29taW5nKCkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHQvLyBwb2ludHMgYXJlIGhhc2hlZCBpbiB1bi1zY2FsZWQgY29vcmRpbmF0ZXMsIHVuc2NhbGUgdGhlIHBvaW50XG5cdGNvbnN0IHRhcmdldFpvb20gPSBNYXRoLnJvdW5kKHBsb3Quem9vbSk7XG5cdGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMiwgdGFyZ2V0Wm9vbSAtIHBsb3Quem9vbSk7XG5cdC8vIHVuc2NhbGVkIHBvaW50c1xuXHRjb25zdCBzeCA9IHBsb3RQeC54ICogc2NhbGU7XG5cdGNvbnN0IHN5ID0gcGxvdFB4LnkgKiBzY2FsZTtcblx0Ly8gZ2V0IHRoZSB0cmVlIGZvciB0aGUgem9vbVxuXHRjb25zdCB0cmVlID0gcmVuZGVyZXIudHJlZXMuZ2V0KHRhcmdldFpvb20pO1xuXHRpZiAoIXRyZWUpIHtcblx0XHQvLyBubyBkYXRhIGZvciB0aWxlXG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0cmV0dXJuIHRyZWUuc2VhcmNoUG9pbnQoc3gsIHN5KTtcbn07XG5cbmNvbnN0IG9uQ2xpY2sgPSBmdW5jdGlvbihyZW5kZXJlciwgZXZlbnQpIHtcblx0Y29uc3QgbXVsdGlTZWxlY3QgPSBLZXlib2FyZC5wb2xsKCdjdHJsJykgfHwgS2V5Ym9hcmQucG9sbCgnbWV0YScpO1xuXHRjb25zdCBjb2xsaXNpb24gPSBnZXRDb2xsaXNpb24ocmVuZGVyZXIsIGV2ZW50LnBsb3RQeCk7XG5cdGlmIChjb2xsaXNpb24pIHtcblx0XHQvLyBhZGQgdG8gY29sbGVjdGlvbiBpZiBtdWx0aS1zZWxlY3Rpb24gaXMgZW5hYmxlZFxuXHRcdGlmIChtdWx0aVNlbGVjdCkge1xuXHRcdFx0Ly8gYWRkIHRvIGNvbGxlY3Rpb24gaWYgbXVsdGktc2VsZWN0aW9uIGlzIGVuYWJsZWRcblx0XHRcdGNvbnN0IGluZGV4ID0gcmVuZGVyZXIuc2VsZWN0ZWQuaW5kZXhPZihjb2xsaXNpb24pO1xuXHRcdFx0aWYgKGluZGV4ID09PSAtMSkge1xuXHRcdFx0XHQvLyBzZWxlY3QgcG9pbnRcblx0XHRcdFx0cmVuZGVyZXIuc2VsZWN0ZWQucHVzaChjb2xsaXNpb24pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gcmVtb3ZlIHBvaW50IGlmIGFscmVhZHkgc2VsZWN0ZWRcblx0XHRcdFx0cmVuZGVyZXIuc2VsZWN0ZWQuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gY2xlYXIgc2VsZWN0aW9uLCBhZGRpbmcgb25seSB0aGUgbGF0ZXN0IGVudHJ5XG5cdFx0XHRyZW5kZXJlci5zZWxlY3RlZCA9IFsgY29sbGlzaW9uIF07XG5cdFx0fVxuXHRcdC8vIGVtaXQgY2xpY2sgZXZlbnRcblx0XHRyZW5kZXJlci5lbWl0KEV2ZW50VHlwZS5DTElDSywgbmV3IENsaWNrRXZlbnQoXG5cdFx0XHRyZW5kZXJlci5sYXllcixcblx0XHRcdGV2ZW50LnZpZXdQeCxcblx0XHRcdGV2ZW50LnBsb3RQeCxcblx0XHRcdGV2ZW50LmJ1dHRvbixcblx0XHRcdHJlbmRlcmVyLnNlbGVjdGVkLmxlbmd0aCA+IDEgPyByZW5kZXJlci5zZWxlY3RlZCA6IGNvbGxpc2lvbikpO1xuXHR9IGVsc2Uge1xuXHRcdGlmIChtdWx0aVNlbGVjdCkge1xuXHRcdFx0Ly8gaWYgbXVsdGktc2VsZWN0IGlzIGhlbGQsIGRvbid0IGNsZWFyIHNlbGVjdGlvbiwgaXQgaW1wbGllcyB1c2VyXG5cdFx0XHQvLyBtYXkgaGF2ZSBtaXNjbGlja2VkXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIGZsYWcgYXMgdW5zZWxlY3RlZFxuXHRcdHJlbmRlcmVyLnNlbGVjdGVkID0gW107XG5cdH1cbn07XG5cbmNvbnN0IGFjdGl2ZSA9IG5ldyBNYXAoKTtcbmNvbnN0IHNldEN1cnNvciA9IGZ1bmN0aW9uKHJlbmRlcmVyKSB7XG5cdGNvbnN0IHBsb3QgPSByZW5kZXJlci5sYXllci5wbG90O1xuXHRpZiAoIWFjdGl2ZS5oYXMocGxvdCkpIHtcblx0XHRhY3RpdmUuc2V0KHBsb3QsIG5ldyBNYXAoKSk7XG5cdH1cblx0Y29uc3QgaXNBY3RpdmUgPSBhY3RpdmUuZ2V0KHBsb3QpO1xuXHRpZiAoIWlzQWN0aXZlLmhhcyhyZW5kZXJlcikpIHtcblx0XHRpc0FjdGl2ZS5zZXQocmVuZGVyZXIsIHRydWUpO1xuXHRcdHBsb3QuZ2V0Q29udGFpbmVyKCkuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuXHR9O1xufTtcblxuY29uc3QgcmVzZXRDdXJzb3IgPSBmdW5jdGlvbihyZW5kZXJlcikge1xuXHRjb25zdCBwbG90ID0gcmVuZGVyZXIubGF5ZXIucGxvdDtcblx0aWYgKCFhY3RpdmUuaGFzKHBsb3QpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGNvbnN0IGlzQWN0aXZlID0gYWN0aXZlLmdldChwbG90KTtcblx0aXNBY3RpdmUuZGVsZXRlKHJlbmRlcmVyKTtcblx0aWYgKGlzQWN0aXZlLnNpemUgPT09IDApIHtcblx0XHRwbG90LmdldENvbnRhaW5lcigpLnN0eWxlLmN1cnNvciA9ICdpbmhlcml0Jztcblx0fVxufTtcblxuY29uc3Qgb25Nb3VzZU1vdmUgPSBmdW5jdGlvbihyZW5kZXJlciwgZXZlbnQpIHtcblx0Y29uc3QgY29sbGlzaW9uID0gZ2V0Q29sbGlzaW9uKHJlbmRlcmVyLCBldmVudC5wbG90UHgpO1xuXHRpZiAoY29sbGlzaW9uKSB7XG5cdFx0Ly8gbWltaWMgbW91c2VvdmVyIC8gbW91c2VvdXQgZXZlbnRzXG5cdFx0aWYgKHJlbmRlcmVyLmhpZ2hsaWdodGVkKSB7XG5cdFx0XHRpZiAocmVuZGVyZXIuaGlnaGxpZ2h0ZWQgIT09IGNvbGxpc2lvbikge1xuXHRcdFx0XHQvLyBuZXcgY29sbGlzaW9uXG5cdFx0XHRcdC8vIGVtaXQgbW91c2VvdXQgZm9yIHByZXZcblx0XHRcdFx0cmVuZGVyZXIuZW1pdChFdmVudFR5cGUuTU9VU0VfT1VULCBuZXcgTW91c2VFdmVudChcblx0XHRcdFx0XHRyZW5kZXJlci5sYXllcixcblx0XHRcdFx0XHRldmVudC52aWV3UHgsXG5cdFx0XHRcdFx0ZXZlbnQucGxvdFB4LFxuXHRcdFx0XHRcdGV2ZW50LmJ1dHRvbixcblx0XHRcdFx0XHRyZW5kZXJlci5oaWdobGlnaHRlZCkpO1xuXHRcdFx0XHQvLyBlbWl0IG1vdXNlb3ZlciBmb3IgbmV3XG5cdFx0XHRcdHJlbmRlcmVyLmVtaXQoRXZlbnRUeXBlLk1PVVNFX09WRVIsIG5ldyBNb3VzZUV2ZW50KFxuXHRcdFx0XHRcdHJlbmRlcmVyLmxheWVyLFxuXHRcdFx0XHRcdGV2ZW50LnZpZXdQeCxcblx0XHRcdFx0XHRldmVudC5wbG90UHgsXG5cdFx0XHRcdFx0ZXZlbnQuYnV0dG9uLFxuXHRcdFx0XHRcdGNvbGxpc2lvbikpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBubyBwcmV2aW91cyBjb2xsaXNpb24sIGV4ZWN1dGUgbW91c2VvdmVyXG5cdFx0XHRyZW5kZXJlci5lbWl0KEV2ZW50VHlwZS5NT1VTRV9PVkVSLCBuZXcgTW91c2VFdmVudChcblx0XHRcdFx0cmVuZGVyZXIubGF5ZXIsXG5cdFx0XHRcdGV2ZW50LnZpZXdQeCxcblx0XHRcdFx0ZXZlbnQucGxvdFB4LFxuXHRcdFx0XHRldmVudC5idXR0b24sXG5cdFx0XHRcdGNvbGxpc2lvbikpO1xuXHRcdH1cblx0XHQvLyBzZXQgY3Vyc29yXG5cdFx0c2V0Q3Vyc29yKHJlbmRlcmVyKTtcblx0XHQvLyBmbGFnIGFzIGhpZ2hsaWdodGVkXG5cdFx0cmVuZGVyZXIuaGlnaGxpZ2h0ZWQgPSBjb2xsaXNpb247XG5cdFx0cmV0dXJuO1xuXHR9XG5cdC8vIG1vdXNlIG91dFxuXHRpZiAocmVuZGVyZXIuaGlnaGxpZ2h0ZWQpIHtcblx0XHQvLyByZXNldCBjdXJzb3Jcblx0XHRyZXNldEN1cnNvcihyZW5kZXJlcik7XG5cdFx0Ly8gZW1pdCBtb3VzZSBvdXRcblx0XHRyZW5kZXJlci5lbWl0KEV2ZW50VHlwZS5NT1VTRV9PVVQsIG5ldyBNb3VzZUV2ZW50KFxuXHRcdFx0cmVuZGVyZXIubGF5ZXIsXG5cdFx0XHRldmVudC52aWV3UHgsXG5cdFx0XHRldmVudC5wbG90UHgsXG5cdFx0XHRldmVudC5idXR0b24sXG5cdFx0XHRyZW5kZXJlci5oaWdobGlnaHRlZCkpO1xuXHR9XG5cdC8vIGNsZWFyIGhpZ2hsaWdodGVkIGZsYWdcblx0cmVuZGVyZXIuaGlnaGxpZ2h0ZWQgPSBudWxsO1xufTtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gaW50ZXJhY3RpdmUgdmVydGV4IGJhc2VkIHdlYmdsIHJlbmRlcmVyLlxuICovXG5jbGFzcyBXZWJHTEludGVyYWN0aXZlUmVuZGVyZXIgZXh0ZW5kcyBXZWJHTFZlcnRleFJlbmRlcmVyIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFdlYkdMSW50ZXJhY3RpdmVSZW5kZXJlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuY29sbGlzaW9uVHlwZSAtIFRoZSBjb2xsaXNpb24gdHlwZSBvZiB0aGUgcG9pbnRzLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMubm9kZUNhcGFjaXR5IC0gVGhlIG5vZGUgY2FwYWNpdHkgb2YgdGhlIHItdHJlZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHRcdHRoaXMudHJlZXMgPSBudWxsO1xuXHRcdHRoaXMucG9pbnRzID0gbnVsbDtcblx0XHR0aGlzLmhpZ2hsaWdodGVkID0gbnVsbDtcblx0XHR0aGlzLnNlbGVjdGVkID0gW107XG5cdFx0dGhpcy5jb2xsaXNpb25UeXBlID0gZGVmYXVsdFRvKG9wdGlvbnMuY29sbGlzaW9uVHlwZSwgQ29sbGlzaW9uVHlwZS5DSVJDTEUpO1xuXHRcdHRoaXMubm9kZUNhcGFjaXR5ID0gZGVmYXVsdFRvKG9wdGlvbnMubm9kZUNhcGFjaXR5LCAzMik7XG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXJzIGFueSBzZWxlY3Rpb24gLyBoaWdobGlnaHRlZCBlbGVtZW50cy5cblx0ICpcblx0ICogQHJldHVybnMge1dlYkdMVmVydGV4UmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGNsZWFyKCkge1xuXHRcdHN1cGVyLmNsZWFyKCk7XG5cdFx0Ly8gY2xlYXIgc2VsZWN0ZWQgLyBoaWdobGlnaHRlZFxuXHRcdHRoaXMuaGlnaGxpZ2h0ZWQgPSBudWxsO1xuXHRcdHRoaXMuc2VsZWN0ZWQgPSBbXTtcblx0XHQvLyByZXNldCB0aGUgY3Vyc29yXG5cdFx0cmVzZXRDdXJzb3IodGhpcyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgYXR0YWNoZWQgdG8gYSBsYXllci5cblx0ICpcblx0ICogQHBhcmFtIHtMYXllcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gYXR0YWNoIHRoZSByZW5kZXJlciB0by5cblx0ICpcblx0ICogQHJldHVybnMge1JlbmRlcmVyfSBUaGUgcmVuZGVyZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRvbkFkZChsYXllcikge1xuXHRcdHN1cGVyLm9uQWRkKGxheWVyKTtcblx0XHQvLyBjcmVhdGUgcnRyZWUgYW5kIHBvaW50IG1hcHNcblx0XHR0aGlzLnRyZWVzID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMucG9pbnRzID0gbmV3IE1hcCgpO1xuXHRcdC8vIGNyZWF0ZSBoYW5kbGVyc1xuXHRcdHRoaXMuaGFuZGxlcnMuc2V0KENMSUNLLCBldmVudCA9PiB7XG5cdFx0XHRpZiAodGhpcy5sYXllci5pc0hpZGRlbigpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdG9uQ2xpY2sodGhpcywgZXZlbnQpO1xuXHRcdH0pO1xuXHRcdHRoaXMuaGFuZGxlcnMuc2V0KE1PVVNFX01PVkUsIGV2ZW50ID0+IHtcblx0XHRcdGlmICh0aGlzLmxheWVyLmlzSGlkZGVuKCkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0b25Nb3VzZU1vdmUodGhpcywgZXZlbnQpO1xuXHRcdH0pO1xuXHRcdHRoaXMuaGFuZGxlcnMuc2V0KFpPT01fU1RBUlQsICgpID0+IHtcblx0XHRcdHRoaXMuc2VsZWN0ZWQgPSBbXTtcblx0XHRcdHRoaXMuaGlnaGxpZ2h0ZWQgPSBudWxsO1xuXHRcdH0pO1xuXHRcdC8vIGF0dGFjaCBoYW5kbGVyc1xuXHRcdGxheWVyLnBsb3Qub24oRXZlbnRUeXBlLkNMSUNLLCB0aGlzLmhhbmRsZXJzLmdldChDTElDSykpO1xuXHRcdGxheWVyLnBsb3Qub24oRXZlbnRUeXBlLk1PVVNFX01PVkUsIHRoaXMuaGFuZGxlcnMuZ2V0KE1PVVNFX01PVkUpKTtcblx0XHRsYXllci5wbG90Lm9uKEV2ZW50VHlwZS5aT09NX1NUQVJULCB0aGlzLmhhbmRsZXJzLmdldChaT09NX1NUQVJUKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgcmVtb3ZlZCBmcm9tIGEgbGF5ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGF5ZXJ9IGxheWVyIC0gVGhlIGxheWVyIHRvIHJlbW92ZSB0aGUgcmVuZGVyZXIgZnJvbS5cblx0ICpcblx0ICogQHJldHVybnMge1JlbmRlcmVyfSBUaGUgcmVuZGVyZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRvblJlbW92ZShsYXllcikge1xuXHRcdC8vIGRldGFjaCBoYW5kbGVyc1xuXHRcdHRoaXMubGF5ZXIucGxvdC5yZW1vdmVMaXN0ZW5lcihFdmVudFR5cGUuQ0xJQ0ssIHRoaXMuaGFuZGxlcnMuZ2V0KENMSUNLKSk7XG5cdFx0dGhpcy5sYXllci5wbG90LnJlbW92ZUxpc3RlbmVyKEV2ZW50VHlwZS5NT1VTRV9NT1ZFLCB0aGlzLmhhbmRsZXJzLmdldChNT1VTRV9NT1ZFKSk7XG5cdFx0dGhpcy5sYXllci5wbG90LnJlbW92ZUxpc3RlbmVyKEV2ZW50VHlwZS5aT09NX1NUQVJULCB0aGlzLmhhbmRsZXJzLmdldChaT09NX1NUQVJUKSk7XG5cdFx0Ly8gZGVzdHJveSBoYW5kbGVyc1xuXHRcdHRoaXMuaGFuZGxlcnMuZGVsZXRlKENMSUNLKTtcblx0XHR0aGlzLmhhbmRsZXJzLmRlbGV0ZShNT1VTRV9NT1ZFKTtcblx0XHR0aGlzLmhhbmRsZXJzLmRlbGV0ZShaT09NX1NUQVJUKTtcblx0XHQvLyBkZXN0cm95IHJ0cmVlIGFuZCBwb2ludCBtYXBzXG5cdFx0dGhpcy50cmVlcyA9IG51bGw7XG5cdFx0dGhpcy5wb2ludHMgPSBudWxsO1xuXHRcdHRoaXMuc2VsZWN0ZWQgPSBbXTtcblx0XHR0aGlzLmhpZ2hsaWdodGVkID0gbnVsbDtcblx0XHQvLyBjbGVhciBzZWxlY3RlZCAvIGhpZ2hsaWdodGVkXG5cdFx0dGhpcy5jbGVhcigpO1xuXHRcdHN1cGVyLm9uUmVtb3ZlKGxheWVyKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBJbmRleGVzIHRoZSBwcm92aWRlZCBwb2ludHMgaW50byBhbiBSLVRyZWUgc3RydWN0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Nvb3JkfSBjb29yZCAtIFRoZSBjb29yZCBmb3IgdGhlIHRpbGUuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IHBvaW50cyAtIFRoZSBwb2ludCBkYXRhIHRvIGluZGV4LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7UmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGFkZFBvaW50cyhjb29yZCwgcG9pbnRzKSB7XG5cdFx0aWYgKCF0aGlzLnRyZWVzLmhhcyhjb29yZC56KSkge1xuXHRcdFx0dGhpcy50cmVlcy5zZXQoY29vcmQueiwgbmV3IFJUcmVlKHtcblx0XHRcdFx0Y29sbGlzaW9uVHlwZTogdGhpcy5jb2xsaXNpb25UeXBlLFxuXHRcdFx0XHRub2RlQ2FwYWNpdHk6IHRoaXMubm9kZUNhcGFjaXR5XG5cdFx0XHR9KSk7XG5cdFx0fVxuXHRcdHRoaXMudHJlZXMuZ2V0KGNvb3JkLnopLmluc2VydChwb2ludHMpO1xuXHRcdHRoaXMucG9pbnRzLnNldChjb29yZC5oYXNoLCBwb2ludHMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGNvb3JkcyB3b3J0aCBvZiB0aWxlcyBmcm9tIHRoZSBSLVRyZWUgc3RydWN0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Nvb3JkfSBjb29yZCAtIFRoZSBjb29yZCBmb3IgdGhlIHRpbGUuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtSZW5kZXJlcn0gVGhlIHJlbmRlcmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0cmVtb3ZlUG9pbnRzKGNvb3JkKSB7XG5cdFx0Y29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHMuZ2V0KGNvb3JkLmhhc2gpO1xuXHRcdHRoaXMudHJlZXMuZ2V0KGNvb3JkLnopLnJlbW92ZShwb2ludHMpO1xuXHRcdHRoaXMucG9pbnRzLmRlbGV0ZShjb29yZC5oYXNoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYkdMSW50ZXJhY3RpdmVSZW5kZXJlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU2hhZGVyID0gcmVxdWlyZSgnLi9zaGFkZXIvU2hhZGVyJyk7XG5jb25zdCBSZW5kZXJlciA9IHJlcXVpcmUoJy4uL1JlbmRlcmVyJyk7XG5cbi8vIFByaXZhdGUgTWV0aG9kc1xuXG5jb25zdCBzb3J0QnlIYXNoID0gZnVuY3Rpb24oYSwgYikge1xuXHRpZiAoYSA8IGIpIHtcblx0XHRyZXR1cm4gLTE7XG5cdH0gZWxzZSBpZiAoYSA+IGIpIHtcblx0XHRyZXR1cm4gIDE7XG5cdH1cblx0cmV0dXJuIDA7XG59O1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHdlYmdsIHJlbmRlcmVyLlxuICovXG5jbGFzcyBXZWJHTFJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXIge1xuXG5cdC8qKlxuXHQgKiBJbnN0YW50aWF0ZXMgYSBuZXcgV2ViR0xSZW5kZXJlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuXHQgKi9cblx0Y29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG5cdFx0c3VwZXIob3B0aW9ucyk7XG5cdFx0dGhpcy5nbCA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgYXR0YWNoZWQgdG8gYSBsYXllci5cblx0ICpcblx0ICogQHBhcmFtIHtMYXllcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gYXR0YWNoIHRoZSByZW5kZXJlciB0by5cblx0ICpcblx0ICogQHJldHVybnMge1dlYkdMUmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdG9uQWRkKGxheWVyKSB7XG5cdFx0c3VwZXIub25BZGQobGF5ZXIpO1xuXHRcdHRoaXMuZ2wgPSB0aGlzLmxheWVyLnBsb3QuZ2w7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgcmVtb3ZlZCBmcm9tIGEgbGF5ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGF5ZXJ9IGxheWVyIC0gVGhlIGxheWVyIHRvIHJlbW92ZSB0aGUgcmVuZGVyZXIgZnJvbS5cblx0ICpcblx0ICogQHJldHVybnMge1dlYkdMUmVuZGVyZXJ9IFRoZSByZW5kZXJlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdG9uUmVtb3ZlKGxheWVyKSB7XG5cdFx0dGhpcy5nbCA9IG51bGw7XG5cdFx0c3VwZXIub25SZW1vdmUobGF5ZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlIGFuZCByZXR1cm4gYSBuZXcgU2hhZGVyIG9iamVjdCB1c2luZyB0aGUgcmVuZGVyZXJzIGludGVybmFsXG5cdCAqIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5cblx0ICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIFRoZSBzaGFkZXIgcGFyYW0gb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1zLmNvbW1vbiAtIENvbW1vbiBnbHNsIHRvIGJlIHNoYXJlZCBieSBib3RoIHZlcnRleCBhbmQgZnJhZ21lbnQgc2hhZGVycy5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtcy52ZXJ0IC0gVGhlIHZlcnRleCBzaGFkZXIgZ2xzbC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtcy5mcmFnIC0gVGhlIGZyYWdtZW50IHNoYWRlciBnbHNsLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7U2hhZGVyfSBUaGUgc2hhZGVyIG9iamVjdC5cblx0ICovXG5cdGNyZWF0ZVNoYWRlcihzb3VyY2UpIHtcblx0XHRyZXR1cm4gbmV3IFNoYWRlcih0aGlzLmdsLCBzb3VyY2UpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeCBmb3IgdGhlIHZpZXdwb3J0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtGbG9hdDMyQXJyYXl9IFRoZSBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXguXG5cdCAqL1xuXHRnZXRPcnRob01hdHJpeCgpIHtcblx0XHRjb25zdCB2aWV3cG9ydCA9IHRoaXMubGF5ZXIucGxvdC52aWV3cG9ydDtcblx0XHRjb25zdCBsZWZ0ID0gMDtcblx0XHRjb25zdCByaWdodCA9IHZpZXdwb3J0LndpZHRoO1xuXHRcdGNvbnN0IGJvdHRvbSA9IDA7XG5cdFx0Y29uc3QgdG9wID0gdmlld3BvcnQuaGVpZ2h0O1xuXHRcdGNvbnN0IG5lYXIgPSAtMTtcblx0XHRjb25zdCBmYXIgPSAxO1xuXHRcdGNvbnN0IGxyID0gMSAvIChsZWZ0IC0gcmlnaHQpO1xuXHRcdGNvbnN0IGJ0ID0gMSAvIChib3R0b20gLSB0b3ApO1xuXHRcdGNvbnN0IG5mID0gMSAvIChuZWFyIC0gZmFyKTtcblx0XHRjb25zdCBvdXQgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcblx0XHRvdXRbMF0gPSAtMiAqIGxyO1xuXHRcdG91dFsxXSA9IDA7XG5cdFx0b3V0WzJdID0gMDtcblx0XHRvdXRbM10gPSAwO1xuXHRcdG91dFs0XSA9IDA7XG5cdFx0b3V0WzVdID0gLTIgKiBidDtcblx0XHRvdXRbNl0gPSAwO1xuXHRcdG91dFs3XSA9IDA7XG5cdFx0b3V0WzhdID0gMDtcblx0XHRvdXRbOV0gPSAwO1xuXHRcdG91dFsxMF0gPSAyICogbmY7XG5cdFx0b3V0WzExXSA9IDA7XG5cdFx0b3V0WzEyXSA9IChsZWZ0ICsgcmlnaHQpICogbHI7XG5cdFx0b3V0WzEzXSA9ICh0b3AgKyBib3R0b20pICogYnQ7XG5cdFx0b3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuXHRcdG91dFsxNV0gPSAxO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcmVuZGVyYWJsZXMgZm9yIHRoZSB1bmRlcmx5aW5nIGxheWVyLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBvZiByZW5kZXJhYmxlcy5cblx0ICovXG5cdGdldFJlbmRlcmFibGVzKCkge1xuXHRcdGNvbnN0IHBsb3QgPSB0aGlzLmxheWVyLnBsb3Q7XG5cdFx0Y29uc3QgcHlyYW1pZCA9IHRoaXMubGF5ZXIucHlyYW1pZDtcblx0XHQvLyBnZXQgYWxsIGN1cnJlbnRseSB2aXNpYmxlIHRpbGUgY29vcmRzXG5cdFx0Y29uc3QgY29vcmRzID0gcGxvdC52aWV3cG9ydC5nZXRWaXNpYmxlQ29vcmRzKFxuXHRcdFx0cGxvdC50aWxlU2l6ZSxcblx0XHRcdHBsb3Quem9vbSxcblx0XHRcdE1hdGgucm91bmQocGxvdC56b29tKSwgLy8gZ2V0IHRpbGVzIGNsb3Nlc3QgdG8gY3VycmVudCB6b29tXG5cdFx0XHRwbG90LndyYXBhcm91bmQpO1xuXHRcdC8vIGdldCBhdmFpbGFibGUgcmVuZGVyYWJsZXNcblx0XHRjb25zdCByZW5kZXJhYmxlcyA9IFtdO1xuXHRcdGNvb3Jkcy5mb3JFYWNoKGNvb3JkID0+IHtcblx0XHRcdGNvbnN0IG5jb29yZCA9IGNvb3JkLm5vcm1hbGl6ZSgpO1xuXHRcdFx0Ly8gY2hlY2sgaWYgd2UgaGF2ZSB0aGUgdGlsZVxuXHRcdFx0Y29uc3QgdGlsZSA9IHB5cmFtaWQuZ2V0KG5jb29yZCk7XG5cdFx0XHRpZiAodGlsZSkge1xuXHRcdFx0XHRjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIHBsb3Quem9vbSAtIGNvb3JkLnopO1xuXHRcdFx0XHRjb25zdCB0aWxlT2Zmc2V0ID0gW1xuXHRcdFx0XHRcdChjb29yZC54ICogc2NhbGUgKiBwbG90LnRpbGVTaXplKSAtIHBsb3Qudmlld3BvcnQueCxcblx0XHRcdFx0XHQoY29vcmQueSAqIHNjYWxlICogcGxvdC50aWxlU2l6ZSkgLSBwbG90LnZpZXdwb3J0Lnlcblx0XHRcdFx0XTtcblx0XHRcdFx0Y29uc3QgcmVuZGVyYWJsZSA9IHtcblx0XHRcdFx0XHR0aWxlOiB0aWxlLFxuXHRcdFx0XHRcdGNvb3JkOiBjb29yZCxcblx0XHRcdFx0XHRzY2FsZTogc2NhbGUsXG5cdFx0XHRcdFx0aGFzaDogbmNvb3JkLmhhc2gsXG5cdFx0XHRcdFx0dGlsZU9mZnNldDogdGlsZU9mZnNldFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRyZW5kZXJhYmxlcy5wdXNoKHJlbmRlcmFibGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdC8vIHNvcnQgYnkgaGFzaFxuXHRcdHJlbmRlcmFibGVzLnNvcnQoc29ydEJ5SGFzaCk7XG5cdFx0cmV0dXJuIHJlbmRlcmFibGVzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHJlbmRlcmFibGVzIGZvciB0aGUgdW5kZXJseWluZyBsYXllciBhdCB0aGUgY2xvc2VzdFxuXHQgKiBhdmFpbGFibGUgTE9ELlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBvZiByZW5kZXJhYmxlcy5cblx0ICovXG5cdGdldFJlbmRlcmFibGVzTE9EKCkge1xuXHRcdGNvbnN0IHBsb3QgPSB0aGlzLmxheWVyLnBsb3Q7XG5cdFx0Y29uc3QgcHlyYW1pZCA9IHRoaXMubGF5ZXIucHlyYW1pZDtcblx0XHQvLyBnZXQgYWxsIGN1cnJlbnRseSB2aXNpYmxlIHRpbGUgY29vcmRzXG5cdFx0Y29uc3QgY29vcmRzID0gcGxvdC52aWV3cG9ydC5nZXRWaXNpYmxlQ29vcmRzKFxuXHRcdFx0cGxvdC50aWxlU2l6ZSxcblx0XHRcdHBsb3Quem9vbSxcblx0XHRcdE1hdGgucm91bmQocGxvdC56b29tKSwgLy8gZ2V0IHRpbGVzIGNsb3Nlc3QgdG8gY3VycmVudCB6b29tXG5cdFx0XHRwbG90LndyYXBhcm91bmQpO1xuXHRcdC8vIGdldCBhdmFpbGFibGUgTE9EIHJlbmRlcmFibGVzXG5cdFx0Y29uc3QgcmVuZGVyYWJsZXMgPSBbXTtcblx0XHRjb29yZHMuZm9yRWFjaChjb29yZCA9PiB7XG5cdFx0XHQvLyBjaGVjayBpZiB3ZSBoYXZlIGFueSB0aWxlIExPRCBhdmFpbGFibGVcblx0XHRcdGNvbnN0IGxvZCA9IHB5cmFtaWQuZ2V0QXZhaWxhYmxlTE9EKGNvb3JkKTtcblx0XHRcdGlmIChsb2QpIHtcblx0XHRcdFx0Y29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCBwbG90Lnpvb20gLSBjb29yZC56KTtcblx0XHRcdFx0Y29uc3QgdGlsZU9mZnNldCA9IFtcblx0XHRcdFx0XHQoY29vcmQueCAqIHNjYWxlICogcGxvdC50aWxlU2l6ZSkgLSBwbG90LnZpZXdwb3J0LngsXG5cdFx0XHRcdFx0KGNvb3JkLnkgKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpIC0gcGxvdC52aWV3cG9ydC55XG5cdFx0XHRcdF07XG5cdFx0XHRcdGNvbnN0IHJlbmRlcmFibGUgPSB7XG5cdFx0XHRcdFx0dGlsZTogbG9kLnRpbGUsXG5cdFx0XHRcdFx0Y29vcmQ6IGNvb3JkLFxuXHRcdFx0XHRcdHNjYWxlOiBzY2FsZSxcblx0XHRcdFx0XHRoYXNoOiBsb2QudGlsZS5jb29yZC5oYXNoLFxuXHRcdFx0XHRcdHRpbGVPZmZzZXQ6IHRpbGVPZmZzZXQsXG5cdFx0XHRcdFx0dXZPZmZzZXQ6IFtcblx0XHRcdFx0XHRcdGxvZC5vZmZzZXQueCxcblx0XHRcdFx0XHRcdGxvZC5vZmZzZXQueSxcblx0XHRcdFx0XHRcdGxvZC5vZmZzZXQuZXh0ZW50LFxuXHRcdFx0XHRcdFx0bG9kLm9mZnNldC5leHRlbnRcblx0XHRcdFx0XHRdXG5cdFx0XHRcdH07XG5cdFx0XHRcdHJlbmRlcmFibGVzLnB1c2gocmVuZGVyYWJsZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Ly8gc29ydCBieSBoYXNoXG5cdFx0cmVuZGVyYWJsZXMuc29ydChzb3J0QnlIYXNoKTtcblx0XHRyZXR1cm4gcmVuZGVyYWJsZXM7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXZWJHTFJlbmRlcmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkZWZhdWx0VG8gPSByZXF1aXJlKCdsb2Rhc2gvZGVmYXVsdFRvJyk7XG5jb25zdCBFdmVudFR5cGUgPSByZXF1aXJlKCcuLi8uLi9ldmVudC9FdmVudFR5cGUnKTtcbmNvbnN0IFdlYkdMUmVuZGVyZXIgPSByZXF1aXJlKCcuL1dlYkdMUmVuZGVyZXInKTtcbmNvbnN0IFRleHR1cmVBcnJheSA9IHJlcXVpcmUoJy4vdGV4dHVyZS9UZXh0dXJlQXJyYXknKTtcblxuLy8gQ29uc3RhbnRzXG5cbi8qKlxuICogQWRkIHRpbGUgaGFuZGxlciBzeW1ib2wuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFRJTEVfQUREID0gU3ltYm9sKCk7XG5cbi8qKlxuICogUmVtb3ZlIHRpbGUgaGFuZGxlciBzeW1ib2wuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFRJTEVfUkVNT1ZFID0gU3ltYm9sKCk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgdGV4dHVyZSBiYXNlZCB3ZWJnbCByZW5kZXJlci5cbiAqL1xuY2xhc3MgV2ViR0xUZXh0dXJlUmVuZGVyZXIgZXh0ZW5kcyBXZWJHTFJlbmRlcmVyIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFdlYkdMVGV4dHVyZVJlbmRlcmVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0XHR0aGlzLmZvcm1hdCA9IGRlZmF1bHRUbyhvcHRpb25zLmZvcm1hdCwgJ1JHQkEnKTtcblx0XHR0aGlzLnR5cGUgPSBkZWZhdWx0VG8ob3B0aW9ucy50eXBlLCAnVU5TSUdORURfQllURScpO1xuXHRcdHRoaXMuZmlsdGVyID0gZGVmYXVsdFRvKG9wdGlvbnMuZmlsdGVyLCAnTElORUFSJyk7XG5cdFx0dGhpcy5pbnZlcnRZID0gZGVmYXVsdFRvKG9wdGlvbnMuaW52ZXJ0WSwgZmFsc2UpO1xuXHRcdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IGRlZmF1bHRUbyhvcHRpb25zLnByZW11bHRpcGx5QWxwaGEsIGZhbHNlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlZCB3aGVuIGEgdGlsZSBpcyBhZGRlZCB0byB0aGUgbGF5ZXIgcHlyYW1pZC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlQXJyYXl9IGFycmF5IC0gVGhlIHRleHR1cmUgYXJyYXkgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1RpbGV9IHRpbGUgLSBUaGUgbmV3IHRpbGUgb2JqZWN0IGNvbnRhaW5pbmcgZGF0YS5cblx0ICovXG5cdGFkZFRpbGUoYXJyYXksIHRpbGUpIHtcblx0XHRhcnJheS5zZXQodGlsZS5jb29yZC5oYXNoLCB0aWxlLmRhdGEpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVkIHdoZW4gYSB0aWxlIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGF5ZXIgcHlyYW1pZC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlQXJyYXl9IGFycmF5IC0gVGhlIHRleHR1cmUgYXJyYXkgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1RpbGV9IHRpbGUgLSBUaGUgbmV3IHRpbGUgb2JqZWN0IGNvbnRhaW5pbmcgZGF0YS5cblx0ICovXG5cdHJlbW92ZVRpbGUoYXJyYXksIHRpbGUpIHtcblx0XHRhcnJheS5kZWxldGUodGlsZS5jb29yZC5oYXNoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgdGV4dHVyZSBhcnJheSBvZiBhcHByb3ByaWF0ZSBzaXplIGZvciB0aGUgbGF5ZXIgcHlyYW1pZCB1c2luZ1xuXHQgKiB0aGUgcHJvdmlkZWQgdGV4dHVyZSBzaXplLiBDcmVhdGVzIGFuZCBhdHRhY2hlcyB0aGUgbmVjZXNzYXJ5IGV2ZW50XG5cdCAqIGhhbmRsZXJzIHRvIGFkZCBhbmQgcmVtb3ZlIGRhdGEgZnJvbSB0aGUgYXJyYXkgYWNjb3JkaW5nbHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB0ZXh0dXJlU2l6ZSAtIFRoZSByZXNvbHV0aW9uIG9mIHRoZSB0aWxlIHRleHR1cmUuXG5cdCAqL1xuXHRjcmVhdGVUZXh0dXJlQXJyYXkodGV4dHVyZVNpemUpIHtcblx0XHQvLyBjcmVhdGUgdGV4dHVyZSBhcnJheVxuXHRcdGNvbnN0IGFycmF5ID0gbmV3IFRleHR1cmVBcnJheShcblx0XHRcdHRoaXMuZ2wsXG5cdFx0XHR0ZXh0dXJlU2l6ZSxcblx0XHRcdHtcblx0XHRcdFx0Ly8gc2V0IG51bSBjaHVua3MgdG8gYmUgYWJsZSB0byBmaXQgdGhlIGNhcGFjaXR5IG9mIHRoZSBweXJhbWlkXG5cdFx0XHRcdG51bUNodW5rczogdGhpcy5sYXllci5weXJhbWlkLnRvdGFsQ2FwYWNpdHksXG5cdFx0XHRcdC8vIHNldCB0ZXh0dXJlIGF0dHJpYnV0ZXNcblx0XHRcdFx0Zm9ybWF0OiB0aGlzLmZvcm1hdCxcblx0XHRcdFx0ZmlsdGVyOiB0aGlzLmZpbHRlcixcblx0XHRcdFx0aW52ZXJ0WTogdGhpcy5pbnZlcnRZLFxuXHRcdFx0XHRwcmVtdWx0aXBseUFscGhhOiB0aGlzLnByZW11bHRpcGx5QWxwaGFcblx0XHRcdH0pO1xuXHRcdC8vIGNyZWF0ZSBoYW5kbGVyc1xuXHRcdGNvbnN0IGFkZCA9IGV2ZW50ID0+IHtcblx0XHRcdHRoaXMuYWRkVGlsZShhcnJheSwgZXZlbnQudGlsZSk7XG5cdFx0fTtcblx0XHRjb25zdCByZW1vdmUgPSBldmVudCA9PiB7XG5cdFx0XHR0aGlzLnJlbW92ZVRpbGUoYXJyYXksIGV2ZW50LnRpbGUpO1xuXHRcdH07XG5cdFx0Ly8gYXR0YWNoIGhhbmRsZXJzXG5cdFx0dGhpcy5sYXllci5vbihFdmVudFR5cGUuVElMRV9BREQsIGFkZCk7XG5cdFx0dGhpcy5sYXllci5vbihFdmVudFR5cGUuVElMRV9SRU1PVkUsIHJlbW92ZSk7XG5cdFx0Ly8gc3RvcmUgdGhlIGhhbmRsZXJzIHVuZGVyIHRoZSBhcnJheVxuXHRcdGNvbnN0IGhhbmRsZXJzID0gbmV3IE1hcChbXG5cdFx0XHRbIFRJTEVfQURELCBhZGQgXSxcblx0XHRcdFsgVElMRV9SRU1PVkUsIHJlbW92ZSBdXG5cdFx0XSk7XG5cdFx0dGhpcy5oYW5kbGVycy5zZXQoYXJyYXksIGhhbmRsZXJzKTtcblx0XHQvLyByZXR1cm4gdGhlIGFycmF5XG5cdFx0cmV0dXJuIGFycmF5O1xuXHR9XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIGEgdGV4dHVyZSBhcnJheSBvYmplY3QgYW5kIHJlbW92ZXMgYWxsIGV2ZW50IGhhbmRsZXJzIHVzZWQgdG9cblx0ICogYWRkIGFuZCByZW1vdmUgZGF0YSBmcm9tIHRoZSBhcnJheS5cblx0ICovXG5cdGRlc3Ryb3lUZXh0dXJlQXJyYXkoYXJyYXkpIHtcblx0XHQvLyBnZXQgaGFuZGxlcnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBhcnJheVxuXHRcdGNvbnN0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5nZXQoYXJyYXkpO1xuXHRcdC8vIGRldGFjaCBoYW5kbGVyc1xuXHRcdHRoaXMubGF5ZXIucmVtb3ZlTGlzdGVuZXIoRXZlbnRUeXBlLlRJTEVfQURELCBoYW5kbGVycy5nZXQoVElMRV9BREQpKTtcblx0XHR0aGlzLmxheWVyLnJlbW92ZUxpc3RlbmVyKEV2ZW50VHlwZS5USUxFX1JFTU9WRSwgaGFuZGxlcnMuZ2V0KFRJTEVfUkVNT1ZFKSk7XG5cdFx0Ly8gZGVzdHJveSBoYW5kbGVyc1xuXHRcdHRoaXMuaGFuZGxlcnMuZGVsZXRlKGFycmF5KTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYkdMVGV4dHVyZVJlbmRlcmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkZWZhdWx0VG8gPSByZXF1aXJlKCdsb2Rhc2gvZGVmYXVsdFRvJyk7XG5jb25zdCBFdmVudFR5cGUgPSByZXF1aXJlKCcuLi8uLi9ldmVudC9FdmVudFR5cGUnKTtcbmNvbnN0IFdlYkdMUmVuZGVyZXIgPSByZXF1aXJlKCcuL1dlYkdMUmVuZGVyZXInKTtcbmNvbnN0IFZlcnRleEF0bGFzID0gcmVxdWlyZSgnLi92ZXJ0ZXgvVmVydGV4QXRsYXMnKTtcblxuLy8gQ29uc3RhbnRzXG5cbi8qKlxuICogQWRkIHRpbGUgaGFuZGxlciBzeW1ib2wuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFRJTEVfQUREID0gU3ltYm9sKCk7XG5cbi8qKlxuICogUmVtb3ZlIHRpbGUgaGFuZGxlciBzeW1ib2wuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFRJTEVfUkVNT1ZFID0gU3ltYm9sKCk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgdmVydGV4IGJhc2VkIHdlYmdsIHJlbmRlcmVyLlxuICovXG5jbGFzcyBXZWJHTFZlcnRleFJlbmRlcmVyIGV4dGVuZHMgV2ViR0xSZW5kZXJlciB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlcyBhIG5ldyBXZWJHTFZlcnRleFJlbmRlcmVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IG9wdGlvbnMubWF4VmVydGljZXMgLSBUaGUgbWF4IG51bWJlciBvZiB2ZXJ0aWNlcyBwZXIgdGlsZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHRcdHRoaXMubWF4VmVydGljZXMgPSBkZWZhdWx0VG8ob3B0aW9ucy5tYXhWZXJ0aWNlcywgMTI4ICogMTI4KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlZCB3aGVuIGEgdGlsZSBpcyBhZGRlZCB0byB0aGUgbGF5ZXIgcHlyYW1pZC5cblx0ICpcblx0ICogQHBhcmFtIHtWZXJ0ZXhBdGxhc30gYXRsYXMgLSBUaGUgdmVydGV4IGF0bGFzIG9iamVjdC5cblx0ICogQHBhcmFtIHtUaWxlfSB0aWxlIC0gVGhlIG5ldyB0aWxlIG9iamVjdCBjb250YWluaW5nIGRhdGEuXG5cdCAqL1xuXHRhZGRUaWxlKGF0bGFzLCB0aWxlKSB7XG5cdFx0YXRsYXMuc2V0KFxuXHRcdFx0dGlsZS5jb29yZC5oYXNoLFxuXHRcdFx0dGlsZS5kYXRhLFxuXHRcdFx0dGlsZS5kYXRhLmxlbmd0aCAvIGF0bGFzLnN0cmlkZSk7XG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2hlbiBhIHRpbGUgaXMgcmVtb3ZlZCBmcm9tIHRoZSBsYXllciBweXJhbWlkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlcnRleEF0bGFzfSBhdGxhcyAtIFRoZSB2ZXJ0ZXggYXRsYXMgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1RpbGV9IHRpbGUgLSBUaGUgbmV3IHRpbGUgb2JqZWN0IGNvbnRhaW5pbmcgZGF0YS5cblx0ICovXG5cdHJlbW92ZVRpbGUoYXRsYXMsIHRpbGUpIHtcblx0XHRhdGxhcy5kZWxldGUodGlsZS5jb29yZC5oYXNoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgdmVydGV4IGF0bGFzIG9mIGFwcHJvcHJpYXRlIHNpemUgZm9yIHRoZSBsYXllciBweXJhbWlkIHVzaW5nXG5cdCAqIHRoZSBwcm92aWRlZCBhdHRyaWJ1dGUgcG9pbnRlcnMuIENyZWF0ZXMgYW5kIGF0dGFjaGVzIHRoZSBuZWNlc3Nhcnlcblx0ICogZXZlbnQgaGFuZGxlcnMgdG8gYWRkIGFuZCByZW1vdmUgZGF0YSBmcm9tIHRoZSBhdGxhcyBhY2NvcmRpbmdseS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJzIC0gVGhlIHZlcnRleCBhdHRyaWJ1dGUgcG9pbnRlcnMuXG5cdCAqL1xuXHRjcmVhdGVWZXJ0ZXhBdGxhcyhwb2ludGVycykge1xuXHRcdC8vIGNyZWF0ZSB2ZXJ0ZXggYXRsYXNcblx0XHRjb25zdCBhdGxhcyA9IG5ldyBWZXJ0ZXhBdGxhcyhcblx0XHRcdHRoaXMuZ2wsXG5cdFx0XHRwb2ludGVycywge1xuXHRcdFx0XHQvLyBzZXQgbnVtIGNodW5rcyB0byBiZSBhYmxlIHRvIGZpdCB0aGUgY2FwYWNpdHkgb2YgdGhlIHB5cmFtaWRcblx0XHRcdFx0bnVtQ2h1bmtzOiB0aGlzLmxheWVyLnB5cmFtaWQudG90YWxDYXBhY2l0eSxcblx0XHRcdFx0Y2h1bmtTaXplOiB0aGlzLm1heFZlcnRpY2VzXG5cdFx0XHR9KTtcblx0XHQvLyBjcmVhdGUgaGFuZGxlcnNcblx0XHRjb25zdCBhZGQgPSBldmVudCA9PiB7XG5cdFx0XHR0aGlzLmFkZFRpbGUoYXRsYXMsIGV2ZW50LnRpbGUpO1xuXHRcdH07XG5cdFx0Y29uc3QgcmVtb3ZlID0gZXZlbnQgPT4ge1xuXHRcdFx0dGhpcy5yZW1vdmVUaWxlKGF0bGFzLCBldmVudC50aWxlKTtcblx0XHR9O1xuXHRcdC8vIGF0dGFjaCBoYW5kbGVyc1xuXHRcdHRoaXMubGF5ZXIub24oRXZlbnRUeXBlLlRJTEVfQURELCBhZGQpO1xuXHRcdHRoaXMubGF5ZXIub24oRXZlbnRUeXBlLlRJTEVfUkVNT1ZFLCByZW1vdmUpO1xuXHRcdC8vIHN0b3JlIHRoZSBoYW5kbGVycyB1bmRlciB0aGUgYXRsYXNcblx0XHRjb25zdCBoYW5kbGVycyA9IG5ldyBNYXAoW1xuXHRcdFx0WyBUSUxFX0FERCwgYWRkIF0sXG5cdFx0XHRbIFRJTEVfUkVNT1ZFLCByZW1vdmUgXVxuXHRcdF0pO1xuXHRcdHRoaXMuaGFuZGxlcnMuc2V0KGF0bGFzLCBoYW5kbGVycyk7XG5cdFx0cmV0dXJuIGF0bGFzO1xuXHR9XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIGEgdmVydGV4IGF0bGFzIG9iamVjdCBhbmQgcmVtb3ZlcyBhbGwgZXZlbnQgaGFuZGxlcnMgdXNlZCB0byBhZGRcblx0ICogYW5kIHJlbW92ZSBkYXRhIGZyb20gdGhlIGF0bGFzLlxuXHQgKi9cblx0ZGVzdHJveVZlcnRleEF0bGFzKGF0bGFzKSB7XG5cdFx0Ly8gZ2V0IGhhbmRsZXJzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXRsYXNcblx0XHRjb25zdCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnMuZ2V0KGF0bGFzKTtcblx0XHQvLyBkZXRhY2ggaGFuZGxlcnNcblx0XHR0aGlzLmxheWVyLnJlbW92ZUxpc3RlbmVyKEV2ZW50VHlwZS5USUxFX0FERCwgaGFuZGxlcnMuZ2V0KFRJTEVfQUREKSk7XG5cdFx0dGhpcy5sYXllci5yZW1vdmVMaXN0ZW5lcihFdmVudFR5cGUuVElMRV9SRU1PVkUsIGhhbmRsZXJzLmdldChUSUxFX1JFTU9WRSkpO1xuXHRcdC8vIGRlc3Ryb3kgaGFuZGxlcnNcblx0XHR0aGlzLmhhbmRsZXJzLmRlbGV0ZShhdGxhcyk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXZWJHTFZlcnRleFJlbmRlcmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0LyoqXG5cdCAqIEEgY2lyY2xlIGNvbGxpc2lvbiBwcmltaXRpdmUuXG5cdCAqIEBjb25zdGFudCB7U3RyaW5nfVxuXHQgKi9cblx0Q0lSQ0xFOiAnY2lyY2xlJyxcblxuXHQvKipcblx0ICogQSByZWN0YW5nbGUgY29sbGlzaW9uIHByaW1pdGl2ZS5cblx0ICogQGNvbnN0YW50IHtTdHJpbmd9XG5cdCAqL1xuXHRSRUNUQU5HTEU6ICdyZWN0YW5nbGUnLFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcmJ1c2ggPSByZXF1aXJlKCdyYnVzaCcpO1xuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgQ29sbGlzaW9uVHlwZSA9IHJlcXVpcmUoJy4vQ29sbGlzaW9uVHlwZScpO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhbiByLXRyZWUuXG4gKi9cbmNsYXNzIFJUcmVlIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFJUcmVlIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5jb2xsaXNpb25UeXBlIC0gVGhlIGNvbGxpc2lvbiB0eXBlIG9mIHRoZSBjb2xsaWRhYmxlcy5cblx0ICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLm5vZGVDYXBhY2l0eSAtIFRoZSBub2RlIGNhcGFjaXR5IG9mIHRoZSByLXRyZWUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0dGhpcy5jb2xsaXNpb25UeXBlID0gZGVmYXVsdFRvKG9wdGlvbnMuY29sbGlzaW9uVHlwZSwgQ29sbGlzaW9uVHlwZS5DSVJDTEUpO1xuXHRcdHRoaXMudHJlZSA9IHJidXNoKGRlZmF1bHRUbyhvcHRpb25zLm5vZGVDYXBhY2l0eSwgMzIpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbnNlcnRzIGFuIGFycmF5IG9mIGNvbGxpZGFibGVzIGludG8gdGhlIHItdHJlZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheX0gY29sbGlkYWJsZXMgLSBUaGUgYXJyYXkgb2YgY29sbGlkYWJsZXMgdG8gaW5zZXJ0LlxuXHQgKi9cblx0aW5zZXJ0KGNvbGxpZGFibGVzKSB7XG5cdFx0dGhpcy50cmVlLmxvYWQoY29sbGlkYWJsZXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYW4gYXJyYXkgb2YgY29sbGlkYWJsZXMgZnJvbSB0aGUgci10cmVlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5fSBjb2xsaWRhYmxlcyAtIFRoZSBhcnJheSBvZiBjb2xsaWRhYmxlcyB0byByZW1vdmUuXG5cdCAqL1xuXHRyZW1vdmUoY29sbGlkYWJsZXMpIHtcblx0XHRjb25zdCB0cmVlID0gdGhpcy50cmVlO1xuXHRcdGZvciAobGV0IGk9MDsgaTxjb2xsaWRhYmxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dHJlZS5yZW1vdmUoY29sbGlkYWJsZXNbaV0pO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTZWFyY2hzIHRoZSByLXRyZWUgdXNpbmcgYSBwb2ludC5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHggLSBUaGUgeCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gVGhlIHkgY29tcG9uZW50LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY29sbGlzaW9uIG9iamVjdC5cblx0ICovXG5cdHNlYXJjaFBvaW50KHgsIHkpIHtcblx0XHRjb25zdCBjb2xsaXNpb25zID0gdGhpcy50cmVlLnNlYXJjaCh7XG5cdFx0XHRtaW5YOiB4LFxuXHRcdFx0bWF4WDogeCxcblx0XHRcdG1pblk6IHksXG5cdFx0XHRtYXhZOiB5XG5cdFx0fSk7XG5cdFx0aWYgKGNvbGxpc2lvbnMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY29sbGlzaW9uVHlwZSA9PT0gQ29sbGlzaW9uVHlwZS5SRUNUQU5HTEUpIHtcblx0XHRcdC8vIHJlY3RhbmdsZSwgcmV0dXJuIHJlc3VsdCBhcyBpc1xuXHRcdFx0cmV0dXJuIGNvbGxpc2lvbnNbMF07XG5cdFx0fVxuXHRcdC8vIGRvIGEgY2lyY2xlIC0gcG9pbnQgY2hlY2tcblx0XHRmb3IgKGxldCBpPTA7IGk8Y29sbGlzaW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY29sbGlzaW9uID0gY29sbGlzaW9uc1tpXTtcblx0XHRcdC8vIGRpc3RhbmNlIHRvIGNlbnRlciBvZiBzcXVhcmVcblx0XHRcdGNvbnN0IGN4ID0gKGNvbGxpc2lvbi5taW5YICsgY29sbGlzaW9uLm1heFgpICogMC41O1xuXHRcdFx0Y29uc3QgY3kgPSAoY29sbGlzaW9uLm1pblkgKyBjb2xsaXNpb24ubWF4WSkgKiAwLjU7XG5cdFx0XHRjb25zdCBkeCA9IGN4IC0geDtcblx0XHRcdGNvbnN0IGR5ID0gY3kgLSB5O1xuXHRcdFx0Ly8gYXNzdW1lIHRoZSBib3hlcyBhcmUgc3F1YXJlc1xuXHRcdFx0Y29uc3QgcmFkaXVzID0gY3g7XG5cdFx0XHRpZiAoKGR4ICogZHggKyBkeSAqIGR5KSA8PSAocmFkaXVzICogcmFkaXVzKSkge1xuXHRcdFx0XHRyZXR1cm4gY29sbGlzaW9uO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZWFyY2hzIHRoZSByLXRyZWUgdXNpbmcgYSByZWN0YW5nbGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBtaW5YIC0gVGhlIG1pbmltdW0geCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBtYXhYIC0gVGhlIG1heGltdW0geCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBtaW5ZIC0gVGhlIG1pbmltdW0geCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBtYXhZIC0gVGhlIG1heGltdW0geCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gVGhlIHkgY29tcG9uZW50LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY29sbGlzaW9uIG9iamVjdC5cblx0ICovXG5cdHNlYXJjaFJlY3RhbmdsZShtaW5YLCBtYXhYLCBtaW5ZLCBtYXhZKSB7XG5cdFx0Y29uc3QgY29sbGlzaW9ucyA9IHRoaXMudHJlZS5zZWFyY2goe1xuXHRcdFx0bWluWDogbWluWCxcblx0XHRcdG1heFg6IG1heFgsXG5cdFx0XHRtaW5ZOiBtaW5ZLFxuXHRcdFx0bWF4WTogbWF4WVxuXHRcdH0pO1xuXHRcdGlmIChjb2xsaXNpb25zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmNvbGxpc2lvblR5cGUgPT09IENvbGxpc2lvblR5cGUuUkVDVEFOR0xFKSB7XG5cdFx0XHQvLyByZWN0YW5nbGUsIHJldHVybiByZXN1bHQgYXMgaXNcblx0XHRcdHJldHVybiBjb2xsaXNpb25zWzBdO1xuXHRcdH1cblxuXHRcdC8vIGdldCByZWN0IGhhbGYgd2lkdGggLyBoZWlnaHRcblx0XHRjb25zdCBoYWxmV2lkdGggPSAobWluWCArIG1heFgpICogMC41O1xuXHRcdGNvbnN0IGhhbGZIZWlnaHQgPSAobWluWSArIG1heFkpICogMC41O1xuXG5cdFx0Ly8gZG8gYSBjaXJjbGUgLSByZWN0YW5nbGUgY2hlY2tcblx0XHRmb3IgKGxldCBpPTA7IGk8Y29sbGlzaW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY29sbGlzaW9uID0gY29sbGlzaW9uc1tpXTtcblx0XHRcdC8vIGNpcmNsZSBwb3NpdGlvblxuXHRcdFx0Y29uc3QgY2lyY2xlWCA9IChjb2xsaXNpb24ubWluWCArIGNvbGxpc2lvbi5tYXhYKSAqIDAuNTtcblx0XHRcdGNvbnN0IGNpcmNsZVkgPSAoY29sbGlzaW9uLm1pblkgKyBjb2xsaXNpb24ubWF4WSkgKiAwLjU7XG5cdFx0XHQvLyBkaXN0YW5jZSBmcm9tIHJlY3RhbmdsZSBib3R0b20tbGVmdFxuXHRcdFx0Y29uc3QgZHggPSBNYXRoLmFicyhjaXJjbGVYIC0gbWluWCk7XG5cdFx0XHRjb25zdCBkeSA9IE1hdGguYWJzKGNpcmNsZVkgLSBtaW5ZKTtcblx0XHRcdC8vIGFzc3VtZSB0aGUgYm94ZXMgYXJlIHNxdWFyZXNcblx0XHRcdGNvbnN0IHJhZGl1cyA9IGNvbGxpc2lvbi5taW5YICsgY29sbGlzaW9uLm1heFg7XG5cdFx0XHRpZiAoKGR4ID4gKGhhbGZXaWR0aCArIHJhZGl1cykpIHx8XG5cdFx0XHRcdChkeSA+IChoYWxmSGVpZ2h0ICsgcmFkaXVzKSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKChkeCA8PSAoaGFsZldpZHRoKSkgfHwgKGR5IDw9IChoYWxmSGVpZ2h0KSkpIHtcblx0XHRcdFx0cmV0dXJuIGNvbGxpc2lvbjtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGNvcm5lckRpc3QgPVxuXHRcdFx0XHRNYXRoLnBvdygyLCBkeCAtIGhhbGZXaWR0aCkgK1xuXHRcdFx0XHRNYXRoLnBvdygyLCBkeSAtIGhhbGZIZWlnaHQpO1xuXHRcdFx0aWYgKGNvcm5lckRpc3QgPD0gKHJhZGl1cyAqIHJhZGl1cykpIHtcblx0XHRcdFx0cmV0dXJuIGNvbGxpc2lvbjtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSVHJlZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbWFwID0gcmVxdWlyZSgnbG9kYXNoL21hcCcpO1xuY29uc3QgcGFyc2VTaGFkZXIgPSByZXF1aXJlKCcuL3BhcnNlU2hhZGVyJyk7XG5cbi8vIENvbnN0YW50c1xuXG5jb25zdCBVTklGT1JNX0ZVTkNUSU9OUyA9IHtcblx0J2Jvb2wnOiAndW5pZm9ybTFpJyxcblx0J2Jvb2xbXSc6ICd1bmlmb3JtMWl2Jyxcblx0J2Zsb2F0JzogJ3VuaWZvcm0xZicsXG5cdCdmbG9hdFtdJzogJ3VuaWZvcm0xZnYnLFxuXHQnaW50JzogJ3VuaWZvcm0xaScsXG5cdCdpbnRbXSc6ICd1bmlmb3JtMWl2Jyxcblx0J3VpbnQnOiAndW5pZm9ybTFpJyxcblx0J3VpbnRbXSc6ICd1bmlmb3JtMWl2Jyxcblx0J3ZlYzInOiAndW5pZm9ybTJmdicsXG5cdCd2ZWMyW10nOiAndW5pZm9ybTJmdicsXG5cdCdpdmVjMic6ICd1bmlmb3JtMml2Jyxcblx0J2l2ZWMyW10nOiAndW5pZm9ybTJpdicsXG5cdCd2ZWMzJzogJ3VuaWZvcm0zZnYnLFxuXHQndmVjM1tdJzogJ3VuaWZvcm0zZnYnLFxuXHQnaXZlYzMnOiAndW5pZm9ybTNpdicsXG5cdCdpdmVjM1tdJzogJ3VuaWZvcm0zaXYnLFxuXHQndmVjNCc6ICd1bmlmb3JtNGZ2Jyxcblx0J3ZlYzRbXSc6ICd1bmlmb3JtNGZ2Jyxcblx0J2l2ZWM0JzogJ3VuaWZvcm00aXYnLFxuXHQnaXZlYzRbXSc6ICd1bmlmb3JtNGl2Jyxcblx0J21hdDInOiAndW5pZm9ybU1hdHJpeDJmdicsXG5cdCdtYXQyW10nOiAndW5pZm9ybU1hdHJpeDJmdicsXG5cdCdtYXQzJzogJ3VuaWZvcm1NYXRyaXgzZnYnLFxuXHQnbWF0M1tdJzogJ3VuaWZvcm1NYXRyaXgzZnYnLFxuXHQnbWF0NCc6ICd1bmlmb3JtTWF0cml4NGZ2Jyxcblx0J21hdDRbXSc6ICd1bmlmb3JtTWF0cml4NGZ2Jyxcblx0J3NhbXBsZXIyRCc6ICd1bmlmb3JtMWknLFxuXHQnc2FtcGxlckN1YmUnOiAndW5pZm9ybTFpJ1xufTtcblxuLy8gUHJpdmF0ZSBNZXRob2RzXG5cbmNvbnN0IHNldEF0dHJpYnV0ZXNBbmRVbmlmb3JtcyA9IGZ1bmN0aW9uKHNoYWRlciwgdmVydFNvdXJjZSwgZnJhZ1NvdXJjZSkge1xuXHQvLyBwYXJzZSBzaGFkZXIgZGVsY2FyYXRpb25zXG5cdGNvbnN0IGRlY2xhcmF0aW9ucyA9IHBhcnNlU2hhZGVyKFxuXHRcdFsgdmVydFNvdXJjZSwgZnJhZ1NvdXJjZSBdLFxuXHRcdFsgJ3VuaWZvcm0nLCAnYXR0cmlidXRlJyBdKTtcblx0Ly8gZm9yIGVhY2ggZGVjbGFyYXRpb24gaW4gdGhlIHNoYWRlclxuXHRkZWNsYXJhdGlvbnMuZm9yRWFjaChkZWNsYXJhdGlvbiA9PiB7XG5cdFx0Ly8gY2hlY2sgaWYgaXRzIGFuIGF0dHJpYnV0ZSBvciB1bmlmb3JtXG5cdFx0aWYgKGRlY2xhcmF0aW9uLnF1YWxpZmllciA9PT0gJ2F0dHJpYnV0ZScpIHtcblx0XHRcdC8vIGlmIGF0dHJpYnV0ZSwgc3RvcmUgdHlwZSBhbmQgaW5kZXhcblx0XHRcdHNoYWRlci5hdHRyaWJ1dGVzLnNldChkZWNsYXJhdGlvbi5uYW1lLCB7XG5cdFx0XHRcdHR5cGU6IGRlY2xhcmF0aW9uLnR5cGUsXG5cdFx0XHRcdGluZGV4OiBzaGFkZXIuYXR0cmlidXRlcy5zaXplXG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgeyAvLyBpZiAoZGVjbGFyYXRpb24ucXVhbGlmaWVyID09PSAndW5pZm9ybScpIHtcblx0XHRcdC8vIGlmIHVuaWZvcm0sIHN0b3JlIHR5cGUgYW5kIGJ1ZmZlciBmdW5jdGlvbiBuYW1lXG5cdFx0XHRjb25zdCB0eXBlID0gZGVjbGFyYXRpb24udHlwZSArIChkZWNsYXJhdGlvbi5jb3VudCA+IDEgPyAnW10nIDogJycpO1xuXHRcdFx0c2hhZGVyLnVuaWZvcm1zLnNldChkZWNsYXJhdGlvbi5uYW1lLCB7XG5cdFx0XHRcdHR5cGU6IGRlY2xhcmF0aW9uLnR5cGUsXG5cdFx0XHRcdGZ1bmM6IFVOSUZPUk1fRlVOQ1RJT05TW3R5cGVdXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xufTtcblxuY29uc3QgY29tcGlsZVNoYWRlciA9IGZ1bmN0aW9uKGdsLCBzaGFkZXJTb3VyY2UsIHR5cGUpIHtcblx0Y29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsW3R5cGVdKTtcblx0Z2wuc2hhZGVyU291cmNlKHNoYWRlciwgc2hhZGVyU291cmNlKTtcblx0Z2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuXHRpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuXHRcdHRocm93IGBBbiBlcnJvciBvY2N1cnJlZCBjb21waWxpbmcgdGhlIHNoYWRlcjpcXG4ke2dsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKX1gO1xuXHR9XG5cdHJldHVybiBzaGFkZXI7XG59O1xuXG5jb25zdCBiaW5kQXR0cmlidXRlTG9jYXRpb25zID0gZnVuY3Rpb24oc2hhZGVyKSB7XG5cdGNvbnN0IGdsID0gc2hhZGVyLmdsO1xuXHRzaGFkZXIuYXR0cmlidXRlcy5mb3JFYWNoKChhdHRyaWJ1dGUsIG5hbWUpID0+IHtcblx0XHQvLyBiaW5kIHRoZSBhdHRyaWJ1dGUgbG9jYXRpb25cblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oc2hhZGVyLnByb2dyYW0sIGF0dHJpYnV0ZS5pbmRleCwgbmFtZSk7XG5cdH0pO1xufTtcblxuY29uc3QgZ2V0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uKHNoYWRlcikge1xuXHRjb25zdCBnbCA9IHNoYWRlci5nbDtcblx0Y29uc3QgdW5pZm9ybXMgPSBzaGFkZXIudW5pZm9ybXM7XG5cdHVuaWZvcm1zLmZvckVhY2goKHVuaWZvcm0sIG5hbWUpID0+IHtcblx0XHQvLyBnZXQgdGhlIHVuaWZvcm0gbG9jYXRpb25cblx0XHRjb25zdCBsb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXIucHJvZ3JhbSwgbmFtZSk7XG5cdFx0Ly8gY2hlY2sgaWYgbnVsbCwgcGFyc2UgbWF5IGRldGVjdCB1bmlmb3JtIHRoYXQgaXMgY29tcGlsZWQgb3V0XG5cdFx0Ly8gZHVlIHRvIGEgcHJlcHJvY2Vzc29yIGV2YWx1YXRpb24uXG5cdFx0Ly8gVE9ETzogZml4IHBhcnNlciBzbyB0aGF0IGl0IGV2YWx1YXRlcyB0aGVzZSBjb3JyZWN0bHkuXG5cdFx0aWYgKGxvY2F0aW9uID09PSBudWxsKSB7XG5cdFx0XHR1bmlmb3Jtcy5kZWxldGUobmFtZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHVuaWZvcm0ubG9jYXRpb24gPSBsb2NhdGlvbjtcblx0XHR9XG5cdH0pO1xufTtcblxuY29uc3QgY3JlYXRlRGVmaW5lcyA9IGZ1bmN0aW9uKGRlZmluZXMpIHtcblx0cmV0dXJuIG1hcChkZWZpbmVzLCAodmFsdWUsIG5hbWUpID0+IHtcblx0XHRyZXR1cm4gYCNkZWZpbmUgJHtuYW1lfSAke3ZhbHVlfWA7XG5cdH0pLmpvaW4oJ1xcbicpO1xufTtcblxuY29uc3QgY3JlYXRlUHJvZ3JhbSA9IGZ1bmN0aW9uKHNoYWRlciwgc291cmNlcykge1xuXHQvLyBDcmVhdGVzIHRoZSBzaGFkZXIgcHJvZ3JhbSBvYmplY3QgZnJvbSBzb3VyY2Ugc3RyaW5ncy4gVGhpcyBpbmNsdWRlczpcblx0Ly9cdDEpIENvbXBpbGluZyBhbmQgbGlua2luZyB0aGUgc2hhZGVyIHByb2dyYW0uXG5cdC8vXHQyKSBQYXJzaW5nIHNoYWRlciBzb3VyY2UgZm9yIGF0dHJpYnV0ZSBhbmQgdW5pZm9ybSBpbmZvcm1hdGlvbi5cblx0Ly9cdDMpIEJpbmRpbmcgYXR0cmlidXRlIGxvY2F0aW9ucywgYnkgb3JkZXIgb2YgZGVsY2FyYXRpb24uXG5cdC8vXHQ0KSBRdWVyeWluZyBhbmQgc3RvcmluZyB1bmlmb3JtIGxvY2F0aW9uLlxuXHRjb25zdCBnbCA9IHNoYWRlci5nbDtcblx0Y29uc3QgZGVmaW5lcyA9IGNyZWF0ZURlZmluZXMoc291cmNlcy5kZWZpbmUpO1xuXHRjb25zdCBjb21tb24gPSBkZWZpbmVzICsgKHNvdXJjZXMuY29tbW9uIHx8ICcnKTtcblx0Y29uc3QgdmVydCA9IGNvbW1vbiArIHNvdXJjZXMudmVydDtcblx0Y29uc3QgZnJhZyA9IGNvbW1vbiArIHNvdXJjZXMuZnJhZztcblx0Ly8gY29tcGlsZSBzaGFkZXJzXG5cdGNvbnN0IHZlcnRleFNoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIHZlcnQsICdWRVJURVhfU0hBREVSJyk7XG5cdGNvbnN0IGZyYWdtZW50U2hhZGVyID0gY29tcGlsZVNoYWRlcihnbCwgZnJhZywgJ0ZSQUdNRU5UX1NIQURFUicpO1xuXHQvLyBwYXJzZSBzb3VyY2UgZm9yIGF0dHJpYnV0ZSBhbmQgdW5pZm9ybXNcblx0c2V0QXR0cmlidXRlc0FuZFVuaWZvcm1zKHNoYWRlciwgdmVydCwgZnJhZyk7XG5cdC8vIGNyZWF0ZSB0aGUgc2hhZGVyIHByb2dyYW1cblx0c2hhZGVyLnByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cdC8vIGF0dGFjaCB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlcnNcblx0Z2wuYXR0YWNoU2hhZGVyKHNoYWRlci5wcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuXHRnbC5hdHRhY2hTaGFkZXIoc2hhZGVyLnByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcblx0Ly8gYmluZCB2ZXJ0ZXggYXR0cmlidXRlIGxvY2F0aW9ucyBCRUZPUkUgbGlua2luZ1xuXHRiaW5kQXR0cmlidXRlTG9jYXRpb25zKHNoYWRlcik7XG5cdC8vIGxpbmsgc2hhZGVyXG5cdGdsLmxpbmtQcm9ncmFtKHNoYWRlci5wcm9ncmFtKTtcblx0Ly8gSWYgY3JlYXRpbmcgdGhlIHNoYWRlciBwcm9ncmFtIGZhaWxlZCwgYWxlcnRcblx0aWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHNoYWRlci5wcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcblx0XHR0aHJvdyBgQW4gZXJyb3Igb2NjdXJlZCBsaW5raW5nIHRoZSBzaGFkZXI6XFxuJHtnbC5nZXRQcm9ncmFtSW5mb0xvZyhzaGFkZXIucHJvZ3JhbSl9YDtcblx0fVxuXHQvLyBnZXQgc2hhZGVyIHVuaWZvcm0gbG9jYXRpb25zXG5cdGdldFVuaWZvcm1Mb2NhdGlvbnMoc2hhZGVyKTtcbn07XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgc2hhZGVyIHByb2dyYW0uXG4gKi9cbmNsYXNzIFNoYWRlciB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlcyBhIFNoYWRlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFRoZSBXZWJHTCBjb250ZXh0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gVGhlIHNoYWRlciBwYXJhbXMgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1zLmNvbW1vbiAtIENvbW1vbiBnbHNsIHRvIGJlIHNoYXJlZCBieSBib3RoIHZlcnRleCBhbmQgZnJhZ21lbnQgc2hhZGVycy5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtcy52ZXJ0IC0gVGhlIHZlcnRleCBzaGFkZXIgZ2xzbC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtcy5mcmFnIC0gVGhlIGZyYWdtZW50IHNoYWRlciBnbHNsLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zLmRlZmluZSAtIEFueSAjZGVmaW5lIGRpcmVjdGl2ZXMgdG8gaW5jbHVkZSBpbiB0aGUgZ2xzbC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKGdsLCBwYXJhbXMgPSB7fSkge1xuXHRcdC8vIGNoZWNrIHNvdXJjZSBhcmd1bWVudHNcblx0XHRpZiAoIXBhcmFtcy52ZXJ0KSB7XG5cdFx0XHR0aHJvdyAnVmVydGV4IHNoYWRlciBhcmd1bWVudCBgdmVydGAgaGFzIG5vdCBiZWVuIHByb3ZpZGVkJztcblx0XHR9XG5cdFx0aWYgKCFwYXJhbXMuZnJhZykge1xuXHRcdFx0dGhyb3cgJ0ZyYWdtZW50IHNoYWRlciBhcmd1bWVudCBgZnJhZ2AgaGFzIG5vdCBiZWVuIHByb3ZpZGVkJztcblx0XHR9XG5cdFx0dGhpcy5nbCA9IGdsO1xuXHRcdHRoaXMucHJvZ3JhbSA9IG51bGw7XG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMudW5pZm9ybXMgPSBuZXcgTWFwKCk7XG5cdFx0Ly8gY3JlYXRlIHRoZSBzaGFkZXIgcHJvZ3JhbVxuXHRcdGNyZWF0ZVByb2dyYW0odGhpcywgcGFyYW1zKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaW5kcyB0aGUgc2hhZGVyIHByb2dyYW0gZm9yIHVzZS5cblx0ICpcblx0ICogQHJldHVybiB7U2hhZGVyfSBUaGUgc2hhZGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0dXNlKCkge1xuXHRcdC8vIHVzZSB0aGUgc2hhZGVyXG5cdFx0dGhpcy5nbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQnVmZmVyIGEgdW5pZm9ybSB2YWx1ZSBieSBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIFRoZSB1bmlmb3JtIG5hbWUgaW4gdGhlIHNoYWRlciBzb3VyY2UuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdW5pZm9ybSB2YWx1ZSB0byBidWZmZXIuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1NoYWRlcn0gLSBUaGUgc2hhZGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0c2V0VW5pZm9ybShuYW1lLCB2YWx1ZSkge1xuXHRcdGNvbnN0IHVuaWZvcm0gPSB0aGlzLnVuaWZvcm1zLmdldChuYW1lKTtcblx0XHQvLyBlbnN1cmUgdGhhdCB0aGUgdW5pZm9ybSBwYXJhbXMgZXhpc3RzIGZvciB0aGUgbmFtZVxuXHRcdGlmICghdW5pZm9ybSkge1xuXHRcdFx0dGhyb3cgYE5vIHVuaWZvcm0gZm91bmQgdW5kZXIgbmFtZSBcXGAke25hbWV9XFxgYDtcblx0XHR9XG5cdFx0Ly8gY2hlY2sgdmFsdWVcblx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gZW5zdXJlIHRoYXQgdGhlIHVuaWZvcm0gYXJndW1lbnQgaXMgZGVmaW5lZFxuXHRcdFx0dGhyb3cgYFZhbHVlIHBhc3NlZCBmb3IgdW5pZm9ybSBcXGAke25hbWV9XFxgIGlzIHVuZGVmaW5lZCBvciBudWxsYDtcblx0XHR9XG5cdFx0Ly8gc2V0IHRoZSB1bmlmb3JtXG5cdFx0Ly8gTk9URTogY2hlY2tpbmcgdHlwZSBieSBzdHJpbmcgY29tcGFyaXNvbiBpcyBmYXN0ZXIgdGhhbiB3cmFwcGluZ1xuXHRcdC8vIHRoZSBmdW5jdGlvbnMuXG5cdFx0aWYgKHVuaWZvcm0udHlwZSA9PT0gJ21hdDInIHx8IHVuaWZvcm0udHlwZSA9PT0gJ21hdDMnIHx8IHVuaWZvcm0udHlwZSA9PT0gJ21hdDQnKSB7XG5cdFx0XHR0aGlzLmdsW3VuaWZvcm0uZnVuY10odW5pZm9ybS5sb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5nbFt1bmlmb3JtLmZ1bmNdKHVuaWZvcm0ubG9jYXRpb24sIHZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFkZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByZXByb2Nlc3MgPSByZXF1aXJlKCcuL3ByZXByb2Nlc3MnKTtcblxuLy8gQ29uc3RhbnRzXG5cbmNvbnN0IENPTU1FTlRTX1JFR0VYUCA9IC8oXFwvXFwqKFtcXHNcXFNdKj8pXFwqXFwvKXwoXFwvXFwvKC4qKSQpL2dtO1xuY29uc3QgRU5ETElORV9SRUdFWFAgPSAvKFxcclxcbnxcXG58XFxyKS9nbTtcbmNvbnN0IFdISVRFU1BBQ0VfUkVHRVhQID0gL1xcc3syLH0vZztcbmNvbnN0IEJSQUNLRVRfV0hJVEVTUEFDRV9SRUdFWFAgPSAvKFxccyopKFxcWykoXFxzKikoXFxkKykoXFxzKikoXFxdKShcXHMqKS9nO1xuY29uc3QgTkFNRV9DT1VOVF9SRUdFWFAgPSAvKFthLXpBLVpfXVthLXpBLVowLTlfXSopKD86XFxbKFxcZCspXFxdKT8vO1xuY29uc3QgUFJFQ0lTSU9OX1JFR0VYID0gL1xcYnByZWNpc2lvblxccytcXHcrXFxzK1xcdys7L2c7XG5jb25zdCBJTkxJTkVfUFJFQ0lTSU9OX1JFR0VYID0gL1xcYihoaWdocHxtZWRpdW1wfGxvd3ApXFxzKy9nO1xuXG4vLyBQcml2YXRlIE1ldGhvZHNcblxuY29uc3Qgc3RyaXBDb21tZW50cyA9IGZ1bmN0aW9uKHN0cikge1xuXHQvLyByZWdleCBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2Fncml1cy9zdHJpcGNvbW1lbnRzXG5cdHJldHVybiBzdHIucmVwbGFjZShDT01NRU5UU19SRUdFWFAsICcnKTtcbn07XG5cbmNvbnN0IHN0cmlwUHJlY2lzaW9uID0gZnVuY3Rpb24oc3RyKSB7XG5cdHJldHVybiBzdHJcblx0XHQucmVwbGFjZShQUkVDSVNJT05fUkVHRVgsICcnKSAvLyByZW1vdmUgZ2xvYmFsIHByZWNpc2lvbiBkZWNsYXJhdGlvbnNcblx0XHQucmVwbGFjZShJTkxJTkVfUFJFQ0lTSU9OX1JFR0VYLCAnJyk7IC8vIHJlbW92ZSBpbmxpbmUgcHJlY2lzaW9uIGRlY2xhcmF0aW9uc1xufTtcblxuY29uc3Qgbm9ybWFsaXplV2hpdGVzcGFjZSA9IGZ1bmN0aW9uKHN0cikge1xuXHRyZXR1cm4gc3RyXG5cdFx0LnJlcGxhY2UoRU5ETElORV9SRUdFWFAsICcgJykgLy8gbm9ybWFsaXplIGxpbmUgZW5kaW5nc1xuXHRcdC5yZXBsYWNlKFdISVRFU1BBQ0VfUkVHRVhQLCAnICcpIC8vIG5vcm1hbGl6ZSB3aGl0ZXNwYWNlIHRvIHNpbmdsZSAnICdcblx0XHQucmVwbGFjZShCUkFDS0VUX1dISVRFU1BBQ0VfUkVHRVhQLCAnJDIkNCQ2Jyk7IC8vIHJlbW92ZSB3aGl0ZXNwYWNlIGluIGJyYWNrZXRzXG59O1xuXG5jb25zdCBwYXJzZU5hbWVBbmRDb3VudCA9IGZ1bmN0aW9uKHF1YWxpZmllciwgdHlwZSwgZW50cnkpIHtcblx0Ly8gZGV0ZXJtaW5lIG5hbWUgYW5kIHNpemUgb2YgdmFyaWFibGVcblx0Y29uc3QgbWF0Y2hlcyA9IGVudHJ5Lm1hdGNoKE5BTUVfQ09VTlRfUkVHRVhQKTtcblx0Y29uc3QgbmFtZSA9IG1hdGNoZXNbMV07XG5cdGNvbnN0IGNvdW50ID0gKG1hdGNoZXNbMl0gPT09IHVuZGVmaW5lZCkgPyAxIDogcGFyc2VJbnQobWF0Y2hlc1syXSwgMTApO1xuXHRyZXR1cm4ge1xuXHRcdHF1YWxpZmllcjogcXVhbGlmaWVyLFxuXHRcdHR5cGU6IHR5cGUsXG5cdFx0bmFtZTogbmFtZSxcblx0XHRjb3VudDogY291bnRcblx0fTtcbn07XG5cbmNvbnN0IHBhcnNlU3RhdGVtZW50ID0gZnVuY3Rpb24oc3RhdGVtZW50KSB7XG5cdC8vIHNwbGl0IHN0YXRlbWVudCBvbiBjb21tYXNcblx0Ly9cblx0Ly8gWyd1bmlmb3JtIG1hdDQgQVsxMF0nLCAnQicsICdDWzJdJ11cblx0Ly9cblx0Y29uc3Qgc3BsaXQgPSBzdGF0ZW1lbnQuc3BsaXQoJywnKS5tYXAoZWxlbSA9PiB7XG5cdFx0cmV0dXJuIGVsZW0udHJpbSgpO1xuXHR9KTtcblxuXHQvLyBzcGxpdCBkZWNsYXJhdGlvbiBoZWFkZXIgZnJvbSBzdGF0ZW1lbnRcblx0Ly9cblx0Ly8gWyd1bmlmb3JtJywgJ21hdDQnLCAnQVsxMF0nXVxuXHQvL1xuXHRjb25zdCBoZWFkZXIgPSBzcGxpdC5zaGlmdCgpLnNwbGl0KCcgJyk7XG5cblx0Ly8gcXVhbGlmaWVyIGlzIGFsd2F5cyBmaXJzdCBlbGVtZW50XG5cdC8vXG5cdC8vICd1bmlmb3JtJ1xuXHQvL1xuXHRjb25zdCBxdWFsaWZpZXIgPSBoZWFkZXIuc2hpZnQoKTtcblxuXHQvLyB0eXBlIHdpbGwgYmUgdGhlIHNlY29uZCBlbGVtZW50XG5cdC8vXG5cdC8vICdtYXQ0J1xuXHQvL1xuXHRjb25zdCB0eXBlID0gaGVhZGVyLnNoaWZ0KCk7XG5cblx0Ly8gbGFzdCBwYXJ0IG9mIGhlYWRlciB3aWxsIGJlIHRoZSBmaXJzdCwgYW5kIHBvc3NpYmxlIG9ubHkgdmFyaWFibGUgbmFtZVxuXHQvL1xuXHQvLyBbJ0FbMTBdJywgJ0InLCAnQ1syXSddXG5cdC8vXG5cdGNvbnN0IG5hbWVzID0gaGVhZGVyLmNvbmNhdChzcGxpdCk7XG5cblx0Ly8gaWYgdGhlcmUgYXJlIG90aGVyIG5hbWVzIGFmdGVyIGEgJywnIGFkZCB0aGVtIGFzIHdlbGxcblx0cmV0dXJuIG5hbWVzLm1hcChuYW1lID0+IHtcblx0XHRyZXR1cm4gcGFyc2VOYW1lQW5kQ291bnQocXVhbGlmaWVyLCB0eXBlLCBuYW1lKTtcblx0fSk7XG59O1xuXG5jb25zdCBwYXJzZVNvdXJjZSA9IGZ1bmN0aW9uKHNvdXJjZSwga2V5d29yZHMpIHtcblx0Ly8gc3BsaXRzIHRoZSBzb3VyY2Ugc3RyaW5nIGJ5IHNlbWktY29sb25zIGFuZCBjb25zdHJ1Y3RzIGFuIGFycmF5IG9mXG5cdC8vIGRlY2xhcmF0aW9uIG9iamVjdHMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHF1YWxpZmllciBrZXl3b3Jkcy5cblxuXHQvLyBnZXQgaW5kaXZpZHVhbCBzdGF0ZW1lbnRzIChhbnkgc2VxdWVuY2UgZW5kaW5nIGluIDspXG5cdGNvbnN0IHN0YXRlbWVudHMgPSBzb3VyY2Uuc3BsaXQoJzsnKTtcblx0Ly8gYnVpbGQgcmVnZXggZm9yIHBhcnNpbmcgc3RhdGVtZW50cyB3aXRoIHRhcmdldHRlZCBrZXl3b3Jkc1xuXHRjb25zdCBrZXl3b3JkU3RyID0ga2V5d29yZHMuam9pbignfCcpO1xuXHRjb25zdCBrZXl3b3JkUmVnZXggPSBuZXcgUmVnRXhwKCdcXFxcYignICsga2V5d29yZFN0ciArICcpXFxcXGIuKicpO1xuXHQvLyBwYXJzZSBhbmQgc3RvcmUgZ2xvYmFsIHByZWNpc2lvbiBzdGF0ZW1lbnRzIGFuZCBhbnkgZGVjbGFyYXRpb25zXG5cdGxldCBtYXRjaGVkID0gW107XG5cdC8vIGZvciBlYWNoIHN0YXRlbWVudFxuXHRzdGF0ZW1lbnRzLmZvckVhY2goc3RhdGVtZW50ID0+IHtcblx0XHQvLyBjaGVjayBmb3Iga2V5d29yZHNcblx0XHQvL1xuXHRcdC8vIFsndW5pZm9ybSBmbG9hdCB1VGltZSddXG5cdFx0Ly9cblx0XHRjb25zdCBrbWF0Y2ggPSBzdGF0ZW1lbnQubWF0Y2goa2V5d29yZFJlZ2V4KTtcblx0XHRpZiAoa21hdGNoKSB7XG5cdFx0XHQvLyBwYXJzZSBzdGF0ZW1lbnQgYW5kIGFkZCB0byBhcnJheVxuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoZWQuY29uY2F0KHBhcnNlU3RhdGVtZW50KGttYXRjaFswXSkpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuY29uc3QgZmlsdGVyRHVwbGljYXRlc0J5TmFtZSA9IGZ1bmN0aW9uKGRlY2xhcmF0aW9ucykge1xuXHQvLyBpbiBjYXNlcyB3aGVyZSB0aGUgc2FtZSBkZWNsYXJhdGlvbnMgYXJlIHByZXNlbnQgaW4gbXVsdGlwbGVcblx0Ly8gc291cmNlcywgdGhpcyBmdW5jdGlvbiB3aWxsIHJlbW92ZSBkdXBsaWNhdGVzIGZyb20gdGhlIHJlc3VsdHNcblx0Y29uc3Qgc2VlbiA9IHt9O1xuXHRyZXR1cm4gZGVjbGFyYXRpb25zLmZpbHRlcihkZWNsYXJhdGlvbiA9PiB7XG5cdFx0aWYgKHNlZW5bZGVjbGFyYXRpb24ubmFtZV0pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0c2VlbltkZWNsYXJhdGlvbi5uYW1lXSA9IHRydWU7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBQYXJzZXMgdGhlIHByb3ZpZGVkIEdMU0wgc291cmNlLCBhbmQgcmV0dXJucyBhbGwgZGVjbGFyYXRpb24gc3RhdGVtZW50cyB0aGF0XG4gKiBjb250YWluIHRoZSBwcm92aWRlZCBxdWFsaWZpZXIgdHlwZXMuIFRoaXMgY2FuIGJlIHVzZWQgdG8gZXh0cmFjdCB0aGVcbiAqIGF0dHJpYnV0ZXMgYW5kIHVuaWZvcm0gbmFtZXMgLyB0eXBlcyBmcm9tIGEgc2hhZGVyLlxuICogTk9URTogVGhpcyBpcyBydW4gb25seSBBRlRFUiBjb21waWxhdGlvbiBzdWNjZWVkLCBzbyBpdCBhc3N1bWVzIFZBTElEIHN5bnRheC5cbiAqXG4gKiBFeCwgd2hlbiBwcm92aWRlZCBhICd1bmlmb3JtJyBxdWFsaWZpZXIsIHRoZSBkZWNsYXJhdGlvbjpcbiAqXG4gKlx0ICd1bmlmb3JtIGhpZ2hwIHZlYzMgdVNwZWN1bGFyQ29sb3I7J1xuICpcbiAqIFdvdWxkIGJlIHBhcnNlZCB0bzpcbiAqXHQge1xuICpcdFx0IHF1YWxpZmllcjogJ3VuaWZvcm0nLFxuICpcdFx0IHR5cGU6ICd2ZWMzJ1xuICpcdFx0IG5hbWU6ICd1U3BlY3VsYXJDb2xvcicsXG4gKlx0XHQgY291bnQ6IDFcbiAqXHQgfVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlcyAtIFRoZSBzaGFkZXIgZ2xzbCBzb3VyY2VzLlxuICogQHBhcmFtIHtBcnJheX0gcXVhbGlmaWVycyAtIFRoZSBxdWFsaWZpZXJzIHRvIGV4dHJhY3QuXG4gKlxuICogQHJldHVybiB7QXJyYXl9IFRoZSBhcnJheSBvZiBxdWFsaWZpZXIgZGVjbGFyYXRpb24gc3RhdGVtZW50cy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzb3VyY2VzID0gW10sIHF1YWxpZmllcnMgPSBbXSkge1xuXHQvLyBpZiBubyBzb3VyY2VzIG9yIHF1YWxpZmllcnMgYXJlIHByb3ZpZGVkLCByZXR1cm4gZW1wdHkgYXJyYXlcblx0aWYgKHNvdXJjZXMubGVuZ3RoID09PSAwIHx8IHF1YWxpZmllcnMubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdHNvdXJjZXMgPSBBcnJheS5pc0FycmF5KHNvdXJjZXMpID8gc291cmNlcyA6IFtzb3VyY2VzXTtcblx0cXVhbGlmaWVycyA9IEFycmF5LmlzQXJyYXkocXVhbGlmaWVycykgPyBxdWFsaWZpZXJzIDogW3F1YWxpZmllcnNdO1xuXHQvLyBwYXJzZSBvdXQgdGFyZ2V0dGVkIGRlY2xhcmF0aW9uc1xuXHRsZXQgZGVjbGFyYXRpb25zID0gW107XG5cdHNvdXJjZXMuZm9yRWFjaChzb3VyY2UgPT4ge1xuXHRcdC8vIHJlbW92ZSBjb21tZW50c1xuXHRcdHNvdXJjZSA9IHN0cmlwQ29tbWVudHMoc291cmNlKTtcblx0XHQvLyBydW4gcHJlcHJvY2Vzc29yXG5cdFx0c291cmNlID0gcHJlcHJvY2Vzcyhzb3VyY2UpO1xuXHRcdC8vIHJlbW92ZSBwcmVjaXNpb24gc3RhdGVtZW50c1xuXHRcdHNvdXJjZSA9IHN0cmlwUHJlY2lzaW9uKHNvdXJjZSk7XG5cdFx0Ly8gZmluYWxseSwgbm9ybWFsaXplIHRoZSB3aGl0ZXNwYWNlXG5cdFx0c291cmNlID0gbm9ybWFsaXplV2hpdGVzcGFjZShzb3VyY2UpO1xuXHRcdC8vIHBhcnNlIG91dCBkZWNsYXJhdGlvbnNcblx0XHRkZWNsYXJhdGlvbnMgPSBkZWNsYXJhdGlvbnMuY29uY2F0KHBhcnNlU291cmNlKHNvdXJjZSwgcXVhbGlmaWVycykpO1xuXHR9KTtcblx0Ly8gcmVtb3ZlIGR1cGxpY2F0ZXMgYW5kIHJldHVyblxuXHRyZXR1cm4gZmlsdGVyRHVwbGljYXRlc0J5TmFtZShkZWNsYXJhdGlvbnMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgREVGSU5FRCA9ICdfX0RFRklORURfXyc7XG5cbmNvbnN0IERFRklORV9SRUdFWCA9IC8jZGVmaW5lXFxiL2k7XG5jb25zdCBVTkRFRl9SRUdFWCA9IC8jdW5kZWZcXGIvaTtcbmNvbnN0IElGX1JFR0VYID0gLyNpZlxcYi9pO1xuY29uc3QgSUZERUZfUkVHRVggPSAvI2lmZGVmXFxiL2k7XG5jb25zdCBJRk5ERUZfUkVHRVggPSAvI2lmbmRlZlxcYi9pO1xuY29uc3QgRUxTRV9SRUdFWCA9IC8jZWxzZVxcYi9pO1xuY29uc3QgRUxJRl9SRUdFWCA9IC8jZWxpZlxcYi9pO1xuY29uc3QgRU5ESUZfUkVHRVggPSAvI2VuZGlmXFxiL2k7XG5cbmNvbnN0IFBBUlNFX0RFRklORV9SRUdFWCA9IC8jZGVmaW5lXFxzKyhcXHcrKShcXHMoXFx3Kik/KT8vaTtcbmNvbnN0IFBBUlNFX1VOREVGX1JFR0VYID0gLyN1bmRlZlxccysoXFx3KykvaTtcbmNvbnN0IFBBUlNFX0lGX1JFR0VYID0gLyNpZlxccytcXCg/XFxzKighP1xccypcXHcrKVxccyooPT18IT18Pj18PD18PHw8fD4pP1xccyooXFx3KilcXHMqXFwpPy9pO1xuY29uc3QgUEFSU0VfSUZERUZfUkVHRVggPSAvI2lmZGVmXFxzKyhcXHcrKS9pO1xuY29uc3QgUEFSU0VfSUZOREVGX1JFR0VYID0gLyNpZm5kZWZcXHMrKFxcdyspL2k7XG5jb25zdCBQQVJTRV9FTElGX1JFR0VYID0gLyNlbGlmXFxzK1xcKD9cXHMqKCE/XFxzKlxcdyspXFxzKig9PXwhPXw+PXw8PXw8fDx8Pik/XFxzKihcXHcqKVxccypcXCk/L2k7XG5jb25zdCBSRU1BSU5JTkdfUkVHRVggPSAvIyhbXFxXXFx3XFxzXFxkXSkoPzouKlxcXFxyP1xcbikqLiokL2dtO1xuXG5jb25zdCBldmFsSWYgPSBmdW5jdGlvbihhLCBsb2dpYywgYikge1xuXHRpZiAobG9naWMgPT09IHVuZGVmaW5lZCkge1xuXHRcdGlmIChhWzBdID09PSAnIScpIHtcblx0XHRcdHJldHVybiAhKGEgPT09ICd0cnVlJyB8fCBhID49IDEpO1xuXHRcdH1cblx0XHRyZXR1cm4gYSA9PT0gJ3RydWUnIHx8IGEgPj0gMTtcblx0fVxuXHRzd2l0Y2ggKGxvZ2ljKSB7XG5cdFx0Y2FzZSAnPT0nOlxuXHRcdFx0cmV0dXJuIGEgPT09IGI7XG5cdFx0Y2FzZSAnIT0nOlxuXHRcdFx0cmV0dXJuIGEgIT09IGI7XG5cdFx0Y2FzZSAnPic6XG5cdFx0XHRyZXR1cm4gYSA+IGI7XG5cdFx0Y2FzZSAnPj0nOlxuXHRcdFx0cmV0dXJuIGEgPj0gYjtcblx0XHRjYXNlICc8Jzpcblx0XHRcdHJldHVybiBhIDwgYjtcblx0XHRjYXNlICc8PSc6XG5cdFx0XHRyZXR1cm4gYSA8PSBiO1xuXHR9XG5cdHRocm93IGBVbnJlY29nbml6ZWQgbG9naWNhbCBvcGVyYXRvciBcXGAke2xvZ2ljfVxcYGA7XG59O1xuXG5jbGFzcyBDb25kaXRpb25hbCB7XG5cdGNvbnN0cnVjdG9yKHR5cGUsIGNvbmRpdGlvbmFsKSB7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0XHR0aGlzLmNvbmRpdGlvbmFsID0gY29uZGl0aW9uYWwudHJpbSgpO1xuXHRcdHRoaXMuYm9keSA9IFtdO1xuXHRcdHRoaXMuY2hpbGRyZW4gPSBbXTtcblx0fVxuXHRldmFsKCkge1xuXHRcdGxldCBwYXJzZWQ7XG5cdFx0c3dpdGNoICh0aGlzLnR5cGUpIHtcblx0XHRcdGNhc2UgJ2lmJzpcblx0XHRcdFx0cGFyc2VkID0gUEFSU0VfSUZfUkVHRVguZXhlYyh0aGlzLmNvbmRpdGlvbmFsKTtcblx0XHRcdFx0cmV0dXJuIGV2YWxJZihwYXJzZWRbMV0sIHBhcnNlZFsyXSwgcGFyc2VkWzNdKTtcblx0XHRcdGNhc2UgJ2lmZGVmJzpcblx0XHRcdFx0cGFyc2VkID0gUEFSU0VfSUZERUZfUkVHRVguZXhlYyh0aGlzLmNvbmRpdGlvbmFsKTtcblx0XHRcdFx0cmV0dXJuIHBhcnNlZFsxXSA9PT0gREVGSU5FRDtcblx0XHRcdGNhc2UgJ2lmbmRlZic6XG5cdFx0XHRcdHBhcnNlZCA9IFBBUlNFX0lGTkRFRl9SRUdFWC5leGVjKHRoaXMuY29uZGl0aW9uYWwpO1xuXHRcdFx0XHRyZXR1cm4gcGFyc2VkWzFdICE9PSBERUZJTkVEO1xuXHRcdFx0Y2FzZSAnZWxpZic6XG5cdFx0XHRcdHBhcnNlZCA9IFBBUlNFX0VMSUZfUkVHRVguZXhlYyh0aGlzLmNvbmRpdGlvbmFsKTtcblx0XHRcdFx0cmV0dXJuIGV2YWxJZihwYXJzZWRbMV0sIHBhcnNlZFsyXSwgcGFyc2VkWzNdKTtcblx0XHR9XG5cdFx0dGhyb3cgYFVucmVjb2duaXplZCBjb25kaXRpb25hbCB0eXBlIFxcYCR7dGhpcy50eXBlfVxcYGA7XG5cdH1cbn1cblxuY2xhc3MgQmxvY2sge1xuXHRjb25zdHJ1Y3Rvcih0eXBlLCBjb25kaXRpb25hbCwgbGluZU51bSkge1xuXHRcdHRoaXMuaWYgPSBuZXcgQ29uZGl0aW9uYWwodHlwZSwgY29uZGl0aW9uYWwpO1xuXHRcdHRoaXMuZWxpZiA9IFtdO1xuXHRcdHRoaXMuZWxzZSA9IG51bGw7XG5cdFx0dGhpcy5wYXJlbnQgPSBudWxsO1xuXHRcdHRoaXMuY3VycmVudCA9IHRoaXMuaWY7XG5cdFx0dGhpcy5zdGFydExpbmUgPSBsaW5lTnVtO1xuXHRcdHRoaXMuZW5kTGluZSA9IG51bGw7XG5cdH1cblx0YWRkRWxzZShjb25kaXRpb25hbCkge1xuXHRcdHRoaXMuY3VycmVudCA9IG5ldyBDb25kaXRpb25hbCgnZWxzZScsIGNvbmRpdGlvbmFsKTtcblx0XHR0aGlzLmVsc2UgPSB0aGlzLmN1cnJlbnQ7XG5cdH1cblx0YWRkRWxpZihjb25kaXRpb25hbCkge1xuXHRcdHRoaXMuY3VycmVudCA9IG5ldyBDb25kaXRpb25hbCgnZWxpZicsIGNvbmRpdGlvbmFsKTtcblx0XHR0aGlzLmVsaWYucHVzaCh0aGlzLmN1cnJlbnQpO1xuXHR9XG5cdGFkZEJvZHkobGluZSwgbGluZU51bSkge1xuXHRcdHRoaXMuY3VycmVudC5ib2R5LnB1c2goe1xuXHRcdFx0c3RyaW5nOiBsaW5lLnRyaW0oKSxcblx0XHRcdGxpbmU6IGxpbmVOdW1cblx0XHR9KTtcblx0fVxuXHRuZXN0KGJsb2NrKSB7XG5cdFx0YmxvY2sucGFyZW50ID0gdGhpcztcblx0XHR0aGlzLmN1cnJlbnQuY2hpbGRyZW4ucHVzaChibG9jayk7XG5cdH1cblx0ZXh0cmFjdCgpIHtcblx0XHQvLyAjaWZcblx0XHRsZXQgYm9keSA9IFtdO1xuXHRcdGlmICh0aGlzLmlmLmV2YWwoKSkge1xuXHRcdFx0Ym9keSA9IGJvZHkuY29uY2F0KHRoaXMuaWYuYm9keSk7XG5cdFx0XHR0aGlzLmlmLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuXHRcdFx0XHRib2R5ID0gYm9keS5jb25jYXQoY2hpbGQuZXh0cmFjdCgpKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGJvZHk7XG5cdFx0fVxuXHRcdC8vICNlbGlmXG5cdFx0Zm9yIChsZXQgaT0wOyBpPHRoaXMuZWxpZi5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgZWxpZiA9IHRoaXMuZWxpZltpXTtcblx0XHRcdGlmIChlbGlmLmV2YWwoKSkge1xuXHRcdFx0XHRib2R5ID0gYm9keS5jb25jYXQoZWxpZi5ib2R5KTtcblx0XHRcdFx0Zm9yIChsZXQgaj0wOyBqPGVsaWYuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRjb25zdCBjaGlsZCA9IGVsaWYuY2hpbGRyZW5bal07XG5cdFx0XHRcdFx0Ym9keSA9IGJvZHkuY29uY2F0KGNoaWxkLmV4dHJhY3QoKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGJvZHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vICNlbHNlXG5cdFx0aWYgKHRoaXMuZWxzZSkge1xuXHRcdFx0Ym9keSA9IGJvZHkuY29uY2F0KHRoaXMuZWxzZS5ib2R5KTtcblx0XHRcdHRoaXMuZWxzZS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcblx0XHRcdFx0Ym9keSA9IGJvZHkuY29uY2F0KGNoaWxkLmV4dHJhY3QoKSk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBib2R5O1xuXHRcdH1cblx0XHRyZXR1cm4gW107XG5cdH1cblx0ZXZhbCgpIHtcblx0XHQvLyBlbnN1cmUgZXh0cmFjdCB0ZXh0IGlzIG9yZGVyZWQgY29ycmVjdGx5XG5cdFx0cmV0dXJuIHRoaXMuZXh0cmFjdCgpLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdHJldHVybiBhLmxpbmUgLSBiLmxpbmU7XG5cdFx0fSkubWFwKGFyZyA9PiB7XG5cdFx0XHRyZXR1cm4gYXJnLnN0cmluZztcblx0XHR9KS5qb2luKCdcXG4nKTtcblx0fVxufVxuXG5jb25zdCBwYXJzZUxpbmVzID0gZnVuY3Rpb24obGluZXMpIHtcblxuXHRjb25zdCBibG9ja3MgPSBbXTtcblx0bGV0IGN1cnJlbnQgPSBudWxsO1xuXG5cdGxpbmVzLmZvckVhY2goKGxpbmUsIGluZGV4KSA9PiB7XG5cblx0XHRpZiAobGluZS5tYXRjaChJRl9SRUdFWCkpIHtcblx0XHRcdC8vICNpZlxuXHRcdFx0Y29uc3QgYmxvY2sgPSBuZXcgQmxvY2soJ2lmJywgbGluZSwgaW5kZXgpO1xuXHRcdFx0aWYgKCFjdXJyZW50KSB7XG5cdFx0XHRcdGJsb2Nrcy5wdXNoKGJsb2NrKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnJlbnQubmVzdChibG9jayk7XG5cdFx0XHR9XG5cdFx0XHRjdXJyZW50ID0gYmxvY2s7XG5cblx0XHR9IGVsc2UgaWYgKGxpbmUubWF0Y2goSUZERUZfUkVHRVgpKSB7XG5cdFx0XHQvLyAjaWZkZWZcblx0XHRcdGNvbnN0IGJsb2NrID0gbmV3IEJsb2NrKCdpZmRlZicsIGxpbmUsIGluZGV4KTtcblx0XHRcdGlmICghY3VycmVudCkge1xuXHRcdFx0XHRibG9ja3MucHVzaChibG9jayk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50Lm5lc3QoYmxvY2spO1xuXHRcdFx0fVxuXHRcdFx0Y3VycmVudCA9IGJsb2NrO1xuXG5cdFx0fSBlbHNlIGlmIChsaW5lLm1hdGNoKElGTkRFRl9SRUdFWCkpIHtcblx0XHRcdC8vICNpZm5kZWZcblx0XHRcdGNvbnN0IGJsb2NrID0gbmV3IEJsb2NrKCdpZm5kZWYnLCBsaW5lLCBpbmRleCk7XG5cdFx0XHRpZiAoIWN1cnJlbnQpIHtcblx0XHRcdFx0YmxvY2tzLnB1c2goYmxvY2spO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudC5uZXN0KGJsb2NrKTtcblx0XHRcdH1cblx0XHRcdGN1cnJlbnQgPSBibG9jaztcblxuXHRcdH0gZWxzZSBpZiAobGluZS5tYXRjaChFTElGX1JFR0VYKSkge1xuXHRcdFx0Ly8gI2VsaWZcblx0XHRcdGlmICghY3VycmVudCkge1xuXHRcdFx0XHR0aHJvdyAnSW52YWxpZCBwcmVwcm9jZXNzb3Igc3ludGF4LCB1bmV4cGVjdGVkIGAjZWxpZmAnO1xuXHRcdFx0fVxuXHRcdFx0Y3VycmVudC5hZGRFbGlmKGxpbmUpO1xuXG5cdFx0fSBlbHNlIGlmIChsaW5lLm1hdGNoKEVMU0VfUkVHRVgpKSB7XG5cdFx0XHQvLyAjZWxzZVxuXHRcdFx0aWYgKCFjdXJyZW50KSB7XG5cdFx0XHRcdHRocm93ICdJbnZhbGlkIHByZXByb2Nlc3NvciBzeW50YXgsIHVuZXhwZWN0ZWQgYCNlbHNlYCc7XG5cdFx0XHR9XG5cdFx0XHRjdXJyZW50LmFkZEVsc2UobGluZSk7XG5cblx0XHR9IGVsc2UgaWYgKGxpbmUubWF0Y2goRU5ESUZfUkVHRVgpKSB7XG5cdFx0XHQvLyAjZW5kaWZcblx0XHRcdGlmICghY3VycmVudCkge1xuXHRcdFx0XHR0aHJvdyAnSW52YWxpZCBwcmVwcm9jZXNzb3Igc3ludGF4LCB1bmV4cGVjdGVkIGAjZW5kaWZgJztcblx0XHRcdH1cblx0XHRcdGN1cnJlbnQuZW5kTGluZSA9IGluZGV4O1xuXHRcdFx0Y3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIG90aGVyXG5cdFx0XHRpZiAoY3VycmVudCkge1xuXHRcdFx0XHRjdXJyZW50LmFkZEJvZHkobGluZSwgaW5kZXgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0aWYgKGN1cnJlbnQpIHtcblx0XHR0aHJvdyAnSW52YWxpZCBwcmVwcm9jZXNzb3Igc3ludGF4LCBtaXNzaW5nIGV4cGVjdGVkIGAjZW5kaWZgJztcblx0fVxuXG5cdHJldHVybiBibG9ja3M7XG59O1xuXG5jb25zdCByZXBsYWNlRGVmaW5lcyA9IGZ1bmN0aW9uKGxpbmVzKSB7XG5cdGNvbnN0IGRlZmluZXMgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IHJlcGxhY2VkID0gW107XG5cdGxpbmVzLmZvckVhY2gobGluZSA9PiB7XG5cdFx0aWYgKGxpbmUubWF0Y2goREVGSU5FX1JFR0VYKSkge1xuXHRcdFx0Ly8gI2RlZmluZVxuXHRcdFx0Y29uc3QgcGFyc2VkID0gUEFSU0VfREVGSU5FX1JFR0VYLmV4ZWMobGluZSk7XG5cdFx0XHRkZWZpbmVzLnNldChwYXJzZWRbMV0sIHBhcnNlZFsyXSB8fCBERUZJTkVEKTtcblxuXHRcdH0gZWxzZSBpZiAobGluZS5tYXRjaChVTkRFRl9SRUdFWCkpIHtcblx0XHRcdC8vICN1bmRlZlxuXHRcdFx0Y29uc3QgcGFyc2VkID0gUEFSU0VfVU5ERUZfUkVHRVguZXhlYyhsaW5lKTtcblx0XHRcdGRlZmluZXMuZGVsZXRlKHBhcnNlZFsxXSk7XG5cblx0XHR9IGVsc2UgaWYgKGxpbmUubWF0Y2goSUZERUZfUkVHRVgpKSB7XG5cdFx0XHQvLyAjaWZkZWZcblx0XHRcdGNvbnN0IHBhcnNlZCA9IFBBUlNFX0lGREVGX1JFR0VYLmV4ZWMobGluZSk7XG5cdFx0XHRpZiAoZGVmaW5lcy5oYXMocGFyc2VkWzFdKSkge1xuXHRcdFx0XHRsaW5lID0gbGluZS5yZXBsYWNlKHBhcnNlZFsxXSwgREVGSU5FRCk7XG5cdFx0XHR9XG5cdFx0XHRyZXBsYWNlZC5wdXNoKGxpbmUpO1xuXG5cdFx0fSBlbHNlIGlmIChsaW5lLm1hdGNoKElGTkRFRl9SRUdFWCkpIHtcblx0XHRcdC8vICNpZm5kZWZcblx0XHRcdGNvbnN0IHBhcnNlZCA9IFBBUlNFX0lGTkRFRl9SRUdFWC5leGVjKGxpbmUpO1xuXHRcdFx0aWYgKGRlZmluZXMuaGFzKHBhcnNlZFsxXSkpIHtcblx0XHRcdFx0bGluZSA9IGxpbmUucmVwbGFjZShwYXJzZWRbMV0sIERFRklORUQpO1xuXHRcdFx0fVxuXHRcdFx0cmVwbGFjZWQucHVzaChsaW5lKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBzd2FwIGRlZmluZXNcblx0XHRcdGRlZmluZXMuZm9yRWFjaCgodmFsLCBkZWZpbmUpID0+IHtcblx0XHRcdFx0bGluZSA9IGxpbmUucmVwbGFjZShkZWZpbmUsIHZhbCk7XG5cdFx0XHR9KTtcblx0XHRcdHJlcGxhY2VkLnB1c2gobGluZSk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHJlcGxhY2VkO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZXMgR0xTTCBwcmVwcm9jZXNzb3Igc3RhdGVtZW50cy5cbiAqIE5PVEU6IGFzc3VtZXMgY29tbWVudHMgaGF2ZSBiZWVuIHN0cmlwcGVkLCBhbmQgcHJlcHJvY2Vzc29ycyBhcmUgdmFsaWQuXG4gKlxuICogICAgIFN1cHBvcnRlZDpcbiAqXG4gKiAgICAgICAgICNkZWZpbmUgKHN1YnN0aXR1dGlvbnMgb25seSlcbiAqICAgICAgICAgI3VuZGVmXG4gKiAgICAgICAgICNpZiAoPT0gYW5kICE9IGNvbXBhcmlzb25zIG9ubHkpXG4gKiAgICAgICAgICNpZmRlZlxuICogICAgICAgICAjaWZuZGVmXG4gKiAgICAgICAgICNlbGlmXG4gKiAgICAgICAgICNlbHNlXG4gKiAgICAgICAgICNlbmRpZlxuICpcbiAqICAgICBOb3QgU3VwcG9ydGVkOlxuICpcbiAqICAgICAgICAgI2RlZmluZSAobWFjcm9zKVxuICogICAgICAgICAjaWYgKCYmIGFuZCB8fCBvcGVyYXRvcnMsIGRlZmluZWQoKSBwcmVkaWNhdGUpXG4gKiAgICAgICAgICNlcnJvclxuICogICAgICAgICAjcHJhZ21hXG4gKiAgICAgICAgICNleHRlbnNpb25cbiAqICAgICAgICAgI3ZlcnNpb25cbiAqICAgICAgICAgI2xpbmVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZ2xzbCAtIFRoZSBnbHNsIHNvdXJjZSBjb2RlLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHByb2Nlc3NlZCBnbHNsIHNvdXJjZSBjb2RlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGdsc2wpIHtcblx0Ly8gc3BsaXQgbGluZXNcblx0bGV0IGxpbmVzID0gZ2xzbC5zcGxpdCgnXFxuJyk7XG5cdC8vIHJlcGxhY2UgYW55IGRlZmluZXMgd2l0aCB0aGVpciB2YWx1ZXNcblx0bGluZXMgPSByZXBsYWNlRGVmaW5lcyhsaW5lcyk7XG5cdC8vIHBhcnNlIHRoZW1cblx0Y29uc3QgYmxvY2tzID0gcGFyc2VMaW5lcyhsaW5lcyk7XG5cdC8vIHJlbW92ZSBibG9ja3MgaW4gcmV2ZXJzZSBvcmRlciB0byBwcmVzZXJ2ZSBsaW5lIG51bWJlcnNcblx0Zm9yIChsZXQgaT1ibG9ja3MubGVuZ3RoIC0gMTsgaT49MDsgaS0tKSB7XG5cdFx0Y29uc3QgYmxvY2sgPSBibG9ja3NbaV07XG5cdFx0Y29uc3QgcmVwbGFjZW1lbnQgPSBibG9jay5ldmFsKCk7XG5cdFx0aWYgKHJlcGxhY2VtZW50Lmxlbmd0aCA+IDApIHtcblx0XHRcdGxpbmVzLnNwbGljZShibG9jay5zdGFydExpbmUsIGJsb2NrLmVuZExpbmUgLSBibG9jay5zdGFydExpbmUgKyAxLCByZXBsYWNlbWVudCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxpbmVzLnNwbGljZShibG9jay5zdGFydExpbmUsIGJsb2NrLmVuZExpbmUgLSBibG9jay5zdGFydExpbmUgKyAxKTtcblx0XHR9XG5cdH1cblx0Ly8gc3RyaXAgcmVtYWluaW5nIHVuc3VwcG9ydGVkIHByZXByb2Nlc3NvciBzdGF0ZW1lbnRzXG5cdHJldHVybiBsaW5lcy5qb2luKCdcXG4nKS5yZXBsYWNlKFJFTUFJTklOR19SRUdFWCwgJycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgVGV4dHVyZSA9IHJlcXVpcmUoJy4vVGV4dHVyZScpO1xuY29uc3QgU2hhZGVyID0gcmVxdWlyZSgnLi4vc2hhZGVyL1NoYWRlcicpO1xuY29uc3QgVmVydGV4QnVmZmVyID0gcmVxdWlyZSgnLi4vdmVydGV4L1ZlcnRleEJ1ZmZlcicpO1xuXG4vLyBDb25zdGFudHNcblxuLyoqXG4gKiBTaGFkZXIgR0xTTCBzb3VyY2UuXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0YW50IHtPYmplY3R9XG4gKi9cbmNvbnN0IFNIQURFUl9HTFNMID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzMgYVZlcnRleFBvc2l0aW9uO1xuXHRcdGF0dHJpYnV0ZSB2ZWMyIGFUZXh0dXJlQ29vcmQ7XG5cdFx0dmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XG5cdFx0dm9pZCBtYWluKHZvaWQpIHtcblx0XHRcdHZUZXh0dXJlQ29vcmQgPSBhVGV4dHVyZUNvb3JkO1xuXHRcdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KGFWZXJ0ZXhQb3NpdGlvbiwgMS4wKTtcblx0XHR9XG5cdFx0YCxcblx0ZnJhZzpcblx0XHRgXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdHVuaWZvcm0gZmxvYXQgdU9wYWNpdHk7XG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmVTYW1wbGVyO1xuXHRcdHZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkO1xuXHRcdHZvaWQgbWFpbih2b2lkKSB7XG5cdFx0XHR2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlU2FtcGxlciwgdlRleHR1cmVDb29yZCk7XG5cdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLnJnYiwgY29sb3IuYSAqIHVPcGFjaXR5KTtcblx0XHR9XG5cdFx0YFxufTtcblxuLy8gUHJpdmF0ZSBNZXRob2RzXG5cbmNvbnN0IGNyZWF0ZVF1YWQgPSBmdW5jdGlvbihnbCwgbWluLCBtYXgpIHtcblx0Y29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KDI0KTtcblx0Ly8gcG9zaXRpb25zXG5cdHZlcnRpY2VzWzBdID0gbWluO1x0ICAgdmVydGljZXNbMV0gPSBtaW47XG5cdHZlcnRpY2VzWzJdID0gbWF4O1x0ICAgdmVydGljZXNbM10gPSBtaW47XG5cdHZlcnRpY2VzWzRdID0gbWF4O1x0ICAgdmVydGljZXNbNV0gPSBtYXg7XG5cdHZlcnRpY2VzWzZdID0gbWluO1x0ICAgdmVydGljZXNbN10gPSBtaW47XG5cdHZlcnRpY2VzWzhdID0gbWF4O1x0ICAgdmVydGljZXNbOV0gPSBtYXg7XG5cdHZlcnRpY2VzWzEwXSA9IG1pbjtcdCAgIHZlcnRpY2VzWzExXSA9IG1heDtcblx0Ly8gdXZzXG5cdHZlcnRpY2VzWzEyXSA9IDA7XHQgICB2ZXJ0aWNlc1sxM10gPSAwO1xuXHR2ZXJ0aWNlc1sxNF0gPSAxO1x0ICAgdmVydGljZXNbMTVdID0gMDtcblx0dmVydGljZXNbMTZdID0gMTtcdCAgIHZlcnRpY2VzWzE3XSA9IDE7XG5cdHZlcnRpY2VzWzE4XSA9IDA7XHQgICB2ZXJ0aWNlc1sxOV0gPSAwO1xuXHR2ZXJ0aWNlc1syMF0gPSAxO1x0ICAgdmVydGljZXNbMjFdID0gMTtcblx0dmVydGljZXNbMjJdID0gMDtcdCAgIHZlcnRpY2VzWzIzXSA9IDE7XG5cdC8vIGNyZWF0ZSBxdWFkIGJ1ZmZlclxuXHRyZXR1cm4gbmV3IFZlcnRleEJ1ZmZlcihcblx0XHRnbCxcblx0XHR2ZXJ0aWNlcyxcblx0XHR7XG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdGJ5dGVPZmZzZXQ6IDBcblx0XHRcdH0sXG5cdFx0XHQxOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdGJ5dGVPZmZzZXQ6IDIgKiA2ICogNFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0Y291bnQ6IDYsXG5cdFx0fSk7XG59O1xuXG5jb25zdCBzZXRDb2xvclRhcmdldCA9IGZ1bmN0aW9uKGdsLCBmcmFtZWJ1ZmZlciwgYXR0YWNobWVudCwgaW5kZXgpIHtcblx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlcik7XG5cdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxuXHRcdGdsLkZSQU1FQlVGRkVSLFxuXHRcdGdsW2BDT0xPUl9BVFRBQ0hNRU5UJHtpbmRleH1gXSxcblx0XHRnbC5URVhUVVJFXzJELFxuXHRcdGF0dGFjaG1lbnQudGV4dHVyZSxcblx0XHQwKTtcblx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcbn07XG5cbmNvbnN0IHJlbmRlclRvU2NyZWVuID0gZnVuY3Rpb24oZ2wsIHRleHR1cmUsIHNoYWRlciwgcXVhZCwgb3BhY2l0eSkge1xuXHQvLyBiaW5kIHNoYWRlclxuXHRzaGFkZXIudXNlKCk7XG5cdC8vIHNldCBibGVuZGluZyBmdW5jXG5cdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXHQvLyBzZXQgdW5pZm9ybXNcblx0c2hhZGVyLnNldFVuaWZvcm0oJ3VPcGFjaXR5Jywgb3BhY2l0eSk7XG5cdC8vIHNldCB0ZXh0dXJlIHNhbXBsZXIgdW5pdFxuXHRzaGFkZXIuc2V0VW5pZm9ybSgndVRleHR1cmVTYW1wbGVyJywgMCk7XG5cdC8vIGJpbmQgdGV4dHVyZVxuXHR0ZXh0dXJlLmJpbmQoMCk7XG5cdC8vIGRyYXcgcXVhZFxuXHRxdWFkLmJpbmQoKTtcblx0cXVhZC5kcmF3KCk7XG5cdHF1YWQudW5iaW5kKCk7XG5cdC8vIHVuYmluZCB0ZXh0dXJlXG5cdHRleHR1cmUudW5iaW5kKCk7XG59O1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHJlbmRlcmJ1ZmZlci5cbiAqL1xuY2xhc3MgUmVuZGVyQnVmZmVyIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgUmVuZGVyQnVmZmVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gVGhlIFdlYkdMIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgcmVuZGVyYnVmZmVyLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyYnVmZmVyLlxuXHQgKi9cblx0IGNvbnN0cnVjdG9yKGdsLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0dGhpcy5nbCA9IGdsO1xuXHRcdHRoaXMuZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXHRcdHRoaXMuc2hhZGVyID0gbmV3IFNoYWRlcihnbCwgU0hBREVSX0dMU0wpO1xuXHRcdHRoaXMucXVhZCA9IGNyZWF0ZVF1YWQoZ2wsIC0xLCAxKTtcblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZShnbCwgbnVsbCwge1xuXHRcdFx0d2lkdGg6IHdpZHRoLFxuXHRcdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0XHRmaWx0ZXI6ICdORUFSRVNUJyxcblx0XHRcdGludmVydFk6IGZhbHNlXG5cdFx0fSk7XG5cdFx0c2V0Q29sb3JUYXJnZXQoXG5cdFx0XHR0aGlzLmdsLFxuXHRcdFx0dGhpcy5mcmFtZWJ1ZmZlcixcblx0XHRcdHRoaXMudGV4dHVyZSxcblx0XHRcdDApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpbmRzIHRoZSByZW5kZXJidWZmZXIgZm9yIHdyaXRpbmcuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1JlbmRlckJ1ZmZlcn0gVGhlIHJlbmRlcmJ1ZmZlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGJpbmQoKSB7XG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVW5iaW5kcyB0aGUgcmVuZGVyYnVmZmVyIGZvciB3cml0aW5nLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtSZW5kZXJCdWZmZXJ9IFRoZSByZW5kZXJidWZmZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHR1bmJpbmQoKSB7XG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXJzIHRoZSByZW5kZXJidWZmZXIgYnVmZmVyIGNvbG9yIGJpdHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSByIC0gVGhlIHJlZCBjbGVhciBjb2xvci4gKE9wdGlvbmFsKVxuXHQgKiBAcGFyYW0ge051bWJlcn0gZyAtIFRoZSBncmVlbiBjbGVhciBjb2xvci4gKE9wdGlvbmFsKVxuXHQgKiBAcGFyYW0ge051bWJlcn0gYiAtIFRoZSBibHVlIGNsZWFyIGNvbG9yLiAoT3B0aW9uYWwpXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBhIC0gVGhlIGFscGhhIGNsZWFyIGNvbG9yLiAoT3B0aW9uYWwpXG5cdCAqXG5cdCAqIEByZXR1cm4ge1JlbmRlckJ1ZmZlcn0gVGhlIHJlbmRlcmJ1ZmZlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGNsZWFyKHIsIGcsIGIsIGEpIHtcblx0XHRpZiAociAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRnICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdGIgIT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0YSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLmdsLmNsZWFyQ29sb3IociwgZywgYiwgYSk7XG5cdFx0fVxuXHRcdC8vIGNsZWFyIHJlbmRlciB0YXJnZXRcblx0XHR0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQmxpdHMgdGhlIHJlbmRlcmJ1ZmZlciB0ZXh0dXJlIHRvIHRoZSBzY3JlZW4uXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcGFjaXR5IC0gVGhlIG9wYWNpdHkgdG8gYmxpdCBhdC5cblx0ICpcblx0ICogQHJldHVybiB7UmVuZGVyQnVmZmVyfSBUaGUgcmVuZGVyYnVmZmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0YmxpdFRvU2NyZWVuKG9wYWNpdHkpIHtcblx0XHRyZW5kZXJUb1NjcmVlbihcblx0XHRcdHRoaXMuZ2wsXG5cdFx0XHR0aGlzLnRleHR1cmUsXG5cdFx0XHR0aGlzLnNoYWRlcixcblx0XHRcdHRoaXMucXVhZCxcblx0XHRcdG9wYWNpdHkpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlc2l6ZXMgdGhlIHJlbmRlcmJ1ZmZlciB0byB0aGUgcHJvdmlkZWQgaGVpZ2h0IGFuZCB3aWR0aC5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIC0gVGhlIG5ldyB3aWR0aCBvZiB0aGUgcmVuZGVyYnVmZmVyLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IC0gVGhlIG5ldyBoZWlnaHQgb2YgdGhlIHJlbmRlcmJ1ZmZlci5cblx0ICpcblx0ICogQHJldHVybiB7UmVuZGVyQnVmZmVyfSBUaGUgcmVuZGVyYnVmZmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0cmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcblx0XHR0aGlzLnRleHR1cmUucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVuZGVyQnVmZmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkZWZhdWx0VG8gPSByZXF1aXJlKCdsb2Rhc2gvZGVmYXVsdFRvJyk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgdGV4dHVyZS5cbiAqL1xuY2xhc3MgVGV4dHVyZSB7XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlcyBhIFRleHR1cmUgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgLSBUaGUgV2ViR0wgY29udGV4dC5cblx0ICogQHBhcmFtIHtBcnJheUJ1ZmZlcnxDYW52YXNFbGVtZW50fSBzcmMgLSBUaGUgZGF0YSB0byBidWZmZXIuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHRleHR1cmUgb3B0aW9ucy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMud2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLmhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLndyYXAgLSBUaGUgd3JhcHBpbmcgdHlwZSBvdmVyIGJvdGggUyBhbmQgVCBkaW1lbnNpb24uXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmZpbHRlciAtIFRoZSBtaW4gLyBtYWcgZmlsdGVyIHVzZWQgZHVyaW5nIHNjYWxpbmcuXG5cdCAqIEBwYXJhbSB7Ym9vbH0gb3B0aW9ucy5pbnZlcnRZIC0gV2hldGhlciBvciBub3QgaW52ZXJ0LXkgaXMgZW5hYmxlZC5cblx0ICogQHBhcmFtIHtib29sfSBvcHRpb25zLnByZW11bHRpcGx5QWxwaGEgLSBXaGV0aGVyIG9yIG5vdCBhbHBoYSBwcmVtdWx0aXBseWluZyBpcyBlbmFibGVkLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5mb3JtYXQgLSBUaGUgdGV4dHVyZSBwaXhlbCBmb3JtYXQuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnR5cGUgLSBUaGUgdGV4dHVyZSBwaXhlbCBjb21wb25lbnQgdHlwZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKGdsLCBzcmMgPSBudWxsLCBvcHRpb25zID0ge30pIHtcblx0XHR0aGlzLmdsID0gZ2w7XG5cdFx0dGhpcy50ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXHRcdC8vIHNldCB0ZXh0dXJlIHByb3BlcnRpZXNcblx0XHR0aGlzLmZvcm1hdCA9IGRlZmF1bHRUbyhvcHRpb25zLmZvcm1hdCwgJ1JHQkEnKTtcblx0XHR0aGlzLnR5cGUgPSBkZWZhdWx0VG8ob3B0aW9ucy50eXBlLCAnVU5TSUdORURfQllURScpO1xuXHRcdHRoaXMuZmlsdGVyID0gZGVmYXVsdFRvKG9wdGlvbnMuZmlsdGVyLCAnTElORUFSJyk7XG5cdFx0dGhpcy53cmFwID0gZGVmYXVsdFRvKG9wdGlvbnMud3JhcCwgJ0NMQU1QX1RPX0VER0UnKTtcblx0XHR0aGlzLmludmVydFkgPSBkZWZhdWx0VG8ob3B0aW9ucy5pbnZlcnRZLCBmYWxzZSk7XG5cdFx0dGhpcy5wcmVtdWx0aXBseUFscGhhID0gZGVmYXVsdFRvKG9wdGlvbnMucHJlbXVsdGlwbHlBbHBoYSwgZmFsc2UpO1xuXHRcdC8vIGJ1ZmZlciB0aGUgZGF0YVxuXHRcdHRoaXMuYnVmZmVyRGF0YShzcmMsIG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0KTtcblx0XHQvLyBzZXQgcGFyYW1ldGVyc1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsW3RoaXMud3JhcF0pO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsW3RoaXMud3JhcF0pO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbFt0aGlzLmZpbHRlcl0pO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbFt0aGlzLmZpbHRlcl0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpbmRzIHRoZSB0ZXh0dXJlIG9iamVjdCB0byB0aGUgcHJvdmlkZWQgdGV4dHVyZSB1bml0IGxvY2F0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gbG9jYXRpb24gLSBUaGUgdGV4dHVyZSB1bml0IGxvY2F0aW9uIGluZGV4LiBPcHRpb25hbC5cblx0ICpcblx0ICogQHJldHVybiB7VGV4dHVyZX0gVGhlIHRleHR1cmUgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRiaW5kKGxvY2F0aW9uID0gMCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRnbC5hY3RpdmVUZXh0dXJlKGdsW2BURVhUVVJFJHtsb2NhdGlvbn1gXSk7XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy50ZXh0dXJlKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBVbmJpbmRzIHRoZSB0ZXh0dXJlIG9iamVjdC5cblx0ICpcblx0ICogQHJldHVybiB7VGV4dHVyZX0gVGhlIHRleHR1cmUgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHR1bmJpbmQoKSB7XG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJ1ZmZlciBkYXRhIGludG8gdGhlIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXl8QXJyYXlCdWZmZXJWaWV3fG51bGx9IGRhdGEgLSBUaGUgZGF0YSBhcnJheSB0byBidWZmZXIuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgZGF0YS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIGRhdGEuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1RleHR1cmV9IFRoZSB0ZXh0dXJlIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0YnVmZmVyRGF0YShkYXRhLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdC8vIGJpbmQgdGV4dHVyZVxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZSk7XG5cdFx0Z2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdGhpcy5pbnZlcnRZKTtcblx0XHRnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHRoaXMucHJlbXVsdGlwbHlBbHBoYSk7XG5cdFx0Ly8gYnVmZmVyIHRoZSBkYXRhXG5cdFx0aWYgKGRhdGEgJiYgZGF0YS53aWR0aCAmJiBkYXRhLmhlaWdodCkge1xuXHRcdFx0Ly8gc3RvcmUgd2lkdGggYW5kIGhlaWdodFxuXHRcdFx0dGhpcy53aWR0aCA9IGRhdGEud2lkdGg7XG5cdFx0XHR0aGlzLmhlaWdodCA9IGRhdGEuaGVpZ2h0O1xuXHRcdFx0Ly8gYnVmZmVyIHRoZSB0ZXh0dXJlXG5cdFx0XHRnbC50ZXhJbWFnZTJEKFxuXHRcdFx0XHRnbC5URVhUVVJFXzJELFxuXHRcdFx0XHQwLCAvLyBtaXAtbWFwIGxldmVsXG5cdFx0XHRcdGdsW3RoaXMuZm9ybWF0XSwgLy8gd2ViZ2wgcmVxdWlyZXMgZm9ybWF0ID09PSBpbnRlcm5hbEZvcm1hdFxuXHRcdFx0XHRnbFt0aGlzLmZvcm1hdF0sXG5cdFx0XHRcdGdsW3RoaXMudHlwZV0sXG5cdFx0XHRcdGRhdGEpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBzdG9yZSB3aWR0aCBhbmQgaGVpZ2h0XG5cdFx0XHR0aGlzLndpZHRoID0gd2lkdGggfHwgdGhpcy53aWR0aDtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IHx8IHRoaXMuaGVpZ2h0O1xuXHRcdFx0Ly8gYnVmZmVyIHRoZSB0ZXh0dXJlIGRhdGFcblx0XHRcdGdsLnRleEltYWdlMkQoXG5cdFx0XHRcdGdsLlRFWFRVUkVfMkQsXG5cdFx0XHRcdDAsIC8vIG1pcC1tYXAgbGV2ZWxcblx0XHRcdFx0Z2xbdGhpcy5mb3JtYXRdLCAvLyB3ZWJnbCByZXF1aXJlcyBmb3JtYXQgPT09IGludGVybmFsRm9ybWF0XG5cdFx0XHRcdHRoaXMud2lkdGgsXG5cdFx0XHRcdHRoaXMuaGVpZ2h0LFxuXHRcdFx0XHQwLCAvLyBib3JkZXIsIG11c3QgYmUgMFxuXHRcdFx0XHRnbFt0aGlzLmZvcm1hdF0sXG5cdFx0XHRcdGdsW3RoaXMudHlwZV0sXG5cdFx0XHRcdGRhdGEpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBCdWZmZXIgcGFydGlhbCBkYXRhIGludG8gdGhlIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXl8QXJyYXlCdWZmZXJWaWV3fG51bGx9IGRhdGEgLSBUaGUgZGF0YSBhcnJheSB0byBidWZmZXIuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB4T2Zmc2V0IC0gVGhlIHggb2Zmc2V0IGF0IHdoaWNoIHRvIGJ1ZmZlci5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHlPZmZzZXQgLSBUaGUgeSBvZmZzZXQgYXQgd2hpY2ggdG8gYnVmZmVyLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIGRhdGEuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSBkYXRhLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtUZXh0dXJlfSBUaGUgdGV4dHVyZSBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGJ1ZmZlclN1YkRhdGEoZGF0YSwgeE9mZnNldCA9IDAsIHlPZmZzZXQgPSAwLCB3aWR0aCA9IHVuZGVmaW5lZCwgaGVpZ2h0ID0gdW5kZWZpbmVkKSB7XG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdC8vIGJpbmQgdGV4dHVyZVxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZSk7XG5cdFx0Z2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdGhpcy5pbnZlcnRZKTtcblx0XHRnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIHRoaXMucHJlbXVsdGlwbHlBbHBoYSk7XG5cdFx0Ly8gYnVmZmVyIHRoZSBkYXRhXG5cdFx0aWYgKGRhdGEud2lkdGggJiYgZGF0YS5oZWlnaHQpIHtcblx0XHRcdC8vIGJ1ZmZlciB0aGUgdGV4dHVyZVxuXHRcdFx0Z2wudGV4U3ViSW1hZ2UyRChcblx0XHRcdFx0Z2wuVEVYVFVSRV8yRCxcblx0XHRcdFx0MCwgLy8gbWlwLW1hcCBsZXZlbFxuXHRcdFx0XHR4T2Zmc2V0LFxuXHRcdFx0XHR5T2Zmc2V0LFxuXHRcdFx0XHRnbFt0aGlzLmZvcm1hdF0sXG5cdFx0XHRcdGdsW3RoaXMudHlwZV0sXG5cdFx0XHRcdGRhdGEpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBidWZmZXIgdGhlIHRleHR1cmUgZGF0YVxuXHRcdFx0Z2wudGV4U3ViSW1hZ2UyRChcblx0XHRcdFx0Z2wuVEVYVFVSRV8yRCxcblx0XHRcdFx0MCwgLy8gbWlwLW1hcCBsZXZlbFxuXHRcdFx0XHR4T2Zmc2V0LFxuXHRcdFx0XHR5T2Zmc2V0LFxuXHRcdFx0XHR3aWR0aCxcblx0XHRcdFx0aGVpZ2h0LFxuXHRcdFx0XHRnbFt0aGlzLmZvcm1hdF0sXG5cdFx0XHRcdGdsW3RoaXMudHlwZV0sXG5cdFx0XHRcdGRhdGEpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNpemUgdGhlIHVuZGVybHlpbmcgdGV4dHVyZS4gVGhpcyBjbGVhcnMgdGhlIHRleHR1cmUgZGF0YS5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIC0gVGhlIG5ldyB3aWR0aCBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCAtIFRoZSBuZXcgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtUZXh0dXJlfSBUaGUgdGV4dHVyZSBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdHJlc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0dGhpcy5idWZmZXJEYXRhKG51bGwsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dHVyZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuXG4vLyBQcml2YXRlIE1ldGhvZHNcblxuY29uc3QgY3JlYXRlVGV4dHVyZSA9IGZ1bmN0aW9uKGdsLCBmb3JtYXQsIHNpemUsIHR5cGUsIGZpbHRlciwgaW52ZXJ0WSwgcHJlbXVsdGlwbHlBbHBoYSkge1xuXHRjb25zdCB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcblx0Z2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgaW52ZXJ0WSk7XG5cdGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgcHJlbXVsdGlwbHlBbHBoYSk7XG5cdC8vIGJ1ZmZlciB0aGUgZGF0YVxuXHRnbC50ZXhJbWFnZTJEKFxuXHRcdGdsLlRFWFRVUkVfMkQsXG5cdFx0MCwgLy8gbWlwLW1hcCBsZXZlbFxuXHRcdGdsW2Zvcm1hdF0sIC8vIHdlYmdsIHJlcXVpcmVzIGZvcm1hdCA9PT0gaW50ZXJuYWxGb3JtYXRcblx0XHRzaXplLFxuXHRcdHNpemUsXG5cdFx0MCwgLy8gYm9yZGVyLCBtdXN0IGJlIDBcblx0XHRnbFtmb3JtYXRdLFxuXHRcdGdsW3R5cGVdLFxuXHRcdG51bGwpO1xuXHQvLyBzZXQgcGFyYW1ldGVyc1xuXHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcblx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbFtmaWx0ZXJdKTtcblx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsW2ZpbHRlcl0pO1xuXHRyZXR1cm4gdGV4dHVyZTtcbn07XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgdGV4dHVyZSBhcnJheS5cbiAqL1xuY2xhc3MgVGV4dHVyZUFycmF5IHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFRleHR1cmVBcnJheSBvYmplY3QuXG5cdCAqXG5cdCAqIE5PVEU6IHdlIHVzZSBhIHRleHR1cmUgYXJyYXkgcmF0aGVyIHRoYW4gYSB0ZXh0dXJlIGF0bGFzIGJlY2F1c2Ugb2Zcblx0ICogdGhlIHN1Yi1waXhlbCBibGVlZGluZyB0aGF0IG9jY3VycyBpbiB0aGUgYXRsYXMgd2hlbiB0ZXh0dXJlcyBhcmVcblx0ICogbm90IHBhZGRlZC4gRHVlIHRvIHRoZSBvdmVyaGVhZCBvZiBwYWRkaW5nIGNsaWVudHNpZGUsIHRoZVxuXHQgKiBmcmVxdWVuY3kgb2YgbG9hZCBsb2FkIGV2ZW50cywgYW5kIHRoZSBhdmVyYWdlIG51bWJlciBvZiB0aWxlcyBvblxuXHQgKiB0aGUgc2NyZWVuIGF0IGFueSBvbmUgdGltZSwgYmluZGluZyBpbmRpdmlkdWFsIHRpbGUgdGV4dHVyZXNcblx0ICogcHJvdmlkZXMgYSBsZXNzIHZvbGF0aWxlIGZyYW1lIHJhdGUgY29tcGFyZWQgdG8gcGFkZGluZyB0ZXh0dXJlcyBhbmRcblx0ICogdXNpbmcgYW4gYXRsYXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFRoZSBXZWJHTCBjb250ZXh0LlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdGlsZVNpemUgLSBUaGUgc2l6ZSBvZiBhIHRpbGUsIGluIHBpeGVscy5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgdGV4dHVyZSBhcnJheSBvcHRpb25zLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5udW1DaHVua3MgLSBUaGUgc2l6ZSBvZiB0aGUgYXJyYXksIGluIHRpbGVzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoZ2wsIHRpbGVTaXplID0gMjU2LCBvcHRpb25zID0ge30pIHtcblx0XHR0aGlzLmdsID0gZ2w7XG5cdFx0dGhpcy5udW1DaHVua3MgPSBkZWZhdWx0VG8ob3B0aW9ucy5udW1DaHVua3MsIDI1Nik7XG5cdFx0dGhpcy5jaHVua1NpemUgPSB0aWxlU2l6ZTtcblx0XHQvLyBzZXQgdGV4dHVyZSBwcm9wZXJ0aWVzXG5cdFx0dGhpcy5mb3JtYXQgPSBkZWZhdWx0VG8ob3B0aW9ucy5mb3JtYXQsICdSR0JBJyk7XG5cdFx0dGhpcy50eXBlID0gZGVmYXVsdFRvKG9wdGlvbnMudHlwZSwgJ1VOU0lHTkVEX0JZVEUnKTtcblx0XHR0aGlzLmZpbHRlciA9IGRlZmF1bHRUbyhvcHRpb25zLmZpbHRlciwgJ0xJTkVBUicpO1xuXHRcdHRoaXMuaW52ZXJ0WSA9IGRlZmF1bHRUbyhvcHRpb25zLmludmVydFksIGZhbHNlKTtcblx0XHR0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBkZWZhdWx0VG8ob3B0aW9ucy5wcmVtdWx0aXBseUFscGhhLCBmYWxzZSk7XG5cdFx0Ly8gY3JlYXRlIHRleHR1cmVzXG5cdFx0dGhpcy5hdmFpbGFibGUgPSBuZXcgQXJyYXkodGhpcy5udW1DaHVua3MpO1xuXHRcdGZvciAobGV0IGk9MDsgaTx0aGlzLm51bUNodW5rczsgaSsrKSB7XG5cdFx0XHR0aGlzLmF2YWlsYWJsZVtpXSA9IHtcblx0XHRcdFx0dGV4dHVyZTogY3JlYXRlVGV4dHVyZShcblx0XHRcdFx0XHR0aGlzLmdsLFxuXHRcdFx0XHRcdHRoaXMuZm9ybWF0LFxuXHRcdFx0XHRcdHRoaXMuY2h1bmtTaXplLFxuXHRcdFx0XHRcdHRoaXMudHlwZSxcblx0XHRcdFx0XHR0aGlzLmZpbHRlcixcblx0XHRcdFx0XHR0aGlzLmludmVydFksXG5cdFx0XHRcdFx0dGhpcy5wcmVtdWx0aXBseUFscGhhKVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0Ly8gY3JlYXRlIHVzZWQgY2h1bmsgbWFwXG5cdFx0dGhpcy51c2VkID0gbmV3IE1hcCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlc3Qgd2hldGhlciBvciBub3QgYSBrZXkgaXMgaGVsZCBpbiB0aGUgYXJyYXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgLSBUaGUga2V5IHRvIHRlc3QuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgY29vcmQgZXhpc3RzIGluIHRoZSBweXJhbWlkLlxuXHQgKi9cblx0aGFzKGtleSkge1xuXHRcdHJldHVybiB0aGlzLnVzZWQuaGFzKGtleSk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2h1bmsgbWF0Y2hpbmcgdGhlIHByb3ZpZGVkIGtleS4gSWYgdGhlIGNodW5rIGRvZXMgbm90XG5cdCAqIGV4aXN0LCByZXR1cm5zIHVuZGVmaW5lZC5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGNodW5rIHRvIHJldHVybi5cblx0ICpcblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIGNodW5rIG9iamVjdC5cblx0ICovXG5cdGdldChrZXkpIHtcblx0XHRyZXR1cm4gdGhpcy51c2VkLmdldChrZXkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldCB0aGUgdGV4dHVyZSBkYXRhIGZvciB0aGUgcHJvdmlkZWQga2V5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgdGV4dHVyZSBkYXRhLlxuXHQgKiBAcGFyYW0ge0FycmF5QnVmZmVyfEhUTUxDYW52YXNFbGVtZW50fEhUTUxJbWFnZUVsZW1lbnR9IGRhdGEgLSBUaGUgdGV4dHVyZSBkYXRhLlxuXHQgKi9cblx0c2V0KGtleSwgZGF0YSkge1xuXHRcdGlmICh0aGlzLmhhcyhrZXkpKSB7XG5cdFx0XHR0aHJvdyBgVGlsZSBvZiBjb29yZCAke2tleX0gYWxyZWFkeSBleGlzdHMgaW4gdGhlIGFycmF5YDtcblx0XHR9XG5cdFx0aWYgKHRoaXMuYXZhaWxhYmxlLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0dGhyb3cgJ05vIGF2YWlsYWJsZSB0ZXh0dXJlIGNodW5rcyBpbiBhcnJheSc7XG5cdFx0fVxuXHRcdC8vIGdldCBhbiBhdmFpbGFibGUgY2h1bmtcblx0XHRjb25zdCBjaHVuayA9IHRoaXMuYXZhaWxhYmxlLnBvcCgpO1xuXHRcdC8vIGJ1ZmZlciB0aGUgZGF0YVxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBjaHVuay50ZXh0dXJlKTtcblx0XHRnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0aGlzLmludmVydFkpO1xuXHRcdGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGhpcy5wcmVtdWx0aXBseUFscGhhKTtcblx0XHRpZiAoZGF0YS53aWR0aCAmJiBkYXRhLmhlaWdodCkge1xuXHRcdFx0Ly8gY2FudmFzIHR5cGVcblx0XHRcdGdsLnRleEltYWdlMkQoXG5cdFx0XHRcdGdsLlRFWFRVUkVfMkQsXG5cdFx0XHRcdDAsIC8vIG1pcC1tYXAgbGV2ZWxcblx0XHRcdFx0Z2xbdGhpcy5mb3JtYXRdLCAvLyB3ZWJnbCByZXF1aXJlcyBmb3JtYXQgPT09IGludGVybmFsRm9ybWF0XG5cdFx0XHRcdGdsW3RoaXMuZm9ybWF0XSxcblx0XHRcdFx0Z2xbdGhpcy50eXBlXSxcblx0XHRcdFx0ZGF0YSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGFycmF5YnVmZmVyIHR5cGVcblx0XHRcdGdsLnRleEltYWdlMkQoXG5cdFx0XHRcdGdsLlRFWFRVUkVfMkQsXG5cdFx0XHRcdDAsIC8vIG1pcC1tYXAgbGV2ZWxcblx0XHRcdFx0Z2xbdGhpcy5mb3JtYXRdLCAvLyB3ZWJnbCByZXF1aXJlcyBmb3JtYXQgPT09IGludGVybmFsRm9ybWF0XG5cdFx0XHRcdHRoaXMuY2h1bmtTaXplLFxuXHRcdFx0XHR0aGlzLmNodW5rU2l6ZSxcblx0XHRcdFx0MCwgLy8gYm9yZGVyLCBtdXN0IGJlIDBcblx0XHRcdFx0Z2xbdGhpcy5mb3JtYXRdLFxuXHRcdFx0XHRnbFt0aGlzLnR5cGVdLFxuXHRcdFx0XHRkYXRhKTtcblx0XHR9XG5cdFx0Ly8gYWRkIHRvIHVzZWRcblx0XHR0aGlzLnVzZWQuc2V0KGtleSwgY2h1bmspO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZsYWdzIHRoZSBjaHVuayBtYXRjaGluZyB0aGUgcHJvdmlkZWQga2V5IGFzIHVudXNlZCBpbiB0aGUgYXJyYXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjaHVuayB0byBmcmVlLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7VGV4dHVyZUFycmF5fSBUaGUgVGV4dHVyZUFycmF5IG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZGVsZXRlKGtleSkge1xuXHRcdGlmICghdGhpcy5oYXMoa2V5KSkge1xuXHRcdFx0dGhyb3cgYFRpbGUgb2YgY29vcmQgJHtrZXl9IGRvZXMgbm90IGV4aXN0IGluIHRoZSBhcnJheWA7XG5cdFx0fVxuXHRcdC8vIGdldCBjaHVua1xuXHRcdGNvbnN0IGNodW5rID0gdGhpcy51c2VkLmdldChrZXkpO1xuXHRcdC8vIHJlbW92ZSBmcm9tIHVzZWRcblx0XHR0aGlzLnVzZWQuZGVsZXRlKGtleSk7XG5cdFx0Ly8gYWRkIHRvIGF2YWlsYWJsZVxuXHRcdHRoaXMuYXZhaWxhYmxlLnB1c2goY2h1bmspO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpbmRzIHRoZSB0ZXh0dXJlIGFycmF5IHRvIHRoZSBwcm92aWRlZCB0ZXh0dXJlIHVuaXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjaHVuayB0byBiaW5kLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gbG9jYXRpb24gLSBUaGUgdGV4dHVyZSB1bml0IHRvIGFjdGl2YXRlLiBPcHRpb25hbC5cblx0ICpcblx0ICogQHJldHVybnMge1RleHR1cmVBcnJheX0gVGhlIFRleHR1cmVBcnJheSBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGJpbmQoa2V5LCBsb2NhdGlvbiA9IDApIHtcblx0XHRpZiAoIXRoaXMuaGFzKGtleSkpIHtcblx0XHRcdHRocm93IGBUaWxlIG9mIGNvb3JkICR7a2V5fSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgYXJyYXlgO1xuXHRcdH1cblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cdFx0Y29uc3QgY2h1bmsgPSB0aGlzLnVzZWQuZ2V0KGtleSk7XG5cdFx0Z2wuYWN0aXZlVGV4dHVyZShnbFtgVEVYVFVSRSR7bG9jYXRpb259YF0pO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGNodW5rLnRleHR1cmUpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVuYmluZHMgdGhlIHRleHR1cmUgYXJyYXkuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtUZXh0dXJlQXJyYXl9IFRoZSBUZXh0dXJlQXJyYXkgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHR1bmJpbmQoKSB7XG5cdFx0Ly8gbm8tb3Bcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHR1cmVBcnJheTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgZm9ySW4gPSByZXF1aXJlKCdsb2Rhc2gvZm9ySW4nKTtcblxuLy8gQ29uc3RhbnRzXG5cbmNvbnN0IEJZVEVTX1BFUl9UWVBFID0ge1xuXHRCWVRFOiAxLFxuXHRVTlNJR05FRF9CWVRFOiAxLFxuXHRTSE9SVDogMixcblx0VU5TSUdORURfU0hPUlQ6IDIsXG5cdEZJWEVEOiA0LFxuXHRGTE9BVDogNFxufTtcblxuLy8gUHJpdmF0ZSBNZXRob2RzXG5cbmNvbnN0IGNhbGNDaHVua0J5dGVTaXplID0gZnVuY3Rpb24ocG9pbnRlcnMsIGNodW5rU2l6ZSkge1xuXHRsZXQgYnl0ZVNpemUgPSAwO1xuXHRwb2ludGVycy5mb3JFYWNoKHBvaW50ZXIgPT4ge1xuXHRcdGJ5dGVTaXplICs9IEJZVEVTX1BFUl9UWVBFW3BvaW50ZXIudHlwZV0gKiBwb2ludGVyLnNpemUgKiBjaHVua1NpemU7XG5cdH0pO1xuXHRyZXR1cm4gYnl0ZVNpemU7XG59O1xuXG5jb25zdCBjYWxjQnl0ZU9mZnNldHMgPSBmdW5jdGlvbihjaHVuaywgcG9pbnRlcnMsIGNodW5rQnl0ZU9mZnNldCkge1xuXHRsZXQgYnl0ZU9mZnNldCA9IDA7XG5cdHBvaW50ZXJzLmZvckVhY2goKHBvaW50ZXIsIGxvY2F0aW9uKSA9PiB7XG5cdFx0Y2h1bmsuYnl0ZU9mZnNldHNbbG9jYXRpb25dID0gY2h1bmtCeXRlT2Zmc2V0ICsgYnl0ZU9mZnNldDtcblx0XHRieXRlT2Zmc2V0ICs9IEJZVEVTX1BFUl9UWVBFW3BvaW50ZXIudHlwZV0gKiBwb2ludGVyLnNpemU7XG5cdH0pO1xufTtcblxuY29uc3QgY2FsY1N0cmlkZSA9IGZ1bmN0aW9uKHBvaW50ZXJzKSB7XG5cdGxldCBzdHJpZGUgPSAwO1xuXHRwb2ludGVycy5mb3JFYWNoKHBvaW50ZXIgPT4ge1xuXHRcdHN0cmlkZSArPSBwb2ludGVyLnNpemU7XG5cdH0pO1xuXHRyZXR1cm4gc3RyaWRlO1xufTtcblxuY29uc3QgcGFyc2VBdHRyaWJ1dGVQb2ludGVycyA9IGZ1bmN0aW9uKHBvaW50ZXJzKSB7XG5cdGNvbnN0IGF0dHJpYnV0ZVBvaW50ZXJzID0gbmV3IE1hcCgpO1xuXHRsZXQgYnl0ZU9mZnNldCA9IDA7XG5cdC8vIGNvbnZlcnQgdG8gbWFwXG5cdGZvckluKHBvaW50ZXJzLCAocG9pbnRlciwgaW5kZXgpID0+IHtcblx0XHRhdHRyaWJ1dGVQb2ludGVycy5zZXQoaW5kZXgsIHtcblx0XHRcdHR5cGU6IHBvaW50ZXIudHlwZSxcblx0XHRcdHNpemU6IHBvaW50ZXIuc2l6ZSxcblx0XHRcdGJ5dGVPZmZzZXQ6IGJ5dGVPZmZzZXQsXG5cdFx0XHRieXRlU3RyaWRlOiAwXG5cdFx0fSk7XG5cdFx0Ynl0ZU9mZnNldCArPSBCWVRFU19QRVJfVFlQRVtwb2ludGVyLnR5cGVdICogcG9pbnRlci5zaXplO1xuXHR9KTtcblx0Ly8gYWRkIGJ5dGVTdHJpZGVcblx0YXR0cmlidXRlUG9pbnRlcnMuZm9yRWFjaChwb2ludGVyID0+IHtcblx0XHRwb2ludGVyLmJ5dGVTdHJpZGUgPSBieXRlT2Zmc2V0O1xuXHR9KTtcblx0cmV0dXJuIGF0dHJpYnV0ZVBvaW50ZXJzO1xufTtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSB2ZXJ0ZXggYXRsYXMuXG4gKi9cbmNsYXNzIFZlcnRleEF0bGFzIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGEgbmV3IFZlcnRleEF0bGFzIG9iamVjdC5cblx0ICogTk9URTogQXNzdW1lcyBpbnRlcmxlYXZlZCB2ZXJ0ZXggZm9ybWF0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgLSBUaGUgV2ViR0wgY29udGV4dC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbGVTaXplIC0gVGhlIHNpemUgb2YgYSB0aWxlLCBpbiBwaXhlbHMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHZlcnRleCBhdGxhcyBvcHRpb25zLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5jaHVua1NpemUgLSBUaGUgc2l6ZSBvZiBhIHNpbmdsZSBjaHVuaywgaW4gdmVydGljZXMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLm51bUNodW5rcyAtIFRoZSBzaXplIG9mIHRoZSBhdGxhcywgaW4gdGlsZXMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihnbCwgcG9pbnRlcnMsIG9wdGlvbnMgPSB7fSkge1xuXHRcdC8vIGdldCBjb250ZXh0XG5cdFx0dGhpcy5nbCA9IGdsO1xuXHRcdC8vIGdldCB0aGUgZXh0ZW5zaW9uIGZvciBoYXJkd2FyZSBpbnN0YW5jaW5nXG5cdFx0dGhpcy5leHQgPSBnbC5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnKTtcblx0XHRpZiAoIXRoaXMuZXh0KSB7XG5cdFx0XHR0aHJvdyAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cyBXZWJHTCBleHRlbnNpb24gaXMgbm90IHN1cHBvcnRlZCc7XG5cdFx0fVxuXHRcdHRoaXMubnVtQ2h1bmtzID0gZGVmYXVsdFRvKG9wdGlvbnMubnVtQ2h1bmtzLCAyNTYpO1xuXHRcdHRoaXMuY2h1bmtTaXplID0gZGVmYXVsdFRvKG9wdGlvbnMuY2h1bmtTaXplLCAxMjggKiAxMjgpO1xuXHRcdC8vIHNldCB0aGUgcG9pbnRlcnMgb2YgdGhlIGF0bGFzXG5cdFx0dGhpcy5wb2ludGVycyA9IHBhcnNlQXR0cmlidXRlUG9pbnRlcnMocG9pbnRlcnMpO1xuXHRcdC8vIGNhbGMgc3RyaWRlIG9mIHRoZSBhdGxhc1xuXHRcdHRoaXMuc3RyaWRlID0gY2FsY1N0cmlkZSh0aGlzLnBvaW50ZXJzKTtcblx0XHQvLyBjcmVhdGUgYXZhaWxhYmxlIGNodW5rc1xuXHRcdHRoaXMuYXZhaWxhYmxlID0gbmV3IEFycmF5KHRoaXMubnVtQ2h1bmtzKTtcblx0XHQvLyBjYWxjIHRoZSBjaHVuayBieXRlIHNpemVcblx0XHRjb25zdCBjaHVua0J5dGVTaXplID0gY2FsY0NodW5rQnl0ZVNpemUoXG5cdFx0XHR0aGlzLnBvaW50ZXJzLFxuXHRcdFx0dGhpcy5jaHVua1NpemUpO1xuXHRcdC8vIGZvciBlYWNoIGNodW5rXG5cdFx0Zm9yIChsZXQgaT0wOyBpPHRoaXMubnVtQ2h1bmtzOyBpKyspIHtcblx0XHRcdGNvbnN0IGNodW5rT2Zmc2V0ID0gaSAqIHRoaXMuY2h1bmtTaXplO1xuXHRcdFx0Y29uc3QgY2h1bmtCeXRlT2Zmc2V0ID0gaSAqIGNodW5rQnl0ZVNpemU7XG5cdFx0XHRjb25zdCBhdmFpbGFibGUgPSB7XG5cdFx0XHRcdGNvdW50OiAwLFxuXHRcdFx0XHRjaHVua09mZnNldDogY2h1bmtPZmZzZXQsXG5cdFx0XHRcdGNodW5rQnl0ZU9mZnNldDogY2h1bmtCeXRlT2Zmc2V0LFxuXHRcdFx0XHRieXRlT2Zmc2V0czoge31cblx0XHRcdH07XG5cdFx0XHQvLyBjYWxjdWxhdGUgaW50ZXJsZWF2ZWQgb2Zmc2V0cyAvIHN0cmlkZSwgdGhpcyBvbmx5IG5lZWRzXG5cdFx0XHQvLyB0byBiZSBkb25lIG9uY2Vcblx0XHRcdGNhbGNCeXRlT2Zmc2V0cyhcblx0XHRcdFx0YXZhaWxhYmxlLFxuXHRcdFx0XHR0aGlzLnBvaW50ZXJzLFxuXHRcdFx0XHRjaHVua0J5dGVPZmZzZXQpO1xuXHRcdFx0Ly8gYWRkIGNodW5rXG5cdFx0XHR0aGlzLmF2YWlsYWJsZVtpXSA9IGF2YWlsYWJsZTtcblx0XHR9XG5cdFx0Ly8gY3JlYXRlIHVzZWQgY2h1bmsgbWFwXG5cdFx0dGhpcy51c2VkID0gbmV3IE1hcCgpO1xuXHRcdC8vIGNyZWF0ZSBidWZmZXJcblx0XHR0aGlzLmJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdC8vIGNhbGMgdG90YWwgc2l6ZSBvZiB0aGUgYnVmZmVyXG5cdFx0Y29uc3QgYnl0ZVNpemUgPSBjaHVua0J5dGVTaXplICogdGhpcy5udW1DaHVua3M7XG5cdFx0Ly8gYnVmZmVyIHRoZSBkYXRhXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcblx0XHRnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgYnl0ZVNpemUsIGdsLkRZTkFNSUNfRFJBVyk7XG5cdH1cblxuXHQvKipcblx0ICogVGVzdCB3aGV0aGVyIG9yIG5vdCBhIGtleSBpcyBoZWxkIGluIHRoZSBhdGxhcy5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IGtleSAtIFRoZSBrZXkgdG8gdGVzdC5cblx0ICpcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBjb29yZCBleGlzdHMgaW4gdGhlIHB5cmFtaWQuXG5cdCAqL1xuXHRoYXMoa2V5KSB7XG5cdFx0cmV0dXJuIHRoaXMudXNlZC5oYXMoa2V5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjaHVuayBtYXRjaGluZyB0aGUgcHJvdmlkZWQga2V5LiBJZiB0aGUgY2h1bmsgZG9lcyBub3Rcblx0ICogZXhpc3QsIHJldHVybnMgdW5kZWZpbmVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgY2h1bmsgdG8gcmV0dXJuLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY2h1bmsgb2JqZWN0LlxuXHQgKi9cblx0Z2V0KGtleSkge1xuXHRcdHJldHVybiB0aGlzLnVzZWQuZ2V0KGtleSk7XG5cdH1cblxuXHQvKipcblx0ICogU2V0IHRoZSB2ZXJ0ZXggZGF0YSBmb3IgdGhlIHByb3ZpZGVkIGtleS5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIHZlcnRleCBkYXRhLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gY291bnQgLSBUaGUgY291bnQgb2YgdmVydGljZXMgYWRkZWQuXG5cdCAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEgLSBUaGUgdmVydGV4IGRhdGEuXG5cdCAqL1xuXHRzZXQoa2V5LCBkYXRhLCBjb3VudCkge1xuXHRcdGlmICh0aGlzLmhhcyhrZXkpKSB7XG5cdFx0XHR0aHJvdyBgVGlsZSBvZiBjb29yZCAke2tleX0gYWxyZWFkeSBleGlzdHMgaW4gdGhlIGF0bGFzYDtcblx0XHR9XG5cdFx0aWYgKHRoaXMuYXZhaWxhYmxlLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0dGhyb3cgJ05vIGF2YWlsYWJsZSB2ZXJ0ZXggY2h1bmtzIGluIGF0bGFzJztcblx0XHR9XG5cdFx0Ly8gZ2V0IGFuIGF2YWlsYWJsZSBjaHVua1xuXHRcdGNvbnN0IGNodW5rID0gdGhpcy5hdmFpbGFibGUucG9wKCk7XG5cdFx0Ly8gdXBkYXRlIGNodW5rIGNvdW50XG5cdFx0Y2h1bmsuY291bnQgPSBjb3VudDtcblx0XHQvLyBvbmx5IGFjdHVhbGx5IGJ1ZmZlciB0aGUgZGF0YSBpZiB0aGVyZSBpcyAgZGF0YVxuXHRcdGlmIChjb3VudCA+IDApIHtcblx0XHRcdC8vIGJ1ZmZlciB0aGUgZGF0YVxuXHRcdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYnVmZmVyKTtcblx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBjaHVuay5jaHVua0J5dGVPZmZzZXQsIGRhdGEpO1xuXHRcdH1cblx0XHQvLyBhZGQgdG8gdXNlZFxuXHRcdHRoaXMudXNlZC5zZXQoa2V5LCBjaHVuayk7XG5cdH1cblxuXHQvKipcblx0ICogRmxhZ3MgdGhlIGNodW5rIG1hdGNoaW5nIHRoZSBwcm92aWRlZCBrZXkgYXMgdW51c2VkIGluIHRoZSBhdGxhcy5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGNodW5rIHRvIGZyZWUuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtWZXJ0ZXhBdGxhc30gVGhlIFZlcnRleEF0bGFzIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0ZGVsZXRlKGtleSkge1xuXHRcdGlmICghdGhpcy5oYXMoa2V5KSkge1xuXHRcdFx0dGhyb3cgYFRpbGUgb2YgY29vcmQgJHtrZXl9IGRvZXMgbm90IGV4aXN0IGluIHRoZSBhdGxhc2A7XG5cdFx0fVxuXHRcdC8vIGdldCBjaHVua1xuXHRcdGNvbnN0IGNodW5rID0gdGhpcy51c2VkLmdldChrZXkpO1xuXHRcdC8vIHJlbW92ZSBmcm9tIHVzZWRcblx0XHR0aGlzLnVzZWQuZGVsZXRlKGtleSk7XG5cdFx0Ly8gYWRkIHRvIGF2YWlsYWJsZVxuXHRcdHRoaXMuYXZhaWxhYmxlLnB1c2goY2h1bmspO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpbmRzIHRoZSB2ZXJ0ZXggYXRsYXMgYW5kIGFjdGl2YXRlcyB0aGUgYXR0cmlidXRlIGFycmF5cy5cblx0ICpcblx0ICogQHJldHVybnMge1ZlcnRleEF0bGFzfSBUaGUgVmVydGV4QXRsYXMgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRiaW5kKCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHQvLyBiaW5kIHRoZSBidWZmZXJcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xuXHRcdC8vIGZvciBlYWNoIGF0dHJpYnV0ZSBwb2ludGVyXG5cdFx0dGhpcy5wb2ludGVycy5mb3JFYWNoKChwb2ludGVyLCBpbmRleCkgPT4ge1xuXHRcdFx0Ly8gZW5hYmxlIGF0dHJpYnV0ZSBpbmRleFxuXHRcdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xuXHRcdFx0Ly8gc2V0IGF0dHJpYnV0ZSBwb2ludGVyXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuXHRcdFx0XHRpbmRleCxcblx0XHRcdFx0cG9pbnRlci5zaXplLFxuXHRcdFx0XHRnbFtwb2ludGVyLnR5cGVdLFxuXHRcdFx0XHRmYWxzZSxcblx0XHRcdFx0cG9pbnRlci5ieXRlU3RyaWRlLFxuXHRcdFx0XHRwb2ludGVyLmJ5dGVPZmZzZXQpO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpbmRzIHRoZSB2ZXJ0ZXggYXRsYXMgYW5kIGFjdGl2YXRlcyB0aGUgYXR0cmlidXRlIGFycmF5cyBmb3Jcblx0ICogaW5zdGFuY2luZy5cblx0ICpcblx0ICogQHJldHVybnMge1ZlcnRleEF0bGFzfSBUaGUgVmVydGV4QXRsYXMgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRiaW5kSW5zdGFuY2VkKCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRjb25zdCBleHQgPSB0aGlzLmV4dDtcblx0XHQvLyBiaW5kIHRoZSBidWZmZXJcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xuXHRcdC8vIGZvciBlYWNoIGF0dHJpYnV0ZSBwb2ludGVyXG5cdFx0dGhpcy5wb2ludGVycy5mb3JFYWNoKChwb2ludGVyLCBpbmRleCkgPT4ge1xuXHRcdFx0Ly8gZW5hYmxlIGF0dHJpYnV0ZSBpbmRleFxuXHRcdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xuXHRcdFx0Ly8gZW5hYmxlIGluc3RhbmNpbmcgdGhpcyBhdHRyaWJ1dGVcblx0XHRcdGV4dC52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUoaW5kZXgsIDEpO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVuYmluZHMgdGhlIHZlcnRleCBhdGxhcyBhbmQgZGlzYWJsZXMgdGhlIHZlcnRleCBhcnJheXMuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtWZXJ0ZXhBdGxhc30gVGhlIFZlcnRleEF0bGFzIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0dW5iaW5kKCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHQvLyBmb3IgZWFjaCBhdHRyaWJ1dGUgcG9pbnRlclxuXHRcdHRoaXMucG9pbnRlcnMuZm9yRWFjaCgocG9pbnRlciwgaW5kZXgpID0+IHtcblx0XHRcdC8vIGRpc2FibGUgYXR0cmlidXRlIGluZGV4XG5cdFx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVuYmluZHMgdGhlIHZlcnRleCBhdGxhcyBhbmQgZGlzYWJsZXMgdGhlIHZlcnRleCBhcnJheXMgZm9yXG5cdCAqIGluc3RhbmNpbmcuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtWZXJ0ZXhBdGxhc30gVGhlIFZlcnRleEF0bGFzIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0dW5iaW5kSW5zdGFuY2VkKCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRjb25zdCBleHQgPSB0aGlzLmV4dDtcblx0XHQvLyBmb3IgZWFjaCBhdHRyaWJ1dGUgcG9pbnRlclxuXHRcdHRoaXMucG9pbnRlcnMuZm9yRWFjaCgocG9pbnRlciwgaW5kZXgpID0+IHtcblx0XHRcdC8vIGRpc2FibGUgYXR0cmlidXRlIGluZGV4XG5cdFx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xuXHRcdFx0Ly8gZGlzYWJsZSBpbnN0YW5jaW5nIHRoaXMgYXR0cmlidXRlXG5cdFx0XHRleHQudmVydGV4QXR0cmliRGl2aXNvckFOR0xFKGluZGV4LCAwKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGRyYXcoa2V5LCBtb2RlLCBvZmZzZXQgPSAwLCBjb3VudCA9IDApIHtcblx0XHRpZiAoIXRoaXMuaGFzKGtleSkpIHtcblx0XHRcdHRocm93IGBUaWxlIG9mIGNvb3JkICR7a2V5fSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgYXRsYXNgO1xuXHRcdH1cblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cdFx0Y29uc3QgY2h1bmsgPSB0aGlzLnVzZWQuZ2V0KGtleSk7XG5cdFx0Ly8gb25seSBhY3R1YWxseSBkcmF3IGlmIGNvdW50ID4gMFxuXHRcdGlmIChjaHVuay5jb3VudCA+IDApIHtcblx0XHRcdC8vIGRyYXcgdGhlIGNodW5rXG5cdFx0XHRnbC5kcmF3QXJyYXlzKGdsW21vZGVdLCBjaHVuay5jaHVua09mZnNldCArIG9mZnNldCwgY291bnQgPyBjb3VudCA6IGNodW5rLmNvdW50KTtcblx0XHR9XG5cdH1cblxuXHRkcmF3SW5zdGFuY2VkKGtleSwgbW9kZSwgY291bnQpIHtcblx0XHRpZiAoIXRoaXMuaGFzKGtleSkpIHtcblx0XHRcdHRocm93IGBUaWxlIG9mIGNvb3JkICR7a2V5fSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgYXRsYXNgO1xuXHRcdH1cblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cdFx0Y29uc3QgZXh0ID0gdGhpcy5leHQ7XG5cdFx0Y29uc3QgY2h1bmsgPSB0aGlzLnVzZWQuZ2V0KGtleSk7XG5cdFx0Ly8gZm9yIGVhY2ggYXR0cmlidXRlIHBvaW50ZXJcblx0XHR0aGlzLnBvaW50ZXJzLmZvckVhY2goKHBvaW50ZXIsIGluZGV4KSA9PiB7XG5cdFx0XHQvLyBzZXQgYXR0cmlidXRlIHBvaW50ZXJcblx0XHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG5cdFx0XHRcdGluZGV4LFxuXHRcdFx0XHRwb2ludGVyLnNpemUsXG5cdFx0XHRcdGdsW3BvaW50ZXIudHlwZV0sXG5cdFx0XHRcdGZhbHNlLFxuXHRcdFx0XHRwb2ludGVyLmJ5dGVTdHJpZGUsXG5cdFx0XHRcdGNodW5rLmJ5dGVPZmZzZXRzW2luZGV4XSk7XG5cdFx0fSk7XG5cdFx0Ly8gb25seSBhY3R1YWxseSBkcmF3IGlmIGNvdW50ID4gMFxuXHRcdGlmIChjaHVuay5jb3VudCA+IDApIHtcblx0XHRcdC8vIGRyYXcgdGhlIGJvdW5kIHZlcnRleCBhcnJheVxuXHRcdFx0ZXh0LmRyYXdBcnJheXNJbnN0YW5jZWRBTkdMRShnbFttb2RlXSwgMCwgY291bnQsIGNodW5rLmNvdW50KTtcblx0XHR9XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWZXJ0ZXhBdGxhcztcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgZm9ySW4gPSByZXF1aXJlKCdsb2Rhc2gvZm9ySW4nKTtcblxuLy8gQ29uc3RhbnRzXG5cbmNvbnN0IEJZVEVTX1BFUl9UWVBFID0ge1xuXHRCWVRFOiAxLFxuXHRVTlNJR05FRF9CWVRFOiAxLFxuXHRTSE9SVDogMixcblx0VU5TSUdORURfU0hPUlQ6IDIsXG5cdEZJWEVEOiA0LFxuXHRGTE9BVDogNFxufTtcblxuLy8gUHJpdmF0ZSBNZXRob2RzXG5cbmNvbnN0IGdldFN0cmlkZSA9IGZ1bmN0aW9uKHBvaW50ZXJzKSB7XG5cdC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lIGF0dHJpYnV0ZSBwb2ludGVyIGFzc2lnbmVkIHRvIHRoaXMgYnVmZmVyLFxuXHQvLyB0aGVyZSBpcyBubyBuZWVkIGZvciBzdHJpZGUsIHNldCB0byBkZWZhdWx0IG9mIDBcblx0aWYgKHBvaW50ZXJzLnNpemUgPT09IDEpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXHRsZXQgbWF4Qnl0ZU9mZnNldCA9IDA7XG5cdGxldCBieXRlU2l6ZVN1bSA9IDA7XG5cdGxldCBieXRlU3RyaWRlID0gMDtcblx0cG9pbnRlcnMuZm9yRWFjaChwb2ludGVyID0+IHtcblx0XHRjb25zdCBieXRlT2Zmc2V0ID0gcG9pbnRlci5ieXRlT2Zmc2V0O1xuXHRcdGNvbnN0IHNpemUgPSBwb2ludGVyLnNpemU7XG5cdFx0Y29uc3QgdHlwZSA9IHBvaW50ZXIudHlwZTtcblx0XHQvLyB0cmFjayB0aGUgc3VtIG9mIGVhY2ggYXR0cmlidXRlIHNpemVcblx0XHRieXRlU2l6ZVN1bSArPSBzaXplICogQllURVNfUEVSX1RZUEVbdHlwZV07XG5cdFx0Ly8gdHJhY2sgdGhlIGxhcmdlc3Qgb2Zmc2V0IHRvIGRldGVybWluZSB0aGUgYnl0ZSBzdHJpZGUgb2YgdGhlIGJ1ZmZlclxuXHRcdGlmIChieXRlT2Zmc2V0ID4gbWF4Qnl0ZU9mZnNldCkge1xuXHRcdFx0bWF4Qnl0ZU9mZnNldCA9IGJ5dGVPZmZzZXQ7XG5cdFx0XHRieXRlU3RyaWRlID0gYnl0ZU9mZnNldCArIChzaXplICogQllURVNfUEVSX1RZUEVbdHlwZV0pO1xuXHRcdH1cblx0fSk7XG5cdC8vIGNoZWNrIGlmIHRoZSBtYXggYnl0ZSBvZmZzZXQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSB0aGUgc3VtXG5cdC8vIG9mIHRoZSBzaXplcy4gSWYgc28gdGhpcyBidWZmZXIgaXMgbm90IGludGVybGVhdmVkIGFuZCBkb2VzIG5vdCBuZWVkXG5cdC8vIGEgc3RyaWRlLlxuXHRpZiAobWF4Qnl0ZU9mZnNldCA+PSBieXRlU2l6ZVN1bSkge1xuXHRcdC8vIFRPRE86IHRlc3Qgd2hhdCBzdHJpZGUgPT09IDAgZG9lcyBmb3IgYW4gaW50ZXJsZWF2ZWQgYnVmZmVyIG9mXG5cdFx0Ly8gbGVuZ3RoID09PSAxLlxuXHRcdHJldHVybiAwO1xuXHR9XG5cdHJldHVybiBieXRlU3RyaWRlO1xufTtcblxuY29uc3QgZ2V0QXR0cmlidXRlUG9pbnRlcnMgPSBmdW5jdGlvbihhdHRyaWJ1dGVQb2ludGVycykge1xuXHQvLyBwYXJzZSBwb2ludGVycyB0byBlbnN1cmUgdGhleSBhcmUgdmFsaWRcblx0Y29uc3QgcG9pbnRlcnMgPSBuZXcgTWFwKCk7XG5cdGZvckluKGF0dHJpYnV0ZVBvaW50ZXJzLCAocG9pbnRlciwga2V5KSA9PiB7XG5cdFx0Ly8gcGFyc2UgaW5kZXggZnJvbSBzdHJpbmcgdG8gaW50XG5cdFx0Y29uc3QgaW5kZXggPSBwYXJzZUludChrZXksIDEwKTtcblx0XHQvLyBlbnN1cmUgYnl0ZSBvZmZzZXQgZXhpc3RzXG5cdFx0cG9pbnRlci5ieXRlT2Zmc2V0ID0gZGVmYXVsdFRvKHBvaW50ZXIuYnl0ZU9mZnNldCwgMCk7XG5cdFx0Ly8gYWRkIHRvIG1hcFxuXHRcdHBvaW50ZXJzLnNldChpbmRleCwgcG9pbnRlcik7XG5cdH0pO1xuXHRyZXR1cm4gcG9pbnRlcnM7XG59O1xuXG4vKipcbiAqIEBjbGFzcyBWZXJ0ZXhCdWZmZXJcbiAqIEBjbGFzc2Rlc2MgQSB2ZXJ0ZXggYnVmZmVyIG9iamVjdC5cbiAqL1xuY2xhc3MgVmVydGV4QnVmZmVyIHtcblxuXHQvKipcblx0ICogSW5zdGFudGlhdGVzIGFuIFZlcnRleEJ1ZmZlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFRoZSBXZWJHTCBjb250ZXh0LlxuXHQgKiBAcGFyYW0ge1dlYkdMQnVmZmVyfEFycmF5QnVmZmVyfE51bWJlcn0gYXJnIC0gVGhlIGJ1ZmZlciBvciBsZW5ndGggb2YgdGhlIGJ1ZmZlci5cblx0ICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJzIC0gVGhlIGFycmF5IHBvaW50ZXIgbWFwLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSB2ZXJ0ZXggYnVmZmVyIG9wdGlvbnMuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLm1vZGUgLSBUaGUgZHJhdyBtb2RlIC8gcHJpbWl0aXZlIHR5cGUuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmluZGV4T2Zmc2V0IC0gVGhlIGluZGV4IG9mZnNldCBpbnRvIHRoZSBkcmF3biBidWZmZXIuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmNvdW50IC0gVGhlIG51bWJlciBvZiBpbmRpY2VzIHRvIGRyYXcuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihnbCwgYXJnLCBwb2ludGVycyA9IHt9LCBvcHRpb25zID0ge30pIHtcblx0XHR0aGlzLmdsID0gZ2w7XG5cdFx0dGhpcy5tb2RlID0gZGVmYXVsdFRvKG9wdGlvbnMubW9kZSwgJ1RSSUFOR0xFUycpO1xuXHRcdHRoaXMuY291bnQgPSBkZWZhdWx0VG8ob3B0aW9ucy5jb3VudCwgMCk7XG5cdFx0dGhpcy5pbmRleE9mZnNldCA9IGRlZmF1bHRUbyhvcHRpb25zLmluZGV4T2Zmc2V0LCAwKTtcblx0XHQvLyBmaXJzdCwgc2V0IHRoZSBhdHRyaWJ1dGUgcG9pbnRlcnNcblx0XHR0aGlzLnBvaW50ZXJzID0gZ2V0QXR0cmlidXRlUG9pbnRlcnMocG9pbnRlcnMpO1xuXHRcdC8vIHNldCB0aGUgYnl0ZSBzdHJpZGVcblx0XHR0aGlzLmJ5dGVTdHJpZGUgPSBnZXRTdHJpZGUodGhpcy5wb2ludGVycyk7XG5cdFx0Ly8gY3JlYXRlIGJ1ZmZlclxuXHRcdGlmIChhcmcgaW5zdGFuY2VvZiBXZWJHTEJ1ZmZlcikge1xuXHRcdFx0dGhpcy5idWZmZXIgPSBhcmc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0XHRpZiAoYXJnKSB7XG5cdFx0XHRcdC8vIGJ1ZmZlciB0aGUgZGF0YVxuXHRcdFx0XHR0aGlzLmJ1ZmZlckRhdGEoYXJnKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogVXBsb2FkIHZlcnRleCBkYXRhIHRvIHRoZSBHUFUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ8TnVtYmVyfSBhcmcgLSBUaGUgYXJyYXkgb2YgZGF0YSB0byBidWZmZXIsIG9yIHNpemUgb2YgdGhlIGJ1ZmZlciBpbiBieXRlcy5cblx0ICpcblx0ICogQHJldHVybiB7VmVydGV4QnVmZmVyfSBUaGUgdmVydGV4IGJ1ZmZlciBvYmplY3QsIGZvciBjaGFpbmluZy5cblx0ICovXG5cdGJ1ZmZlckRhdGEoYXJnKSB7XG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmJ1ZmZlcik7XG5cdFx0Z2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIGFyZywgZ2wuU1RBVElDX0RSQVcpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVwbG9hZCBwYXJ0aWFsIHZlcnRleCBkYXRhIHRvIHRoZSBHUFUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5IC0gVGhlIGFycmF5IG9mIGRhdGEgdG8gYnVmZmVyLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gYnl0ZU9mZnNldCAtIFRoZSBieXRlIG9mZnNldCBhdCB3aGljaCB0byBidWZmZXIuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlcnRleEJ1ZmZlcn0gVGhlIHZlcnRleCBidWZmZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRidWZmZXJTdWJEYXRhKGFycmF5LCBieXRlT2Zmc2V0ID0gMCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xuXHRcdGdsLmJ1ZmZlclN1YkRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBieXRlT2Zmc2V0LCBhcnJheSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQmluZHMgdGhlIHZlcnRleCBidWZmZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZXJ0ZXhCdWZmZXJ9IC0gUmV0dXJucyB0aGUgdmVydGV4IGJ1ZmZlciBvYmplY3QgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0YmluZCgpIHtcblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cdFx0Ly8gYmluZCBidWZmZXJcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5idWZmZXIpO1xuXHRcdC8vIGZvciBlYWNoIGF0dHJpYnV0ZSBwb2ludGVyXG5cdFx0dGhpcy5wb2ludGVycy5mb3JFYWNoKChwb2ludGVyLCBpbmRleCkgPT4ge1xuXHRcdFx0Ly8gc2V0IGF0dHJpYnV0ZSBwb2ludGVyXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuXHRcdFx0XHRpbmRleCxcblx0XHRcdFx0cG9pbnRlci5zaXplLFxuXHRcdFx0XHRnbFtwb2ludGVyLnR5cGVdLFxuXHRcdFx0XHRmYWxzZSxcblx0XHRcdFx0dGhpcy5ieXRlU3RyaWRlLFxuXHRcdFx0XHRwb2ludGVyLmJ5dGVPZmZzZXQpO1xuXHRcdFx0Ly8gZW5hYmxlIGF0dHJpYnV0ZSBpbmRleFxuXHRcdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVuYmluZHMgdGhlIHZlcnRleCBidWZmZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZXJ0ZXhCdWZmZXJ9IFRoZSB2ZXJ0ZXggYnVmZmVyIG9iamVjdCwgZm9yIGNoYWluaW5nLlxuXHQgKi9cblx0dW5iaW5kKCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHR0aGlzLnBvaW50ZXJzLmZvckVhY2goKHBvaW50ZXIsIGluZGV4KSA9PiB7XG5cdFx0XHQvLyBkaXNhYmxlIGF0dHJpYnV0ZSBpbmRleFxuXHRcdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGluZGV4KTtcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlIHRoZSBkcmF3IGNvbW1hbmQgZm9yIHRoZSBib3VuZCBidWZmZXIuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlcnRleEJ1ZmZlcn0gVGhlIHZlcnRleCBidWZmZXIgb2JqZWN0LCBmb3IgY2hhaW5pbmcuXG5cdCAqL1xuXHRkcmF3KCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRnbC5kcmF3QXJyYXlzKGdsW3RoaXMubW9kZV0sIHRoaXMuaW5kZXhPZmZzZXQsIHRoaXMuY291bnQpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmVydGV4QnVmZmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIElzc3VlcyBhIFhIUiBhbmQgbG9hZHMgYW4gQXJyYXlCdWZmZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybCAtIFRoZSB1cmwuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkb25lIC0gVGhlIGNhbGxiYWNrLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVybCwgZG9uZSkge1xuXHRjb25zdCByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0cmVxLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG5cdHJlcS5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuXHRyZXEub25sb2FkID0gKCkgPT4ge1xuXHRcdGNvbnN0IGFycmF5YnVmZmVyID0gcmVxLnJlc3BvbnNlO1xuXHRcdGlmIChhcnJheWJ1ZmZlcikge1xuXHRcdFx0ZG9uZShudWxsLCBhcnJheWJ1ZmZlcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGVyciA9IGBVbmFibGUgdG8gbG9hZCBBcnJheUJ1ZmZlciBmcm9tIFVSTDogXFxgJHtldmVudC5wYXRoWzBdLmN1cnJlbnRTcmN9XFxgYDtcblx0XHRcdGRvbmUoZXJyLCBudWxsKTtcblx0XHR9XG5cdH07XG5cdHJlcS5vbmVycm9yID0gKGV2ZW50KSA9PiB7XG5cdFx0Y29uc3QgZXJyID0gYFVuYWJsZSB0byBsb2FkIEFycmF5QnVmZmVyIGZyb20gVVJMOiBcXGAke2V2ZW50LnBhdGhbMF0uY3VycmVudFNyY31cXGBgO1xuXHRcdGRvbmUoZXJyLCBudWxsKTtcblx0fTtcblx0cmVxLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG5cdHJlcS5zZW5kKG51bGwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBJc3N1ZXMgYSBYSFIgYW5kIGxvYWRzIGFuIEltYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgLSBUaGUgdXJsLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZG9uZSAtIFRoZSBjYWxsYmFjay5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1cmwsIGRvbmUpIHtcblx0Y29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcblx0aW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuXHRcdGRvbmUobnVsbCwgaW1hZ2UpO1xuXHR9O1xuXHRpbWFnZS5vbmVycm9yID0gKGV2ZW50KSA9PiB7XG5cdFx0Y29uc3QgZXJyID0gYFVuYWJsZSB0byBsb2FkIGltYWdlIGZyb20gVVJMOiBcXGAke2V2ZW50LnBhdGhbMF0uY3VycmVudFNyY31cXGBgO1xuXHRcdGRvbmUoZXJyLCBudWxsKTtcblx0fTtcblx0aW1hZ2UuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcblx0aW1hZ2Uuc3JjID0gdXJsO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuICgnICsgZXIgKyAnKScpO1xuICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodGhpcy5fZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSlcbiAgICAgIHJldHVybiAxO1xuICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpXG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4xLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOS0yMlQyMjozMFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMS4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRub2RlTmFtZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbXBsZSBzZWxlY3RvciB0aGF0IGNhbiBiZSBmaWx0ZXJlZCBkaXJlY3RseSwgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0fVxuXG5cdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90ICYmIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRcdHJlc29sdmUuY2FsbCggdW5kZWZpbmVkLCB2YWx1ZSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5jYWxsKCB1bmRlZmluZWQsIHZhbHVlICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsXG5cdFx0c2NhbGUgPSAxLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogalF1ZXJ5LmlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSxcblx0XHR2YWwgPSAwO1xuXG5cdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRpZiAoIGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0aSA9IDQ7XG5cblx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHR9IGVsc2Uge1xuXHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxuXHR2YXIgdmFsLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdGlmICggZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHR2YWwgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpWyBuYW1lIF07XG5cdH1cblxuXHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHJhZigpIHtcblx0aWYgKCB0aW1lcklkICkge1xuXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJhZiApO1xuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmIG9yIGlmIGRvY3VtZW50IGlzIGhpZGRlblxuXHRpZiAoIGpRdWVyeS5meC5vZmYgfHwgZG9jdW1lbnQuaGlkZGVuICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCAhdGltZXJJZCApIHtcblx0XHR0aW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCByYWYgKSA6XG5cdFx0XHR3aW5kb3cuc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aWYgKCB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKCB0aW1lcklkICk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcblx0fVxuXG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLCByZWN0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGVsZW1lbnQgaXMgbm90IGhpZGRlbiAoZGlzcGxheTogbm9uZSlcblx0XHRpZiAoIHJlY3Qud2lkdGggfHwgcmVjdC5oZWlnaHQgKSB7XG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0cmV0dXJuIHJlY3Q7XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7XG5cdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKSxcblx0XHRcdFx0bGVmdDogcGFyZW50T2Zmc2V0LmxlZnQgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsInZhciBqc29uID0gdHlwZW9mIEpTT04gIT09ICd1bmRlZmluZWQnID8gSlNPTiA6IHJlcXVpcmUoJ2pzb25pZnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSBvcHRzID0ge307XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSBvcHRzID0geyBjbXA6IG9wdHMgfTtcbiAgICB2YXIgc3BhY2UgPSBvcHRzLnNwYWNlIHx8ICcnO1xuICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdudW1iZXInKSBzcGFjZSA9IEFycmF5KHNwYWNlKzEpLmpvaW4oJyAnKTtcbiAgICB2YXIgY3ljbGVzID0gKHR5cGVvZiBvcHRzLmN5Y2xlcyA9PT0gJ2Jvb2xlYW4nKSA/IG9wdHMuY3ljbGVzIDogZmFsc2U7XG4gICAgdmFyIHJlcGxhY2VyID0gb3B0cy5yZXBsYWNlciB8fCBmdW5jdGlvbihrZXksIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuICAgIHZhciBjbXAgPSBvcHRzLmNtcCAmJiAoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW9iaiA9IHsga2V5OiBhLCB2YWx1ZTogbm9kZVthXSB9O1xuICAgICAgICAgICAgICAgIHZhciBib2JqID0geyBrZXk6IGIsIHZhbHVlOiBub2RlW2JdIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoYW9iaiwgYm9iaik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0pKG9wdHMuY21wKTtcblxuICAgIHZhciBzZWVuID0gW107XG4gICAgcmV0dXJuIChmdW5jdGlvbiBzdHJpbmdpZnkgKHBhcmVudCwga2V5LCBub2RlLCBsZXZlbCkge1xuICAgICAgICB2YXIgaW5kZW50ID0gc3BhY2UgPyAoJ1xcbicgKyBuZXcgQXJyYXkobGV2ZWwgKyAxKS5qb2luKHNwYWNlKSkgOiAnJztcbiAgICAgICAgdmFyIGNvbG9uU2VwYXJhdG9yID0gc3BhY2UgPyAnOiAnIDogJzonO1xuXG4gICAgICAgIGlmIChub2RlICYmIG5vZGUudG9KU09OICYmIHR5cGVvZiBub2RlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUudG9KU09OKCk7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlID0gcmVwbGFjZXIuY2FsbChwYXJlbnQsIGtleSwgbm9kZSk7XG5cbiAgICAgICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcgfHwgbm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGpzb24uc3RyaW5naWZ5KG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KG5vZGUpKSB7XG4gICAgICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHN0cmluZ2lmeShub2RlLCBpLCBub2RlW2ldLCBsZXZlbCsxKSB8fCBqc29uLnN0cmluZ2lmeShudWxsKTtcbiAgICAgICAgICAgICAgICBvdXQucHVzaChpbmRlbnQgKyBzcGFjZSArIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICdbJyArIG91dC5qb2luKCcsJykgKyBpbmRlbnQgKyAnXSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2Vlbi5pbmRleE9mKG5vZGUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGlmIChjeWNsZXMpIHJldHVybiBqc29uLnN0cmluZ2lmeSgnX19jeWNsZV9fJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29udmVydGluZyBjaXJjdWxhciBzdHJ1Y3R1cmUgdG8gSlNPTicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBzZWVuLnB1c2gobm9kZSk7XG5cbiAgICAgICAgICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhub2RlKS5zb3J0KGNtcCAmJiBjbXAobm9kZSkpO1xuICAgICAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc3RyaW5naWZ5KG5vZGUsIGtleSwgbm9kZVtrZXldLCBsZXZlbCsxKTtcblxuICAgICAgICAgICAgICAgIGlmKCF2YWx1ZSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBqc29uLnN0cmluZ2lmeShrZXkpXG4gICAgICAgICAgICAgICAgICAgICsgY29sb25TZXBhcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgb3V0LnB1c2goaW5kZW50ICsgc3BhY2UgKyBrZXlWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWVuLnNwbGljZShzZWVuLmluZGV4T2Yobm9kZSksIDEpO1xuICAgICAgICAgICAgcmV0dXJuICd7JyArIG91dC5qb2luKCcsJykgKyBpbmRlbnQgKyAnfSc7XG4gICAgICAgIH1cbiAgICB9KSh7ICcnOiBvYmogfSwgJycsIG9iaiwgMCk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4ge30udG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5IHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWUgfTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufTtcbiIsImV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2xpYi9wYXJzZScpO1xuZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2xpYi9zdHJpbmdpZnknKTtcbiIsInZhciBhdCwgLy8gVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGNoYXJhY3RlclxuICAgIGNoLCAvLyBUaGUgY3VycmVudCBjaGFyYWN0ZXJcbiAgICBlc2NhcGVlID0ge1xuICAgICAgICAnXCInOiAgJ1wiJyxcbiAgICAgICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgICAgICcvJzogICcvJyxcbiAgICAgICAgYjogICAgJ1xcYicsXG4gICAgICAgIGY6ICAgICdcXGYnLFxuICAgICAgICBuOiAgICAnXFxuJyxcbiAgICAgICAgcjogICAgJ1xccicsXG4gICAgICAgIHQ6ICAgICdcXHQnXG4gICAgfSxcbiAgICB0ZXh0LFxuXG4gICAgZXJyb3IgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICAvLyBDYWxsIGVycm9yIHdoZW4gc29tZXRoaW5nIGlzIHdyb25nLlxuICAgICAgICB0aHJvdyB7XG4gICAgICAgICAgICBuYW1lOiAgICAnU3ludGF4RXJyb3InLFxuICAgICAgICAgICAgbWVzc2FnZTogbSxcbiAgICAgICAgICAgIGF0OiAgICAgIGF0LFxuICAgICAgICAgICAgdGV4dDogICAgdGV4dFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgXG4gICAgbmV4dCA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIC8vIElmIGEgYyBwYXJhbWV0ZXIgaXMgcHJvdmlkZWQsIHZlcmlmeSB0aGF0IGl0IG1hdGNoZXMgdGhlIGN1cnJlbnQgY2hhcmFjdGVyLlxuICAgICAgICBpZiAoYyAmJiBjICE9PSBjaCkge1xuICAgICAgICAgICAgZXJyb3IoXCJFeHBlY3RlZCAnXCIgKyBjICsgXCInIGluc3RlYWQgb2YgJ1wiICsgY2ggKyBcIidcIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEdldCB0aGUgbmV4dCBjaGFyYWN0ZXIuIFdoZW4gdGhlcmUgYXJlIG5vIG1vcmUgY2hhcmFjdGVycyxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICAgIFxuICAgICAgICBjaCA9IHRleHQuY2hhckF0KGF0KTtcbiAgICAgICAgYXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG4gICAgXG4gICAgbnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBQYXJzZSBhIG51bWJlciB2YWx1ZS5cbiAgICAgICAgdmFyIG51bWJlcixcbiAgICAgICAgICAgIHN0cmluZyA9ICcnO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNoID09PSAnLScpIHtcbiAgICAgICAgICAgIHN0cmluZyA9ICctJztcbiAgICAgICAgICAgIG5leHQoJy0nKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoY2ggPj0gJzAnICYmIGNoIDw9ICc5Jykge1xuICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJy4nKSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0gJy4nO1xuICAgICAgICAgICAgd2hpbGUgKG5leHQoKSAmJiBjaCA+PSAnMCcgJiYgY2ggPD0gJzknKSB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ2UnIHx8IGNoID09PSAnRScpIHtcbiAgICAgICAgICAgIHN0cmluZyArPSBjaDtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycpIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gY2g7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGNoID49ICcwJyAmJiBjaCA8PSAnOScpIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gY2g7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG51bWJlciA9ICtzdHJpbmc7XG4gICAgICAgIGlmICghaXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICAgICAgZXJyb3IoXCJCYWQgbnVtYmVyXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXG4gICAgc3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBQYXJzZSBhIHN0cmluZyB2YWx1ZS5cbiAgICAgICAgdmFyIGhleCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBzdHJpbmcgPSAnJyxcbiAgICAgICAgICAgIHVmZmZmO1xuICAgICAgICBcbiAgICAgICAgLy8gV2hlbiBwYXJzaW5nIGZvciBzdHJpbmcgdmFsdWVzLCB3ZSBtdXN0IGxvb2sgZm9yIFwiIGFuZCBcXCBjaGFyYWN0ZXJzLlxuICAgICAgICBpZiAoY2ggPT09ICdcIicpIHtcbiAgICAgICAgICAgIHdoaWxlIChuZXh0KCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ3UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1ZmZmZiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGV4ID0gcGFyc2VJbnQobmV4dCgpLCAxNik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShoZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ZmZmZiA9IHVmZmZmICogMTYgKyBoZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1ZmZmZik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVzY2FwZWVbY2hdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGVzY2FwZWVbY2hdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gY2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVycm9yKFwiQmFkIHN0cmluZ1wiKTtcbiAgICB9LFxuXG4gICAgd2hpdGUgPSBmdW5jdGlvbiAoKSB7XG5cbi8vIFNraXAgd2hpdGVzcGFjZS5cblxuICAgICAgICB3aGlsZSAoY2ggJiYgY2ggPD0gJyAnKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgd29yZCA9IGZ1bmN0aW9uICgpIHtcblxuLy8gdHJ1ZSwgZmFsc2UsIG9yIG51bGwuXG5cbiAgICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgIG5leHQoJ3QnKTtcbiAgICAgICAgICAgIG5leHQoJ3InKTtcbiAgICAgICAgICAgIG5leHQoJ3UnKTtcbiAgICAgICAgICAgIG5leHQoJ2UnKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgIG5leHQoJ2YnKTtcbiAgICAgICAgICAgIG5leHQoJ2EnKTtcbiAgICAgICAgICAgIG5leHQoJ2wnKTtcbiAgICAgICAgICAgIG5leHQoJ3MnKTtcbiAgICAgICAgICAgIG5leHQoJ2UnKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICBuZXh0KCduJyk7XG4gICAgICAgICAgICBuZXh0KCd1Jyk7XG4gICAgICAgICAgICBuZXh0KCdsJyk7XG4gICAgICAgICAgICBuZXh0KCdsJyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlcnJvcihcIlVuZXhwZWN0ZWQgJ1wiICsgY2ggKyBcIidcIik7XG4gICAgfSxcblxuICAgIHZhbHVlLCAgLy8gUGxhY2UgaG9sZGVyIGZvciB0aGUgdmFsdWUgZnVuY3Rpb24uXG5cbiAgICBhcnJheSA9IGZ1bmN0aW9uICgpIHtcblxuLy8gUGFyc2UgYW4gYXJyYXkgdmFsdWUuXG5cbiAgICAgICAgdmFyIGFycmF5ID0gW107XG5cbiAgICAgICAgaWYgKGNoID09PSAnWycpIHtcbiAgICAgICAgICAgIG5leHQoJ1snKTtcbiAgICAgICAgICAgIHdoaXRlKCk7XG4gICAgICAgICAgICBpZiAoY2ggPT09ICddJykge1xuICAgICAgICAgICAgICAgIG5leHQoJ10nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7ICAgLy8gZW1wdHkgYXJyYXlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChjaCkge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2godmFsdWUoKSk7XG4gICAgICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICddJykge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCddJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dCgnLCcpO1xuICAgICAgICAgICAgICAgIHdoaXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3IoXCJCYWQgYXJyYXlcIik7XG4gICAgfSxcblxuICAgIG9iamVjdCA9IGZ1bmN0aW9uICgpIHtcblxuLy8gUGFyc2UgYW4gb2JqZWN0IHZhbHVlLlxuXG4gICAgICAgIHZhciBrZXksXG4gICAgICAgICAgICBvYmplY3QgPSB7fTtcblxuICAgICAgICBpZiAoY2ggPT09ICd7Jykge1xuICAgICAgICAgICAgbmV4dCgneycpO1xuICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ30nKSB7XG4gICAgICAgICAgICAgICAgbmV4dCgnfScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7ICAgLy8gZW1wdHkgb2JqZWN0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoY2gpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBzdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB3aGl0ZSgpO1xuICAgICAgICAgICAgICAgIG5leHQoJzonKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKCdEdXBsaWNhdGUga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlKCk7XG4gICAgICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICd9Jykge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCd9Jyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5leHQoJywnKTtcbiAgICAgICAgICAgICAgICB3aGl0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVycm9yKFwiQmFkIG9iamVjdFwiKTtcbiAgICB9O1xuXG52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcblxuLy8gUGFyc2UgYSBKU09OIHZhbHVlLiBJdCBjb3VsZCBiZSBhbiBvYmplY3QsIGFuIGFycmF5LCBhIHN0cmluZywgYSBudW1iZXIsXG4vLyBvciBhIHdvcmQuXG5cbiAgICB3aGl0ZSgpO1xuICAgIHN3aXRjaCAoY2gpIHtcbiAgICBjYXNlICd7JzpcbiAgICAgICAgcmV0dXJuIG9iamVjdCgpO1xuICAgIGNhc2UgJ1snOlxuICAgICAgICByZXR1cm4gYXJyYXkoKTtcbiAgICBjYXNlICdcIic6XG4gICAgICAgIHJldHVybiBzdHJpbmcoKTtcbiAgICBjYXNlICctJzpcbiAgICAgICAgcmV0dXJuIG51bWJlcigpO1xuICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBjaCA+PSAnMCcgJiYgY2ggPD0gJzknID8gbnVtYmVyKCkgOiB3b3JkKCk7XG4gICAgfVxufTtcblxuLy8gUmV0dXJuIHRoZSBqc29uX3BhcnNlIGZ1bmN0aW9uLiBJdCB3aWxsIGhhdmUgYWNjZXNzIHRvIGFsbCBvZiB0aGUgYWJvdmVcbi8vIGZ1bmN0aW9ucyBhbmQgdmFyaWFibGVzLlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzb3VyY2UsIHJldml2ZXIpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIFxuICAgIHRleHQgPSBzb3VyY2U7XG4gICAgYXQgPSAwO1xuICAgIGNoID0gJyAnO1xuICAgIHJlc3VsdCA9IHZhbHVlKCk7XG4gICAgd2hpdGUoKTtcbiAgICBpZiAoY2gpIHtcbiAgICAgICAgZXJyb3IoXCJTeW50YXggZXJyb3JcIik7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgaXMgYSByZXZpdmVyIGZ1bmN0aW9uLCB3ZSByZWN1cnNpdmVseSB3YWxrIHRoZSBuZXcgc3RydWN0dXJlLFxuICAgIC8vIHBhc3NpbmcgZWFjaCBuYW1lL3ZhbHVlIHBhaXIgdG8gdGhlIHJldml2ZXIgZnVuY3Rpb24gZm9yIHBvc3NpYmxlXG4gICAgLy8gdHJhbnNmb3JtYXRpb24sIHN0YXJ0aW5nIHdpdGggYSB0ZW1wb3Jhcnkgcm9vdCBvYmplY3QgdGhhdCBob2xkcyB0aGUgcmVzdWx0XG4gICAgLy8gaW4gYW4gZW1wdHkga2V5LiBJZiB0aGVyZSBpcyBub3QgYSByZXZpdmVyIGZ1bmN0aW9uLCB3ZSBzaW1wbHkgcmV0dXJuIHRoZVxuICAgIC8vIHJlc3VsdC5cblxuICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJyA/IChmdW5jdGlvbiB3YWxrKGhvbGRlciwga2V5KSB7XG4gICAgICAgIHZhciBrLCB2LCB2YWx1ZSA9IGhvbGRlcltrZXldO1xuICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZm9yIChrIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgdiA9IHdhbGsodmFsdWUsIGspO1xuICAgICAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVtrXSA9IHY7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdmFsdWVba107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldml2ZXIuY2FsbChob2xkZXIsIGtleSwgdmFsdWUpO1xuICAgIH0oeycnOiByZXN1bHR9LCAnJykpIDogcmVzdWx0O1xufTtcbiIsInZhciBjeCA9IC9bXFx1MDAwMFxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLFxuICAgIGVzY2FwYWJsZSA9IC9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxceDlmXFx1MDBhZFxcdTA2MDAtXFx1MDYwNFxcdTA3MGZcXHUxN2I0XFx1MTdiNVxcdTIwMGMtXFx1MjAwZlxcdTIwMjgtXFx1MjAyZlxcdTIwNjAtXFx1MjA2ZlxcdWZlZmZcXHVmZmYwLVxcdWZmZmZdL2csXG4gICAgZ2FwLFxuICAgIGluZGVudCxcbiAgICBtZXRhID0geyAgICAvLyB0YWJsZSBvZiBjaGFyYWN0ZXIgc3Vic3RpdHV0aW9uc1xuICAgICAgICAnXFxiJzogJ1xcXFxiJyxcbiAgICAgICAgJ1xcdCc6ICdcXFxcdCcsXG4gICAgICAgICdcXG4nOiAnXFxcXG4nLFxuICAgICAgICAnXFxmJzogJ1xcXFxmJyxcbiAgICAgICAgJ1xccic6ICdcXFxccicsXG4gICAgICAgICdcIicgOiAnXFxcXFwiJyxcbiAgICAgICAgJ1xcXFwnOiAnXFxcXFxcXFwnXG4gICAgfSxcbiAgICByZXA7XG5cbmZ1bmN0aW9uIHF1b3RlKHN0cmluZykge1xuICAgIC8vIElmIHRoZSBzdHJpbmcgY29udGFpbnMgbm8gY29udHJvbCBjaGFyYWN0ZXJzLCBubyBxdW90ZSBjaGFyYWN0ZXJzLCBhbmQgbm9cbiAgICAvLyBiYWNrc2xhc2ggY2hhcmFjdGVycywgdGhlbiB3ZSBjYW4gc2FmZWx5IHNsYXAgc29tZSBxdW90ZXMgYXJvdW5kIGl0LlxuICAgIC8vIE90aGVyd2lzZSB3ZSBtdXN0IGFsc28gcmVwbGFjZSB0aGUgb2ZmZW5kaW5nIGNoYXJhY3RlcnMgd2l0aCBzYWZlIGVzY2FwZVxuICAgIC8vIHNlcXVlbmNlcy5cbiAgICBcbiAgICBlc2NhcGFibGUubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gZXNjYXBhYmxlLnRlc3Qoc3RyaW5nKSA/ICdcIicgKyBzdHJpbmcucmVwbGFjZShlc2NhcGFibGUsIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHZhciBjID0gbWV0YVthXTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBjID09PSAnc3RyaW5nJyA/IGMgOlxuICAgICAgICAgICAgJ1xcXFx1JyArICgnMDAwMCcgKyBhLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gICAgfSkgKyAnXCInIDogJ1wiJyArIHN0cmluZyArICdcIic7XG59XG5cbmZ1bmN0aW9uIHN0cihrZXksIGhvbGRlcikge1xuICAgIC8vIFByb2R1Y2UgYSBzdHJpbmcgZnJvbSBob2xkZXJba2V5XS5cbiAgICB2YXIgaSwgICAgICAgICAgLy8gVGhlIGxvb3AgY291bnRlci5cbiAgICAgICAgaywgICAgICAgICAgLy8gVGhlIG1lbWJlciBrZXkuXG4gICAgICAgIHYsICAgICAgICAgIC8vIFRoZSBtZW1iZXIgdmFsdWUuXG4gICAgICAgIGxlbmd0aCxcbiAgICAgICAgbWluZCA9IGdhcCxcbiAgICAgICAgcGFydGlhbCxcbiAgICAgICAgdmFsdWUgPSBob2xkZXJba2V5XTtcbiAgICBcbiAgICAvLyBJZiB0aGUgdmFsdWUgaGFzIGEgdG9KU09OIG1ldGhvZCwgY2FsbCBpdCB0byBvYnRhaW4gYSByZXBsYWNlbWVudCB2YWx1ZS5cbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihrZXkpO1xuICAgIH1cbiAgICBcbiAgICAvLyBJZiB3ZSB3ZXJlIGNhbGxlZCB3aXRoIGEgcmVwbGFjZXIgZnVuY3Rpb24sIHRoZW4gY2FsbCB0aGUgcmVwbGFjZXIgdG9cbiAgICAvLyBvYnRhaW4gYSByZXBsYWNlbWVudCB2YWx1ZS5cbiAgICBpZiAodHlwZW9mIHJlcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHJlcC5jYWxsKGhvbGRlciwga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFdoYXQgaGFwcGVucyBuZXh0IGRlcGVuZHMgb24gdGhlIHZhbHVlJ3MgdHlwZS5cbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgcmV0dXJuIHF1b3RlKHZhbHVlKTtcbiAgICAgICAgXG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAvLyBKU09OIG51bWJlcnMgbXVzdCBiZSBmaW5pdGUuIEVuY29kZSBub24tZmluaXRlIG51bWJlcnMgYXMgbnVsbC5cbiAgICAgICAgICAgIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogJ251bGwnO1xuICAgICAgICBcbiAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGNhc2UgJ251bGwnOlxuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbiBvciBudWxsLCBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nLiBOb3RlOlxuICAgICAgICAgICAgLy8gdHlwZW9mIG51bGwgZG9lcyBub3QgcHJvZHVjZSAnbnVsbCcuIFRoZSBjYXNlIGlzIGluY2x1ZGVkIGhlcmUgaW5cbiAgICAgICAgICAgIC8vIHRoZSByZW1vdGUgY2hhbmNlIHRoYXQgdGhpcyBnZXRzIGZpeGVkIHNvbWVkYXkuXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIFxuICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuICdudWxsJztcbiAgICAgICAgICAgIGdhcCArPSBpbmRlbnQ7XG4gICAgICAgICAgICBwYXJ0aWFsID0gW107XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFycmF5LmlzQXJyYXlcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICAgICAgICAgIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydGlhbFtpXSA9IHN0cihpLCB2YWx1ZSkgfHwgJ251bGwnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBKb2luIGFsbCBvZiB0aGUgZWxlbWVudHMgdG9nZXRoZXIsIHNlcGFyYXRlZCB3aXRoIGNvbW1hcywgYW5kXG4gICAgICAgICAgICAgICAgLy8gd3JhcCB0aGVtIGluIGJyYWNrZXRzLlxuICAgICAgICAgICAgICAgIHYgPSBwYXJ0aWFsLmxlbmd0aCA9PT0gMCA/ICdbXScgOiBnYXAgP1xuICAgICAgICAgICAgICAgICAgICAnW1xcbicgKyBnYXAgKyBwYXJ0aWFsLmpvaW4oJyxcXG4nICsgZ2FwKSArICdcXG4nICsgbWluZCArICddJyA6XG4gICAgICAgICAgICAgICAgICAgICdbJyArIHBhcnRpYWwuam9pbignLCcpICsgJ10nO1xuICAgICAgICAgICAgICAgIGdhcCA9IG1pbmQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIElmIHRoZSByZXBsYWNlciBpcyBhbiBhcnJheSwgdXNlIGl0IHRvIHNlbGVjdCB0aGUgbWVtYmVycyB0byBiZVxuICAgICAgICAgICAgLy8gc3RyaW5naWZpZWQuXG4gICAgICAgICAgICBpZiAocmVwICYmIHR5cGVvZiByZXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gcmVwLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgayA9IHJlcFtpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpYWwucHVzaChxdW90ZShrKSArIChnYXAgPyAnOiAnIDogJzonKSArIHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdGVyYXRlIHRocm91Z2ggYWxsIG9mIHRoZSBrZXlzIGluIHRoZSBvYmplY3QuXG4gICAgICAgICAgICAgICAgZm9yIChrIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gc3RyKGssIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydGlhbC5wdXNoKHF1b3RlKGspICsgKGdhcCA/ICc6ICcgOiAnOicpICsgdik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgLy8gSm9pbiBhbGwgb2YgdGhlIG1lbWJlciB0ZXh0cyB0b2dldGhlciwgc2VwYXJhdGVkIHdpdGggY29tbWFzLFxuICAgICAgICAvLyBhbmQgd3JhcCB0aGVtIGluIGJyYWNlcy5cblxuICAgICAgICB2ID0gcGFydGlhbC5sZW5ndGggPT09IDAgPyAne30nIDogZ2FwID9cbiAgICAgICAgICAgICd7XFxuJyArIGdhcCArIHBhcnRpYWwuam9pbignLFxcbicgKyBnYXApICsgJ1xcbicgKyBtaW5kICsgJ30nIDpcbiAgICAgICAgICAgICd7JyArIHBhcnRpYWwuam9pbignLCcpICsgJ30nO1xuICAgICAgICBnYXAgPSBtaW5kO1xuICAgICAgICByZXR1cm4gdjtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICB2YXIgaTtcbiAgICBnYXAgPSAnJztcbiAgICBpbmRlbnQgPSAnJztcbiAgICBcbiAgICAvLyBJZiB0aGUgc3BhY2UgcGFyYW1ldGVyIGlzIGEgbnVtYmVyLCBtYWtlIGFuIGluZGVudCBzdHJpbmcgY29udGFpbmluZyB0aGF0XG4gICAgLy8gbWFueSBzcGFjZXMuXG4gICAgaWYgKHR5cGVvZiBzcGFjZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNwYWNlOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGluZGVudCArPSAnICc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIHN0cmluZywgaXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBpbmRlbnQgc3RyaW5nLlxuICAgIGVsc2UgaWYgKHR5cGVvZiBzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW5kZW50ID0gc3BhY2U7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgaXMgYSByZXBsYWNlciwgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIGFycmF5LlxuICAgIC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3IuXG4gICAgcmVwID0gcmVwbGFjZXI7XG4gICAgaWYgKHJlcGxhY2VyICYmIHR5cGVvZiByZXBsYWNlciAhPT0gJ2Z1bmN0aW9uJ1xuICAgICYmICh0eXBlb2YgcmVwbGFjZXIgIT09ICdvYmplY3QnIHx8IHR5cGVvZiByZXBsYWNlci5sZW5ndGggIT09ICdudW1iZXInKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pTT04uc3RyaW5naWZ5Jyk7XG4gICAgfVxuICAgIFxuICAgIC8vIE1ha2UgYSBmYWtlIHJvb3Qgb2JqZWN0IGNvbnRhaW5pbmcgb3VyIHZhbHVlIHVuZGVyIHRoZSBrZXkgb2YgJycuXG4gICAgLy8gUmV0dXJuIHRoZSByZXN1bHQgb2Ygc3RyaW5naWZ5aW5nIHRoZSB2YWx1ZS5cbiAgICByZXR1cm4gc3RyKCcnLCB7Jyc6IHZhbHVlfSk7XG59O1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgKSkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRXh0cmVtdW07XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNGbGF0dGVuYWJsZSA9IHJlcXVpcmUoJy4vX2lzRmxhdHRlbmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZsYXR0ZW47XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA+IG90aGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHdDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUx0O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gKi9cbmZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU3VtO1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gKiBvZiBgcHJvcHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVZhbHVlcztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRmxhdHRlbmFibGU7XG4iLCJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpO1xuXG4vKipcbiAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuO1xuIiwidmFyIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICpcbiAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICogcHJvcGVydGllcy5cbiAqXG4gKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNFbXB0eShudWxsKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkodHJ1ZSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KDEpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICB9XG4gIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICB9XG4gIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFbXB0eTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNOdW1iZXIoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTnVtYmVyKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc051bWJlcjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N0cmluZygnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N0cmluZygxKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmluZztcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanMuZm91bmRhdGlvbi8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlLUVTNSBlbnZpcm9ubWVudHMuICovXG4gIHZhciB1bmRlZmluZWQ7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLiAqL1xuICB2YXIgVkVSU0lPTiA9ICc0LjE3LjQnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZUxlYWRpbmdEb3QgPSAvXlxcLi8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltID0gL15cXHMrfFxccyskL2csXG4gICAgICByZVRyaW1TdGFydCA9IC9eXFxzKy8sXG4gICAgICByZVRyaW1FbmQgPSAvXFxzKyQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86KD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aClcXFxcYiknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKVxcXFxiKScsXG4gICAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcSxcbiAgICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xuICB2YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICAgKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbiAgdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG4gIHZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gICAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgICByc09yZFVwcGVyLFxuICAgIHJzT3JkTG93ZXIsXG4gICAgcnNEaWdpdHMsXG4gICAgcnNFbW9qaVxuICBdLmpvaW4oJ3wnKSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezIsfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSgpKTtcblxuICAvKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xuICB2YXIgbm9kZUlzQXJyYXlCdWZmZXIgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0FycmF5QnVmZmVyLFxuICAgICAgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZSxcbiAgICAgIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwLFxuICAgICAgbm9kZUlzUmVnRXhwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNSZWdFeHAsXG4gICAgICBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldCxcbiAgICAgIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGtleS12YWx1ZSBgcGFpcmAgdG8gYG1hcGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBhaXIgVGhlIGtleS12YWx1ZSBwYWlyIHRvIGFkZC5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgbWFwYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFkZE1hcEVudHJ5KG1hcCwgcGFpcikge1xuICAgIC8vIERvbid0IHJldHVybiBgbWFwLnNldGAgYmVjYXVzZSBpdCdzIG5vdCBjaGFpbmFibGUgaW4gSUUgMTEuXG4gICAgbWFwLnNldChwYWlyWzBdLCBwYWlyWzFdKTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYHZhbHVlYCB0byBgc2V0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYWRkLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBzZXRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYWRkU2V0RW50cnkoc2V0LCB2YWx1ZSkge1xuICAgIC8vIERvbid0IHJldHVybiBgc2V0LmFkZGAgYmVjYXVzZSBpdCdzIG5vdCBjaGFpbmFibGUgaW4gSUUgMTEuXG4gICAgc2V0LmFkZCh2YWx1ZSk7XG4gICAgcmV0dXJuIHNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgYmFzZUNsb25lLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IChzcmNJbmRleCAmJiBpc0Z1bmN0aW9uKG9ialZhbHVlKSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGggPyBpdGVyYXRlZXMgOiBbaWRlbnRpdHldLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2xvbmVGdW5jIFRoZSBmdW5jdGlvbiB0byBjbG9uZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgbWFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lTWFwKG1hcCwgaXNEZWVwLCBjbG9uZUZ1bmMpIHtcbiAgICAgIHZhciBhcnJheSA9IGlzRGVlcCA/IGNsb25lRnVuYyhtYXBUb0FycmF5KG1hcCksIENMT05FX0RFRVBfRkxBRykgOiBtYXBUb0FycmF5KG1hcCk7XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYXJyYXksIGFkZE1hcEVudHJ5LCBuZXcgbWFwLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNsb25lRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2xvbmUgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHNldC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVNldChzZXQsIGlzRGVlcCwgY2xvbmVGdW5jKSB7XG4gICAgICB2YXIgYXJyYXkgPSBpc0RlZXAgPyBjbG9uZUZ1bmMoc2V0VG9BcnJheShzZXQpLCBDTE9ORV9ERUVQX0ZMQUcpIDogc2V0VG9BcnJheShzZXQpO1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFycmF5LCBhZGRTZXRFbnRyeSwgbmV3IHNldC5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbikge1xuICAgICAgICAgIC8vIFNoaWZ0IHdpdGggZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYXZvaWQgZmxvYXRpbmctcG9pbnQgaXNzdWVzLlxuICAgICAgICAgIC8vIFNlZSBbTUROXShodHRwczovL21kbi5pby9yb3VuZCNFeGFtcGxlcykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICB2YXIgcGFpciA9ICh0b1N0cmluZyhudW1iZXIpICsgJ2UnKS5zcGxpdCgnZScpLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmMocGFpclswXSArICdlJyArICgrcGFpclsxXSArIHByZWNpc2lvbikpO1xuXG4gICAgICAgICAgcGFpciA9ICh0b1N0cmluZyh2YWx1ZSkgKyAnZScpLnNwbGl0KCdlJyk7XG4gICAgICAgICAgcmV0dXJuICsocGFpclswXSArICdlJyArICgrcGFpclsxXSAtIHByZWNpc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jKG51bWJlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICAgICAqL1xuICAgIHZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiAoMSAvIHNldFRvQXJyYXkobmV3IFNldChbLC0wXSkpWzFdKSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8udG9QYWlyc2Agb3IgYF8udG9QYWlyc0luYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYWlycyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVUb1BhaXJzKGtleXNGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICAgICAgaWYgKHRhZyA9PSBtYXBUYWcpIHtcbiAgICAgICAgICByZXR1cm4gbWFwVG9BcnJheShvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvUGFpcnMob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzRnVuYyhvYmplY3QpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2Agd2l0aCBvcHRpb25hbFxuICAgICAqIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAgIDEgLSBgXy5iaW5kYFxuICAgICAqICAgIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICAgICAqICAgIDggLSBgXy5jdXJyeWBcbiAgICAgKiAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAgICAgKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAgICAgKiAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqICAxMjggLSBgXy5yZWFyZ2BcbiAgICAgKiAgMjU2IC0gYF8uYXJ5YFxuICAgICAqICA1MTIgLSBgXy5mbGlwYFxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFyeSA9IGFyeSA9PT0gdW5kZWZpbmVkID8gYXJ5IDogbmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLCAwKTtcbiAgICAgIGFyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZCA/IGFyaXR5IDogdG9JbnRlZ2VyKGFyaXR5KTtcbiAgICAgIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAoYml0bWFzayAmIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzUmlnaHQgPSBob2xkZXJzO1xuXG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKTtcblxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgICAgIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVyZ2VEYXRhKG5ld0RhdGEsIGRhdGEpO1xuICAgICAgfVxuICAgICAgZnVuYyA9IG5ld0RhdGFbMF07XG4gICAgICBiaXRtYXNrID0gbmV3RGF0YVsxXTtcbiAgICAgIHRoaXNBcmcgPSBuZXdEYXRhWzJdO1xuICAgICAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICAgICAgaG9sZGVycyA9IG5ld0RhdGFbNF07XG4gICAgICBhcml0eSA9IG5ld0RhdGFbOV0gPSBuZXdEYXRhWzldID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgICAgICA6IG5hdGl2ZU1heChuZXdEYXRhWzldIC0gbGVuZ3RoLCAwKTtcblxuICAgICAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJpdG1hc2sgfHwgYml0bWFzayA9PSBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpO1xuICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSksIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICAgICAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNBc3NpZ25JbihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICByZXR1cm4gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c0RlZXBgIHRvIGN1c3RvbWl6ZSBpdHMgYF8ubWVyZ2VgIHVzZSB0byBtZXJnZSBzb3VyY2VcbiAgICAgKiBvYmplY3RzIGludG8gZGVzdGluYXRpb24gb2JqZWN0cyB0aGF0IGFyZSBwYXNzZWQgdGhydS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHBhcmVudCBvYmplY3Qgb2YgYHNyY1ZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c01lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpWYWx1ZSkgJiYgaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG9ialZhbHVlKTtcbiAgICAgICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vbWl0YCB0byBjdXN0b21pemUgaXRzIGBfLmNsb25lRGVlcGAgdXNlIHRvIG9ubHkgY2xvbmUgcGxhaW5cbiAgICAgKiBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW5jbG9uZWQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgdG8gZGVmZXIgY2xvbmluZyB0byBgXy5jbG9uZURlZXBgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbU9taXRDbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICAgICAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICAgICAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAgICAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAgICAgKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICAgICAgY2FzZSBlcnJvclRhZzpcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNsb25lRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2xvbmUgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGNsb25lRnVuYywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVNYXAob2JqZWN0LCBpc0RlZXAsIGNsb25lRnVuYyk7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVNldChvYmplY3QsIGlzRGVlcCwgY2xvbmVGdW5jKTtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAocmVMZWFkaW5nRG90LnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHJlc3VsdCA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgICAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgICAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgICAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgICAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgaW52b2tpbmcgdGhlIGBmdW5jYCB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLiBBbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgJ2RlZmVycmVkJyk7XG4gICAgICogLy8gPT4gTG9ncyAnZGVmZXJyZWQnIGFmdGVyIG9uZSBtaWxsaXNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXIgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIDEsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgZnVuY2AgYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVsYXkoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgMTAwMCwgJ2xhdGVyJyk7XG4gICAgICogLy8gPT4gTG9ncyAnbGF0ZXInIGFmdGVyIG9uZSBzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlbGF5ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCB0b051bWJlcih3YWl0KSB8fCAwLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIHJldmVyc2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZmxpcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsaXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmbGlwcGVkID0gXy5mbGlwKGZ1bmN0aW9uKCkge1xuICAgICAqICAgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmxpcHBlZCgnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+IFsnZCcsICdjJywgJ2InLCAnYSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxpcChmdW5jKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0ZMSVBfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gICAgICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICAgICAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gICAgICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAgICAgKlxuICAgICAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogdmFsdWVzKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKlxuICAgICAqIG9iamVjdC5hID0gMjtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICAgICAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICpcbiAgICAgKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICAgICAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG4gICAgbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbmVnYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmVkaWNhdGUgYGZ1bmNgLiBUaGVcbiAgICAgKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG5lZ2F0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzRXZlbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIF8ubmVnYXRlKGlzRXZlbikpO1xuICAgICAqIC8vID0+IFsxLCAzLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBpbnZva2luZyBgZnVuY2Agb25jZS4gUmVwZWF0IGNhbGxzXG4gICAgICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGludm9jYXRpb24uIFRoZSBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyA9PiBgY3JlYXRlQXBwbGljYXRpb25gIGlzIGludm9rZWQgb25jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgICAgcmV0dXJuIGJlZm9yZSgyLCBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudHMgdHJhbnNmb3JtZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbdHJhbnNmb3Jtcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm1zLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkb3VibGVkKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyQXJncyhmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4gW3gsIHldO1xuICAgICAqIH0sIFtzcXVhcmUsIGRvdWJsZWRdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoOSwgMyk7XG4gICAgICogLy8gPT4gWzgxLCA2XVxuICAgICAqXG4gICAgICogZnVuYygxMCwgNSk7XG4gICAgICogLy8gPT4gWzEwMCwgMTBdXG4gICAgICovXG4gICAgdmFyIG92ZXJBcmdzID0gY2FzdFJlc3QoZnVuY3Rpb24oZnVuYywgdHJhbnNmb3Jtcykge1xuICAgICAgdHJhbnNmb3JtcyA9ICh0cmFuc2Zvcm1zLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodHJhbnNmb3Jtc1swXSkpXG4gICAgICAgID8gYXJyYXlNYXAodHJhbnNmb3Jtc1swXSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKVxuICAgICAgICA6IGFycmF5TWFwKGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMsIDEpLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgZnVuY3NMZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGFyZ3MubGVuZ3RoLCBmdW5jc0xlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybXNbaW5kZXhdLmNhbGwodGhpcywgYXJnc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGVcbiAgICAgKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYmluZGAgZXhjZXB0IGl0IGRvZXMgKipub3QqKlxuICAgICAqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGVsbG8nKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsKGdyZWV0LCBfLCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAgICAgKiBhcmUgYXBwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbFJpZ2h0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsUmlnaHQpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIGFycmFuZ2VkIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBzcGVjaWZpZWQgYGluZGV4ZXNgIHdoZXJlIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgZmlyc3QgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfSwgWzIsIDAsIDFdKTtcbiAgICAgKlxuICAgICAqIHJlYXJnZWQoJ2InLCAnYycsICdhJylcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICB2YXIgcmVhcmcgPSBmbGF0UmVzdChmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1JFQVJHX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluZGV4ZXMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGZyb20gYHN0YXJ0YCBhbmQgYmV5b25kIHByb3ZpZGVkIGFzXG4gICAgICogYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3Jlc3QgcGFyYW1ldGVyXShodHRwczovL21kbi5pby9yZXN0X3BhcmFtZXRlcnMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnJlc3QoZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAgICAgKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAgICAgKiAgICAgKF8uc2l6ZShuYW1lcykgPiAxID8gJywgJiAnIDogJycpICsgXy5sYXN0KG5hbWVzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheSgnaGVsbG8nLCAnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcycpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09PSB1bmRlZmluZWQgPyBzdGFydCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuYywgc3RhcnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZSBmdW5jdGlvbiBhbmQgYW4gYXJyYXkgb2YgYXJndW1lbnRzIG11Y2ggbGlrZVxuICAgICAqIFtgRnVuY3Rpb24jYXBwbHlgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3ByZWFkIG9wZXJhdG9yXShodHRwczovL21kbi5pby9zcHJlYWRfb3BlcmF0b3IpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc3ByZWFkIGFyZ3VtZW50cyBvdmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzcHJlYWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnNwcmVhZChmdW5jdGlvbih3aG8sIHdoYXQpIHtcbiAgICAgKiAgIHJldHVybiB3aG8gKyAnIHNheXMgJyArIHdoYXQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoWydmcmVkJywgJ2hlbGxvJ10pO1xuICAgICAqIC8vID0+ICdmcmVkIHNheXMgaGVsbG8nXG4gICAgICpcbiAgICAgKiB2YXIgbnVtYmVycyA9IFByb21pc2UuYWxsKFtcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSg0MCksXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoMzYpXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBudW1iZXJzLnRoZW4oXy5zcHJlYWQoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIHggKyB5O1xuICAgICAqIH0pKTtcbiAgICAgKiAvLyA9PiBhIFByb21pc2Ugb2YgNzZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcHJlYWQoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKHN0YXJ0KSwgMCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSxcbiAgICAgICAgICAgIG90aGVyQXJncyA9IGNhc3RTbGljZShhcmdzLCAwLCBzdGFydCk7XG5cbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgYXJyYXlQdXNoKG90aGVyQXJncywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICAgICAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gICAgICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICAgICAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICAgICAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAgICAgKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gICAgICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICAgICAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICAgICAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAgICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byBvbmUgYXJndW1lbnQsIGlnbm9yaW5nIGFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLnVuYXJ5KHBhcnNlSW50KSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuYXJ5KGZ1bmMpIHtcbiAgICAgIHJldHVybiBhcnkoZnVuYywgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byBgd3JhcHBlcmAgYXMgaXRzIGZpcnN0XG4gICAgICogYXJndW1lbnQuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24gYXJlIGFwcGVuZGVkXG4gICAgICogdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGB3cmFwcGVyYC4gVGhlIHdyYXBwZXIgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbd3JhcHBlcj1pZGVudGl0eV0gVGhlIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBwID0gXy53cmFwKF8uZXNjYXBlLCBmdW5jdGlvbihmdW5jLCB0ZXh0KSB7XG4gICAgICogICByZXR1cm4gJzxwPicgKyBmdW5jKHRleHQpICsgJzwvcD4nO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcCgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnPHA+ZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGFydGlhbChjYXN0RnVuY3Rpb24od3JhcHBlciksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIGFzIGFuIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KDEpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW251bGxdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWRdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICogY29uc29sZS5sb2coXy5jYXN0QXJyYXkoYXJyYXkpID09PSBhcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gICAgICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICAgICAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gICAgICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICAgICAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZS4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsXG4gICAgICogY2xvbmluZyBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB1cCB0byBmb3VyIGFyZ3VtZW50czsgKHZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZVdpdGhgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lRGVlcFdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG9iamVjdGAgY29uZm9ybXMgdG8gYHNvdXJjZWAgYnkgaW52b2tpbmcgdGhlIHByZWRpY2F0ZVxuICAgICAqIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDI7IH0gfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtc1RvKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlID09IG51bGwgfHwgYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcShOYU4sIE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZ3QoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3QgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VHdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID49IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlCdWZmZXJgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXlCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXlCdWZmZXIgPSBub2RlSXNBcnJheUJ1ZmZlciA/IGJhc2VVbmFyeShub2RlSXNBcnJheUJ1ZmZlcikgOiBiYXNlSXNBcnJheUJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAgICAgKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gICAgICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICAgICAqIGlzIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBib29sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KCc8Ym9keT4nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gICAgICpcbiAgICAgKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gICAgICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICAgICAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHRydWUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICAgICAgfVxuICAgICAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICAgKiBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICAgICAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAgICAgKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICAgICAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICAgICAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIG9iamVjdCA9PT0gb3RoZXI7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0VxdWFsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggdXAgdG9cbiAgICAgKiBzaXggYXJndW1lbnRzOiAob2JqVmFsdWUsIG90aFZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKG90aFZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2hlbGxvJywgJ2dvb2RieWUnXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbFdpdGgoYXJyYXksIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbFdpdGgodmFsdWUsIG90aGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIodmFsdWUsIG90aGVyKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgdW5kZWZpbmVkLCBjdXN0b21pemVyKSA6ICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gICAgICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZS5uYW1lID09ICdzdHJpbmcnICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgcHJpbWl0aXZlIG51bWJlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzRmluaXRlYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzRmluaXRlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgICAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICAgICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICAgICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAgICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgICAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2Uoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYG9iamVjdGAgYW5kIGBzb3VyY2VgIHRvXG4gICAgICogZGV0ZXJtaW5lIGlmIGBvYmplY3RgIGNvbnRhaW5zIGVxdWl2YWxlbnQgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8ubWF0Y2hlc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNNYXRjaGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIGZpdmVcbiAgICAgKiBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGluZGV4fGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKHNyY1ZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnZ3JlZXRpbmcnOiAnaGVsbG8nIH07XG4gICAgICogdmFyIHNvdXJjZSA9IHsgJ2dyZWV0aW5nJzogJ2hpJyB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzTmFOKSBhbmQgaXMgbm90IHRoZSBzYW1lIGFzXG4gICAgICogZ2xvYmFsIFtgaXNOYU5gXShodHRwczovL21kbi5pby9pc05hTikgd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgICAgIC8vIEFuIGBOYU5gIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgICAgIC8vIEFjdGl2ZVggb2JqZWN0cyBpbiBJRS5cbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJpc3RpbmUgbmF0aXZlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGNhbid0IHJlbGlhYmx5IGRldGVjdCBuYXRpdmUgZnVuY3Rpb25zIGluIHRoZSBwcmVzZW5jZVxuICAgICAqIG9mIHRoZSBjb3JlLWpzIHBhY2thZ2UgYmVjYXVzZSBjb3JlLWpzIGNpcmN1bXZlbnRzIHRoaXMga2luZCBvZiBkZXRlY3Rpb24uXG4gICAgICogRGVzcGl0ZSBtdWx0aXBsZSByZXF1ZXN0cywgdGhlIGNvcmUtanMgbWFpbnRhaW5lciBoYXMgbWFkZSBpdCBjbGVhcjogYW55XG4gICAgICogYXR0ZW1wdCB0byBmaXggdGhlIGRldGVjdGlvbiB3aWxsIGJlIG9ic3RydWN0ZWQuIEFzIGEgcmVzdWx0LCB3ZSdyZSBsZWZ0XG4gICAgICogd2l0aCBsaXR0bGUgY2hvaWNlIGJ1dCB0byB0aHJvdyBhbiBlcnJvci4gVW5mb3J0dW5hdGVseSwgdGhpcyBhbHNvIGFmZmVjdHNcbiAgICAgKiBwYWNrYWdlcywgbGlrZSBbYmFiZWwtcG9seWZpbGxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JhYmVsLXBvbHlmaWxsKSxcbiAgICAgKiB3aGljaCByZWx5IG9uIGNvcmUtanMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoXyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKGlzTWFza2FibGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihDT1JFX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbnVsbGlzaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAgICAgKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjguMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICAgIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gICAgICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgUmVnRXhwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLiBBbiBpbnRlZ2VyIGlzIHNhZmUgaWYgaXQncyBhbiBJRUVFLTc1NFxuICAgICAqIGRvdWJsZSBwcmVjaXNpb24gbnVtYmVyIHdoaWNoIGlzbid0IHRoZSByZXN1bHQgb2YgYSByb3VuZGVkIHVuc2FmZSBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNTYWZlSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc1NhZmVJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAtTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHdlYWtNYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSB3ZWFrU2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdCgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlTHQpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdGUoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHRlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb0FycmF5KHZhbHVlKSA6IGNvcHlBcnJheSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbc3ltSXRlcmF0b3JdKCkpO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgZnVuYyA9IHRhZyA9PSBtYXBUYWcgPyBtYXBUb0FycmF5IDogKHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzKTtcblxuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTIuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIgc3VpdGFibGUgZm9yIHVzZSBhcyB0aGUgbGVuZ3RoIG9mIGFuXG4gICAgICogYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA0Mjk0OTY3Mjk1XG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAwLCBNQVhfQVJSQVlfTEVOR1RIKSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBJbmZpbml0eVxuICAgICAqXG4gICAgICogXy50b051bWJlcignMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcbiAgICAgIHJldHVybiBhcHBseShhc3NpZ25JbldpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKCdzb3VyY2VVUkwnIGluIG9wdGlvbnNcbiAgICAgICAgICA/IG9wdGlvbnMuc291cmNlVVJMXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbUVuZCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IChsb2Rhc2hGdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgICBuYW1lcyA9IHJlYWxOYW1lc1trZXldIHx8IChyZWFsTmFtZXNba2V5XSA9IFtdKTtcblxuICAgICAgICBuYW1lcy5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsInZhciBiYXNlRXh0cmVtdW0gPSByZXF1aXJlKCcuL19iYXNlRXh0cmVtdW0nKSxcbiAgICBiYXNlR3QgPSByZXF1aXJlKCcuL19iYXNlR3QnKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBNYXRoXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gKiAvLyA9PiA4XG4gKlxuICogXy5tYXgoW10pO1xuICogLy8gPT4gdW5kZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIG1heChhcnJheSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXg7XG4iLCJ2YXIgYmFzZUV4dHJlbXVtID0gcmVxdWlyZSgnLi9fYmFzZUV4dHJlbXVtJyksXG4gICAgYmFzZUd0ID0gcmVxdWlyZSgnLi9fYmFzZUd0JyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE1hdGhcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gKlxuICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICogLy8gPT4geyAnbic6IDIgfVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICogLy8gPT4geyAnbic6IDIgfVxuICovXG5mdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VHdClcbiAgICA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXhCeTtcbiIsInZhciBiYXNlRXh0cmVtdW0gPSByZXF1aXJlKCcuL19iYXNlRXh0cmVtdW0nKSxcbiAgICBiYXNlTHQgPSByZXF1aXJlKCcuL19iYXNlTHQnKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBNYXRoXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gKiAvLyA9PiAyXG4gKlxuICogXy5taW4oW10pO1xuICogLy8gPT4gdW5kZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIG1pbihhcnJheSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtaW47XG4iLCJ2YXIgYmFzZUV4dHJlbXVtID0gcmVxdWlyZSgnLi9fYmFzZUV4dHJlbXVtJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZUx0ID0gcmVxdWlyZSgnLi9fYmFzZUx0Jyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE1hdGhcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gKlxuICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICogLy8gPT4geyAnbic6IDEgfVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICogLy8gPT4geyAnbic6IDEgfVxuICovXG5mdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtaW5CeTtcbiIsInZhciBiYXNlU3VtID0gcmVxdWlyZSgnLi9fYmFzZVN1bScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy40LjBcbiAqIEBjYXRlZ29yeSBNYXRoXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnN1bShbNCwgMiwgOCwgNl0pO1xuICogLy8gPT4gMjBcbiAqL1xuZnVuY3Rpb24gc3VtKGFycmF5KSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN1bTtcbiIsInZhciBiYXNlVmFsdWVzID0gcmVxdWlyZSgnLi9fYmFzZVZhbHVlcycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8udmFsdWVzKCdoaScpO1xuICogLy8gPT4gWydoJywgJ2knXVxuICovXG5mdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmFsdWVzO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdE1hcDogcmVxdWlyZSgnLi9tYXAvTWFwJyksXG5cdExheWVyOiByZXF1aXJlKCcuL2xheWVyL2V4cG9ydHMnKSxcblx0UmVuZGVyZXI6IHJlcXVpcmUoJy4vcmVuZGVyL2V4cG9ydHMnKSxcblx0UmVxdWVzdG9yOiByZXF1aXJlKCcuL3JlcXVlc3QvUmVxdWVzdG9yJyksXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsdW1vID0gcmVxdWlyZSgnbHVtbycpO1xuXG5jbGFzcyBEZWJ1ZyBleHRlbmRzIGx1bW8uTGF5ZXIge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0fVxuXG5cdHJlcXVlc3RUaWxlKGNvb3JkLCBkb25lKSB7XG5cdFx0ZG9uZShjb29yZCk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEZWJ1ZztcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbHVtbyA9IHJlcXVpcmUoJ2x1bW8nKTtcbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuXG5jb25zdCBicm9hZGNhc3QgPSBmdW5jdGlvbihncm91cCwgdHlwZSkge1xuXHRjb25zdCBoYW5kbGVyID0gZXZlbnQgPT4ge1xuXHRcdGdyb3VwLmxheWVycy5mb3JFYWNoKGxheWVyID0+IHtcblx0XHRcdGxheWVyLmVtaXQodHlwZSwgZXZlbnQpO1xuXHRcdH0pO1xuXHR9O1xuXHRncm91cC5vbih0eXBlLCBoYW5kbGVyKTtcblx0Z3JvdXAuYnJvYWRjYXN0cy5zZXQodHlwZSwgaGFuZGxlcik7XG59O1xuXG5jb25zdCB1bmJyb2FkY2FzdCA9IGZ1bmN0aW9uKGdyb3VwLCB0eXBlKSB7XG5cdGdyb3VwLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGV2ZW50ID0+IHtcblx0XHRncm91cC5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG5cdFx0XHRsYXllci5lbWl0KHR5cGUsIGV2ZW50KTtcblx0XHR9KTtcblx0fSk7XG5cdGdyb3VwLmJyb2FkY2FzdHMuZGVsZXRlKHR5cGUpO1xufTtcblxuY2xhc3MgR3JvdXAgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5oaWRkZW4gPSBkZWZhdWx0VG8ob3B0aW9ucy5oaWRkZW4sIGZhbHNlKTtcblx0XHR0aGlzLm11dGVkID0gZGVmYXVsdFRvKG9wdGlvbnMubXV0ZWQsIGZhbHNlKTtcblx0XHR0aGlzLmxheWVycyA9IGRlZmF1bHRUbyhvcHRpb25zLmxheWVycywgW10pO1xuXHRcdHRoaXMuYnJvYWRjYXN0cyA9IG5ldyBNYXAoKTtcblx0fVxuXG5cdG9uQWRkKHBsb3QpIHtcblx0XHRpZiAoIXBsb3QpIHtcblx0XHRcdHRocm93ICdObyBwbG90IGFyZ3VtZW50IHByb3ZpZGVkJztcblx0XHR9XG5cdFx0dGhpcy5wbG90ID0gcGxvdDtcblx0XHR0aGlzLmxheWVycy5mb3JFYWNoKGxheWVyID0+IHtcblx0XHRcdGxheWVyLm9uQWRkKHRoaXMucGxvdCk7XG5cdFx0fSk7XG5cdFx0YnJvYWRjYXN0KHRoaXMsIGx1bW8uUEFOX1NUQVJUKTtcblx0XHRicm9hZGNhc3QodGhpcywgbHVtby5QQU4pO1xuXHRcdGJyb2FkY2FzdCh0aGlzLCBsdW1vLlBBTl9FTkQpO1xuXHRcdGJyb2FkY2FzdCh0aGlzLCBsdW1vLlpPT01fU1RBUlQpO1xuXHRcdGJyb2FkY2FzdCh0aGlzLCBsdW1vLlpPT00pO1xuXHRcdGJyb2FkY2FzdCh0aGlzLCBsdW1vLlpPT01fRU5EKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG9uUmVtb3ZlKHBsb3QpIHtcblx0XHRpZiAoIXBsb3QpIHtcblx0XHRcdHRocm93ICdObyBwbG90IGFyZ3VtZW50IHByb3ZpZGVkJztcblx0XHR9XG5cdFx0dW5icm9hZGNhc3QodGhpcywgbHVtby5QQU5fU1RBUlQpO1xuXHRcdHVuYnJvYWRjYXN0KHRoaXMsIGx1bW8uUEFOKTtcblx0XHR1bmJyb2FkY2FzdCh0aGlzLCBsdW1vLlBBTl9FTkQpO1xuXHRcdHVuYnJvYWRjYXN0KHRoaXMsIGx1bW8uWk9PTV9TVEFSVCk7XG5cdFx0dW5icm9hZGNhc3QodGhpcywgbHVtby5aT09NKTtcblx0XHR1bmJyb2FkY2FzdCh0aGlzLCBsdW1vLlpPT01fRU5EKTtcblx0XHR0aGlzLmxheWVycy5mb3JFYWNoKGxheWVyID0+IHtcblx0XHRcdGxheWVyLm9uUmVtb3ZlKHBsb3QpO1xuXHRcdH0pO1xuXHRcdHRoaXMucGxvdCA9IG51bGw7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRhZGQobGF5ZXIpIHtcblx0XHRpZiAoIWxheWVyKSB7XG5cdFx0XHR0aHJvdyAnTm8gbGF5ZXIgYXJndW1lbnQgcHJvdmlkZWQnO1xuXHRcdH1cblx0XHRpZiAodGhpcy5sYXllcnMuaW5kZXhPZihsYXllcikgIT09IC0xKSB7XG5cdFx0XHR0aHJvdyAnUHJvdmlkZWQgbGF5ZXIgaXMgYWxyZWFkeSBhdHRhY2hlZCB0byB0aGUgZ3JvdXAnO1xuXHRcdH1cblx0XHR0aGlzLmxheWVycy5wdXNoKGxheWVyKTtcblx0XHRpZiAodGhpcy5wbG90KSB7XG5cdFx0XHRsYXllci5vbkFkZCh0aGlzLnBsb3QpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHJlbW92ZShsYXllcikge1xuXHRcdGlmICghbGF5ZXIpIHtcblx0XHRcdHRocm93ICdObyBsYXllciBhcmd1bWVudCBwcm92aWRlZCc7XG5cdFx0fVxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5sYXllcnMuaW5kZXhPZihsYXllcik7XG5cdFx0aWYgKGluZGV4ID09PSAtMSkge1xuXHRcdFx0dGhyb3cgJ1Byb3ZpZGVkIGxheWVyIGlzIG5vdCBhdHRhY2hlZCB0byB0aGUgZ3JvdXAnO1xuXHRcdH1cblx0XHR0aGlzLmxheWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdGlmICh0aGlzLnBsb3QpIHtcblx0XHRcdGxheWVyLm9uUmVtb3ZlKHRoaXMucGxvdCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0aGFzKGxheWVyKSB7XG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmxheWVycy5pbmRleE9mKGxheWVyKTtcblx0XHRyZXR1cm4gaW5kZXggIT09IC0xO1xuXHR9XG5cblx0c2hvdygpIHtcblx0XHR0aGlzLmhpZGRlbiA9IGZhbHNlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0aGlkZSgpIHtcblx0XHR0aGlzLmhpZGRlbiA9IHRydWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRpc0hpZGRlbigpIHtcblx0XHRyZXR1cm4gdGhpcy5oaWRkZW47XG5cdH1cblxuXHRtdXRlKCkge1xuXHRcdHRoaXMubXV0ZWQgPSB0cnVlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0dW5tdXRlKCkge1xuXHRcdGlmICh0aGlzLm11dGVkKSB7XG5cdFx0XHR0aGlzLm11dGVkID0gZmFsc2U7XG5cdFx0XHRpZiAodGhpcy5wbG90KSB7XG5cdFx0XHRcdC8vIGdldCB2aXNpYmxlIGNvb3Jkc1xuXHRcdFx0XHRjb25zdCBjb29yZHMgPSB0aGlzLnBsb3QuZ2V0VmlzaWJsZUNvb3JkcygpO1xuXHRcdFx0XHQvLyByZXF1ZXN0IHRpbGVzXG5cdFx0XHRcdHRoaXMucmVxdWVzdFRpbGVzKGNvb3Jkcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0aXNNdXRlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5tdXRlZDtcblx0fVxuXG5cdGVuYWJsZSgpIHtcblx0XHR0aGlzLnNob3coKTtcblx0XHR0aGlzLnVubXV0ZSgpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0ZGlzYWJsZSgpIHtcblx0XHR0aGlzLmhpZGUoKTtcblx0XHR0aGlzLm11dGUoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGlzRGlzYWJsZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMubXV0ZWQgJiYgdGhpcy5oaWRkZW47XG5cdH1cblxuXHRkcmF3KHRpbWVzdGFtcCkge1xuXHRcdGlmICh0aGlzLmhpZGRlbikge1xuXHRcdFx0dGhpcy5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG5cdFx0XHRcdGlmIChsYXllci5yZW5kZXJlciAmJiBsYXllci5yZW5kZXJlci5jbGVhcikge1xuXHRcdFx0XHRcdC8vIGNsZWFyIERPTSBiYXNlZCByZW5kZXJlclxuXHRcdFx0XHRcdGxheWVyLnJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdHRoaXMubGF5ZXJzLmZvckVhY2gobGF5ZXIgPT4ge1xuXHRcdFx0bGF5ZXIuZHJhdyh0aW1lc3RhbXApO1xuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cmVmcmVzaCgpIHtcblx0XHR0aGlzLmxheWVycy5mb3JFYWNoKGxheWVyID0+IHtcblx0XHRcdGxheWVyLnJlZnJlc2goKTtcblx0XHR9KTtcblx0fVxuXG5cdHJlcXVlc3RUaWxlcyhjb29yZHMpIHtcblx0XHRpZiAodGhpcy5tdXRlZCkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdHRoaXMubGF5ZXJzLmZvckVhY2gobGF5ZXIgPT4ge1xuXHRcdFx0bGF5ZXIucmVxdWVzdFRpbGVzKGNvb3Jkcyk7XG5cdFx0fSk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHcm91cDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbHVtbyA9IHJlcXVpcmUoJ2x1bW8nKTtcbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IGlzRW1wdHkgPSByZXF1aXJlKCdsb2Rhc2gvaXNFbXB0eScpO1xuY29uc3QgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJ2xvZGFzaC9pc0Z1bmN0aW9uJyk7XG5cbmNvbnN0IFRJTEVfQUREID0gU3ltYm9sKCk7XG5cbmNvbnN0IFJFRFJBV19USU1FT1VUX01TID0gODAwO1xuXG5jbGFzcyBMaXZlIGV4dGVuZHMgbHVtby5MYXllciB7XG5cblx0Y29uc3RydWN0b3IobWV0YSwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0c3VwZXIob3B0aW9ucyk7XG5cdFx0dGhpcy5tZXRhID0gbWV0YTtcblx0XHR0aGlzLnBhcmFtcyA9IHt9O1xuXHRcdHRoaXMucXVlcnkgPSBudWxsO1xuXHRcdHRoaXMuZmlsdGVycyA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLnRyYW5zZm9ybSA9IGRlZmF1bHRUbyhvcHRpb25zLnRyYW5zZm9ybSwgbnVsbCk7XG5cdFx0dGhpcy5yZWRyYXdEZWJvdW5jZSA9IG51bGw7XG5cdFx0dGhpcy5oYW5kbGVycyA9IG5ldyBNYXAoKTtcblx0XHQvLyBzZXQgZXh0cmVtYSAvIGNhY2hlXG5cdFx0dGhpcy5jbGVhckV4dHJlbWEoKTtcblx0fVxuXG5cdG9uQWRkKHBsb3QpIHtcblx0XHQvLyBjcmVhdGUgaGFuZGxlclxuXHRcdGNvbnN0IGFkZCA9IGV2ZW50ID0+IHtcblx0XHRcdGlmICh0aGlzLnRyYW5zZm9ybSkge1xuXHRcdFx0XHRldmVudC50aWxlLmRhdGEgPSB0aGlzLnRyYW5zZm9ybShldmVudC50aWxlLmRhdGEpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgdXBkYXRlZCA9IHRoaXMudXBkYXRlRXh0cmVtYShldmVudC50aWxlLmNvb3JkLCBldmVudC50aWxlLmRhdGEpO1xuXHRcdFx0aWYgKHVwZGF0ZWQgJiYgdGhpcy5yZW5kZXJlciAmJiB0aGlzLnJlbmRlcmVyLnJlZHJhdykge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5yZWRyYXdEZWJvdW5jZSk7XG5cdFx0XHRcdHRoaXMucmVkcmF3RGVib3VuY2UgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRpZiAodGhpcy5yZW5kZXJlciAmJiB0aGlzLnJlbmRlcmVyLnJlZHJhdykge1xuXHRcdFx0XHRcdFx0dGhpcy5yZW5kZXJlci5yZWRyYXcodHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGNsZWFyIGRlYm91bmNlXG5cdFx0XHRcdFx0dGhpcy5yZWRyYXdEZWJvdW5jZSA9IG51bGw7XG5cdFx0XHRcdH0sIFJFRFJBV19USU1FT1VUX01TKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdC8vIGF0dGFjaCBoYW5kbGVyXG5cdFx0Ly8gTk9URTogYWRkIHRoaXMgQkVGT1JFIGNhbGxpbmcgc3VwZXIsIHRoaXMgTkVFRFMgdG8gYmUgdGhlIGZpcnN0XG5cdFx0Ly8gYFRJTEVfQUREYCBjYWxsYmFjay5cblx0XHR0aGlzLm9uKGx1bW8uVElMRV9BREQsIGFkZCk7XG5cdFx0Ly8gc3RvcmUgaGFuZGxlclxuXHRcdHRoaXMuaGFuZGxlcnMuc2V0KFRJTEVfQURELCBhZGQpO1xuXHRcdHN1cGVyLm9uQWRkKHBsb3QpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0b25SZW1vdmUocGxvdCkge1xuXHRcdC8vIGNsZWFyIGFueSBwZW5kaW5nIHRpbWVvdXRcblx0XHRjbGVhclRpbWVvdXQodGhpcy5yZWRyYXdEZWJvdW5jZSk7XG5cdFx0dGhpcy5yZWRyYXdEZWJvdW5jZSA9IG51bGw7XG5cdFx0Ly8gZGV0YWNoIGhhbmRsZXJcblx0XHR0aGlzLnJlbW92ZUxpc3RlbmVyKGx1bW8uVElMRV9BREQsIHRoaXMuaGFuZGxlcnMuZ2V0KFRJTEVfQUREKSk7XG5cdFx0Ly8gZGVsZXRlIGhhbmRsZXJcblx0XHR0aGlzLmhhbmRsZXJzLmRlbGV0ZShUSUxFX0FERCk7XG5cdFx0c3VwZXIub25SZW1vdmUocGxvdCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRjbGVhckV4dHJlbWEoKSB7XG5cdFx0dGhpcy5leHRyZW1hcyA9IG5ldyBNYXAoKTtcblx0fVxuXG5cdGdldEV4dHJlbWEobGV2ZWwgPSBNYXRoLnJvdW5kKHRoaXMucGxvdC56b29tKSkge1xuXHRcdGxldCBleHRyZW1hID0gbnVsbDtcblx0XHRpZiAoIXRoaXMuZXh0cmVtYXMuaGFzKGxldmVsKSkge1xuXHRcdFx0ZXh0cmVtYSA9IHtcblx0XHRcdFx0bWluOiBJbmZpbml0eSxcblx0XHRcdFx0bWF4OiAtSW5maW5pdHlcblx0XHRcdH07XG5cdFx0XHR0aGlzLmV4dHJlbWFzLnNldChsZXZlbCwgZXh0cmVtYSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4dHJlbWEgPSB0aGlzLmV4dHJlbWFzLmdldChsZXZlbCk7XG5cdFx0fVxuXHRcdHJldHVybiBleHRyZW1hO1xuXHR9XG5cblx0dXBkYXRlRXh0cmVtYShjb29yZCwgZGF0YSkge1xuXHRcdGNvbnN0IGN1cnJlbnQgPSB0aGlzLmdldEV4dHJlbWEoY29vcmQueik7XG5cdFx0Y29uc3QgZXh0cmVtYSA9IHRoaXMuZXh0cmFjdEV4dHJlbWEoZGF0YSk7XG5cdFx0bGV0IGNoYW5nZWQgPSBmYWxzZTtcblx0XHRpZiAoZXh0cmVtYS5taW4gPCBjdXJyZW50Lm1pbikge1xuXHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRjdXJyZW50Lm1pbiA9IGV4dHJlbWEubWluO1xuXHRcdH1cblx0XHRpZiAoZXh0cmVtYS5tYXggPiBjdXJyZW50Lm1heCkge1xuXHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRjdXJyZW50Lm1heCA9IGV4dHJlbWEubWF4O1xuXHRcdH1cblx0XHRyZXR1cm4gY2hhbmdlZDtcblx0fVxuXG5cdGV4dHJhY3RFeHRyZW1hKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRtaW46IEluZmluaXR5LFxuXHRcdFx0bWF4OiAtSW5maW5pdHlcblx0XHR9O1xuXHR9XG5cblx0YWRkRmlsdGVyKGlkLCBmaWx0ZXIpIHtcblx0XHR0aGlzLmZpbHRlcnMuc2V0KGlkLCBmaWx0ZXIpO1xuXHRcdHRoaXMuY2xlYXJFeHRyZW1hKCk7XG5cdH1cblxuXHRyZW1vdmVGaWx0ZXIoaWQpIHtcblx0XHRpZiAodGhpcy5maWx0ZXJzLmhhcyhpZCkpIHtcblx0XHRcdHRoaXMuZmlsdGVycy5kZWxldGUoaWQpO1xuXHRcdFx0dGhpcy5jbGVhckV4dHJlbWEoKTtcblx0XHR9XG5cdH1cblxuXHRjbGVhckZpbHRlcnMoKSB7XG5cdFx0dGhpcy5maWx0ZXJzLmNsZWFyKCk7XG5cdH1cblxuXHRzZXRRdWVyeShxdWVyeSkge1xuXHRcdGlmIChpc0VtcHR5KHF1ZXJ5KSAmJiAhaXNGdW5jdGlvbihxdWVyeSkpIHtcblx0XHRcdHRocm93ICdRdWVyeSBvYmplY3QgaXMgZW1wdHknO1xuXHRcdH1cblx0XHR0aGlzLnF1ZXJ5ID0gcXVlcnk7XG5cdFx0dGhpcy5jbGVhckV4dHJlbWEoKTtcblx0fVxuXG5cdGdldFF1ZXJ5KCkge1xuXHRcdGlmIChpc0VtcHR5KHRoaXMucXVlcnkpICYmXG5cdFx0XHQhaXNGdW5jdGlvbih0aGlzLnF1ZXJ5KSAmJlxuXHRcdFx0dGhpcy5maWx0ZXJzLnNpemUgPT09IDApIHtcblx0XHRcdC8vIG5vIHF1ZXJ5IC8gZmlsdGVyc1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGxldCBxdWVyeSA9IGlzRnVuY3Rpb24odGhpcy5xdWVyeSkgPyB0aGlzLnF1ZXJ5KHRoaXMpIDogdGhpcy5xdWVyeSB8fCBbXTtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkocXVlcnkpKSB7XG5cdFx0XHRxdWVyeSA9IFtxdWVyeV07XG5cdFx0fVxuXHRcdHRoaXMuZmlsdGVycy5mb3JFYWNoKGZpbHRlciA9PiB7XG5cdFx0XHRpZiAocXVlcnkubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRxdWVyeS5wdXNoKCdBTkQnKTtcblx0XHRcdH1cblx0XHRcdHF1ZXJ5LnB1c2goaXNGdW5jdGlvbihmaWx0ZXIpID8gZmlsdGVyKHRoaXMpIDogZmlsdGVyKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gcXVlcnk7XG5cdH1cblxuXHRjbGVhclF1ZXJ5KCkge1xuXHRcdHRoaXMucXVlcnkgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5jbGVhckV4dHJlbWEoKTtcblx0fVxuXG5cdGdldE1ldGEoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWV0YTtcblx0fVxuXG5cdGdldFBhcmFtcygpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJhbXM7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMaXZlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Ly8gZGVidWdcblx0RGVidWc6IHJlcXVpcmUoJy4vY29yZS9EZWJ1ZycpLFxuXHQvLyBsaXZlXG5cdExpdmU6IHJlcXVpcmUoJy4vY29yZS9MaXZlJyksXG5cdC8vIGdyb3VwXG5cdEdyb3VwOiByZXF1aXJlKCcuL2NvcmUvR3JvdXAnKSxcblx0Ly8gdHlwZXNcblx0Q291bnQ6IHJlcXVpcmUoJy4vdHlwZS9Db3VudCcpLFxuXHRDb21tdW5pdHk6IHJlcXVpcmUoJy4vdHlwZS9Db21tdW5pdHknKSxcblx0Ly8gRnJlcXVlbmN5OiByZXF1aXJlKCcuL3R5cGUvRnJlcXVlbmN5JyksXG5cdEhlYXRtYXA6IHJlcXVpcmUoJy4vdHlwZS9IZWF0bWFwJyksXG5cdE1hY3JvOiByZXF1aXJlKCcuL3R5cGUvTWFjcm8nKSxcblx0TWljcm86IHJlcXVpcmUoJy4vdHlwZS9NaWNybycpLFxuXHRNYWNyb0VkZ2U6IHJlcXVpcmUoJy4vdHlwZS9NYWNyb0VkZ2UnKSxcblx0UmVzdDogcmVxdWlyZSgnLi90eXBlL1Jlc3QnKSxcblx0VG9wVGVybUNvdW50OiByZXF1aXJlKCcuL3R5cGUvVG9wVGVybUNvdW50JyksXG5cdC8vIFByZXZpZXc6IHJlcXVpcmUoJy4vdHlwZS9QcmV2aWV3JyksXG5cdC8vIFRvcEZyZXF1ZW5jeTogcmVxdWlyZSgnLi90eXBlL1RvcEZyZXF1ZW5jeScpLFxuXHQvLyBUb3BIaXRzOiByZXF1aXJlKCcuL3R5cGUvVG9wSGl0cycpLFxuXHQvLyBUb3BpY0NvdW50OiByZXF1aXJlKCcuL3R5cGUvVG9waWNDb3VudCcpLFxuXHQvLyBUb3BpY0ZyZXF1ZW5jeTogcmVxdWlyZSgnLi90eXBlL1RvcGljRnJlcXVlbmN5Jylcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IGlzU3RyaW5nID0gcmVxdWlyZSgnbG9kYXNoL2lzU3RyaW5nJyk7XG5jb25zdCBpc051bWJlciA9IHJlcXVpcmUoJ2xvZGFzaC9pc051bWJlcicpO1xuY29uc3QgTGl2ZSA9IHJlcXVpcmUoJy4uL2NvcmUvTGl2ZScpO1xuXG5mdW5jdGlvbiBpc1BvVChuKSB7XG5cdHJldHVybiBuICYmIChuICYgKG4gLSAxKSkgPT09IDA7XG59XG5cbmNsYXNzIEJpdmFyaWF0ZSBleHRlbmRzIExpdmUge1xuXG5cdGNvbnN0cnVjdG9yKG1ldGEsIG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG1ldGEsIG9wdGlvbnMpO1xuXHRcdHRoaXMueEZpZWxkID0gZGVmYXVsdFRvKG9wdGlvbnMueEZpZWxkLCAneCcpO1xuXHRcdHRoaXMueUZpZWxkID0gZGVmYXVsdFRvKG9wdGlvbnMueEZpZWxkLCAneScpO1xuXHRcdGNvbnN0IGxlZnQgPSBkZWZhdWx0VG8ob3B0aW9ucy5sZWZ0LCAwKTtcblx0XHRjb25zdCByaWdodCA9IGRlZmF1bHRUbyhvcHRpb25zLnJpZ2h0LCBNYXRoLnBvdygyLCAzMikpO1xuXHRcdGNvbnN0IGJvdHRvbSA9IGRlZmF1bHRUbyhvcHRpb25zLmJvdHRvbSwgMCk7XG5cdFx0Y29uc3QgdG9wID0gZGVmYXVsdFRvKG9wdGlvbnMudG9wLCBNYXRoLnBvdygyLCAzMikpO1xuXHRcdHRoaXMuc2V0Qm91bmRzKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCk7XG5cdFx0dGhpcy5yZXNvbHV0aW9uID0gb3B0aW9ucy5yZXNvbHV0aW9uO1xuXHR9XG5cblx0c2V0WEZpZWxkKGZpZWxkKSB7XG5cdFx0aWYgKCFpc1N0cmluZyhmaWVsZCkpIHtcblx0XHRcdHRocm93IGB4RmllbGQgYXJndW1lbnQgJHtmaWVsZH0gbXVzdCBiZSBvZiB0eXBlIFN0cmluZ2A7XG5cdFx0fVxuXHRcdHRoaXMueEZpZWxkID0gZmllbGQ7XG5cdH1cblxuXHRzZXRZRmllbGQoZmllbGQpIHtcblx0XHRpZiAoIWlzU3RyaW5nKGZpZWxkKSkge1xuXHRcdFx0dGhyb3cgYHlGaWVsZCBhcmd1bWVudCAke2ZpZWxkfSBtdXN0IGJlIG9mIHR5cGUgU3RyaW5nYDtcblx0XHR9XG5cdFx0dGhpcy55RmllbGQgPSBmaWVsZDtcblx0fVxuXG5cdHNldEJvdW5kcyhsZWZ0LCByaWdodCwgYm90dG9tLCB0b3ApIHtcblx0XHRpZiAoIWlzTnVtYmVyKGxlZnQpKSB7XG5cdFx0XHR0aHJvdyBgbGVmdCBhcmd1bWVudCAke2xlZnR9IGlzIGludmFsaWRgO1xuXHRcdH1cblx0XHRpZiAoIWlzTnVtYmVyKHJpZ2h0KSkge1xuXHRcdFx0dGhyb3cgYHJpZ2h0IGFyZ3VtZW50ICR7cmlnaHR9IGlzIGludmFsaWRgO1xuXHRcdH1cblx0XHRpZiAoIWlzTnVtYmVyKGJvdHRvbSkpIHtcblx0XHRcdHRocm93IGBib3R0b20gYXJndW1lbnQgJHtib3R0b219IGlzIGludmFsaWRgO1xuXHRcdH1cblx0XHRpZiAoIWlzTnVtYmVyKHRvcCkpIHtcblx0XHRcdHRocm93IGB0b3AgYXJndW1lbnQgJHt0b3B9IGlzIGludmFsaWRgO1xuXHRcdH1cblx0XHR0aGlzLmxlZnQgPSBsZWZ0O1xuXHRcdHRoaXMucmlnaHQgPSByaWdodDtcblx0XHR0aGlzLmJvdHRvbSA9IGJvdHRvbTtcblx0XHR0aGlzLnRvcCA9IHRvcDtcblx0fVxuXG5cdHNldFJlc29sdXRpb24ocmVzb2x1dGlvbikge1xuXHRcdGlmICghKGlzTnVtYmVyKHJlc29sdXRpb24pKSkge1xuXHRcdFx0dGhyb3cgYHJlc29sdXRpb24gYXJndW1lbnQgJHtyZXNvbHV0aW9ufSBtdXN0IGJlIG9mIHR5cGUgTnVtYmVyYDtcblx0XHR9XG5cdFx0aWYgKCFpc1BvVChyZXNvbHV0aW9uKSkge1xuXHRcdFx0dGhyb3cgYHJlc29sdXRpb24gYXJndW1lbnQgJHtyZXNvbHV0aW9ufSBtdXN0IGJlIGEgcG93ZXItb2YtdHdvYDtcblx0XHR9XG5cdFx0dGhpcy5yZXNvbHV0aW9uID0gcmVzb2x1dGlvbjtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdmFyaWF0ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ2V0ID0gcmVxdWlyZSgnbG9kYXNoL2dldCcpO1xuY29uc3QgbWluQnkgPSByZXF1aXJlKCdsb2Rhc2gvbWluQnknKTtcbmNvbnN0IG1heEJ5ID0gcmVxdWlyZSgnbG9kYXNoL21heEJ5Jyk7XG5jb25zdCBNaWNybyA9IHJlcXVpcmUoJy4vTWljcm8nKTtcblxuY2xhc3MgQ29tbXVuaXR5IGV4dGVuZHMgTWljcm8ge1xuXG5cdGNvbnN0cnVjdG9yKG1ldGEsIG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG1ldGEsIG9wdGlvbnMpO1xuXHRcdHRoaXMubG9kID0gMDtcblx0fVxuXG5cdGV4dHJhY3RFeHRyZW1hKGRhdGEpIHtcblx0XHRjb25zdCBoaXRzID0gZGF0YS5oaXRzO1xuXHRcdGlmICghaGl0cyB8fCBoaXRzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0Ly8gbm8gaGl0c1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0bWluOiBJbmZpbml0eSxcblx0XHRcdFx0bWF4OiAtSW5maW5pdHlcblx0XHRcdH07XG5cdFx0fVxuXHRcdGNvbnN0IGZpZWxkID0gdGhpcy5zb3J0RmllbGQ7XG5cdFx0Y29uc3QgbWluID0gbWluQnkoaGl0cywgY29tbXVuaXR5ID0+IHtcblx0XHRcdHJldHVybiBnZXQoY29tbXVuaXR5LCBmaWVsZCk7XG5cdFx0fSk7XG5cdFx0Y29uc3QgbWF4ID0gbWF4QnkoaGl0cywgY29tbXVuaXR5ID0+IHtcblx0XHRcdHJldHVybiBnZXQoY29tbXVuaXR5LCBmaWVsZCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG1pbjogZ2V0KG1pbiwgZmllbGQpLFxuXHRcdFx0bWF4OiBnZXQobWF4LCBmaWVsZClcblx0XHR9O1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbXVuaXR5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBCaXZhcmlhdGUgPSByZXF1aXJlKCcuL0JpdmFyaWF0ZScpO1xuXG5jbGFzcyBDb3VudCBleHRlbmRzIEJpdmFyaWF0ZSB7XG5cblx0Y29uc3RydWN0b3IobWV0YSwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0c3VwZXIobWV0YSwgb3B0aW9ucyk7XG5cdH1cblxuXHRnZXRUaWxlKG5hbWUgPSAnY291bnQnKSB7XG5cdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0eEZpZWxkOiB0aGlzLnhGaWVsZCxcblx0XHRcdHlGaWVsZDogdGhpcy55RmllbGQsXG5cdFx0XHRsZWZ0OiB0aGlzLmxlZnQsXG5cdFx0XHRyaWdodDogdGhpcy5yaWdodCxcblx0XHRcdGJvdHRvbTogdGhpcy5ib3R0b20sXG5cdFx0XHR0b3A6IHRoaXMudG9wXG5cdFx0fTtcblx0XHRjb25zdCB0aWxlID0ge307XG5cdFx0dGlsZVtuYW1lXSA9IHBhcmFtcztcblx0XHRyZXR1cm4gdGlsZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvdW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkZWZhdWx0VG8gPSByZXF1aXJlKCdsb2Rhc2gvZGVmYXVsdFRvJyk7XG5jb25zdCBpc1N0cmluZyA9IHJlcXVpcmUoJ2xvZGFzaC9pc1N0cmluZycpO1xuY29uc3QgaXNOdW1iZXIgPSByZXF1aXJlKCdsb2Rhc2gvaXNOdW1iZXInKTtcbmNvbnN0IExpdmUgPSByZXF1aXJlKCcuLi9jb3JlL0xpdmUnKTtcblxuY29uc3Qgc2V0U3RyaW5nRmllbGQgPSBmdW5jdGlvbihsYXllciwgcHJvcGVydHksIHZhbHVlKSB7XG5cdGlmICghaXNTdHJpbmcodmFsdWUpKSB7XG5cdFx0dGhyb3cgYCR7cHJvcGVydHl9IGFyZ3VtZW50ICR7dmFsdWV9IG11c3QgYmUgb2YgdHlwZSBTdHJpbmdgO1xuXHR9XG5cdGxheWVyW3Byb3BlcnR5XSA9IHZhbHVlO1xufTtcblxuY2xhc3MgRWRnZSBleHRlbmRzIExpdmUge1xuXG5cdGNvbnN0cnVjdG9yKG1ldGEsIG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG1ldGEsIG9wdGlvbnMpO1xuXHRcdHRoaXMuc3JjWEZpZWxkID0gZGVmYXVsdFRvKG9wdGlvbnMuc3JjWEZpZWxkLCAnc3JjWEZpZWxkJyk7XG5cdFx0dGhpcy5zcmNZRmllbGQgPSBkZWZhdWx0VG8ob3B0aW9ucy5zcmNZRmllbGQsICdzcmNZRmllbGQnKTtcblx0XHR0aGlzLmRzdFhGaWVsZCA9IGRlZmF1bHRUbyhvcHRpb25zLmRzdFhGaWVsZCwgJ2RzdFhGaWVsZCcpO1xuXHRcdHRoaXMuZHN0WUZpZWxkID0gZGVmYXVsdFRvKG9wdGlvbnMuZHN0WUZpZWxkLCAnZHN0WUZpZWxkJyk7XG5cdFx0Y29uc3QgbGVmdCA9IGRlZmF1bHRUbyhvcHRpb25zLmxlZnQsIDApO1xuXHRcdGNvbnN0IHJpZ2h0ID0gZGVmYXVsdFRvKG9wdGlvbnMucmlnaHQsIE1hdGgucG93KDIsIDMyKSk7XG5cdFx0Y29uc3QgYm90dG9tID0gZGVmYXVsdFRvKG9wdGlvbnMuYm90dG9tLCAwKTtcblx0XHRjb25zdCB0b3AgPSBkZWZhdWx0VG8ob3B0aW9ucy50b3AsIE1hdGgucG93KDIsIDMyKSk7XG5cdFx0dGhpcy5zZXRCb3VuZHMobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wKTtcblx0fVxuXG5cdHNldFNyY1hGaWVsZChmaWVsZCkge1xuXHRcdHNldFN0cmluZ0ZpZWxkKHRoaXMsICdzcmNYRmllbGQnLCBmaWVsZCk7XG5cdH1cblxuXHRzZXRTcmNZRmllbGQoZmllbGQpIHtcblx0XHRzZXRTdHJpbmdGaWVsZCh0aGlzLCAnc3JjWUZpZWxkJywgZmllbGQpO1xuXHR9XG5cblx0c2V0RHN0WEZpZWxkKGZpZWxkKSB7XG5cdFx0c2V0U3RyaW5nRmllbGQodGhpcywgJ2RzdFhGaWVsZCcsIGZpZWxkKTtcblx0fVxuXG5cdHNldERzdFlGaWVsZChmaWVsZCkge1xuXHRcdHNldFN0cmluZ0ZpZWxkKHRoaXMsICdkc3RZRmllbGQnLCBmaWVsZCk7XG5cdH1cblxuXHRzZXRCb3VuZHMobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wKSB7XG5cdFx0aWYgKCFpc051bWJlcihsZWZ0KSkge1xuXHRcdFx0dGhyb3cgYGxlZnQgYXJndW1lbnQgJHtsZWZ0fSBpcyBpbnZhbGlkYDtcblx0XHR9XG5cdFx0aWYgKCFpc051bWJlcihyaWdodCkpIHtcblx0XHRcdHRocm93IGByaWdodCBhcmd1bWVudCAke3JpZ2h0fSBpcyBpbnZhbGlkYDtcblx0XHR9XG5cdFx0aWYgKCFpc051bWJlcihib3R0b20pKSB7XG5cdFx0XHR0aHJvdyBgYm90dG9tIGFyZ3VtZW50ICR7Ym90dG9tfSBpcyBpbnZhbGlkYDtcblx0XHR9XG5cdFx0aWYgKCFpc051bWJlcih0b3ApKSB7XG5cdFx0XHR0aHJvdyBgdG9wIGFyZ3VtZW50ICR7dG9wfSBpcyBpbnZhbGlkYDtcblx0XHR9XG5cdFx0dGhpcy5sZWZ0ID0gbGVmdDtcblx0XHR0aGlzLnJpZ2h0ID0gcmlnaHQ7XG5cdFx0dGhpcy5ib3R0b20gPSBib3R0b207XG5cdFx0dGhpcy50b3AgPSB0b3A7XG5cdH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVkZ2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG1pbiA9IHJlcXVpcmUoJ2xvZGFzaC9taW4nKTtcbmNvbnN0IG1heCA9IHJlcXVpcmUoJ2xvZGFzaC9tYXgnKTtcbmNvbnN0IEJpdmFyaWF0ZSA9IHJlcXVpcmUoJy4vQml2YXJpYXRlJyk7XG5cbmNsYXNzIEhlYXRtYXAgZXh0ZW5kcyBCaXZhcmlhdGUge1xuXG5cdGNvbnN0cnVjdG9yKG1ldGEsIG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG1ldGEsIG9wdGlvbnMpO1xuXHR9XG5cblx0ZXh0cmFjdEV4dHJlbWEoZGF0YSkge1xuXHRcdGNvbnN0IGJpbnMgPSBuZXcgVWludDMyQXJyYXkoZGF0YSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG1pbjogbWluKGJpbnMpLFxuXHRcdFx0bWF4OiBtYXgoYmlucylcblx0XHR9O1xuXHR9XG5cblx0Z2V0VGlsZShuYW1lID0gJ2hlYXRtYXAnKSB7XG5cdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0eEZpZWxkOiB0aGlzLnhGaWVsZCxcblx0XHRcdHlGaWVsZDogdGhpcy55RmllbGQsXG5cdFx0XHRsZWZ0OiB0aGlzLmxlZnQsXG5cdFx0XHRyaWdodDogdGhpcy5yaWdodCxcblx0XHRcdGJvdHRvbTogdGhpcy5ib3R0b20sXG5cdFx0XHR0b3A6IHRoaXMudG9wLFxuXHRcdFx0cmVzb2x1dGlvbjogdGhpcy5yZXNvbHV0aW9uXG5cdFx0fTtcblx0XHRjb25zdCB0aWxlID0ge307XG5cdFx0dGlsZVtuYW1lXSA9IHBhcmFtcztcblx0XHRyZXR1cm4gdGlsZTtcblx0fVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGVhdG1hcDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgQml2YXJpYXRlID0gcmVxdWlyZSgnLi9CaXZhcmlhdGUnKTtcblxuY2xhc3MgTWFjcm8gZXh0ZW5kcyBCaXZhcmlhdGUge1xuXG5cdGNvbnN0cnVjdG9yKG1ldGEsIG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG1ldGEsIG9wdGlvbnMpO1xuXHRcdHRoaXMubG9kID0gZGVmYXVsdFRvKG9wdGlvbnMubG9kLCA0KTtcblx0XHR0aGlzLnRyYW5zZm9ybSA9IGRhdGEgPT4ge1xuXHRcdFx0aWYgKHRoaXMubG9kID4gMCkge1xuXHRcdFx0XHRjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGRhdGEpO1xuXHRcdFx0XHRjb25zdCBwb2ludHNCeXRlTGVuZ3RoID0gdmlldy5nZXRVaW50MzIoMCwgdHJ1ZSAvKiBsaXR0bGUgZW5kaWFuICovKTtcblx0XHRcdFx0Y29uc3Qgb2Zmc2V0c0J5dGVMZW5ndGggPSB2aWV3LmdldFVpbnQzMig0LCB0cnVlICAvKiBsaXR0bGUgZW5kaWFuICovKTtcblx0XHRcdFx0Y29uc3QgcG9pbnRzID0gZGF0YS5zbGljZSg4LCA4K3BvaW50c0J5dGVMZW5ndGgpO1xuXHRcdFx0XHRjb25zdCBvZmZzZXRzID0gZGF0YS5zbGljZSg4K3BvaW50c0J5dGVMZW5ndGgsIDgrcG9pbnRzQnl0ZUxlbmd0aCtvZmZzZXRzQnl0ZUxlbmd0aCk7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0cG9pbnRzOiBuZXcgRmxvYXQzMkFycmF5KHBvaW50cyksXG5cdFx0XHRcdFx0b2Zmc2V0czogbmV3IFVpbnQzMkFycmF5KG9mZnNldHMpXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcblx0XHR9O1xuXHR9XG5cblx0c2V0TE9EKGxvZCkge1xuXHRcdHRoaXMubG9kID0gbG9kO1xuXHR9XG5cblx0Z2V0VGlsZShuYW1lID0gJ21hY3JvJykge1xuXHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdHhGaWVsZDogdGhpcy54RmllbGQsXG5cdFx0XHR5RmllbGQ6IHRoaXMueUZpZWxkLFxuXHRcdFx0bGVmdDogdGhpcy5sZWZ0LFxuXHRcdFx0cmlnaHQ6IHRoaXMucmlnaHQsXG5cdFx0XHRib3R0b206IHRoaXMuYm90dG9tLFxuXHRcdFx0dG9wOiB0aGlzLnRvcCxcblx0XHRcdHJlc29sdXRpb246IHRoaXMucmVzb2x1dGlvbixcblx0XHRcdGxvZDogdGhpcy5sb2Rcblx0XHR9O1xuXHRcdGNvbnN0IHRpbGUgPSB7fTtcblx0XHR0aWxlW25hbWVdID0gcGFyYW1zO1xuXHRcdHJldHVybiB0aWxlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFjcm87XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IEVkZ2UgPSByZXF1aXJlKCcuL0VkZ2UnKTtcblxuY2xhc3MgTWFjcm9FZGdlIGV4dGVuZHMgRWRnZSB7XG5cblx0Y29uc3RydWN0b3IobWV0YSwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0c3VwZXIobWV0YSwgb3B0aW9ucyk7XG5cdFx0dGhpcy5sb2QgPSBkZWZhdWx0VG8ob3B0aW9ucy5sb2QsIDQpO1xuXHRcdHRoaXMuc29ydEZpZWxkID0gZGVmYXVsdFRvKG9wdGlvbnMuc29ydEZpZWxkLCBudWxsKTtcblx0XHR0aGlzLnNvcnRPcmRlciA9IGRlZmF1bHRUbyhvcHRpb25zLnNvcnRPcmRlciwgJ2Rlc2MnKTtcblx0XHR0aGlzLmhpdHNDb3VudCA9IGRlZmF1bHRUbyhvcHRpb25zLmhpdHNDb3VudCwgMTApO1xuXHRcdHRoaXMudHJhbnNmb3JtID0gZGF0YSA9PiB7XG5cdFx0XHRpZiAodGhpcy5sb2QgPiAwKSB7XG5cdFx0XHRcdGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YSk7XG5cdFx0XHRcdGNvbnN0IGVkZ2VzQnl0ZUxlbmd0aCA9IHZpZXcuZ2V0VWludDMyKDAsIHRydWUgLyogbGl0dGxlIGVuZGlhbiAqLyk7XG5cdFx0XHRcdGNvbnN0IG9mZnNldHNCeXRlTGVuZ3RoID0gdmlldy5nZXRVaW50MzIoNCwgdHJ1ZSAgLyogbGl0dGxlIGVuZGlhbiAqLyk7XG5cdFx0XHRcdGNvbnN0IGVkZ2VzID0gZGF0YS5zbGljZSg4LCA4K2VkZ2VzQnl0ZUxlbmd0aCk7XG5cdFx0XHRcdGNvbnN0IG9mZnNldHMgPSBkYXRhLnNsaWNlKDgrZWRnZXNCeXRlTGVuZ3RoLCA4K2VkZ2VzQnl0ZUxlbmd0aCtvZmZzZXRzQnl0ZUxlbmd0aCk7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZWRnZXM6IG5ldyBGbG9hdDMyQXJyYXkoZWRnZXMpLFxuXHRcdFx0XHRcdG9mZnNldHM6IG5ldyBVaW50MzJBcnJheShvZmZzZXRzKVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoZGF0YSk7XG5cdFx0fTtcblx0fVxuXG5cdHNldExPRChsb2QpIHtcblx0XHR0aGlzLmxvZCA9IGxvZDtcblx0fVxuXG5cdHNldFNvcnRGaWVsZChzb3J0RmllbGQpIHtcblx0XHR0aGlzLnNvcnRGaWVsZCA9IHNvcnRGaWVsZDtcblx0fVxuXG5cdHNldFNvcnRPcmRlcihzb3J0T3JkZXIpIHtcblx0XHR0aGlzLnNvcnRPcmRlciA9IHNvcnRPcmRlcjtcblx0fVxuXG5cdHNldEhpdHNDb3VudChoaXRzQ291bnQpIHtcblx0XHR0aGlzLmhpdHNDb3VudCA9IGhpdHNDb3VudDtcblx0fVxuXG5cdGdldFRpbGUobmFtZSA9ICdtYWNyby1lZGdlJykge1xuXHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdHNyY1hGaWVsZDogdGhpcy5zcmNYRmllbGQsXG5cdFx0XHRzcmNZRmllbGQ6IHRoaXMuc3JjWUZpZWxkLFxuXHRcdFx0ZHN0WEZpZWxkOiB0aGlzLmRzdFhGaWVsZCxcblx0XHRcdGRzdFlGaWVsZDogdGhpcy5kc3RZRmllbGQsXG5cdFx0XHRsZWZ0OiB0aGlzLmxlZnQsXG5cdFx0XHRyaWdodDogdGhpcy5yaWdodCxcblx0XHRcdGJvdHRvbTogdGhpcy5ib3R0b20sXG5cdFx0XHR0b3A6IHRoaXMudG9wLFxuXHRcdFx0bG9kOiB0aGlzLmxvZCxcblx0XHRcdHNvcnRGaWVsZDogdGhpcy5zb3J0RmllbGQsXG5cdFx0XHRzb3J0T3JkZXI6IHRoaXMuc29ydE9yZGVyLFxuXHRcdFx0aGl0c0NvdW50OiB0aGlzLmhpdHNDb3VudFxuXHRcdH07XG5cdFx0Y29uc3QgdGlsZSA9IHt9O1xuXHRcdHRpbGVbbmFtZV0gPSBwYXJhbXM7XG5cdFx0cmV0dXJuIHRpbGU7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNYWNyb0VkZ2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IEJpdmFyaWF0ZSA9IHJlcXVpcmUoJy4vQml2YXJpYXRlJyk7XG5cbmNsYXNzIE1pY3JvIGV4dGVuZHMgQml2YXJpYXRlIHtcblxuXHRjb25zdHJ1Y3RvcihtZXRhLCBvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihtZXRhLCBvcHRpb25zKTtcblx0XHR0aGlzLmxvZCA9IGRlZmF1bHRUbyhvcHRpb25zLmxvZCwgNCk7XG5cdFx0dGhpcy5zb3J0RmllbGQgPSBkZWZhdWx0VG8ob3B0aW9ucy5zb3J0RmllbGQsIG51bGwpO1xuXHRcdHRoaXMuc29ydE9yZGVyID0gZGVmYXVsdFRvKG9wdGlvbnMuc29ydE9yZGVyLCAnZGVzYycpO1xuXHRcdHRoaXMuaGl0c0NvdW50ID0gZGVmYXVsdFRvKG9wdGlvbnMuaGl0c0NvdW50LCAxMCk7XG5cdFx0dGhpcy5pbmNsdWRlRmllbGRzID0gZGVmYXVsdFRvKG9wdGlvbnMuaW5jbHVkZUZpZWxkcywgbnVsbCk7XG5cdFx0dGhpcy50cmFuc2Zvcm0gPSBkYXRhID0+IHtcblx0XHRcdGlmICh0aGlzLmxvZCA+IDApIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRwb2ludHM6IG5ldyBGbG9hdDMyQXJyYXkoZGF0YS5wb2ludHMpLFxuXHRcdFx0XHRcdG9mZnNldHM6IGRhdGEub2Zmc2V0cyxcblx0XHRcdFx0XHRoaXRzOiBkYXRhLmhpdHNcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHBvaW50czogbmV3IEZsb2F0MzJBcnJheShkYXRhLnBvaW50cyksXG5cdFx0XHRcdGhpdHM6IGRhdGEuaGl0c1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cblx0c2V0TE9EKGxvZCkge1xuXHRcdHRoaXMubG9kID0gbG9kO1xuXHR9XG5cblx0c2V0U29ydEZpZWxkKHNvcnRGaWVsZCkge1xuXHRcdHRoaXMuc29ydEZpZWxkID0gc29ydEZpZWxkO1xuXHR9XG5cblx0c2V0U29ydE9yZGVyKHNvcnRPcmRlcikge1xuXHRcdHRoaXMuc29ydE9yZGVyID0gc29ydE9yZGVyO1xuXHR9XG5cblx0c2V0SGl0c0NvdW50KGhpdHNDb3VudCkge1xuXHRcdHRoaXMuaGl0c0NvdW50ID0gaGl0c0NvdW50O1xuXHR9XG5cblx0c2V0SW5jbHVkZUZpZWxkcyhpbmNsdWRlRmllbGRzKSB7XG5cdFx0dGhpcy5pbmNsdWRlRmllbGRzID0gaW5jbHVkZUZpZWxkcztcblx0fVxuXG5cdGdldFRpbGUobmFtZSA9ICdtaWNybycpIHtcblx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHR4RmllbGQ6IHRoaXMueEZpZWxkLFxuXHRcdFx0eUZpZWxkOiB0aGlzLnlGaWVsZCxcblx0XHRcdGxlZnQ6IHRoaXMubGVmdCxcblx0XHRcdHJpZ2h0OiB0aGlzLnJpZ2h0LFxuXHRcdFx0Ym90dG9tOiB0aGlzLmJvdHRvbSxcblx0XHRcdHRvcDogdGhpcy50b3AsXG5cdFx0XHRsb2Q6IHRoaXMubG9kLFxuXHRcdFx0cmVzb2x1dGlvbjogdGhpcy5yZXNvbHV0aW9uLFxuXHRcdFx0c29ydEZpZWxkOiB0aGlzLnNvcnRGaWVsZCxcblx0XHRcdHNvcnRPcmRlcjogdGhpcy5zb3J0T3JkZXIsXG5cdFx0XHRoaXRzQ291bnQ6IHRoaXMuaGl0c0NvdW50LFxuXHRcdFx0aW5jbHVkZUZpZWxkczogdGhpcy5pbmNsdWRlRmllbGRzLFxuXHRcdH07XG5cdFx0Y29uc3QgdGlsZSA9IHt9O1xuXHRcdHRpbGVbbmFtZV0gPSBwYXJhbXM7XG5cdFx0cmV0dXJuIHRpbGU7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNaWNybztcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbHVtbyA9IHJlcXVpcmUoJ2x1bW8nKTtcbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IEltYWdlUmVuZGVyZXIgPSByZXF1aXJlKCcuLi8uLi9yZW5kZXIvd2ViZ2wvSW1hZ2UnKTtcblxuY2xhc3MgUmVzdCBleHRlbmRzIGx1bW8uTGF5ZXIge1xuXG5cdGNvbnN0cnVjdG9yKGVuZHBvaW50LCBvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0XHR0aGlzLmV4dCA9IGRlZmF1bHRUbyhvcHRpb25zLmV4dCwgJ3BuZycpO1xuXHRcdHRoaXMuc2NoZW1lID0gZGVmYXVsdFRvKG9wdGlvbnMuZXh0LCAnaHR0cCcpO1xuXHRcdHRoaXMuZW5kcG9pbnQgPSBlbmRwb2ludDtcblx0XHR0aGlzLnNldFJlbmRlcmVyKG5ldyBJbWFnZVJlbmRlcmVyKCkpO1xuXHR9XG5cblx0c2V0RXh0KGV4dCkge1xuXHRcdHRoaXMuZXh0ID0gZXh0O1xuXHR9XG5cblx0c2V0U2NoZW1lKHNjaGVtZSkge1xuXHRcdHRoaXMuc2NoZW1lID0gc2NoZW1lO1xuXHR9XG5cblx0c2V0U3ViRG9tYWlucyhzdWJkb21haW5zKSB7XG5cdFx0dGhpcy5zdWJkb21haW5zID0gc3ViZG9tYWlucztcblx0fVxuXG5cdHNldEVuZHBvaW50KGVuZHBvaW50KSB7XG5cdFx0dGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xuXHR9XG5cblx0Z2V0VGlsZShuYW1lID0gJ3Jlc3QnKSB7XG5cdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0ZXh0OiB0aGlzLmV4dCxcblx0XHRcdGVuZHBvaW50OiB0aGlzLmVuZHBvaW50LFxuXHRcdFx0c2NoZW1lOiB0aGlzLnNjaGVtZVxuXHRcdH07XG5cdFx0Y29uc3QgdGlsZSA9IHt9O1xuXHRcdHRpbGVbbmFtZV0gPSBwYXJhbXM7XG5cdFx0cmV0dXJuIHRpbGU7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB2YWx1ZXMgPSByZXF1aXJlKCdsb2Rhc2gvdmFsdWVzJyk7XG5jb25zdCBkZWZhdWx0VG8gPSByZXF1aXJlKCdsb2Rhc2gvZGVmYXVsdFRvJyk7XG5jb25zdCBCaXZhcmlhdGUgPSByZXF1aXJlKCcuL0JpdmFyaWF0ZScpO1xuXG5jbGFzcyBUb3BUZXJtQ291bnQgZXh0ZW5kcyBCaXZhcmlhdGUge1xuXG5cdGNvbnN0cnVjdG9yKG1ldGEsIG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG1ldGEsIG9wdGlvbnMpO1xuXHRcdHRoaXMudGVybXNGaWVsZCA9IG9wdGlvbnMudGVybXNGaWVsZDtcblx0XHR0aGlzLnRlcm1zQ291bnQgPSBkZWZhdWx0VG8ob3B0aW9ucy50ZXJtc0NvdW50LCAxMCk7XG5cdH1cblxuXHRleHRyYWN0RXh0cmVtYShkYXRhKSB7XG5cdFx0Y29uc3QgdmFscyA9IHZhbHVlcyhkYXRhKTtcblx0XHRsZXQgbWluID0gSW5maW5pdHk7XG5cdFx0bGV0IG1heCA9IC1JbmZpbml0eTtcblx0XHRmb3IgKGxldCBpPTA7IGk8dmFscy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgdmFsID0gdmFsc1tpXTtcblx0XHRcdGlmICh2YWwgPiBtYXgpIHtcblx0XHRcdFx0bWF4ID0gdmFsO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHZhbCA8IG1pbikge1xuXHRcdFx0XHRtaW4gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHRtaW46IG1pbixcblx0XHRcdG1heDogbWF4XG5cdFx0fTtcblx0fVxuXG5cdHNldFRlcm1zRmllbGQoZmllbGQpIHtcblx0XHR0aGlzLnRlcm1zRmllbGQgPSBmaWVsZDtcblx0fVxuXG5cdHNldFRlcm1zQ291bnQoY291bnQpIHtcblx0XHR0aGlzLnRlcm1zQ291bnQgPSBjb3VudDtcblx0fVxuXG5cdGdldFRpbGUobmFtZSA9ICd0b3AtdGVybS1jb3VudCcpIHtcblx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHR4RmllbGQ6IHRoaXMueEZpZWxkLFxuXHRcdFx0eUZpZWxkOiB0aGlzLnlGaWVsZCxcblx0XHRcdGxlZnQ6IHRoaXMubGVmdCxcblx0XHRcdHJpZ2h0OiB0aGlzLnJpZ2h0LFxuXHRcdFx0Ym90dG9tOiB0aGlzLmJvdHRvbSxcblx0XHRcdHRvcDogdGhpcy50b3AsXG5cdFx0XHR0ZXJtc0ZpZWxkOiB0aGlzLnRlcm1zRmllbGQsXG5cdFx0XHR0ZXJtc0NvdW50OiB0aGlzLnRlcm1zQ291bnRcblx0XHR9O1xuXHRcdGNvbnN0IHRpbGUgPSB7fTtcblx0XHR0aWxlW25hbWVdID0gcGFyYW1zO1xuXHRcdHJldHVybiB0aWxlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVG9wVGVybUNvdW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsdW1vID0gcmVxdWlyZSgnbHVtbycpO1xuXG5jbGFzcyBNYXAgZXh0ZW5kcyBsdW1vLlBsb3Qge1xuXG5cdGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBvcHRpb25zKSB7XG5cdFx0c3VwZXIoc2VsZWN0b3IsIG9wdGlvbnMpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtYXAgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5jb25zdCBzdW0gPSByZXF1aXJlKCdsb2Rhc2gvc3VtJyk7XG5cbmNvbnN0IE5VTV9HUkFESUVOVF9TVEVQUyA9IDI1NjtcblxuZnVuY3Rpb24gcmdiMmxhYihyZ2IpIHtcblx0Y29uc3QgciA9IHJnYlswXSA+IDAuMDQwNDUgPyBNYXRoLnBvdygocmdiWzBdICsgMC4wNTUpIC8gMS4wNTUsIDIuNCkgOiByZ2JbMF0gLyAxMi45Mjtcblx0Y29uc3QgZyA9IHJnYlsxXSA+IDAuMDQwNDUgPyBNYXRoLnBvdygocmdiWzFdICsgMC4wNTUpIC8gMS4wNTUsIDIuNCkgOiByZ2JbMV0gLyAxMi45Mjtcblx0Y29uc3QgYiA9IHJnYlsyXSA+IDAuMDQwNDUgPyBNYXRoLnBvdygocmdiWzJdICsgMC4wNTUpIC8gMS4wNTUsIDIuNCkgOiByZ2JbMl0gLyAxMi45Mjtcblx0Ly8gT2JzZXJ2ZXIuID0gMsKwLCBJbGx1bWluYW50ID0gRDY1XG5cdGxldCB4ID0gciAqIDAuNDEyNDU2NCArIGcgKiAwLjM1NzU3NjEgKyBiICogMC4xODA0Mzc1O1xuXHRsZXQgeSA9IHIgKiAwLjIxMjY3MjkgKyBnICogMC43MTUxNTIyICsgYiAqIDAuMDcyMTc1MDtcblx0bGV0IHogPSByICogMC4wMTkzMzM5ICsgZyAqIDAuMTE5MTkyMCArIGIgKiAwLjk1MDMwNDE7XG5cdHggPSB4IC8gMC45NTA0NzsgLy8gT2JzZXJ2ZXI9IDLCsCwgSWxsdW1pbmFudD0gRDY1XG5cdHkgPSB5IC8gMS4wMDAwMDtcblx0eiA9IHogLyAxLjA4ODgzO1xuXHR4ID0geCA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeCwgMSAvIDMpIDogKDcuNzg3MDM3ICogeCkgKyAoMTYgLyAxMTYpO1xuXHR5ID0geSA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeSwgMSAvIDMpIDogKDcuNzg3MDM3ICogeSkgKyAoMTYgLyAxMTYpO1xuXHR6ID0geiA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeiwgMSAvIDMpIDogKDcuNzg3MDM3ICogeikgKyAoMTYgLyAxMTYpO1xuXHRyZXR1cm4gW1xuXHRcdCgxMTYgKiB5KSAtIDE2LFxuXHRcdDUwMCAqICh4IC0geSksXG5cdFx0MjAwICogKHkgLSB6KSxcblx0XHRyZ2JbM11cblx0XTtcbn1cblxuZnVuY3Rpb24gbGFiMnJnYihsYWIpIHtcblx0bGV0IHkgPSAobGFiWzBdICsgMTYpIC8gMTE2O1xuXHRsZXQgeCA9IHkgKyBsYWJbMV0gLyA1MDA7XG5cdGxldCB6ID0geSAtIGxhYlsyXSAvIDIwMDtcblx0eCA9IHggPiAwLjIwNjg5MzAzNCA/IHggKiB4ICogeCA6ICh4IC0gNCAvIDI5KSAvIDcuNzg3MDM3O1xuXHR5ID0geSA+IDAuMjA2ODkzMDM0ID8geSAqIHkgKiB5IDogKHkgLSA0IC8gMjkpIC8gNy43ODcwMzc7XG5cdHogPSB6ID4gMC4yMDY4OTMwMzQgPyB6ICogeiAqIHogOiAoeiAtIDQgLyAyOSkgLyA3Ljc4NzAzNztcblx0eCA9IHggKiAwLjk1MDQ3OyAvLyBPYnNlcnZlcj0gMsKwLCBJbGx1bWluYW50PSBENjVcblx0eSA9IHkgKiAxLjAwMDAwO1xuXHR6ID0geiAqIDEuMDg4ODM7XG5cdGxldCByID0geCAqIDMuMjQwNDU0MiArIHkgKiAtMS41MzcxMzg1ICsgeiAqIC0wLjQ5ODUzMTQ7XG5cdGxldCBnID0geCAqIC0wLjk2OTI2NjAgKyB5ICogMS44NzYwMTA4ICsgeiAqIDAuMDQxNTU2MDtcblx0bGV0IGIgPSB4ICogMC4wNTU2NDM0ICsgeSAqIC0wLjIwNDAyNTkgKyB6ICogMS4wNTcyMjUyO1xuXHRyID0gciA+IDAuMDAzMDQgPyAxLjA1NSAqIE1hdGgucG93KHIsIDEgLyAyLjQpIC0gMC4wNTUgOiAxMi45MiAqIHI7XG5cdGcgPSBnID4gMC4wMDMwNCA/IDEuMDU1ICogTWF0aC5wb3coZywgMSAvIDIuNCkgLSAwLjA1NSA6IDEyLjkyICogZztcblx0YiA9IGIgPiAwLjAwMzA0ID8gMS4wNTUgKiBNYXRoLnBvdyhiLCAxIC8gMi40KSAtIDAuMDU1IDogMTIuOTIgKiBiO1xuXHRyZXR1cm4gW01hdGgubWF4KE1hdGgubWluKHIsIDEpLCAwKSwgTWF0aC5tYXgoTWF0aC5taW4oZywgMSksIDApLCBNYXRoLm1heChNYXRoLm1pbihiLCAxKSwgMCksIGxhYlszXV07XG59XG5cbmZ1bmN0aW9uIGRpc3RhbmNlKGMxLCBjMikge1xuXHRyZXR1cm4gTWF0aC5zcXJ0KFxuXHRcdChjMVswXSAtIGMyWzBdKSAqIChjMVswXSAtIGMyWzBdKSArXG5cdFx0KGMxWzFdIC0gYzJbMV0pICogKGMxWzFdIC0gYzJbMV0pICtcblx0XHQoYzFbMl0gLSBjMlsyXSkgKiAoYzFbMl0gLSBjMlsyXSkgK1xuXHRcdChjMVszXSAtIGMyWzNdKSAqIChjMVszXSAtIGMyWzNdKSk7XG59XG5cbmNvbnN0IGJ1aWxkRmxhdExvb2t1cFRhYmxlID0gZnVuY3Rpb24oY29sb3IpIHtcblx0Y29uc3Qgb3V0cHV0ID0gW107XG5cdG91dHB1dC5wdXNoKGNvbG9yWzBdKTtcblx0b3V0cHV0LnB1c2goY29sb3JbMV0pO1xuXHRvdXRwdXQucHVzaChjb2xvclsyXSk7XG5cdG91dHB1dC5wdXNoKGNvbG9yWzNdKTtcblx0cmV0dXJuIG91dHB1dDtcbn07XG5cbi8vIEludGVycG9sYXRlIGJldHdlZW4gYSBzZXQgb2YgY29sb3JzIHVzaW5nIGV2ZW4gcGVyY2VwdHVhbCBkaXN0YW5jZSBhbmQgaW50ZXJwb2xhdGlvbiBpbiBDSUUgTCphKmIqIHNwYWNlXG5jb25zdCBidWlsZFBlcmNlcHR1YWxMb29rdXBUYWJsZSA9IGZ1bmN0aW9uKGJhc2VDb2xvcnMpIHtcblx0Y29uc3Qgb3V0cHV0R3JhZGllbnQgPSBuZXcgVWludDhBcnJheShOVU1fR1JBRElFTlRfU1RFUFMqNCk7XG5cdC8vIENhbGN1bGF0ZSBwZXJjZXB0dWFsIHNwcmVhZCBpbiBMKmEqYiogc3BhY2Vcblx0Y29uc3QgbGFicyA9IG1hcChiYXNlQ29sb3JzLCBjb2xvciA9PiB7XG5cdFx0cmV0dXJuIHJnYjJsYWIoW2NvbG9yWzBdIC8gMjU1LCBjb2xvclsxXSAvIDI1NSwgY29sb3JbMl0gLyAyNTUsIGNvbG9yWzNdIC8gMjU1XSk7XG5cdH0pO1xuXHRsZXQgZGlzdGFuY2VzID0gbWFwKGxhYnMsIChjb2xvciwgaW5kZXgsIGNvbG9ycykgPT4ge1xuXHRcdHJldHVybiBpbmRleCA+IDAgPyBkaXN0YW5jZShjb2xvciwgY29sb3JzW2luZGV4IC0gMV0pIDogMDtcblx0fSk7XG5cdC8vIENhbGN1bGF0ZSBjdW11bGF0aXZlIGRpc3RhbmNlcyBpbiBbMCwxXVxuXHRjb25zdCB0b3RhbERpc3RhbmNlID0gc3VtKGRpc3RhbmNlcyk7XG5cdGRpc3RhbmNlcyA9IG1hcChkaXN0YW5jZXMsIGQgPT4ge1xuXHRcdHJldHVybiBkIC8gdG90YWxEaXN0YW5jZTtcblx0fSk7XG5cdGxldCBkaXN0YW5jZVRyYXZlcnNlZCA9IDA7XG5cdGxldCBrZXkgPSAwO1xuXHRsZXQgcHJvZ3Jlc3M7XG5cdGxldCBzdGVwUHJvZ3Jlc3M7XG5cdGxldCByZ2I7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgTlVNX0dSQURJRU5UX1NURVBTOyBpKyspIHtcblx0XHRwcm9ncmVzcyA9IGkgLyAoTlVNX0dSQURJRU5UX1NURVBTIC0gMSk7XG5cdFx0aWYgKHByb2dyZXNzID4gZGlzdGFuY2VUcmF2ZXJzZWQgKyBkaXN0YW5jZXNba2V5ICsgMV0gJiYga2V5ICsgMSA8IGxhYnMubGVuZ3RoIC0gMSkge1xuXHRcdFx0a2V5ICs9IDE7XG5cdFx0XHRkaXN0YW5jZVRyYXZlcnNlZCArPSBkaXN0YW5jZXNba2V5XTtcblx0XHR9XG5cdFx0c3RlcFByb2dyZXNzID0gKHByb2dyZXNzIC0gZGlzdGFuY2VUcmF2ZXJzZWQpIC8gZGlzdGFuY2VzW2tleSArIDFdO1xuXHRcdHJnYiA9IGxhYjJyZ2IoW1xuXHRcdFx0bGFic1trZXldWzBdICsgKGxhYnNba2V5ICsgMV1bMF0gLSBsYWJzW2tleV1bMF0pICogc3RlcFByb2dyZXNzLFxuXHRcdFx0bGFic1trZXldWzFdICsgKGxhYnNba2V5ICsgMV1bMV0gLSBsYWJzW2tleV1bMV0pICogc3RlcFByb2dyZXNzLFxuXHRcdFx0bGFic1trZXldWzJdICsgKGxhYnNba2V5ICsgMV1bMl0gLSBsYWJzW2tleV1bMl0pICogc3RlcFByb2dyZXNzLFxuXHRcdFx0bGFic1trZXldWzNdICsgKGxhYnNba2V5ICsgMV1bM10gLSBsYWJzW2tleV1bM10pICogc3RlcFByb2dyZXNzXG5cdFx0XSk7XG5cdFx0b3V0cHV0R3JhZGllbnRbaSAqIDRdID0gcmdiWzBdICogMjU1O1xuXHRcdG91dHB1dEdyYWRpZW50W2kgKiA0ICsgMV0gPSByZ2JbMV0gKiAyNTU7XG5cdFx0b3V0cHV0R3JhZGllbnRbaSAqIDQgKyAyXSA9IHJnYlsyXSAqIDI1NTtcblx0XHRvdXRwdXRHcmFkaWVudFtpICogNCArIDNdID0gcmdiWzNdICogMjU1O1xuXHR9XG5cdHJldHVybiBvdXRwdXRHcmFkaWVudDtcbn07XG5cbmNvbnN0IENPT0wgPSBidWlsZFBlcmNlcHR1YWxMb29rdXBUYWJsZShbXG5cdFsweDA0LCAweDIwLCAweDQwLCAweDUwXSxcblx0WzB4MDgsIDB4NDAsIDB4ODEsIDB4N2ZdLFxuXHRbMHgwOCwgMHg2OCwgMHhhYywgMHhmZl0sXG5cdFsweDJiLCAweDhjLCAweGJlLCAweGZmXSxcblx0WzB4NGUsIDB4YjMsIDB4ZDMsIDB4ZmZdLFxuXHRbMHg3YiwgMHhjYywgMHhjNCwgMHhmZl0sXG5cdFsweGE4LCAweGRkLCAweGI1LCAweGZmXSxcblx0WzB4Y2MsIDB4ZWIsIDB4YzUsIDB4ZmZdLFxuXHRbMHhlMCwgMHhmMywgMHhkYiwgMHhmZl0sXG5cdFsweGY3LCAweGZjLCAweGYwLCAweGZmXVxuXSk7XG5cbmNvbnN0IEhPVCA9IGJ1aWxkUGVyY2VwdHVhbExvb2t1cFRhYmxlKFtcblx0WzB4NDAsIDB4MDAsIDB4MTMsIDB4NTBdLFxuXHRbMHg4MCwgMHgwMCwgMHgyNiwgMHg3Zl0sXG5cdFsweGJkLCAweDAwLCAweDI2LCAweGZmXSxcblx0WzB4ZTMsIDB4MWEsIDB4MWMsIDB4ZmZdLFxuXHRbMHhmYywgMHg0ZSwgMHgyYSwgMHhmZl0sXG5cdFsweGZkLCAweDhkLCAweDNjLCAweGZmXSxcblx0WzB4ZmUsIDB4YjIsIDB4NGMsIDB4ZmZdLFxuXHRbMHhmZSwgMHhkOSwgMHg3NiwgMHhmZl0sXG5cdFsweGZmLCAweGVkLCAweGEwLCAweGZmXVxuXSk7XG5cbmNvbnN0IFZFUkRBTlQgPSBidWlsZFBlcmNlcHR1YWxMb29rdXBUYWJsZShbXG5cdFsweDAwLCAweDQwLCAweDI2LCAweDUwXSxcblx0WzB4MDAsIDB4NWEsIDB4MzIsIDB4N2ZdLFxuXHRbMHgyMywgMHg4NCwgMHg0MywgMHhmZl0sXG5cdFsweDQxLCAweGFiLCAweDVkLCAweGZmXSxcblx0WzB4NzgsIDB4YzYsIDB4NzksIDB4ZmZdLFxuXHRbMHhhZCwgMHhkZCwgMHg4ZSwgMHhmZl0sXG5cdFsweGQ5LCAweGYwLCAweGEzLCAweGZmXSxcblx0WzB4ZjcsIDB4ZmMsIDB4YjksIDB4ZmZdLFxuXHRbMHhmZiwgMHhmZiwgMHhlNSwgMHhmZl1cbl0pO1xuXG5jb25zdCBTUEVDVFJBTCA9IGJ1aWxkUGVyY2VwdHVhbExvb2t1cFRhYmxlKFtcblx0WzB4MjYsIDB4MWEsIDB4NDAsIDB4NTBdLFxuXHRbMHg0NCwgMHgyZiwgMHg3MiwgMHg3Zl0sXG5cdFsweGUxLCAweDJiLCAweDAyLCAweGZmXSxcblx0WzB4MDIsIDB4ZGMsIDB4MDEsIDB4ZmZdLFxuXHRbMHhmZiwgMHhkMiwgMHgwMiwgMHhmZl0sXG5cdFsweGZmLCAweGZmLCAweGZmLCAweGZmXVxuXSk7XG5cbmNvbnN0IFRFTVBFUkFUVVJFID0gYnVpbGRQZXJjZXB0dWFsTG9va3VwVGFibGUoW1xuXHRbMHgwMCwgMHgxNiwgMHg0MCwgMHg1MF0sXG5cdFsweDAwLCAweDM5LCAweDY2LCAweDdmXSxcblx0WzB4MzEsIDB4M2QsIDB4NjYsIDB4ZmZdLFxuXHRbMHhlMSwgMHgyYiwgMHgwMiwgMHhmZl0sXG5cdFsweGZmLCAweGQyLCAweDAyLCAweGZmXSxcblx0WzB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmZdXG5dKTtcblxuY29uc3QgR1JFWVNDQUxFID0gYnVpbGRQZXJjZXB0dWFsTG9va3VwVGFibGUoW1xuXHRbMHgwMCwgMHgwMCwgMHgwMCwgMHg3Zl0sXG5cdFsweDQwLCAweDQwLCAweDQwLCAweGZmXSxcblx0WzB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmZdXG5dKTtcblxuY29uc3QgR09MRCA9IGJ1aWxkUGVyY2VwdHVhbExvb2t1cFRhYmxlKFtcblx0WyAweDg0LCAweDU0LCAweDBGLCAweEZGIF0sXG5cdFsgMHhBNiwgMHg3QiwgMHgzRSwgMHhGRiBdLFxuXHRbIDB4QzksIDB4QTMsIDB4NkQsIDB4RkYgXSxcblx0WyAweEVDLCAweENCLCAweDlDLCAweEZGIF0sXG5cdFsgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiBdXG5dKTtcblxuY29uc3QgRkxBVCA9IGJ1aWxkRmxhdExvb2t1cFRhYmxlKFsweGZmLCAweGZmLCAweGZmLCAweGZmXSk7XG5cbmNvbnN0IGJ1aWxkTG9va3VwRnVuY3Rpb24gPSBmdW5jdGlvbihSQU1QKSB7XG5cdHJldHVybiBmdW5jdGlvbihzY2FsZWRWYWx1ZSwgaW5Db2xvcikge1xuXHRcdGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihzY2FsZWRWYWx1ZSAqIChSQU1QLmxlbmd0aCAvIDQgLSAxKSk7XG5cdFx0aW5Db2xvclswXSA9IFJBTVBbaW5kZXggKiA0XTtcblx0XHRpbkNvbG9yWzFdID0gUkFNUFtpbmRleCAqIDQgKyAxXTtcblx0XHRpbkNvbG9yWzJdID0gUkFNUFtpbmRleCAqIDQgKyAyXTtcblx0XHRpbkNvbG9yWzNdID0gUkFNUFtpbmRleCAqIDQgKyAzXTtcblx0XHRyZXR1cm4gaW5Db2xvcjtcblx0fTtcbn07XG5cbmNvbnN0IGNvbG9yVGFibGVzID0ge1xuXHRjb29sOiBDT09MLFxuXHRob3Q6IEhPVCxcblx0dmVyZGFudDogVkVSREFOVCxcblx0c3BlY3RyYWw6IFNQRUNUUkFMLFxuXHR0ZW1wZXJhdHVyZTogVEVNUEVSQVRVUkUsXG5cdGdvbGQ6IEdPTEQsXG5cdGdyZXk6IEdSRVlTQ0FMRSxcblx0ZmxhdDogRkxBVFxufTtcblxuY29uc3QgY29sb3JSYW1wcyA9IHtcblx0Y29vbDogYnVpbGRMb29rdXBGdW5jdGlvbihDT09MKSxcblx0aG90OiBidWlsZExvb2t1cEZ1bmN0aW9uKEhPVCksXG5cdHZlcmRhbnQ6IGJ1aWxkTG9va3VwRnVuY3Rpb24oVkVSREFOVCksXG5cdHNwZWN0cmFsOiBidWlsZExvb2t1cEZ1bmN0aW9uKFNQRUNUUkFMKSxcblx0dGVtcGVyYXR1cmU6IGJ1aWxkTG9va3VwRnVuY3Rpb24oVEVNUEVSQVRVUkUpLFxuXHRnb2xkOiBidWlsZExvb2t1cEZ1bmN0aW9uKEdPTEQpLFxuXHRncmV5OiBidWlsZExvb2t1cEZ1bmN0aW9uKEdSRVlTQ0FMRSksXG5cdGZsYXQ6IGJ1aWxkTG9va3VwRnVuY3Rpb24oRkxBVClcbn07XG5cbmNvbnN0IGdldFRhYmxlID0gZnVuY3Rpb24odHlwZSkge1xuXHRpZiAoIWNvbG9yVGFibGVzW3R5cGVdKSB7XG5cdFx0dGhyb3cgYENvbG9yIHRhYmxlICR7dHlwZX0gZG9lcyBub3QgZXhpc3RgO1xuXHR9XG5cdHJldHVybiBjb2xvclRhYmxlc1t0eXBlXTtcbn07XG5cbmNvbnN0IGdldEZ1bmMgPSBmdW5jdGlvbih0eXBlKSB7XG5cdGlmICghY29sb3JSYW1wc1t0eXBlXSkge1xuXHRcdHRocm93IGBDb2xvciB0YWJsZSAke3R5cGV9IGRvZXMgbm90IGV4aXN0YDtcblx0fVxuXHRyZXR1cm4gY29sb3JSYW1wc1t0eXBlXTtcbn07XG5cbmNvbnN0IGNyZWF0ZVJhbXAgPSBmdW5jdGlvbih0eXBlLCBiYXNlQ29sb3JzKSB7XG5cdGNvbG9yVGFibGVzW3R5cGVdID0gYnVpbGRQZXJjZXB0dWFsTG9va3VwVGFibGUoYmFzZUNvbG9ycyk7XG5cdGNvbG9yUmFtcHNbdHlwZV0gPSBidWlsZExvb2t1cEZ1bmN0aW9uKGNvbG9yVGFibGVzW3R5cGVdKTtcblx0cmV0dXJuIGNvbG9yUmFtcHNbdHlwZV07XG59O1xuXG5jb25zdCBnZXRCdWNrZXRzID0gZnVuY3Rpb24odHlwZSwgbnVtQnVja2V0cykge1xuXHRjb25zdCByYW1wID0gZ2V0RnVuYyh0eXBlKTtcblx0Y29uc3QgYnVja2V0cyA9IFtdO1xuXHRjb25zdCBjb2xvciA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaTxudW1CdWNrZXRzOyBpKyspIHtcblx0XHRyYW1wKGkvKG51bUJ1Y2tldHMtMSksIGNvbG9yKTtcblx0XHRidWNrZXRzLnB1c2goW1xuXHRcdFx0Y29sb3JbMF0gLyAyNTUsXG5cdFx0XHRjb2xvclsxXSAvIDI1NSxcblx0XHRcdGNvbG9yWzJdIC8gMjU1LFxuXHRcdFx0Y29sb3JbM10gLyAyNTVcblx0XHRdKTtcblx0fVxuXHRyZXR1cm4gYnVja2V0cztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRnZXRUYWJsZTogZ2V0VGFibGUsXG5cdGdldEZ1bmM6IGdldEZ1bmMsXG5cdGdldEJ1Y2tldHM6IGdldEJ1Y2tldHMsXG5cdGNyZWF0ZVJhbXA6IGNyZWF0ZVJhbXAsXG5cdE5VTV9HUkFESUVOVF9TVEVQUzogTlVNX0dSQURJRU5UX1NURVBTXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsdW1vID0gcmVxdWlyZSgnbHVtbycpO1xuXG4vLyBjb3JlIHJlbmRlcmVyc1xuY29uc3QgQ29yZSA9IHtcblx0SFRNTDogbHVtby5IVE1MUmVuZGVyZXIsXG5cdFNWRzogbHVtby5TVkdSZW5kZXJlcixcblx0V2ViR0w6IGx1bW8uV2ViR0xSZW5kZXJlclxufTtcblxuLy8gaHRtbCByZW5kZXJlcnNcbmNvbnN0IEhUTUwgPSB7XG5cdENvbW11bml0eUxhYmVsOiByZXF1aXJlKCcuL2h0bWwvQ29tbXVuaXR5TGFiZWwnKSxcblx0RGVidWc6IHJlcXVpcmUoJy4vaHRtbC9EZWJ1ZycpLFxuXHRXb3JkQ2xvdWQ6IHJlcXVpcmUoJy4vaHRtbC9Xb3JkQ2xvdWQnKVxufTtcblxuLy8gd2ViZ2wgcmVuZGVyZXJzXG5jb25zdCBXZWJHTCA9IHtcblx0Q29tbXVuaXR5OiByZXF1aXJlKCcuL3dlYmdsL0NvbW11bml0eScpLFxuXHRDb21tdW5pdHlCdWNrZXQ6IHJlcXVpcmUoJy4vd2ViZ2wvQ29tbXVuaXR5QnVja2V0JyksXG5cdEhlYXRtYXA6IHJlcXVpcmUoJy4vd2ViZ2wvSGVhdG1hcCcpLFxuXHRNaWNybzogcmVxdWlyZSgnLi93ZWJnbC9NaWNybycpLFxuXHRNYWNybzogcmVxdWlyZSgnLi93ZWJnbC9NYWNybycpLFxuXHRNYWNyb0VkZ2U6IHJlcXVpcmUoJy4vd2ViZ2wvTWFjcm9FZGdlJyksXG5cdFJlcGVhdDogcmVxdWlyZSgnLi93ZWJnbC9SZXBlYXQnKVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdENvcmU6IENvcmUsXG5cdEhUTUw6IEhUTUwsXG5cdFdlYkdMOiBXZWJHTFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuY29uc3QgZ2V0ID0gcmVxdWlyZSgnbG9kYXNoL2dldCcpO1xuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgbHVtbyA9IHJlcXVpcmUoJ2x1bW8nKTtcbmNvbnN0IFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4uL3RyYW5zZm9ybS9UcmFuc2Zvcm0nKTtcblxuY29uc3QgSEVJR0hUX0JVRkZFUiA9IDQ7XG5cbmNvbnN0IGdldE1vdXNlQnV0dG9uID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0aWYgKGV2ZW50LndoaWNoID09PSAxKSB7XG5cdFx0cmV0dXJuICdsZWZ0Jztcblx0fSBlbHNlIGlmIChldmVudC53aGljaCA9PT0gMikge1xuXHRcdHJldHVybiAnbWlkZGxlJztcblx0fSBlbHNlIGlmIChldmVudC53aGljaCA9PT0gMykge1xuXHRcdHJldHVybiAncmlnaHQnO1xuXHR9XG59O1xuXG5jbGFzcyBDb21tdW5pdHlMYWJlbCBleHRlbmRzIGx1bW8uSFRNTFJlbmRlcmVyIHtcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0XHR0aGlzLnRyYW5zZm9ybSA9IGRlZmF1bHRUbyhvcHRpb25zLnRyYW5zZm9ybSwgJ2xvZzEwJyk7XG5cdFx0dGhpcy5taW5Gb250U2l6ZSA9IGRlZmF1bHRUbyhvcHRpb25zLm1pbkZvbnRTaXplLCAxMCk7XG5cdFx0dGhpcy5tYXhGb250U2l6ZSA9IGRlZmF1bHRUbyhvcHRpb25zLm1heEZvbnRTaXplLCAyNCk7XG5cdFx0dGhpcy5taW5PcGFjaXR5ID0gZGVmYXVsdFRvKG9wdGlvbnMubWluT3BhY2l0eSwgMC42KTtcblx0XHR0aGlzLm1heE9wYWNpdHkgPSBkZWZhdWx0VG8ob3B0aW9ucy5tYXhPcGFjaXR5LCAxLjApO1xuXHRcdHRoaXMubGFiZWxNYXhMZW5ndGggPSBkZWZhdWx0VG8ob3B0aW9ucy5sYWJlbE1heExlbmd0aCwgMjU2KTtcblx0XHR0aGlzLmxhYmVsVGhyZXNob2xkID0gZGVmYXVsdFRvKG9wdGlvbnMubGFiZWxUaHJlc2hvbGQsIDAuNik7XG5cdFx0dGhpcy5sYWJlbEZpZWxkID0gZGVmYXVsdFRvKG9wdGlvbnMubGFiZWxGaWVsZCwgJ21ldGFkYXRhJyk7XG5cdFx0dGhpcy5sYWJlbERlY29uZmxpY3QgPSBkZWZhdWx0VG8ob3B0aW9ucy5sYWJlbERlY29uZmxpY3QsIHRydWUpO1xuXHR9XG5cblx0b25BZGQobGF5ZXIpIHtcblx0XHRzdXBlci5vbkFkZChsYXllcik7XG5cdFx0dGhpcy5tb3VzZW92ZXIgPSBldmVudCA9PiB7XG5cdFx0XHR0aGlzLm9uTW91c2VPdmVyKGV2ZW50KTtcblx0XHR9O1xuXHRcdHRoaXMubW91c2VvdXQgPSBldmVudCA9PiB7XG5cdFx0XHR0aGlzLm9uTW91c2VPdXQoZXZlbnQpO1xuXHRcdH07XG5cdFx0dGhpcy5jbGljayA9IGV2ZW50ID0+IHtcblx0XHRcdHRoaXMub25DbGljayhldmVudCk7XG5cdFx0fTtcblx0XHRpZiAodGhpcy5sYWJlbERlY29uZmxpY3QpIHtcblx0XHRcdHRoaXMuZGVjb25mbGljdCA9ICgpID0+IHtcblx0XHRcdFx0Y29uc3QgdHJlZSA9IG5ldyBsdW1vLlJUcmVlKHtcblx0XHRcdFx0XHRjb2xsaXNpb25UeXBlOiBsdW1vLlJFQ1RBTkdMRSxcblx0XHRcdFx0XHRub2RlQ2FwYWNpdHk6IDY0XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHQvLyBncmFiIGFsbCBsYWJlbHNcblx0XHRcdFx0Y29uc3QgJGxhYmVscyA9ICQodGhpcy5jb250YWluZXIpLmZpbmQoJy5jb21tdW5pdHktbGFiZWwnKTtcblx0XHRcdFx0Ly8gc29ydCBiYXNlZCBvbiBzaXplIC8gaW1wb3J0YW5jZVxuXHRcdFx0XHQkbGFiZWxzLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gYi5vZmZzZXRIZWlnaHQgLSBhLm9mZnNldEhlaWdodDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdC8vIGNoZWNrIGlmIHRoZXkgY29uZmxpY3QsIGlmIHNvLCBoaWRlIHRoZW1cblx0XHRcdFx0JGxhYmVscy5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHBvc2l0aW9uID0gJChlbGVtZW50KS5vZmZzZXQoKTtcblx0XHRcdFx0XHRjb25zdCBwb2ludCA9IHtcblx0XHRcdFx0XHRcdG1pblg6IHBvc2l0aW9uLmxlZnQsXG5cdFx0XHRcdFx0XHRtYXhYOiBwb3NpdGlvbi5sZWZ0ICsgZWxlbWVudC5vZmZzZXRXaWR0aCxcblx0XHRcdFx0XHRcdG1pblk6IHBvc2l0aW9uLnRvcCxcblx0XHRcdFx0XHRcdG1heFk6IHBvc2l0aW9uLnRvcCArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRjb25zdCBjb2xsaXNpb24gPSB0cmVlLnNlYXJjaFJlY3RhbmdsZShcblx0XHRcdFx0XHRcdHBvaW50Lm1pblgsXG5cdFx0XHRcdFx0XHRwb2ludC5tYXhYLFxuXHRcdFx0XHRcdFx0cG9pbnQubWluWSxcblx0XHRcdFx0XHRcdHBvaW50Lm1heFkpO1xuXHRcdFx0XHRcdGlmIChjb2xsaXNpb24pIHtcblx0XHRcdFx0XHRcdGVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG5cdFx0XHRcdFx0XHR0cmVlLmluc2VydChbIHBvaW50IF0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5vbihsdW1vLlBPU1RfRFJBVywgdGhpcy5kZWNvbmZsaWN0KTtcblx0XHR9XG5cdFx0JCh0aGlzLmNvbnRhaW5lcikub24oJ21vdXNlb3ZlcicsIHRoaXMubW91c2VvdmVyKTtcblx0XHQkKHRoaXMuY29udGFpbmVyKS5vbignbW91c2VvdXQnLCB0aGlzLm1vdXNlb3V0KTtcblx0XHQkKHRoaXMuY29udGFpbmVyKS5vbignY2xpY2snLCB0aGlzLmNsaWNrKTtcblx0fVxuXG5cdG9uUmVtb3ZlKGxheWVyKSB7XG5cdFx0JCh0aGlzLmNvbnRhaW5lcikub2ZmKCdtb3VzZW92ZXInLCB0aGlzLm1vdXNlb3Zlcik7XG5cdFx0JCh0aGlzLmNvbnRhaW5lcikub2ZmKCdtb3VzZW91dCcsIHRoaXMubW91c2VvdXQpO1xuXHRcdCQodGhpcy5jb250YWluZXIpLm9mZignY2xpY2snLCB0aGlzLmNsaWNrKTtcblx0XHRpZiAodGhpcy5sYWJlbERlY29uZmxpY3QpIHtcblx0XHRcdHRoaXMucmVtb3ZlTGlzdGVuZXIobHVtby5QT1NUX0RSQVcsIHRoaXMuZGVjb25mbGljdCk7XG5cdFx0fVxuXHRcdHRoaXMubW91c2VvdmVyID0gbnVsbDtcblx0XHR0aGlzLm1vdXNlb3V0ID0gbnVsbDtcblx0XHR0aGlzLmNsaWNrID0gbnVsbDtcblx0XHRzdXBlci5vblJlbW92ZShsYXllcik7XG5cdH1cblxuXHRvbk1vdXNlT3ZlcihldmVudCkge1xuXHRcdGNvbnN0IGRhdGEgPSAkKGV2ZW50LnRhcmdldCkuZGF0YSgnY29tbXVuaXR5Jyk7XG5cdFx0aWYgKGRhdGEpIHtcblx0XHRcdGNvbnN0IHBsb3QgPSB0aGlzLmxheWVyLnBsb3Q7XG5cdFx0XHR0aGlzLmVtaXQobHVtby5NT1VTRV9PVkVSLCBuZXcgbHVtby5Nb3VzZUV2ZW50KFxuXHRcdFx0XHR0aGlzLmxheWVyLFxuXHRcdFx0XHRnZXRNb3VzZUJ1dHRvbihldmVudCksXG5cdFx0XHRcdHBsb3QubW91c2VUb1ZpZXdQeChldmVudCksXG5cdFx0XHRcdHBsb3QubW91c2VUb1Bsb3RQeChldmVudCksXG5cdFx0XHRcdGRhdGFcblx0XHRcdCkpO1xuXHRcdH1cblx0fVxuXG5cdG9uTW91c2VPdXQoZXZlbnQpIHtcblx0XHRjb25zdCBkYXRhID0gJChldmVudC50YXJnZXQpLmRhdGEoJ2NvbW11bml0eScpO1xuXHRcdGlmIChkYXRhKSB7XG5cdFx0XHRjb25zdCBwbG90ID0gdGhpcy5sYXllci5wbG90O1xuXHRcdFx0dGhpcy5lbWl0KGx1bW8uTU9VU0VfT1VULCBuZXcgbHVtby5Nb3VzZUV2ZW50KFxuXHRcdFx0XHR0aGlzLmxheWVyLFxuXHRcdFx0XHRnZXRNb3VzZUJ1dHRvbihldmVudCksXG5cdFx0XHRcdHBsb3QubW91c2VUb1ZpZXdQeChldmVudCksXG5cdFx0XHRcdHBsb3QubW91c2VUb1Bsb3RQeChldmVudClcblx0XHRcdCkpO1xuXHRcdH1cblx0fVxuXG5cdG9uQ2xpY2soZXZlbnQpIHtcblx0XHRjb25zdCBkYXRhID0gJChldmVudC50YXJnZXQpLmRhdGEoJ2NvbW11bml0eScpO1xuXHRcdGlmIChkYXRhKSB7XG5cdFx0XHRjb25zdCBwbG90ID0gdGhpcy5sYXllci5wbG90O1xuXHRcdFx0dGhpcy5lbWl0KGx1bW8uQ0xJQ0ssIG5ldyBsdW1vLk1vdXNlRXZlbnQoXG5cdFx0XHRcdHRoaXMubGF5ZXIsXG5cdFx0XHRcdGdldE1vdXNlQnV0dG9uKGV2ZW50KSxcblx0XHRcdFx0cGxvdC5tb3VzZVRvVmlld1B4KGV2ZW50KSxcblx0XHRcdFx0cGxvdC5tb3VzZVRvUGxvdFB4KGV2ZW50KSxcblx0XHRcdFx0ZGF0YVxuXHRcdFx0KSk7XG5cdFx0fVxuXHR9XG5cblx0ZHJhd1RpbGUoZWxlbWVudCwgdGlsZSkge1xuXHRcdGNvbnN0IGhpdHMgPSB0aWxlLmRhdGEuaGl0cztcblx0XHRjb25zdCBwb2ludHMgPSB0aWxlLmRhdGEucG9pbnRzO1xuXG5cdFx0aWYgKCFoaXRzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgbGF5ZXIgPSB0aGlzLmxheWVyO1xuXHRcdGNvbnN0IHNvcnRGaWVsZCA9IGxheWVyLnNvcnRGaWVsZDtcblx0XHRjb25zdCBleHRyZW1hID0gbGF5ZXIuZ2V0RXh0cmVtYSh0aWxlLmNvb3JkLnopO1xuXG5cdFx0bGV0IGRpdnMgPSAkKCk7XG5cdFx0aGl0cy5mb3JFYWNoKChjb21tdW5pdHksIGluZGV4KSA9PiB7XG5cblx0XHRcdGNvbnN0IGxhYmVsID0gZ2V0KGNvbW11bml0eSwgdGhpcy5sYWJlbEZpZWxkKTtcblx0XHRcdGlmICghbGFiZWwpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB2YWwgPSBnZXQoY29tbXVuaXR5LCBzb3J0RmllbGQpO1xuXHRcdFx0Y29uc3QgbnZhbCA9IFRyYW5zZm9ybS50cmFuc2Zvcm0odmFsLCB0aGlzLnRyYW5zZm9ybSwgZXh0cmVtYSk7XG5cblx0XHRcdGlmIChudmFsIDwgdGhpcy5sYWJlbFRocmVzaG9sZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIG5vcm1hbGl6ZSB0aGUgbnZhbCBhcyBpdCBpcyBjdXJyZW50bHkgaW4gdGhlIHJhbmdlIFt0aGlzLmxhYmVsVGhyZXNob2xkIDogMV1cblx0XHRcdGNvbnN0IHJudmFsID0gKG52YWwgLSB0aGlzLmxhYmVsVGhyZXNob2xkKSAvICgxLjAgLSB0aGlzLmxhYmVsVGhyZXNob2xkKTtcblx0XHRcdGNvbnN0IHpJbmRleCA9IE1hdGguY2VpbCgxMDAgKiBybnZhbCk7XG5cdFx0XHRjb25zdCBmb250U2l6ZSA9IHRoaXMubWluRm9udFNpemUgKyAocm52YWwgKiAodGhpcy5tYXhGb250U2l6ZSAtIHRoaXMubWluRm9udFNpemUpKTtcblx0XHRcdGNvbnN0IG9wYWNpdHkgPSB0aGlzLm1pbk9wYWNpdHkgKyAocm52YWwgKiAodGhpcy5tYXhPcGFjaXR5IC0gdGhpcy5taW5PcGFjaXR5KSk7XG5cdFx0XHRjb25zdCBoZWlnaHQgPSBmb250U2l6ZSArIEhFSUdIVF9CVUZGRVI7IC8vIGFkZCBidWZmZXIgdG8gcHJldmVudCBjdXRvZmYgb2Ygc29tZSBsZXR0ZXJzXG5cblx0XHRcdC8vIGdldCBwb3NpdGlvblxuXHRcdFx0Y29uc3QgeCA9IHBvaW50c1tpbmRleCoyXSAtICh0aGlzLmxhYmVsTWF4TGVuZ3RoIC8gMik7XG5cdFx0XHRjb25zdCB5ID0gcG9pbnRzW2luZGV4KjIrMV0gLSAoaGVpZ2h0IC8gMik7XG5cblx0XHRcdGNvbnN0IGRpdiA9ICQoYFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29tbXVuaXR5LWxhYmVsXCIgc3R5bGU9XCJcblx0XHRcdFx0XHRsZWZ0OiAke3h9cHg7XG5cdFx0XHRcdFx0Ym90dG9tOiAke3l9cHg7XG5cdFx0XHRcdFx0b3BhY2l0eTogJHtvcGFjaXR5fTtcblx0XHRcdFx0XHR6LWluZGV4OiAke3pJbmRleH07XG5cdFx0XHRcdFx0d2lkdGg6ICR7dGhpcy5sYWJlbE1heExlbmd0aH1weDtcblx0XHRcdFx0XHRoZWlnaHQ6ICR7aGVpZ2h0fXB4O1xuXHRcdFx0XHRcdGZvbnQtc2l6ZTogJHtmb250U2l6ZX1weDtcblx0XHRcdFx0XHRsaW5lLWhlaWdodDogJHtmb250U2l6ZX1weDtcIj4ke2xhYmVsfTwvZGl2PlxuXHRcdFx0XHRgKTtcblxuXHRcdFx0ZGl2LmRhdGEoJ2NvbW11bml0eScsIGNvbW11bml0eSk7XG5cdFx0XHRkaXZzID0gZGl2cy5hZGQoZGl2KTtcblx0XHR9KTtcblx0XHQkKGVsZW1lbnQpLmVtcHR5KCkuYXBwZW5kKGRpdnMpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbXVuaXR5TGFiZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbmNvbnN0IGx1bW8gPSByZXF1aXJlKCdsdW1vJyk7XG5cbmNsYXNzIERlYnVnIGV4dGVuZHMgbHVtby5IVE1MUmVuZGVyZXIge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHR9XG5cblx0ZHJhd1RpbGUoZWxlbWVudCwgY29vcmQpIHtcblx0XHQkKGVsZW1lbnQpXG5cdFx0XHQuZW1wdHkoKVxuXHRcdFx0LmFwcGVuZChgPGRpdiBzdHlsZT1cInRvcDowOyBsZWZ0OjA7XCI+JHtjb29yZC56fSwgJHtjb29yZC54fSwgJHtjb29yZC55fTwvZGl2PmApO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGVidWc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbmNvbnN0IG1hcCA9IHJlcXVpcmUoJ2xvZGFzaC9tYXAnKTtcbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IGx1bW8gPSByZXF1aXJlKCdsdW1vJyk7XG5jb25zdCBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuLi90cmFuc2Zvcm0vVHJhbnNmb3JtJyk7XG5cbmNvbnN0IFZFUlRJQ0FMX09GRlNFVCA9IDI0O1xuY29uc3QgSE9SSVpPTlRBTF9PRkZTRVQgPSAxMDtcbmNvbnN0IE5VTV9BVFRFTVBUUyA9IDE7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwb3NpdGlvbiwgcmV0dXJuIGEgbmV3IHBvc2l0aW9uLCBpbmNyZW1lbnRhbGx5IHNwaXJhbGxlZFxuICogb3V0d2FyZHMuXG4gKi9cbmNvbnN0IHNwaXJhbFBvc2l0aW9uID0gZnVuY3Rpb24ocG9zKSB7XG5cdGNvbnN0IHBpMiA9IDIgKiBNYXRoLlBJO1xuXHRjb25zdCBjaXJjID0gcGkyICogcG9zLnJhZGl1cztcblx0Y29uc3QgaW5jID0gKHBvcy5hcmNMZW5ndGggPiBjaXJjIC8gMTApID8gY2lyYyAvIDEwIDogcG9zLmFyY0xlbmd0aDtcblx0Y29uc3QgZGEgPSBpbmMgLyBwb3MucmFkaXVzO1xuXHRsZXQgbnQgPSAocG9zLnQgKyBkYSk7XG5cdGlmIChudCA+IHBpMikge1xuXHRcdG50ID0gbnQgJSBwaTI7XG5cdFx0cG9zLnJhZGl1cyA9IHBvcy5yYWRpdXMgKyBwb3MucmFkaXVzSW5jO1xuXHR9XG5cdHBvcy50ID0gbnQ7XG5cdHBvcy54ID0gcG9zLnJhZGl1cyAqIE1hdGguY29zKG50KTtcblx0cG9zLnkgPSBwb3MucmFkaXVzICogTWF0aC5zaW4obnQpO1xuXHRyZXR1cm4gcG9zO1xufTtcblxuLyoqXG4gKiAgUmV0dXJucyB0cnVlIGlmIGJvdW5kaW5nIGJveCBhIGludGVyc2VjdHMgYm91bmRpbmcgYm94IGJcbiAqL1xuY29uc3QgaW50ZXJzZWN0VGVzdCA9IGZ1bmN0aW9uKGEsIGIpIHtcblx0cmV0dXJuIChNYXRoLmFicyhhLnggLSBiLngpICogMiA8IChhLndpZHRoICsgYi53aWR0aCkpICYmXG5cdFx0KE1hdGguYWJzKGEueSAtIGIueSkgKiAyIDwgKGEuaGVpZ2h0ICsgYi5oZWlnaHQpKTtcbn07XG5cbi8qKlxuICogIFJldHVybnMgdHJ1ZSBpZiBib3VuZGluZyBib3ggYSBpcyBub3QgZnVsbHkgY29udGFpbmVkIGluc2lkZSBib3VuZGluZyBib3ggYlxuICovXG5jb25zdCBvdmVybGFwVGVzdCA9IGZ1bmN0aW9uKGEsIGIpIHtcblx0cmV0dXJuIChhLnggKyBhLndpZHRoIC8gMiA+IGIueCArIGIud2lkdGggLyAyIHx8XG5cdFx0YS54IC0gYS53aWR0aCAvIDIgPCBiLnggLSBiLndpZHRoIC8gMiB8fFxuXHRcdGEueSArIGEuaGVpZ2h0IC8gMiA+IGIueSArIGIuaGVpZ2h0IC8gMiB8fFxuXHRcdGEueSAtIGEuaGVpZ2h0IC8gMiA8IGIueSAtIGIuaGVpZ2h0IC8gMik7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGEgd29yZCBpbnRlcnNlY3RzIGFub3RoZXIgd29yZCwgb3IgaXMgbm90IGZ1bGx5IGNvbnRhaW5lZCBpbiB0aGVcbiAqIHRpbGUgYm91bmRpbmcgYm94XG4gKi9cbmNvbnN0IGludGVyc2VjdFdvcmQgPSBmdW5jdGlvbihwb3NpdGlvbiwgd29yZCwgY2xvdWQsIGJiKSB7XG5cdGNvbnN0IGJveCA9IHtcblx0XHR4OiBwb3NpdGlvbi54LFxuXHRcdHk6IHBvc2l0aW9uLnksXG5cdFx0aGVpZ2h0OiB3b3JkLmhlaWdodCxcblx0XHR3aWR0aDogd29yZC53aWR0aFxuXHR9O1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNsb3VkLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKGludGVyc2VjdFRlc3QoYm94LCBjbG91ZFtpXSkpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXHQvLyBtYWtlIHN1cmUgaXQgZG9lc24ndCBpbnRlcnNlY3QgdGhlIGJvcmRlcjtcblx0aWYgKG92ZXJsYXBUZXN0KGJveCwgYmIpKSB7XG5cdFx0Ly8gaWYgaXQgaGl0cyBhIGJvcmRlciwgaW5jcmVtZW50IGNvbGxpc2lvbiBjb3VudFxuXHRcdC8vIGFuZCBleHRlbmQgYXJjIGxlbmd0aFxuXHRcdHBvc2l0aW9uLmNvbGxpc2lvbnMrKztcblx0XHRwb3NpdGlvbi5hcmNMZW5ndGggPSBwb3NpdGlvbi5yYWRpdXM7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuY29uc3QgZ2V0TW91c2VCdXR0b24gPSBmdW5jdGlvbihldmVudCkge1xuXHRpZiAoZXZlbnQud2hpY2ggPT09IDEpIHtcblx0XHRyZXR1cm4gJ2xlZnQnO1xuXHR9IGVsc2UgaWYgKGV2ZW50LndoaWNoID09PSAyKSB7XG5cdFx0cmV0dXJuICdtaWRkbGUnO1xuXHR9IGVsc2UgaWYgKGV2ZW50LndoaWNoID09PSAzKSB7XG5cdFx0cmV0dXJuICdyaWdodCc7XG5cdH1cbn07XG5cbmNvbnN0IG1lYXN1cmVXb3JkcyA9IGZ1bmN0aW9uKHJlbmRlcmVyLCB3b3JkQ291bnRzLCBleHRyZW1hKSB7XG5cdC8vIHNvcnQgd29yZHMgYnkgZnJlcXVlbmN5XG5cdHdvcmRDb3VudHMgPSB3b3JkQ291bnRzLnNvcnQoKGEsIGIpID0+IHtcblx0XHRyZXR1cm4gYi5jb3VudCAtIGEuY291bnQ7XG5cdH0pLnNsaWNlKDAsIHJlbmRlcmVyLm1heE51bVdvcmRzKTtcblx0Ly8gYnVpbGQgbWVhc3VyZW1lbnQgaHRtbFxuXHRjb25zdCAkaHRtbCA9ICQoJzxkaXYgc3R5bGU9XCJoZWlnaHQ6MjU2cHg7IHdpZHRoOjI1NnB4O1wiPjwvZGl2PicpO1xuXHRjb25zdCBtaW5Gb250U2l6ZSA9IHJlbmRlcmVyLm1pbkZvbnRTaXplO1xuXHRjb25zdCBtYXhGb250U2l6ZSA9IHJlbmRlcmVyLm1heEZvbnRTaXplO1xuXHRjb25zdCB0cmFuc2Zvcm0gPSByZW5kZXJlci50cmFuc2Zvcm07XG5cdHdvcmRDb3VudHMuZm9yRWFjaCh3b3JkID0+IHtcblx0XHR3b3JkLnBlcmNlbnQgPSBUcmFuc2Zvcm0udHJhbnNmb3JtKHdvcmQuY291bnQsIHRyYW5zZm9ybSwgZXh0cmVtYSk7XG5cdFx0d29yZC5mb250U2l6ZSA9IG1pbkZvbnRTaXplICsgd29yZC5wZXJjZW50ICogKG1heEZvbnRTaXplIC0gbWluRm9udFNpemUpO1xuXHRcdCRodG1sLmFwcGVuZChcblx0XHRcdGBcblx0XHRcdDxkaXYgY2xhc3M9XCJ3b3JkLWNsb3VkLWxhYmVsXCIgc3R5bGU9XCJcblx0XHRcdFx0dmlzaWJpbGl0eTpoaWRkZW47XG5cdFx0XHRcdGZvbnQtc2l6ZTogJHt3b3JkLmZvbnRTaXplfXB4O1wiPiR7d29yZC50ZXh0fTwvZGl2Pjtcblx0XHRcdGApO1xuXHR9KTtcblx0Ly8gYXBwZW5kIG1lYXN1cmVtZW50c1xuXHQkKCdib2R5JykuYXBwZW5kKCRodG1sKTtcblx0JGh0bWwuY2hpbGRyZW4oKS5lYWNoKChpbmRleCwgZWxlbSkgPT4ge1xuXHRcdHdvcmRDb3VudHNbaW5kZXhdLndpZHRoID0gZWxlbS5vZmZzZXRXaWR0aDtcblx0XHR3b3JkQ291bnRzW2luZGV4XS5oZWlnaHQgPSBlbGVtLm9mZnNldEhlaWdodDtcblx0fSk7XG5cdCRodG1sLnJlbW92ZSgpO1xuXHRyZXR1cm4gd29yZENvdW50cztcbn07XG5cbmNvbnN0IGNyZWF0ZVdvcmRDbG91ZCA9IGZ1bmN0aW9uKHJlbmRlcmVyLCB3b3JkQ291bnRzLCBleHRyZW1hKSB7XG5cdGNvbnN0IHRpbGVTaXplID0gcmVuZGVyZXIubGF5ZXIucGxvdC50aWxlU2l6ZTtcblx0Y29uc3QgYm91bmRpbmdCb3ggPSB7XG5cdFx0d2lkdGg6IHRpbGVTaXplIC0gSE9SSVpPTlRBTF9PRkZTRVQgKiAyLFxuXHRcdGhlaWdodDogdGlsZVNpemUgLSBWRVJUSUNBTF9PRkZTRVQgKiAyLFxuXHRcdHg6IDAsXG5cdFx0eTogMFxuXHR9O1xuXHRjb25zdCBjbG91ZCA9IFtdO1xuXHQvLyBzb3J0IHdvcmRzIGJ5IGZyZXF1ZW5jeVxuXHR3b3JkQ291bnRzID0gbWVhc3VyZVdvcmRzKHJlbmRlcmVyLCB3b3JkQ291bnRzLCBleHRyZW1hKTtcblx0Ly8gYXNzZW1ibGUgd29yZCBjbG91ZFxuXHR3b3JkQ291bnRzLmZvckVhY2god29yZENvdW50ID0+IHtcblx0XHQvLyBzdGFydGluZyBzcGlyYWwgcG9zaXRpb25cblx0XHRsZXQgcG9zID0ge1xuXHRcdFx0cmFkaXVzOiAxLFxuXHRcdFx0cmFkaXVzSW5jOiA1LFxuXHRcdFx0YXJjTGVuZ3RoOiAxMCxcblx0XHRcdHg6IDAsXG5cdFx0XHR5OiAwLFxuXHRcdFx0dDogMCxcblx0XHRcdGNvbGxpc2lvbnM6IDBcblx0XHR9O1xuXHRcdC8vIHNwaXJhbCBvdXR3YXJkcyB0byBmaW5kIHBvc2l0aW9uXG5cdFx0d2hpbGUgKHBvcy5jb2xsaXNpb25zIDwgTlVNX0FUVEVNUFRTKSB7XG5cdFx0XHQvLyBpbmNyZW1lbnQgcG9zaXRpb24gaW4gYSBzcGlyYWxcblx0XHRcdHBvcyA9IHNwaXJhbFBvc2l0aW9uKHBvcyk7XG5cdFx0XHQvLyB0ZXN0IGZvciBpbnRlcnNlY3Rpb25cblx0XHRcdGlmICghaW50ZXJzZWN0V29yZChwb3MsIHdvcmRDb3VudCwgY2xvdWQsIGJvdW5kaW5nQm94KSkge1xuXHRcdFx0XHRjbG91ZC5wdXNoKHtcblx0XHRcdFx0XHR0ZXh0OiB3b3JkQ291bnQudGV4dCxcblx0XHRcdFx0XHRmb250U2l6ZTogd29yZENvdW50LmZvbnRTaXplLFxuXHRcdFx0XHRcdHBlcmNlbnQ6IE1hdGgucm91bmQoKHdvcmRDb3VudC5wZXJjZW50ICogMTAwKSAvIDEwKSAqIDEwLCAvLyByb3VuZCB0byBuZWFyZXN0IDEwXG5cdFx0XHRcdFx0eDogcG9zLngsXG5cdFx0XHRcdFx0eTogcG9zLnksXG5cdFx0XHRcdFx0d2lkdGg6IHdvcmRDb3VudC53aWR0aCxcblx0XHRcdFx0XHRoZWlnaHQ6IHdvcmRDb3VudC5oZWlnaHRcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cdHJldHVybiBjbG91ZDtcbn07XG5cbmNsYXNzIFdvcmRDbG91ZCBleHRlbmRzIGx1bW8uSFRNTFJlbmRlcmVyIHtcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0XHR0aGlzLnRyYW5zZm9ybSA9IGRlZmF1bHRUbyhvcHRpb25zLnRyYW5zZm9ybSwgJ2xvZzEwJyk7XG5cdFx0dGhpcy5tYXhOdW1Xb3JkcyA9IGRlZmF1bHRUbyhvcHRpb25zLm1heE51bVdvcmRzLCAxMCk7XG5cdFx0dGhpcy5taW5Gb250U2l6ZSA9IGRlZmF1bHRUbyhvcHRpb25zLm1pbkZvbnRTaXplLCAxMCk7XG5cdFx0dGhpcy5tYXhGb250U2l6ZSA9IGRlZmF1bHRUbyhvcHRpb25zLm1heEZvbnRTaXplLCAyNCk7XG5cdH1cblxuXHRvbkFkZChsYXllcikge1xuXHRcdHN1cGVyLm9uQWRkKGxheWVyKTtcblx0XHR0aGlzLm1vdXNlb3ZlciA9IGV2ZW50ID0+IHtcblx0XHRcdHRoaXMub25Nb3VzZU92ZXIoZXZlbnQpO1xuXHRcdH07XG5cdFx0dGhpcy5tb3VzZW91dCA9IGV2ZW50ID0+IHtcblx0XHRcdHRoaXMub25Nb3VzZU91dChldmVudCk7XG5cdFx0fTtcblx0XHR0aGlzLmNsaWNrID0gZXZlbnQgPT4ge1xuXHRcdFx0dGhpcy5vbkNsaWNrKGV2ZW50KTtcblx0XHR9O1xuXHRcdCQodGhpcy5jb250YWluZXIpLm9uKCdtb3VzZW92ZXInLCB0aGlzLm1vdXNlb3Zlcik7XG5cdFx0JCh0aGlzLmNvbnRhaW5lcikub24oJ21vdXNlb3V0JywgdGhpcy5tb3VzZW91dCk7XG5cdFx0JCh0aGlzLmNvbnRhaW5lcikub24oJ2NsaWNrJywgdGhpcy5jbGljayk7XG5cdH1cblxuXHRvblJlbW92ZShsYXllcikge1xuXHRcdCQodGhpcy5jb250YWluZXIpLm9mZignbW91c2VvdmVyJywgdGhpcy5tb3VzZW92ZXIpO1xuXHRcdCQodGhpcy5jb250YWluZXIpLm9mZignbW91c2VvdXQnLCB0aGlzLm1vdXNlb3V0KTtcblx0XHQkKHRoaXMuY29udGFpbmVyKS5vZmYoJ2NsaWNrJywgdGhpcy5jbGljayk7XG5cdFx0dGhpcy5tb3VzZW92ZXIgPSBudWxsO1xuXHRcdHRoaXMubW91c2VvdXQgPSBudWxsO1xuXHRcdHRoaXMuY2xpY2sgPSBudWxsO1xuXHRcdHN1cGVyLm9uUmVtb3ZlKGxheWVyKTtcblx0fVxuXG5cdGNsZWFyU2VsZWN0aW9uKCkge1xuXHRcdCQodGhpcy5jb250YWluZXIpLnJlbW92ZUNsYXNzKCdoaWdobGlnaHQnKTtcblx0XHR0aGlzLmhpZ2hsaWdodCA9IG51bGw7XG5cdH1cblxuXHRzZXRIaWdobGlnaHQod29yZCkge1xuXHRcdHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcblx0XHQvLyBIaWdobGlnaHQgc2VsZWN0ZWQgd29yZFxuXHRcdCQodGhpcy5jb250YWluZXIpLmFkZENsYXNzKCdoaWdobGlnaHQnKTtcblx0XHQkKGAud29yZC1jbG91ZC1sYWJlbFtkYXRhLXdvcmQ9XCIke3dvcmR9XCJdYCkuYWRkQ2xhc3MoJ2hpZ2hsaWdodCcpO1xuXHRcdHRoaXMuaGlnaGxpZ2h0ID0gd29yZDtcblx0fVxuXG5cdG9uTW91c2VPdmVyKGV2ZW50KSB7XG5cdFx0JCgnLndvcmQtY2xvdWQtbGFiZWwnKS5yZW1vdmVDbGFzcygnaG92ZXInKTtcblx0XHRjb25zdCB3b3JkID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtd29yZCcpO1xuXHRcdGlmICh3b3JkKSB7XG5cdFx0XHQvLyBoaWdobGlnaHQgYWxsIGluc3RhbmNlcyBvZiB0aGUgd29yZFxuXHRcdFx0JChgLndvcmQtY2xvdWQtbGFiZWxbZGF0YS13b3JkPVwiJHt3b3JkfVwiXWApLmFkZENsYXNzKCdob3ZlcicpO1xuXHRcdFx0Ly8gZW1pdCBtb3VzZW92ZXIgZXZlbnRcblx0XHRcdGNvbnN0IHBsb3QgPSB0aGlzLmxheWVyLnBsb3Q7XG5cdFx0XHR0aGlzLmVtaXQobHVtby5NT1VTRV9PVkVSLCBuZXcgbHVtby5Nb3VzZUV2ZW50KFxuXHRcdFx0XHR0aGlzLmxheWVyLFxuXHRcdFx0XHRnZXRNb3VzZUJ1dHRvbihldmVudCksXG5cdFx0XHRcdHBsb3QubW91c2VUb1ZpZXdQeChldmVudCksXG5cdFx0XHRcdHBsb3QubW91c2VUb1Bsb3RQeChldmVudCksXG5cdFx0XHRcdHdvcmRcblx0XHRcdCkpO1xuXHRcdH1cblx0fVxuXG5cdG9uTW91c2VPdXQoZXZlbnQpIHtcblx0XHQkKCcud29yZC1jbG91ZC1sYWJlbCcpLnJlbW92ZUNsYXNzKCdob3ZlcicpO1xuXHRcdGNvbnN0IHdvcmQgPSAkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS13b3JkJyk7XG5cdFx0aWYgKHdvcmQpIHtcblx0XHRcdC8vIGVtaXQgY2xpY2sgZXZlbnRcblx0XHRcdGNvbnN0IHBsb3QgPSB0aGlzLmxheWVyLnBsb3Q7XG5cdFx0XHR0aGlzLmVtaXQobHVtby5NT1VTRV9PVVQsIG5ldyBsdW1vLk1vdXNlRXZlbnQoXG5cdFx0XHRcdHRoaXMubGF5ZXIsXG5cdFx0XHRcdGdldE1vdXNlQnV0dG9uKGV2ZW50KSxcblx0XHRcdFx0cGxvdC5tb3VzZVRvVmlld1B4KGV2ZW50KSxcblx0XHRcdFx0cGxvdC5tb3VzZVRvUGxvdFB4KGV2ZW50KSxcblx0XHRcdFx0d29yZFxuXHRcdFx0KSk7XG5cdFx0fVxuXHR9XG5cblx0b25DbGljayhldmVudCkge1xuXHRcdC8vIHVuLXNlbGVjdCBhbnkgcHJldiBzZWxlY3RlZCB3b3Jkc1xuXHRcdCQoJy53b3JkLWNsb3VkLWxhYmVsJykucmVtb3ZlQ2xhc3MoJ2hpZ2hsaWdodCcpO1xuXHRcdCQodGhpcy5jb250YWluZXIpLnJlbW92ZUNsYXNzKCdoaWdobGlnaHQnKTtcblx0XHRjb25zdCB3b3JkID0gJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtd29yZCcpO1xuXHRcdGlmICh3b3JkKSB7XG5cdFx0XHQvLyBzZXQgaGlnaGxpZ2h0XG5cdFx0XHR0aGlzLnNldEhpZ2hsaWdodCh3b3JkKTtcblx0XHRcdC8vIGVtaXQgY2xpY2sgZXZlbnRcblx0XHRcdGNvbnN0IHBsb3QgPSB0aGlzLmxheWVyLnBsb3Q7XG5cdFx0XHR0aGlzLmVtaXQobHVtby5DTElDSywgbmV3IGx1bW8uQ2xpY2tFdmVudChcblx0XHRcdFx0dGhpcy5sYXllcixcblx0XHRcdFx0Z2V0TW91c2VCdXR0b24oZXZlbnQpLFxuXHRcdFx0XHRwbG90Lm1vdXNlVG9WaWV3UHgoZXZlbnQpLFxuXHRcdFx0XHRwbG90Lm1vdXNlVG9QbG90UHgoZXZlbnQpLFxuXHRcdFx0XHR3b3JkKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcblx0XHR9XG5cdH1cblxuXHRkcmF3VGlsZShlbGVtZW50LCB0aWxlKSB7XG5cdFx0Y29uc3Qgd29yZENvdW50cyA9IG1hcCh0aWxlLmRhdGEsIChjb3VudCwgdGV4dCkgPT4ge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dGV4dDogdGV4dCxcblx0XHRcdFx0Y291bnQ6IGNvdW50XG5cdFx0XHR9O1xuXHRcdH0pO1xuXHRcdGNvbnN0IGxheWVyID0gdGhpcy5sYXllcjtcblx0XHRjb25zdCBleHRyZW1hID0gbGF5ZXIuZ2V0RXh0cmVtYSh0aWxlLmNvb3JkLnopO1xuXHRcdC8vIGdlbmVyZWF0ZSB0aGUgY2xvdWRcblx0XHRjb25zdCBjbG91ZCA9IGNyZWF0ZVdvcmRDbG91ZCh0aGlzLCB3b3JkQ291bnRzLCBleHRyZW1hKTtcblx0XHQvLyBoYWxmIHRpbGUgc2l6ZVxuXHRcdGNvbnN0IGhhbGZTaXplID0gbGF5ZXIucGxvdC50aWxlU2l6ZSAvIDI7XG5cdFx0Ly8gY3JlYXRlIGh0bWwgZm9yIHRpbGVcblx0XHRjb25zdCBkaXZzID0gW107XG5cdFx0Ly8gZm9yIGVhY2ggd29yZCBpbnQgaGUgY2xvdWRcblx0XHRjbG91ZC5mb3JFYWNoKHdvcmQgPT4ge1xuXHRcdFx0Y29uc3QgaGlnaGxpZ2h0ID0gKHdvcmQudGV4dCA9PT0gdGhpcy5oaWdobGlnaHQpID8gJ2hpZ2hsaWdodCcgOiAnJztcblx0XHRcdC8vIGNyZWF0ZSBlbGVtZW50IGZvciB3b3JkXG5cdFx0XHRkaXZzLnB1c2goYFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiXG5cdFx0XHRcdFx0d29yZC1jbG91ZC1sYWJlbFxuXHRcdFx0XHRcdHdvcmQtY2xvdWQtbGFiZWwtJHt3b3JkLnBlcmNlbnR9XG5cdFx0XHRcdFx0JHtoaWdobGlnaHR9XCJcblx0XHRcdFx0XHRzdHlsZT1cIlxuXHRcdFx0XHRcdFx0Zm9udC1zaXplOiAke3dvcmQuZm9udFNpemV9cHg7XG5cdFx0XHRcdFx0XHRsZWZ0OiAkeyhoYWxmU2l6ZSArIHdvcmQueCkgLSAod29yZC53aWR0aCAvIDIpfXB4O1xuXHRcdFx0XHRcdFx0dG9wOiAkeyhoYWxmU2l6ZSArIHdvcmQueSkgLSAod29yZC5oZWlnaHQgLyAyKX1weDtcblx0XHRcdFx0XHRcdHdpZHRoOiAke3dvcmQud2lkdGh9cHg7XG5cdFx0XHRcdFx0XHRoZWlnaHQ6ICR7d29yZC5oZWlnaHR9cHg7XCJcblx0XHRcdFx0XHRkYXRhLXdvcmQ9XCIke3dvcmQudGV4dH1cIj4ke3dvcmQudGV4dH08L2Rpdj5cblx0XHRcdFx0YCk7XG5cdFx0fSk7XG5cdFx0ZWxlbWVudC5pbm5lckhUTUwgPSBkaXZzLmpvaW4oJycpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV29yZENsb3VkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBteCA9IFsgMCwgMSBdO1xuY29uc3QgbXkgPSBbIDAsIDIgXTtcbmZvciAobGV0IGkgPSA0OyBpIDwgMHhGRkZGOyBpIDw8PSAyKSB7XG5cdGZvciAobGV0IGogPSAwLCBsID0gbXgubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG5cdFx0bXgucHVzaCgobXhbal0gfCBpKSk7XG5cdFx0bXkucHVzaCgobXhbal0gfCBpKSA8PCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBtb3J0b24oeCwgeSkge1xuXHRyZXR1cm4gKG15W3kgJiAweEZGXSB8IG14W3ggJiAweEZGXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9ydG9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsdW1vID0gcmVxdWlyZSgnbHVtbycpO1xuY29uc3QgbW9ydG9uID0gcmVxdWlyZSgnLi4vbW9ydG9uL01vcnRvbicpO1xuXG5jb25zdCBJTlNUQU5DRURfU0hBREVSID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xuXHRcdHVuaWZvcm0gdmVjMiB1VGlsZU9mZnNldDtcblx0XHR1bmlmb3JtIGZsb2F0IHVTY2FsZTtcblx0XHR1bmlmb3JtIHZlYzIgdUxPRE9mZnNldDtcblx0XHR1bmlmb3JtIGZsb2F0IHVMT0RTY2FsZTtcblx0XHR1bmlmb3JtIG1hdDQgdVByb2plY3Rpb25NYXRyaXg7XG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0dmVjMiB3UG9zaXRpb24gPSAoYVBvc2l0aW9uICogdVNjYWxlICogdUxPRFNjYWxlKSArICh1VGlsZU9mZnNldCArICh1U2NhbGUgKiB1TE9ET2Zmc2V0KSk7XG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdmVjNCh3UG9zaXRpb24sIDAuMCwgMS4wKTtcblx0XHR9XG5cdFx0YCxcblx0ZnJhZzpcblx0XHRgXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdHVuaWZvcm0gdmVjNCB1Q29sb3I7XG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCh1Q29sb3IucmdiLCB1Q29sb3IuYSk7XG5cdFx0fVxuXHRcdGBcbn07XG5cbmNvbnN0IElORElWSURVQUxfU0hBREVSID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xuXHRcdHVuaWZvcm0gdmVjMiB1VGlsZU9mZnNldDtcblx0XHR1bmlmb3JtIGZsb2F0IHVTY2FsZTtcblx0XHR1bmlmb3JtIG1hdDQgdVByb2plY3Rpb25NYXRyaXg7XG5cdFx0dW5pZm9ybSB2ZWMyIHVQb2ludEE7XG5cdFx0dW5pZm9ybSB2ZWMyIHVQb2ludEI7XG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0dmVjMiB3UG9zaXRpb247XG5cdFx0XHRpZiAoYVBvc2l0aW9uLnggPiAwLjApIHtcblx0XHRcdFx0d1Bvc2l0aW9uID0gKHVQb2ludEEgKiB1U2NhbGUpICsgdVRpbGVPZmZzZXQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3UG9zaXRpb24gPSAodVBvaW50QiAqIHVTY2FsZSkgKyB1VGlsZU9mZnNldDtcblx0XHRcdH1cblx0XHRcdGdsX1Bvc2l0aW9uID0gdVByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHdQb3NpdGlvbiwgMC4wLCAxLjApO1xuXHRcdH1cblx0XHRgLFxuXHRmcmFnOlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0dW5pZm9ybSB2ZWM0IHVDb2xvcjtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHVDb2xvci5yZ2IsIHVDb2xvci5hKTtcblx0XHR9XG5cdFx0YFxufTtcblxuY29uc3QgY3JlYXRlTGluZSA9IGZ1bmN0aW9uKGdsKSB7XG5cdGNvbnN0IHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSgyKTtcblx0dmVydGljZXNbMF0gPSAxLjA7XG5cdHZlcnRpY2VzWzFdID0gMS4wO1xuXHR2ZXJ0aWNlc1syXSA9IC0xLjA7XG5cdHZlcnRpY2VzWzNdID0gLTEuMDtcblx0Ly8gY3JlYXRlIHF1YWQgYnVmZmVyXG5cdHJldHVybiBuZXcgbHVtby5WZXJ0ZXhCdWZmZXIoXG5cdFx0Z2wsXG5cdFx0dmVydGljZXMsXG5cdFx0e1xuXHRcdFx0MDoge1xuXHRcdFx0XHRzaXplOiAyLFxuXHRcdFx0XHR0eXBlOiAnRkxPQVQnXG5cdFx0XHR9XG5cdFx0fSxcblx0XHR7XG5cdFx0XHRtb2RlOiAnTElORVMnLFxuXHRcdFx0Y291bnQ6IDFcblx0XHR9KTtcbn07XG5cbmNvbnN0IGdldE9mZnNldEluZGljZXMgPSBmdW5jdGlvbih4LCB5LCBleHRlbnQsIGxvZCkge1xuXHRjb25zdCBwYXJ0aXRpb25zID0gTWF0aC5wb3coMiwgbG9kKTtcblx0Y29uc3QgeGNlbGwgPSB4ICogcGFydGl0aW9ucztcblx0Y29uc3QgeWNlbGwgPSB5ICogcGFydGl0aW9ucztcblx0Y29uc3Qgc3RyaWRlID0gZXh0ZW50ICogcGFydGl0aW9ucztcblx0Y29uc3Qgc3RhcnQgPSBtb3J0b24oeGNlbGwsIHljZWxsKTtcblx0Y29uc3Qgc3RvcCA9IHN0YXJ0ICsgKHN0cmlkZSAqIHN0cmlkZSk7XG5cdHJldHVybiBbIHN0YXJ0LCBzdG9wIF07XG59O1xuXG5jb25zdCBkcmF3ID0gZnVuY3Rpb24oc2hhZGVyLCBhdGxhcywgcmVuZGVyYWJsZXMpIHtcblx0Ly8gZm9yIGVhY2ggcmVuZGVyYWJsZVxuXHRyZW5kZXJhYmxlcy5mb3JFYWNoKHJlbmRlcmFibGUgPT4ge1xuXHRcdC8vIHNldCB0aWxlIHVuaWZvcm1zXG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VTY2FsZScsIHJlbmRlcmFibGUuc2NhbGUpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHJlbmRlcmFibGUudGlsZU9mZnNldCk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VMT0RTY2FsZScsIDEpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1TE9ET2Zmc2V0JywgWzAsIDBdKTtcblx0XHQvLyBkcmF3IHRoZSBwb2ludHNcblx0XHRhdGxhcy5kcmF3KHJlbmRlcmFibGUuaGFzaCwgJ0xJTkVTJyk7XG5cdH0pO1xufTtcblxuY29uc3QgZHJhd0xPRCA9IGZ1bmN0aW9uKHNoYWRlciwgYXRsYXMsIHBsb3QsIGxvZCwgcmVuZGVyYWJsZXMpIHtcblx0Y29uc3Qgem9vbSA9IE1hdGgucm91bmQocGxvdC56b29tKTtcblx0Ly8gZm9yIGVhY2ggcmVuZGVyYWJsZVxuXHRyZW5kZXJhYmxlcy5mb3JFYWNoKHJlbmRlcmFibGUgPT4ge1xuXG5cdFx0Ly8gZGlzdGFuY2UgYmV0d2VlbiBhY3R1YWwgem9vbSBhbmQgdGhlIExPRCBvZiB0aWxlXG5cdFx0Y29uc3QgZGlzdCA9IE1hdGguYWJzKHJlbmRlcmFibGUudGlsZS5jb29yZC56IC0gem9vbSk7XG5cblx0XHRpZiAoZGlzdCA+IGxvZCkge1xuXHRcdFx0Ly8gbm90IGV2ZW4gbG9kIHRvIHN1cHBvcnQgaXRcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCB4T2Zmc2V0ID0gcmVuZGVyYWJsZS51dk9mZnNldFswXTtcblx0XHRjb25zdCB5T2Zmc2V0ID0gcmVuZGVyYWJsZS51dk9mZnNldFsxXTtcblx0XHRjb25zdCBleHRlbnQgPSByZW5kZXJhYmxlLnV2T2Zmc2V0WzNdO1xuXG5cdFx0Ly8gc2V0IHRpbGUgdW5pZm9ybXNcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVNjYWxlJywgcmVuZGVyYWJsZS5zY2FsZSk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VUaWxlT2Zmc2V0JywgcmVuZGVyYWJsZS50aWxlT2Zmc2V0KTtcblxuXHRcdGNvbnN0IGxvZFNjYWxlID0gMSAvIGV4dGVudDtcblxuXHRcdGNvbnN0IGxvZE9mZnNldCA9IFtcblx0XHRcdC0oeE9mZnNldCAqIGxvZFNjYWxlICogcGxvdC50aWxlU2l6ZSksXG5cdFx0XHQtKHlPZmZzZXQgKiBsb2RTY2FsZSAqIHBsb3QudGlsZVNpemUpXTtcblxuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1TE9EU2NhbGUnLCAxIC8gZXh0ZW50KTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndUxPRE9mZnNldCcsIGxvZE9mZnNldCk7XG5cdFx0Ly8gZ2V0IGJ5dGUgb2Zmc2V0IGFuZCBjb3VudFxuXHRcdGNvbnN0IFsgc3RhcnQsIHN0b3AgXSA9IGdldE9mZnNldEluZGljZXMoXG5cdFx0XHR4T2Zmc2V0LFxuXHRcdFx0eU9mZnNldCxcblx0XHRcdGV4dGVudCxcblx0XHRcdGxvZCk7XG5cblx0XHRjb25zdCBlZGdlcyA9IHJlbmRlcmFibGUudGlsZS5kYXRhLmVkZ2VzO1xuXHRcdGNvbnN0IG9mZnNldHMgPSByZW5kZXJhYmxlLnRpbGUuZGF0YS5vZmZzZXRzO1xuXG5cdFx0Y29uc3Qgc3RhcnRCeXRlID0gb2Zmc2V0c1tzdGFydF07XG5cdFx0Y29uc3Qgc3RvcEJ5dGUgPSAoc3RvcCA9PT0gb2Zmc2V0cy5sZW5ndGgpID8gZWRnZXMuYnl0ZUxlbmd0aCA6IG9mZnNldHNbc3RvcF07XG5cblx0XHRjb25zdCBvZmZzZXQgPSBzdGFydEJ5dGUgLyAoYXRsYXMuc3RyaWRlICogMiAqIDQpO1xuXHRcdGNvbnN0IGNvdW50ID0gKHN0b3BCeXRlIC0gc3RhcnRCeXRlKSAvIChhdGxhcy5zdHJpZGUgKiAyICogNCk7XG5cdFx0aWYgKGNvdW50ID4gMCkge1xuXHRcdFx0Ly8gZHJhdyB0aGUgZWRnZXNcblx0XHRcdGF0bGFzLmRyYXcocmVuZGVyYWJsZS5oYXNoLCAnTElORVMnLCBvZmZzZXQsIGNvdW50KTtcblx0XHR9XG5cdH0pO1xufTtcblxuY2xhc3MgTGluZSB7XG5cdGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG5cdFx0dGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXHRcdHRoaXMuc2hhZGVyID0ge1xuXHRcdFx0aW5zdGFuY2VkOiByZW5kZXJlci5jcmVhdGVTaGFkZXIoSU5TVEFOQ0VEX1NIQURFUiksXG5cdFx0XHRpbmRpdmlkdWFsOiByZW5kZXJlci5jcmVhdGVTaGFkZXIoSU5ESVZJRFVBTF9TSEFERVIpXG5cdFx0fTtcblx0XHR0aGlzLmxpbmUgPSBjcmVhdGVMaW5lKHJlbmRlcmVyLmdsKTtcblx0fVxuXHRkcmF3SW5zdGFuY2VkKGF0bGFzLCBjb2xvcikge1xuXG5cdFx0Y29uc3Qgc2hhZGVyID0gdGhpcy5zaGFkZXIuaW5zdGFuY2VkO1xuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblx0XHRjb25zdCBsYXllciA9IHJlbmRlcmVyLmxheWVyO1xuXHRcdGNvbnN0IHBsb3QgPSBsYXllci5wbG90O1xuXHRcdGNvbnN0IHByb2plY3Rpb24gPSByZW5kZXJlci5nZXRPcnRob01hdHJpeCgpO1xuXG5cdFx0Ly8gYmluZCBzaGFkZXJcblx0XHRzaGFkZXIudXNlKCk7XG5cblx0XHQvLyBzZXQgZ2xvYmFsIHVuaWZvcm1zXG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VQcm9qZWN0aW9uTWF0cml4JywgcHJvamVjdGlvbik7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VDb2xvcicsIGNvbG9yKTtcblxuXHRcdC8vIGJpbmRzIHRoZSB2ZXJ0ZXggYXRsYXNcblx0XHRhdGxhcy5iaW5kKCk7XG5cblx0XHRpZiAobGF5ZXIubG9kID4gMCkge1xuXHRcdFx0Ly8gZHJhdyB1c2luZyBMT0Rcblx0XHRcdGRyYXdMT0QoXG5cdFx0XHRcdHNoYWRlcixcblx0XHRcdFx0YXRsYXMsXG5cdFx0XHRcdHBsb3QsXG5cdFx0XHRcdGxheWVyLmxvZCxcblx0XHRcdFx0cmVuZGVyZXIuZ2V0UmVuZGVyYWJsZXNMT0QoKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGRyYXcgbm9uLUxPRFxuXHRcdFx0ZHJhdyhcblx0XHRcdFx0c2hhZGVyLFxuXHRcdFx0XHRhdGxhcyxcblx0XHRcdFx0cmVuZGVyZXIuZ2V0UmVuZGVyYWJsZXMoKSk7XG5cdFx0fVxuXG5cdFx0Ly8gdW5iaW5kXG5cdFx0YXRsYXMudW5iaW5kKCk7XG5cdH1cblx0ZHJhd0luZGl2aWR1YWwodGFyZ2V0LCBjb2xvcikge1xuXG5cdFx0Y29uc3Qgc2hhZGVyID0gdGhpcy5zaGFkZXIuaW5kaXZpZHVhbDtcblx0XHRjb25zdCBsaW5lID0gdGhpcy5saW5lO1xuXHRcdGNvbnN0IHBsb3QgPSB0aGlzLnJlbmRlcmVyLmxheWVyLnBsb3Q7XG5cdFx0Y29uc3QgcHJvamVjdGlvbiA9IHRoaXMucmVuZGVyZXIuZ2V0T3J0aG9NYXRyaXgoKTtcblxuXHRcdC8vIGdldCB0aWxlIG9mZnNldFxuXHRcdGNvbnN0IGNvb3JkID0gdGFyZ2V0LnRpbGUuY29vcmQ7XG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCBwbG90Lnpvb20gLSBjb29yZC56KTtcblx0XHRjb25zdCB0aWxlT2Zmc2V0ID0gW1xuXHRcdFx0KGNvb3JkLnggKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpIC0gcGxvdC52aWV3cG9ydC54LFxuXHRcdFx0KGNvb3JkLnkgKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpIC0gcGxvdC52aWV3cG9ydC55XG5cdFx0XTtcblxuXHRcdC8vIGJpbmQgc2hhZGVyXG5cdFx0c2hhZGVyLnVzZSgpO1xuXG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VQcm9qZWN0aW9uTWF0cml4JywgcHJvamVjdGlvbik7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VUaWxlT2Zmc2V0JywgdGlsZU9mZnNldCk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VQb2ludEEnLCBbIHRhcmdldC5hLngsIHRhcmdldC5hLnkgXSk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VQb2ludEInLCBbIHRhcmdldC5iLngsIHRhcmdldC5iLnkgXSk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VTY2FsZScsIHNjYWxlKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndUNvbG9yJywgY29sb3IpO1xuXG5cdFx0Ly8gYmluZHMgdGhlIGJ1ZmZlciB0byBpbnN0YW5jZVxuXHRcdGxpbmUuYmluZCgpO1xuXG5cdFx0Ly8gZHJhdyB0aGUgcG9pbnRzXG5cdFx0bGluZS5kcmF3KCk7XG5cblx0XHQvLyB1bmJpbmRcblx0XHRsaW5lLnVuYmluZCgpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGluZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbHVtbyA9IHJlcXVpcmUoJ2x1bW8nKTtcbmNvbnN0IG1vcnRvbiA9IHJlcXVpcmUoJy4uL21vcnRvbi9Nb3J0b24nKTtcblxuY29uc3QgU0hBREVSID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xuXHRcdHVuaWZvcm0gZmxvYXQgdVJhZGl1cztcblx0XHR1bmlmb3JtIHZlYzIgdVRpbGVPZmZzZXQ7XG5cdFx0dW5pZm9ybSBmbG9hdCB1U2NhbGU7XG5cdFx0dW5pZm9ybSB2ZWMyIHVMT0RPZmZzZXQ7XG5cdFx0dW5pZm9ybSBmbG9hdCB1TE9EU2NhbGU7XG5cdFx0dW5pZm9ybSBmbG9hdCB1UGl4ZWxSYXRpbztcblx0XHR1bmlmb3JtIG1hdDQgdVByb2plY3Rpb25NYXRyaXg7XG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0dmVjMiB3UG9zaXRpb24gPSAoYVBvc2l0aW9uICogdVNjYWxlICogdUxPRFNjYWxlKSArICh1VGlsZU9mZnNldCArICh1U2NhbGUgKiB1TE9ET2Zmc2V0KSk7XG5cdFx0XHRnbF9Qb2ludFNpemUgPSB1UmFkaXVzICogMi4wICogdVBpeGVsUmF0aW87XG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdmVjNCh3UG9zaXRpb24sIDAuMCwgMS4wKTtcblx0XHR9XG5cdFx0YCxcblx0ZnJhZzpcblx0XHRgXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdCNpZmRlZiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcblx0XHRcdCNleHRlbnNpb24gR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzIDogZW5hYmxlXG5cdFx0I2VuZGlmXG5cdFx0dW5pZm9ybSB2ZWM0IHVDb2xvcjtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWMyIGN4eSA9IDIuMCAqIGdsX1BvaW50Q29vcmQgLSAxLjA7XG5cdFx0XHRmbG9hdCByYWRpdXMgPSBkb3QoY3h5LCBjeHkpO1xuXHRcdFx0ZmxvYXQgYWxwaGEgPSAxLjA7XG5cdFx0XHQjaWZkZWYgR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzXG5cdFx0XHRcdGZsb2F0IGRlbHRhID0gZndpZHRoKHJhZGl1cyk7XG5cdFx0XHRcdGFscGhhID0gMS4wIC0gc21vb3Roc3RlcCgxLjAgLSBkZWx0YSwgMS4wICsgZGVsdGEsIHJhZGl1cyk7XG5cdFx0XHQjZWxzZVxuXHRcdFx0XHRpZiAocmFkaXVzID4gMS4wKSB7XG5cdFx0XHRcdFx0ZGlzY2FyZDtcblx0XHRcdFx0fVxuXHRcdFx0I2VuZGlmXG5cdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHVDb2xvci5yZ2IsIHVDb2xvci5hICogYWxwaGEpO1xuXHRcdH1cblx0XHRgXG59O1xuXG5jb25zdCBjcmVhdGVQb2ludCA9IGZ1bmN0aW9uKGdsKSB7XG5cdGNvbnN0IHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSgyKTtcblx0dmVydGljZXNbMF0gPSAwLjA7XG5cdHZlcnRpY2VzWzFdID0gMC4wO1xuXHQvLyBjcmVhdGUgcXVhZCBidWZmZXJcblx0cmV0dXJuIG5ldyBsdW1vLlZlcnRleEJ1ZmZlcihcblx0XHRnbCxcblx0XHR2ZXJ0aWNlcyxcblx0XHR7XG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCdcblx0XHRcdH1cblx0XHR9LFxuXHRcdHtcblx0XHRcdG1vZGU6ICdQT0lOVFMnLFxuXHRcdFx0Y291bnQ6IDFcblx0XHR9KTtcbn07XG5cbmNvbnN0IGdldE9mZnNldEluZGljZXMgPSBmdW5jdGlvbih4LCB5LCBleHRlbnQsIGxvZCkge1xuXHRjb25zdCBwYXJ0aXRpb25zID0gTWF0aC5wb3coMiwgbG9kKTtcblx0Y29uc3QgeGNlbGwgPSB4ICogcGFydGl0aW9ucztcblx0Y29uc3QgeWNlbGwgPSB5ICogcGFydGl0aW9ucztcblx0Y29uc3Qgc3RyaWRlID0gZXh0ZW50ICogcGFydGl0aW9ucztcblx0Y29uc3Qgc3RhcnQgPSBtb3J0b24oeGNlbGwsIHljZWxsKTtcblx0Y29uc3Qgc3RvcCA9IHN0YXJ0ICsgKHN0cmlkZSAqIHN0cmlkZSk7XG5cdHJldHVybiBbIHN0YXJ0LCBzdG9wIF07XG59O1xuXG5jb25zdCBkcmF3ID0gZnVuY3Rpb24oc2hhZGVyLCBhdGxhcywgcmVuZGVyYWJsZXMpIHtcblx0Ly8gZm9yIGVhY2ggcmVuZGVyYWJsZVxuXHRyZW5kZXJhYmxlcy5mb3JFYWNoKHJlbmRlcmFibGUgPT4ge1xuXHRcdC8vIHNldCB0aWxlIHVuaWZvcm1zXG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VTY2FsZScsIHJlbmRlcmFibGUuc2NhbGUpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHJlbmRlcmFibGUudGlsZU9mZnNldCk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VMT0RTY2FsZScsIDEpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1TE9ET2Zmc2V0JywgWzAsIDBdKTtcblx0XHQvLyBkcmF3IHRoZSBwb2ludHNcblx0XHRhdGxhcy5kcmF3KHJlbmRlcmFibGUuaGFzaCwgJ1BPSU5UUycpO1xuXHR9KTtcbn07XG5cbmNvbnN0IGRyYXdMT0QgPSBmdW5jdGlvbihzaGFkZXIsIGF0bGFzLCBwbG90LCBsb2QsIHJlbmRlcmFibGVzKSB7XG5cdGNvbnN0IHpvb20gPSBNYXRoLnJvdW5kKHBsb3Quem9vbSk7XG5cdC8vIGZvciBlYWNoIHJlbmRlcmFibGVcblx0cmVuZGVyYWJsZXMuZm9yRWFjaChyZW5kZXJhYmxlID0+IHtcblxuXHRcdC8vIGRpc3RhbmNlIGJldHdlZW4gYWN0dWFsIHpvb20gYW5kIHRoZSBMT0Qgb2YgdGlsZVxuXHRcdGNvbnN0IGRpc3QgPSBNYXRoLmFicyhyZW5kZXJhYmxlLnRpbGUuY29vcmQueiAtIHpvb20pO1xuXG5cdFx0aWYgKGRpc3QgPiBsb2QpIHtcblx0XHRcdC8vIG5vdCBldmVuIGxvZCB0byBzdXBwb3J0IGl0XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgeE9mZnNldCA9IHJlbmRlcmFibGUudXZPZmZzZXRbMF07XG5cdFx0Y29uc3QgeU9mZnNldCA9IHJlbmRlcmFibGUudXZPZmZzZXRbMV07XG5cdFx0Y29uc3QgZXh0ZW50ID0gcmVuZGVyYWJsZS51dk9mZnNldFszXTtcblxuXHRcdC8vIHNldCB0aWxlIHVuaWZvcm1zXG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VTY2FsZScsIHJlbmRlcmFibGUuc2NhbGUpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHJlbmRlcmFibGUudGlsZU9mZnNldCk7XG5cblx0XHRjb25zdCBsb2RTY2FsZSA9IDEgLyBleHRlbnQ7XG5cblx0XHRjb25zdCBsb2RPZmZzZXQgPSBbXG5cdFx0XHQtKHhPZmZzZXQgKiBsb2RTY2FsZSAqIHBsb3QudGlsZVNpemUpLFxuXHRcdFx0LSh5T2Zmc2V0ICogbG9kU2NhbGUgKiBwbG90LnRpbGVTaXplKV07XG5cblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndUxPRFNjYWxlJywgMSAvIGV4dGVudCk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VMT0RPZmZzZXQnLCBsb2RPZmZzZXQpO1xuXHRcdC8vIGdldCBieXRlIG9mZnNldCBhbmQgY291bnRcblx0XHRjb25zdCBbIHN0YXJ0LCBzdG9wIF0gPSBnZXRPZmZzZXRJbmRpY2VzKFxuXHRcdFx0eE9mZnNldCxcblx0XHRcdHlPZmZzZXQsXG5cdFx0XHRleHRlbnQsXG5cdFx0XHRsb2QpO1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gcmVuZGVyYWJsZS50aWxlLmRhdGEucG9pbnRzO1xuXHRcdGNvbnN0IG9mZnNldHMgPSByZW5kZXJhYmxlLnRpbGUuZGF0YS5vZmZzZXRzO1xuXG5cdFx0Y29uc3Qgc3RhcnRCeXRlID0gb2Zmc2V0c1tzdGFydF07XG5cdFx0Y29uc3Qgc3RvcEJ5dGUgPSAoc3RvcCA9PT0gb2Zmc2V0cy5sZW5ndGgpID8gcG9pbnRzLmJ5dGVMZW5ndGggOiBvZmZzZXRzW3N0b3BdO1xuXG5cdFx0Y29uc3Qgb2Zmc2V0ID0gc3RhcnRCeXRlIC8gKGF0bGFzLnN0cmlkZSAqIDQpO1xuXHRcdGNvbnN0IGNvdW50ID0gKHN0b3BCeXRlIC0gc3RhcnRCeXRlKSAvIChhdGxhcy5zdHJpZGUgKiA0KTtcblx0XHRpZiAoY291bnQgPiAwKSB7XG5cdFx0XHQvLyBkcmF3IHRoZSBwb2ludHNcblx0XHRcdGF0bGFzLmRyYXcocmVuZGVyYWJsZS5oYXNoLCAnUE9JTlRTJywgb2Zmc2V0LCBjb3VudCk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbmNsYXNzIFBvaW50IHtcblx0Y29uc3RydWN0b3IocmVuZGVyZXIpIHtcblx0XHR0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cdFx0dGhpcy5leHQgPSByZW5kZXJlci5nbC5nZXRFeHRlbnNpb24oJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycpO1xuXHRcdHRoaXMucG9pbnQgPSBjcmVhdGVQb2ludChyZW5kZXJlci5nbCk7XG5cdFx0dGhpcy5zaGFkZXIgPSByZW5kZXJlci5jcmVhdGVTaGFkZXIoU0hBREVSKTtcblx0fVxuXHRkcmF3SW5zdGFuY2VkKGF0bGFzLCByYWRpdXMsIGNvbG9yKSB7XG5cblx0XHRjb25zdCBzaGFkZXIgPSB0aGlzLnNoYWRlcjtcblx0XHRjb25zdCByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cdFx0Y29uc3QgbGF5ZXIgPSByZW5kZXJlci5sYXllcjtcblx0XHRjb25zdCBwbG90ID0gbGF5ZXIucGxvdDtcblx0XHRjb25zdCBwcm9qZWN0aW9uID0gcmVuZGVyZXIuZ2V0T3J0aG9NYXRyaXgoKTtcblxuXHRcdC8vIGJpbmQgc2hhZGVyXG5cdFx0c2hhZGVyLnVzZSgpO1xuXG5cdFx0Ly8gc2V0IGdsb2JhbCB1bmlmb3Jtc1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UHJvamVjdGlvbk1hdHJpeCcsIHByb2plY3Rpb24pO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1Q29sb3InLCBjb2xvcik7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VSYWRpdXMnLCByYWRpdXMpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UGl4ZWxSYXRpbycsIHBsb3QucGl4ZWxSYXRpbyk7XG5cblx0XHQvLyBiaW5kcyB0aGUgdmVydGV4IGF0bGFzXG5cdFx0YXRsYXMuYmluZCgpO1xuXG5cdFx0aWYgKGxheWVyLmxvZCA+IDApIHtcblx0XHRcdC8vIGRyYXcgdXNpbmcgTE9EXG5cdFx0XHRkcmF3TE9EKFxuXHRcdFx0XHRzaGFkZXIsXG5cdFx0XHRcdGF0bGFzLFxuXHRcdFx0XHRwbG90LFxuXHRcdFx0XHRsYXllci5sb2QsXG5cdFx0XHRcdHJlbmRlcmVyLmdldFJlbmRlcmFibGVzTE9EKCkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBkcmF3IG5vbi1MT0Rcblx0XHRcdGRyYXcoXG5cdFx0XHRcdHNoYWRlcixcblx0XHRcdFx0YXRsYXMsXG5cdFx0XHRcdHJlbmRlcmVyLmdldFJlbmRlcmFibGVzKCkpO1xuXHRcdH1cblxuXHRcdC8vIHVuYmluZFxuXHRcdGF0bGFzLnVuYmluZCgpO1xuXHR9XG5cdGRyYXdJbmRpdmlkdWFsKHRhcmdldCwgcmFkaXVzLCBjb2xvcikge1xuXG5cdFx0Y29uc3Qgc2hhZGVyID0gdGhpcy5zaGFkZXI7XG5cdFx0Y29uc3QgcG9pbnQgPSB0aGlzLnBvaW50O1xuXHRcdGNvbnN0IHBsb3QgPSB0aGlzLnJlbmRlcmVyLmxheWVyLnBsb3Q7XG5cdFx0Y29uc3QgcHJvamVjdGlvbiA9IHRoaXMucmVuZGVyZXIuZ2V0T3J0aG9NYXRyaXgoKTtcblxuXHRcdC8vIGdldCB0aWxlIG9mZnNldFxuXHRcdGNvbnN0IGNvb3JkID0gdGFyZ2V0LnRpbGUuY29vcmQ7XG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCBwbG90Lnpvb20gLSBjb29yZC56KTtcblx0XHRjb25zdCB0aWxlT2Zmc2V0ID0gW1xuXHRcdFx0KGNvb3JkLnggKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpICsgKHNjYWxlICogdGFyZ2V0LngpIC0gcGxvdC52aWV3cG9ydC54LFxuXHRcdFx0KGNvb3JkLnkgKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpICsgKHNjYWxlICogdGFyZ2V0LnkpIC0gcGxvdC52aWV3cG9ydC55XG5cdFx0XTtcblxuXHRcdC8vIGJpbmQgc2hhZGVyXG5cdFx0c2hhZGVyLnVzZSgpO1xuXG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VQcm9qZWN0aW9uTWF0cml4JywgcHJvamVjdGlvbik7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VUaWxlT2Zmc2V0JywgdGlsZU9mZnNldCk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VTY2FsZScsIHNjYWxlKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndUNvbG9yJywgY29sb3IpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UmFkaXVzJywgcmFkaXVzKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVBpeGVsUmF0aW8nLCBwbG90LnBpeGVsUmF0aW8pO1xuXG5cdFx0Ly8gYmluZHMgdGhlIGJ1ZmZlciB0byBpbnN0YW5jZVxuXHRcdHBvaW50LmJpbmQoKTtcblxuXHRcdC8vIGRyYXcgdGhlIHBvaW50c1xuXHRcdHBvaW50LmRyYXcoKTtcblxuXHRcdC8vIHVuYmluZFxuXHRcdHBvaW50LnVuYmluZCgpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGx1bW8gPSByZXF1aXJlKCdsdW1vJyk7XG5cbmNvbnN0IElOU1RBTkNFRF9TSEFERVIgPSB7XG5cdHZlcnQ6XG5cdFx0YFxuXHRcdHByZWNpc2lvbiBoaWdocCBmbG9hdDtcblx0XHRhdHRyaWJ1dGUgdmVjMiBhUG9zaXRpb247XG5cdFx0YXR0cmlidXRlIHZlYzIgYU9mZnNldDtcblx0XHRhdHRyaWJ1dGUgZmxvYXQgYVJhZGl1cztcblx0XHR1bmlmb3JtIGZsb2F0IHVSb3RhdGlvbjtcblx0XHR1bmlmb3JtIHZlYzIgdVRpbGVPZmZzZXQ7XG5cdFx0dW5pZm9ybSBmbG9hdCB1U2NhbGU7XG5cdFx0dW5pZm9ybSBtYXQ0IHVQcm9qZWN0aW9uTWF0cml4O1xuXHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdGZsb2F0IHMgPSBzaW4odVJvdGF0aW9uKTtcblx0XHRcdGZsb2F0IGMgPSBjb3ModVJvdGF0aW9uKTtcblx0XHRcdG1hdDIgcm90YXRpb24gPSBtYXQyKGMsIC1zLCBzLCBjKTtcblx0XHRcdHZlYzIgcmFkaXVzT2Zmc2V0ID0gYVJhZGl1cyAqIHZlYzIoMC4wLCAxLjApO1xuXHRcdFx0dmVjMiB3UG9zaXRpb24gPSAoKHJvdGF0aW9uICogKGFQb3NpdGlvbiArIHJhZGl1c09mZnNldCkpICsgYU9mZnNldCkgKiB1U2NhbGUgKyB1VGlsZU9mZnNldDtcblx0XHRcdGdsX1Bvc2l0aW9uID0gdVByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHdQb3NpdGlvbiwgMC4wLCAxLjApO1xuXHRcdH1cblx0XHRgLFxuXHRmcmFnOlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0dW5pZm9ybSBmbG9hdCB1T3BhY2l0eTtcblx0XHR1bmlmb3JtIHZlYzQgdUNvbG9yO1xuXHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQodUNvbG9yLnJnYiwgdUNvbG9yLmEgKiB1T3BhY2l0eSk7XG5cdFx0fVxuXHRcdGBcbn07XG5cbmNvbnN0IGNyZWF0ZVF1YWQgPSBmdW5jdGlvbihnbCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wKSB7XG5cdC8vIHF1YWQgdmVydGljZXNcblx0Y29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KFtcblx0XHQvLyBwb3NpdGlvbnNcblx0XHRsZWZ0LCBib3R0b20sXG5cdFx0cmlnaHQsIGJvdHRvbSxcblx0XHRyaWdodCwgdG9wLFxuXHRcdGxlZnQsIGJvdHRvbSxcblx0XHRyaWdodCwgdG9wLFxuXHRcdGxlZnQsIHRvcFxuXHRdKTtcblx0Ly8gcXVhZCBidWZmZXJcblx0cmV0dXJuIG5ldyBsdW1vLlZlcnRleEJ1ZmZlcihcblx0XHRnbCxcblx0XHR2ZXJ0aWNlcyxcblx0XHR7XG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCdcblx0XHRcdH1cblx0XHR9LFxuXHRcdHtcblx0XHRcdGNvdW50OiA2LFxuXHRcdH0pO1xufTtcblxuY2xhc3MgUXVhZCB7XG5cdGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3ApIHtcblx0XHR0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cdFx0dGhpcy5xdWFkID0gY3JlYXRlUXVhZChyZW5kZXJlci5nbCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wKTtcblx0XHR0aGlzLnNoYWRlcnMgPSB7XG5cdFx0XHRpbnN0YW5jZWQ6IHJlbmRlcmVyLmNyZWF0ZVNoYWRlcihJTlNUQU5DRURfU0hBREVSKVxuXHRcdH07XG5cdH1cblx0ZHJhd0luc3RhbmNlZChhdGxhcywgY29sb3IsIHJvdGF0aW9uID0gMCwgb3BhY2l0eSA9IDEpIHtcblxuXHRcdGNvbnN0IHNoYWRlciA9IHRoaXMuc2hhZGVycy5pbnN0YW5jZWQ7XG5cdFx0Y29uc3QgcXVhZCA9IHRoaXMucXVhZDtcblx0XHRjb25zdCBwcm9qZWN0aW9uID0gdGhpcy5yZW5kZXJlci5nZXRPcnRob01hdHJpeCgpO1xuXHRcdGNvbnN0IHJlbmRlcmFibGVzID0gdGhpcy5yZW5kZXJlci5nZXRSZW5kZXJhYmxlcygpO1xuXG5cdFx0Ly8gdXNlIHNoYWRlclxuXHRcdHNoYWRlci51c2UoKTtcblxuXHRcdC8vIHNldCB1bmlmb3Jtc1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UHJvamVjdGlvbk1hdHJpeCcsIHByb2plY3Rpb24pO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1Um90YXRpb24nLCByb3RhdGlvbik7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VPcGFjaXR5Jywgb3BhY2l0eSk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VDb2xvcicsIGNvbG9yKTtcblxuXHRcdC8vIGJpbmQgdGhlIHF1YWQgYnVmZmVyXG5cdFx0cXVhZC5iaW5kKCk7XG5cblx0XHQvLyBiaW5kcyBpbnN0YW5jZSBvZmZzZXQgYnVmZmVyXG5cdFx0YXRsYXMuYmluZEluc3RhbmNlZCgpO1xuXG5cdFx0cmVuZGVyYWJsZXMuZm9yRWFjaChyZW5kZXJhYmxlID0+IHtcblx0XHRcdC8vIHNldCB0aWxlIHVuaWZvcm1zXG5cdFx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVNjYWxlJywgcmVuZGVyYWJsZS5zY2FsZSk7XG5cdFx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVRpbGVPZmZzZXQnLCByZW5kZXJhYmxlLnRpbGVPZmZzZXQpO1xuXHRcdFx0Ly8gZHJhdyB0aGUgaW5zdGFuY2VzXG5cdFx0XHRhdGxhcy5kcmF3SW5zdGFuY2VkKHJlbmRlcmFibGUuaGFzaCwgcXVhZC5tb2RlLCBxdWFkLmNvdW50KTtcblx0XHR9KTtcblxuXHRcdC8vIHVuYmluZCBpbnN0YW5jZSBvZmZzZXQgYnVmZmVyXG5cdFx0YXRsYXMudW5iaW5kSW5zdGFuY2VkKCk7XG5cblx0XHQvLyB1bmJpbmQgdGhlIHF1YWQgYnVmZmVyXG5cdFx0cXVhZC51bmJpbmQoKTtcblx0fVxuXHRkcmF3SW5kaXZpZHVhbCh0YXJnZXQsIGNvbG9yLCByb3RhdGlvbiwgb3BhY2l0eSA9IDEpIHtcblx0XHRjb25zdCBzaGFkZXIgPSB0aGlzLnNoYWRlcnMuaW5kaXZpZHVhbDtcblx0XHRjb25zdCBxdWFkID0gdGhpcy5xdWFkO1xuXHRcdGNvbnN0IHBsb3QgPSB0aGlzLnJlbmRlcmVyLmxheWVyLnBsb3Q7XG5cdFx0Y29uc3QgcHJvamVjdGlvbiA9IHRoaXMucmVuZGVyZXIuZ2V0T3J0aG9NYXRyaXgoKTtcblxuXHRcdC8vIGdldCB0aWxlIG9mZnNldFxuXHRcdGNvbnN0IGNvb3JkID0gdGFyZ2V0LnRpbGUuY29vcmQ7XG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCBwbG90Lnpvb20gLSBjb29yZC56KTtcblx0XHRjb25zdCB0aWxlT2Zmc2V0ID0gW1xuXHRcdFx0KGNvb3JkLnggKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpICsgKHNjYWxlICogdGFyZ2V0LngpIC0gcGxvdC52aWV3cG9ydC54LFxuXHRcdFx0KGNvb3JkLnkgKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpICsgKHNjYWxlICogdGFyZ2V0LnkpIC0gcGxvdC52aWV3cG9ydC55XG5cdFx0XTtcblxuXHRcdC8vIHVzZSBzaGFkZXJcblx0XHRzaGFkZXIudXNlKCk7XG5cblx0XHQvLyBzZXQgdW5pZm9ybXNcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVByb2plY3Rpb25NYXRyaXgnLCBwcm9qZWN0aW9uKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVJvdGF0aW9uJywgcm90YXRpb24pO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1T3BhY2l0eScsIG9wYWNpdHkpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1Q29sb3InLCBjb2xvcik7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VTY2FsZScsIHNjYWxlKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVRpbGVPZmZzZXQnLCB0aWxlT2Zmc2V0KTtcblxuXHRcdC8vIGJpbmQgdGhlIHF1YWQgYnVmZmVyXG5cdFx0cXVhZC5iaW5kKCk7XG5cdFx0Ly8gZHJhdyBxdWFkXG5cdFx0cXVhZC5kcmF3KCk7XG5cdFx0Ly8gdW5iaW5kIHRoZSBxdWFkIGJ1ZmZlclxuXHRcdHF1YWQudW5iaW5kKCk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRdWFkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsdW1vID0gcmVxdWlyZSgnbHVtbycpO1xuXG5jb25zdCBOVU1fU0VHTUVOVFMgPSA2NDtcbmNvbnN0IFJBRElVU19PRkZTRVQgPSAxMDtcblxuY29uc3QgSU5ESVZJRFVBTF9TSEFERVIgPSB7XG5cdHZlcnQ6XG5cdFx0YFxuXHRcdHByZWNpc2lvbiBoaWdocCBmbG9hdDtcblx0XHRhdHRyaWJ1dGUgdmVjMiBhUG9zaXRpb247XG5cdFx0dW5pZm9ybSBmbG9hdCB1UmFkaXVzO1xuXHRcdHVuaWZvcm0gdmVjMiB1VGlsZU9mZnNldDtcblx0XHR1bmlmb3JtIGZsb2F0IHVTY2FsZTtcblx0XHR1bmlmb3JtIGZsb2F0IHVSYWRpdXNPZmZzZXQ7XG5cdFx0dW5pZm9ybSBtYXQ0IHVQcm9qZWN0aW9uTWF0cml4O1xuXHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdHZlYzIgcmFkaXVzT2Zmc2V0ID0gbm9ybWFsaXplKGFQb3NpdGlvbikgKiAodVJhZGl1cyAtIHVSYWRpdXNPZmZzZXQpO1xuXHRcdFx0dmVjMiB3UG9zaXRpb24gPSAoKGFQb3NpdGlvbiArIHJhZGl1c09mZnNldCkgKiB1U2NhbGUpICsgdVRpbGVPZmZzZXQ7XG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdmVjNCh3UG9zaXRpb24sIDAuMCwgMS4wKTtcblx0XHR9XG5cdFx0YCxcblx0ZnJhZzpcblx0XHRgXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdHVuaWZvcm0gdmVjNCB1Q29sb3I7XG5cdFx0dW5pZm9ybSBmbG9hdCB1T3BhY2l0eTtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHVDb2xvci5yZ2IsIHVDb2xvci5hICogdU9wYWNpdHkpO1xuXHRcdH1cblx0XHRgXG59O1xuXG5jb25zdCBJTlNUQU5DRURfU0hBREVSID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xuXHRcdGF0dHJpYnV0ZSB2ZWMyIGFPZmZzZXQ7XG5cdFx0YXR0cmlidXRlIGZsb2F0IGFSYWRpdXM7XG5cdFx0dW5pZm9ybSB2ZWMyIHVUaWxlT2Zmc2V0O1xuXHRcdHVuaWZvcm0gZmxvYXQgdVNjYWxlO1xuXHRcdHVuaWZvcm0gZmxvYXQgdVJhZGl1c09mZnNldDtcblx0XHR1bmlmb3JtIG1hdDQgdVByb2plY3Rpb25NYXRyaXg7XG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0dmVjMiByYWRpdXNPZmZzZXQgPSBub3JtYWxpemUoYVBvc2l0aW9uKSAqIChhUmFkaXVzIC0gdVJhZGl1c09mZnNldCk7XG5cdFx0XHR2ZWMyIHdQb3NpdGlvbiA9ICgoYVBvc2l0aW9uICsgcmFkaXVzT2Zmc2V0ICsgYU9mZnNldCkgKiB1U2NhbGUpICsgdVRpbGVPZmZzZXQ7XG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdmVjNCh3UG9zaXRpb24sIDAuMCwgMS4wKTtcblx0XHR9XG5cdFx0YCxcblx0ZnJhZzpcblx0XHRgXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdHVuaWZvcm0gdmVjNCB1Q29sb3I7XG5cdFx0dW5pZm9ybSBmbG9hdCB1T3BhY2l0eTtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHVDb2xvci5yZ2IsIHVDb2xvci5hICogdU9wYWNpdHkpO1xuXHRcdH1cblx0XHRgXG59O1xuXG5jb25zdCBjcmVhdGVSaW5nID0gZnVuY3Rpb24oZ2wsIG51bVNlZ21lbnRzLCByYWRpdXMsIHJpbmdXaWR0aCkge1xuXHRjb25zdCB0aGV0YSA9ICgyICogTWF0aC5QSSkgLyBudW1TZWdtZW50cztcblx0Ly8gcHJlLWNhbGN1bGF0ZSBzaW5lIGFuZCBjb3NpbmVcblx0Y29uc3QgYyA9IE1hdGguY29zKHRoZXRhKTtcblx0Y29uc3QgcyA9IE1hdGguc2luKHRoZXRhKTtcblx0Ly8gc3RhcnQgYXQgYW5nbGUgPSAwXG5cdGxldCB4MCA9IDA7XG5cdGxldCB5MCA9IHJhZGl1cyAtIChyaW5nV2lkdGggLyAyKTtcblx0bGV0IHgxID0gMDtcblx0bGV0IHkxID0gcmFkaXVzICsgKHJpbmdXaWR0aCAvIDIpO1xuXHRjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoKG51bVNlZ21lbnRzICsgMSkgKiAoMiArIDIpKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPD0gbnVtU2VnbWVudHM7IGkrKykge1xuXHRcdHZlcnRpY2VzW2kqNF0gPSB4MDtcblx0XHR2ZXJ0aWNlc1tpKjQrMV0gPSB5MDtcblx0XHR2ZXJ0aWNlc1tpKjQrMl0gPSB4MTtcblx0XHR2ZXJ0aWNlc1tpKjQrM10gPSB5MTtcblx0XHQvLyBhcHBseSB0aGUgcm90YXRpb25cblx0XHRsZXQgdCA9IHgwO1xuXHRcdHgwID0gYyAqIHgwIC0gcyAqIHkwO1xuXHRcdHkwID0gcyAqIHQgKyBjICogeTA7XG5cdFx0dCA9IHgxO1xuXHRcdHgxID0gYyAqIHgxIC0gcyAqIHkxO1xuXHRcdHkxID0gcyAqIHQgKyBjICogeTE7XG5cdH1cblx0cmV0dXJuIG5ldyBsdW1vLlZlcnRleEJ1ZmZlcihcblx0XHRnbCxcblx0XHR2ZXJ0aWNlcyxcblx0XHR7XG5cdFx0XHQvLyB4LCB5XG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCdcblx0XHRcdH1cblx0XHR9LCB7XG5cdFx0XHRtb2RlOiAnVFJJQU5HTEVfU1RSSVAnLFxuXHRcdFx0Y291bnQ6IHZlcnRpY2VzLmxlbmd0aCAvIDJcblx0XHR9KTtcbn07XG5cbmNsYXNzIFJpbmcge1xuXHRjb25zdHJ1Y3RvcihyZW5kZXJlciwgd2lkdGgpIHtcblx0XHR0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cdFx0dGhpcy5yaW5nID0gY3JlYXRlUmluZyhcblx0XHRcdHJlbmRlcmVyLmdsLFxuXHRcdFx0TlVNX1NFR01FTlRTLFxuXHRcdFx0UkFESVVTX09GRlNFVCxcblx0XHRcdHdpZHRoKTtcblx0XHR0aGlzLnNoYWRlcnMgPSB7XG5cdFx0XHRpbnN0YW5jZWQ6IHJlbmRlcmVyLmNyZWF0ZVNoYWRlcihJTlNUQU5DRURfU0hBREVSKSxcblx0XHRcdGluZGl2aWR1YWw6IHJlbmRlcmVyLmNyZWF0ZVNoYWRlcihJTkRJVklEVUFMX1NIQURFUilcblx0XHR9O1xuXHR9XG5cdGRyYXdJbnN0YW5jZWQoYXRsYXMsIGNvbG9yLCBvcGFjaXR5ID0gMSkge1xuXG5cdFx0Y29uc3Qgc2hhZGVyID0gdGhpcy5zaGFkZXJzLmluc3RhbmNlZDtcblx0XHRjb25zdCByaW5nID0gdGhpcy5yaW5nO1xuXHRcdGNvbnN0IHByb2plY3Rpb24gPSB0aGlzLnJlbmRlcmVyLmdldE9ydGhvTWF0cml4KCk7XG5cdFx0Y29uc3QgcmVuZGVyYWJsZXMgPSB0aGlzLnJlbmRlcmVyLmdldFJlbmRlcmFibGVzKCk7XG5cblx0XHQvLyB1c2Ugc2hhZGVyXG5cdFx0c2hhZGVyLnVzZSgpO1xuXG5cdFx0Ly8gc2V0IHVuaWZvcm1zXG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VQcm9qZWN0aW9uTWF0cml4JywgcHJvamVjdGlvbik7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VSYWRpdXNPZmZzZXQnLCBSQURJVVNfT0ZGU0VUKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndU9wYWNpdHknLCBvcGFjaXR5KTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndUNvbG9yJywgY29sb3IpO1xuXG5cdFx0Ly8gYmluZCB0aGUgcmluZyBidWZmZXJcblx0XHRyaW5nLmJpbmQoKTtcblxuXHRcdC8vIGJpbmRzIGluc3RhbmNlIG9mZnNldCBidWZmZXJcblx0XHRhdGxhcy5iaW5kSW5zdGFuY2VkKCk7XG5cblx0XHRyZW5kZXJhYmxlcy5mb3JFYWNoKHJlbmRlcmFibGUgPT4ge1xuXHRcdFx0Ly8gc2V0IHRpbGUgdW5pZm9ybXNcblx0XHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1U2NhbGUnLCByZW5kZXJhYmxlLnNjYWxlKTtcblx0XHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHJlbmRlcmFibGUudGlsZU9mZnNldCk7XG5cdFx0XHQvLyBkcmF3IHRoZSBpbnN0YW5jZXNcblx0XHRcdGF0bGFzLmRyYXdJbnN0YW5jZWQocmVuZGVyYWJsZS5oYXNoLCByaW5nLm1vZGUsIHJpbmcuY291bnQpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gdW5iaW5kIGluc3RhbmNlIG9mZnNldCBidWZmZXJcblx0XHRhdGxhcy51bmJpbmRJbnN0YW5jZWQoKTtcblxuXHRcdC8vIHVuYmluZCB0aGUgcmluZyBidWZmZXJcblx0XHRyaW5nLnVuYmluZCgpO1xuXHR9XG5cdGRyYXdJbmRpdmlkdWFsKHRhcmdldCwgY29sb3IsIG9wYWNpdHkgPSAxKSB7XG5cblx0XHRjb25zdCBzaGFkZXIgPSB0aGlzLnNoYWRlcnMuaW5kaXZpZHVhbDtcblx0XHRjb25zdCByaW5nID0gdGhpcy5yaW5nO1xuXHRcdGNvbnN0IHBsb3QgPSB0aGlzLnJlbmRlcmVyLmxheWVyLnBsb3Q7XG5cdFx0Y29uc3QgcHJvamVjdGlvbiA9IHRoaXMucmVuZGVyZXIuZ2V0T3J0aG9NYXRyaXgoKTtcblxuXHRcdC8vIGdldCB0aWxlIG9mZnNldFxuXHRcdGNvbnN0IGNvb3JkID0gdGFyZ2V0LnRpbGUuY29vcmQ7XG5cdFx0Y29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCBwbG90Lnpvb20gLSBjb29yZC56KTtcblx0XHRjb25zdCB0aWxlT2Zmc2V0ID0gW1xuXHRcdFx0KGNvb3JkLnggKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpICsgKHNjYWxlICogdGFyZ2V0LngpIC0gcGxvdC52aWV3cG9ydC54LFxuXHRcdFx0KGNvb3JkLnkgKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpICsgKHNjYWxlICogdGFyZ2V0LnkpIC0gcGxvdC52aWV3cG9ydC55XG5cdFx0XTtcblxuXHRcdC8vIHVzZSBzaGFkZXJcblx0XHRzaGFkZXIudXNlKCk7XG5cblx0XHQvLyBzZXQgdW5pZm9ybXNcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVByb2plY3Rpb25NYXRyaXgnLCBwcm9qZWN0aW9uKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndUNvbG9yJywgY29sb3IpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1T3BhY2l0eScsIG9wYWNpdHkpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UmFkaXVzJywgdGFyZ2V0LnJhZGl1cyk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VSYWRpdXNPZmZzZXQnLCBSQURJVVNfT0ZGU0VUKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVNjYWxlJywgc2NhbGUpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHRpbGVPZmZzZXQpO1xuXG5cdFx0Ly8gYmluZCB0aGUgcmluZyBidWZmZXJcblx0XHRyaW5nLmJpbmQoKTtcblx0XHQvLyBkcmF3IHJpbmdcblx0XHRyaW5nLmRyYXcoKTtcblx0XHQvLyB1bmJpbmQgdGhlIHJpbmcgYnVmZmVyXG5cdFx0cmluZy51bmJpbmQoKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGx1bW8gPSByZXF1aXJlKCdsdW1vJyk7XG5cbmNvbnN0IE5VTV9TTElDRVMgPSAzNjA7XG5jb25zdCBSQURJVVNfT0ZGU0VUID0gMTA7XG5cbmNvbnN0IElORElWSURVQUxfU0hBREVSID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzMgYVBvc2l0aW9uO1xuXG5cdFx0dW5pZm9ybSBmbG9hdCB1UGVyY2VudGFnZXNbTlVNX1NFR01FTlRTXTtcblx0XHR1bmlmb3JtIHZlYzQgdUNvbG9yc1tOVU1fU0VHTUVOVFNdO1xuXHRcdHVuaWZvcm0gZmxvYXQgdVJhZGl1cztcblx0XHR1bmlmb3JtIHZlYzIgdVRpbGVPZmZzZXQ7XG5cdFx0dW5pZm9ybSBmbG9hdCB1U2NhbGU7XG5cdFx0dW5pZm9ybSBmbG9hdCB1UmFkaXVzT2Zmc2V0O1xuXHRcdHVuaWZvcm0gbWF0NCB1UHJvamVjdGlvbk1hdHJpeDtcblxuXHRcdHZhcnlpbmcgdmVjNCB2Q29sb3I7XG5cblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWMyIHJhZGl1c09mZnNldCA9IG5vcm1hbGl6ZShhUG9zaXRpb24ueHkpICogKHVSYWRpdXMgLSB1UmFkaXVzT2Zmc2V0KTtcblx0XHRcdHZlYzIgd1Bvc2l0aW9uID0gKChhUG9zaXRpb24ueHkgKyByYWRpdXNPZmZzZXQpICogdVNjYWxlKSArIHVUaWxlT2Zmc2V0O1xuXHRcdFx0Z2xfUG9zaXRpb24gPSB1UHJvamVjdGlvbk1hdHJpeCAqIHZlYzQod1Bvc2l0aW9uLCAwLjAsIDEuMCk7XG5cblx0XHRcdGZsb2F0IHBlcmNlbnRhZ2UgPSBhUG9zaXRpb24uejtcblx0XHRcdGZvciAoaW50IGkgPSAwOyBpPE5VTV9TRUdNRU5UUzsgaSsrKSB7XG5cdFx0XHRcdGlmIChwZXJjZW50YWdlIDw9IHVQZXJjZW50YWdlc1tpXSkge1xuXHRcdFx0XHRcdHZDb2xvciA9IHVDb2xvcnNbaV07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0YCxcblx0ZnJhZzpcblx0XHRgXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdHVuaWZvcm0gZmxvYXQgdU9wYWNpdHk7XG5cdFx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHZDb2xvci5yZ2IsIHZDb2xvci5hICogdU9wYWNpdHkpO1xuXHRcdH1cblx0XHRgXG59O1xuXG5jb25zdCBJTlNUQU5DRURfU0hBREVSID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzMgYVBvc2l0aW9uO1xuXHRcdGF0dHJpYnV0ZSB2ZWMyIGFPZmZzZXQ7XG5cdFx0YXR0cmlidXRlIGZsb2F0IGFSYWRpdXM7XG5cdFx0YXR0cmlidXRlIHZlYzQgYVBlcmNlbnRhZ2VzQTtcblx0XHRhdHRyaWJ1dGUgdmVjNCBhUGVyY2VudGFnZXNCO1xuXHRcdGF0dHJpYnV0ZSB2ZWM0IGFQZXJjZW50YWdlc0M7XG5cdFx0YXR0cmlidXRlIHZlYzQgYVBlcmNlbnRhZ2VzRDtcblxuXHRcdHVuaWZvcm0gdmVjNCB1Q29sb3JzW05VTV9TRUdNRU5UU107XG5cdFx0dW5pZm9ybSB2ZWMyIHVUaWxlT2Zmc2V0O1xuXHRcdHVuaWZvcm0gZmxvYXQgdVNjYWxlO1xuXHRcdHVuaWZvcm0gZmxvYXQgdVJhZGl1c09mZnNldDtcblx0XHR1bmlmb3JtIG1hdDQgdVByb2plY3Rpb25NYXRyaXg7XG5cblx0XHR2YXJ5aW5nIHZlYzQgdkNvbG9yO1xuXG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0dmVjMiByYWRpdXNPZmZzZXQgPSBub3JtYWxpemUoYVBvc2l0aW9uLnh5KSAqIChhUmFkaXVzIC0gdVJhZGl1c09mZnNldCk7XG5cdFx0XHR2ZWMyIHdQb3NpdGlvbiA9ICgoYVBvc2l0aW9uLnh5ICsgcmFkaXVzT2Zmc2V0ICsgYU9mZnNldCkgKiB1U2NhbGUpICsgdVRpbGVPZmZzZXQ7XG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdmVjNCh3UG9zaXRpb24sIDAuMCwgMS4wKTtcblxuXHRcdFx0ZmxvYXQgcGVyY2VudGFnZSA9IGFQb3NpdGlvbi56O1xuXHRcdFx0aWYgKHBlcmNlbnRhZ2UgPD0gYVBlcmNlbnRhZ2VzQS54KSB7XG5cdFx0XHRcdHZDb2xvciA9IHVDb2xvcnNbMF07XG5cdFx0XHQjaWYgTlVNX1NFR01FTlRTID4gMVxuXHRcdFx0fSBlbHNlIGlmIChwZXJjZW50YWdlIDw9IGFQZXJjZW50YWdlc0EueSkge1xuXHRcdFx0XHRcdHZDb2xvciA9IHVDb2xvcnNbMV07XG5cdFx0XHQjZW5kaWZcblx0XHRcdCNpZiBOVU1fU0VHTUVOVFMgPiAyXG5cdFx0XHRcdH0gZWxzZSBpZiAocGVyY2VudGFnZSA8PSBhUGVyY2VudGFnZXNBLnopIHtcblx0XHRcdFx0XHR2Q29sb3IgPSB1Q29sb3JzWzJdO1xuXHRcdFx0I2VuZGlmXG5cdFx0XHQjaWYgTlVNX1NFR01FTlRTID4gM1xuXHRcdFx0XHR9IGVsc2UgaWYgKHBlcmNlbnRhZ2UgPD0gYVBlcmNlbnRhZ2VzQS53KSB7XG5cdFx0XHRcdFx0dkNvbG9yID0gdUNvbG9yc1szXTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0I2lmIE5VTV9TRUdNRU5UUyA+IDRcblx0XHRcdFx0fSBlbHNlIGlmIChwZXJjZW50YWdlIDw9IGFQZXJjZW50YWdlc0IueCkge1xuXHRcdFx0XHRcdHZDb2xvciA9IHVDb2xvcnNbNF07XG5cdFx0XHQjZW5kaWZcblx0XHRcdCNpZiBOVU1fU0VHTUVOVFMgPiA1XG5cdFx0XHRcdH0gZWxzZSBpZiAocGVyY2VudGFnZSA8PSBhUGVyY2VudGFnZXNCLnkpIHtcblx0XHRcdFx0XHR2Q29sb3IgPSB1Q29sb3JzWzVdO1xuXHRcdFx0I2VuZGlmXG5cdFx0XHQjaWYgTlVNX1NFR01FTlRTID4gNlxuXHRcdFx0XHR9IGVsc2UgaWYgKHBlcmNlbnRhZ2UgPD0gYVBlcmNlbnRhZ2VzQi56KSB7XG5cdFx0XHRcdFx0dkNvbG9yID0gdUNvbG9yc1s2XTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0I2lmIE5VTV9TRUdNRU5UUyA+IDdcblx0XHRcdFx0fSBlbHNlIGlmIChwZXJjZW50YWdlIDw9IGFQZXJjZW50YWdlc0Iudykge1xuXHRcdFx0XHRcdHZDb2xvciA9IHVDb2xvcnNbN107XG5cdFx0XHQjZW5kaWZcblx0XHRcdCNpZiBOVU1fU0VHTUVOVFMgPiA4XG5cdFx0XHRcdH0gZWxzZSBpZiAocGVyY2VudGFnZSA8PSBhUGVyY2VudGFnZXNDLngpIHtcblx0XHRcdFx0XHR2Q29sb3IgPSB1Q29sb3JzWzhdO1xuXHRcdFx0I2VuZGlmXG5cdFx0XHQjaWYgTlVNX1NFR01FTlRTID4gOVxuXHRcdFx0XHR9IGVsc2UgaWYgKHBlcmNlbnRhZ2UgPD0gYVBlcmNlbnRhZ2VzQy55KSB7XG5cdFx0XHRcdFx0dkNvbG9yID0gdUNvbG9yc1s5XTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0I2lmIE5VTV9TRUdNRU5UUyA+IDEwXG5cdFx0XHRcdH0gZWxzZSBpZiAocGVyY2VudGFnZSA8PSBhUGVyY2VudGFnZXNDLnopIHtcblx0XHRcdFx0XHR2Q29sb3IgPSB1Q29sb3JzWzEwXTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0I2lmIE5VTV9TRUdNRU5UUyA+IDExXG5cdFx0XHRcdH0gZWxzZSBpZiAocGVyY2VudGFnZSA8PSBhUGVyY2VudGFnZXNDLncpIHtcblx0XHRcdFx0XHR2Q29sb3IgPSB1Q29sb3JzWzExXTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0I2lmIE5VTV9TRUdNRU5UUyA+IDEyXG5cdFx0XHRcdH0gZWxzZSBpZiAocGVyY2VudGFnZSA8PSBhUGVyY2VudGFnZXNELngpIHtcblx0XHRcdFx0XHR2Q29sb3IgPSB1Q29sb3JzWzEyXTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0I2lmIE5VTV9TRUdNRU5UUyA+IDEzXG5cdFx0XHRcdH0gZWxzZSBpZiAocGVyY2VudGFnZSA8PSBhUGVyY2VudGFnZXNELnkpIHtcblx0XHRcdFx0XHR2Q29sb3IgPSB1Q29sb3JzWzEzXTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0I2lmIE5VTV9TRUdNRU5UUyA+IDE0XG5cdFx0XHRcdH0gZWxzZSBpZiAocGVyY2VudGFnZSA8PSBhUGVyY2VudGFnZXNELnopIHtcblx0XHRcdFx0XHR2Q29sb3IgPSB1Q29sb3JzWzE0XTtcblx0XHRcdCNlbmRpZlxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZDb2xvciA9IHVDb2xvcnNbTlVNX1NFR01FTlRTLTFdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0YCxcblx0ZnJhZzpcblx0XHRgXG5cdFx0cHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXHRcdHVuaWZvcm0gZmxvYXQgdU9wYWNpdHk7XG5cdFx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHZDb2xvci5yZ2IsIHZDb2xvci5hICogdU9wYWNpdHkpO1xuXHRcdH1cblx0XHRgXG59O1xuXG5jb25zdCBjcmVhdGVTZWdtZW50ZWRSaW5nID0gZnVuY3Rpb24oZ2wsIG51bVNlZ21lbnRzLCByYWRpdXMsIHJpbmdXaWR0aCkge1xuXHRjb25zdCB0aGV0YSA9ICgyICogTWF0aC5QSSkgLyBudW1TZWdtZW50cztcblx0Ly8gcHJlLWNhbGN1bGF0ZSBzaW5lIGFuZCBjb3NpbmVcblx0Y29uc3QgYyA9IE1hdGguY29zKHRoZXRhKTtcblx0Y29uc3QgcyA9IE1hdGguc2luKHRoZXRhKTtcblx0Ly8gc3RhcnQgYXQgYW5nbGUgPSAwXG5cdGxldCB4MCA9IDA7XG5cdGxldCB5MCA9IHJhZGl1cyAtIChyaW5nV2lkdGggLyAyKTtcblx0bGV0IHgxID0gMDtcblx0bGV0IHkxID0gcmFkaXVzICsgKHJpbmdXaWR0aCAvIDIpO1xuXHRjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoKG51bVNlZ21lbnRzICsgMSkgKiAoMyArIDMpKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPD0gbnVtU2VnbWVudHM7IGkrKykge1xuXHRcdHZlcnRpY2VzW2kqNl0gPSB4MDtcblx0XHR2ZXJ0aWNlc1tpKjYrMV0gPSB5MDtcblx0XHR2ZXJ0aWNlc1tpKjYrMl0gPSBpIC8gKG51bVNlZ21lbnRzICsgMSk7IC8vIGFyYyBwZXJjZW50XG5cdFx0dmVydGljZXNbaSo2KzNdID0geDE7XG5cdFx0dmVydGljZXNbaSo2KzRdID0geTE7XG5cdFx0dmVydGljZXNbaSo2KzVdID0gaSAvIChudW1TZWdtZW50cyArIDEpOyAvLyBhcmMgcGVyY2VudFxuXHRcdC8vIGFwcGx5IHRoZSByb3RhdGlvblxuXHRcdGxldCB0ID0geDA7XG5cdFx0eDAgPSBjICogeDAgLSBzICogeTA7XG5cdFx0eTAgPSBzICogdCArIGMgKiB5MDtcblx0XHR0ID0geDE7XG5cdFx0eDEgPSBjICogeDEgLSBzICogeTE7XG5cdFx0eTEgPSBzICogdCArIGMgKiB5MTtcblx0fVxuXHRyZXR1cm4gbmV3IGx1bW8uVmVydGV4QnVmZmVyKFxuXHRcdGdsLFxuXHRcdHZlcnRpY2VzLFxuXHRcdHtcblx0XHRcdC8vIHgsIHksIHBlcmNlbnRcblx0XHRcdDA6IHtcblx0XHRcdFx0c2l6ZTogMyxcblx0XHRcdFx0dHlwZTogJ0ZMT0FUJ1xuXHRcdFx0fVxuXHRcdH0sIHtcblx0XHRcdG1vZGU6ICdUUklBTkdMRV9TVFJJUCcsXG5cdFx0XHRjb3VudDogdmVydGljZXMubGVuZ3RoIC8gM1xuXHRcdH0pO1xufTtcblxuY2xhc3MgU2VnbWVudGVkUmluZyB7XG5cdGNvbnN0cnVjdG9yKHJlbmRlcmVyLCB3aWR0aCwgbnVtU2VnbWVudHMpIHtcblx0XHR0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cdFx0dGhpcy5yaW5nID0gY3JlYXRlU2VnbWVudGVkUmluZyhcblx0XHRcdHJlbmRlcmVyLmdsLFxuXHRcdFx0TlVNX1NMSUNFUyxcblx0XHRcdFJBRElVU19PRkZTRVQsXG5cdFx0XHR3aWR0aCk7XG5cdFx0dGhpcy5zaGFkZXJzID0ge1xuXHRcdFx0aW5zdGFuY2VkOiByZW5kZXJlci5jcmVhdGVTaGFkZXIoe1xuXHRcdFx0XHRkZWZpbmU6IHtcblx0XHRcdFx0XHROVU1fU0VHTUVOVFM6IG51bVNlZ21lbnRzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHZlcnQ6IElOU1RBTkNFRF9TSEFERVIudmVydCxcblx0XHRcdFx0ZnJhZzogSU5TVEFOQ0VEX1NIQURFUi5mcmFnXG5cdFx0XHR9KSxcblx0XHRcdGluZGl2aWR1YWw6IHJlbmRlcmVyLmNyZWF0ZVNoYWRlcih7XG5cdFx0XHRcdGRlZmluZToge1xuXHRcdFx0XHRcdE5VTV9TRUdNRU5UUzogbnVtU2VnbWVudHNcblx0XHRcdFx0fSxcblx0XHRcdFx0dmVydDogSU5ESVZJRFVBTF9TSEFERVIudmVydCxcblx0XHRcdFx0ZnJhZzogSU5ESVZJRFVBTF9TSEFERVIuZnJhZ1xuXHRcdFx0fSlcblx0XHR9O1xuXHR9XG5cdGRyYXdJbnN0YW5jZWQoYXRsYXMsIGNvbG9ycywgb3BhY2l0eSA9IDEpIHtcblxuXHRcdGNvbnN0IHNoYWRlciA9IHRoaXMuc2hhZGVycy5pbnN0YW5jZWQ7XG5cdFx0Y29uc3QgcmluZyA9IHRoaXMucmluZztcblx0XHRjb25zdCBwcm9qZWN0aW9uID0gdGhpcy5yZW5kZXJlci5nZXRPcnRob01hdHJpeCgpO1xuXHRcdGNvbnN0IHJlbmRlcmFibGVzID0gdGhpcy5yZW5kZXJlci5nZXRSZW5kZXJhYmxlcygpO1xuXG5cdFx0Ly8gdXNlIHNoYWRlclxuXHRcdHNoYWRlci51c2UoKTtcblxuXHRcdC8vIHNldCB1bmlmb3Jtc1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UHJvamVjdGlvbk1hdHJpeCcsIHByb2plY3Rpb24pO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UmFkaXVzT2Zmc2V0JywgUkFESVVTX09GRlNFVCk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VPcGFjaXR5Jywgb3BhY2l0eSk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VDb2xvcnMnLCBjb2xvcnMpO1xuXG5cdFx0Ly8gYmluZCB0aGUgcmluZyBidWZmZXJcblx0XHRyaW5nLmJpbmQoKTtcblxuXHRcdC8vIGJpbmRzIGluc3RhbmNlIG9mZnNldCBidWZmZXJcblx0XHRhdGxhcy5iaW5kSW5zdGFuY2VkKCk7XG5cblx0XHRyZW5kZXJhYmxlcy5mb3JFYWNoKHJlbmRlcmFibGUgPT4ge1xuXHRcdFx0Ly8gc2V0IHRpbGUgdW5pZm9ybXNcblx0XHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1U2NhbGUnLCByZW5kZXJhYmxlLnNjYWxlKTtcblx0XHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHJlbmRlcmFibGUudGlsZU9mZnNldCk7XG5cdFx0XHQvLyBkcmF3IHRoZSBpbnN0YW5jZXNcblx0XHRcdGF0bGFzLmRyYXdJbnN0YW5jZWQocmVuZGVyYWJsZS5oYXNoLCByaW5nLm1vZGUsIHJpbmcuY291bnQpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gdW5iaW5kIGluc3RhbmNlIG9mZnNldCBidWZmZXJcblx0XHRhdGxhcy51bmJpbmRJbnN0YW5jZWQoKTtcblxuXHRcdC8vIHVuYmluZCB0aGUgcmluZyBidWZmZXJcblx0XHRyaW5nLnVuYmluZCgpO1xuXHR9XG5cdGRyYXdJbmRpdmlkdWFsKHRhcmdldCwgY29sb3JzLCBvcGFjaXR5ID0gMSkge1xuXG5cdFx0Y29uc3Qgc2hhZGVyID0gdGhpcy5zaGFkZXJzLmluZGl2aWR1YWw7XG5cdFx0Y29uc3QgcmluZyA9IHRoaXMucmluZztcblx0XHRjb25zdCBwbG90ID0gdGhpcy5yZW5kZXJlci5sYXllci5wbG90O1xuXHRcdGNvbnN0IHByb2plY3Rpb24gPSB0aGlzLnJlbmRlcmVyLmdldE9ydGhvTWF0cml4KCk7XG5cblx0XHQvLyBnZXQgdGlsZSBvZmZzZXRcblx0XHRjb25zdCBjb29yZCA9IHRhcmdldC50aWxlLmNvb3JkO1xuXHRcdGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMiwgcGxvdC56b29tIC0gY29vcmQueik7XG5cdFx0Y29uc3QgdGlsZU9mZnNldCA9IFtcblx0XHRcdChjb29yZC54ICogc2NhbGUgKiBwbG90LnRpbGVTaXplKSArIChzY2FsZSAqIHRhcmdldC54KSAtIHBsb3Qudmlld3BvcnQueCxcblx0XHRcdChjb29yZC55ICogc2NhbGUgKiBwbG90LnRpbGVTaXplKSArIChzY2FsZSAqIHRhcmdldC55KSAtIHBsb3Qudmlld3BvcnQueVxuXHRcdF07XG5cblx0XHQvLyB1c2Ugc2hhZGVyXG5cdFx0c2hhZGVyLnVzZSgpO1xuXG5cdFx0Ly8gc2V0IHVuaWZvcm1zXG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VQcm9qZWN0aW9uTWF0cml4JywgcHJvamVjdGlvbik7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VDb2xvcnMnLCBjb2xvcnMpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UGVyY2VudGFnZXMnLCB0YXJnZXQucGVyY2VudGFnZXMpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1T3BhY2l0eScsIG9wYWNpdHkpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1UmFkaXVzJywgdGFyZ2V0LnJhZGl1cyk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VSYWRpdXNPZmZzZXQnLCBSQURJVVNfT0ZGU0VUKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVNjYWxlJywgc2NhbGUpO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHRpbGVPZmZzZXQpO1xuXG5cdFx0Ly8gYmluZCB0aGUgcmluZyBidWZmZXJcblx0XHRyaW5nLmJpbmQoKTtcblx0XHQvLyBkcmF3IHJpbmdcblx0XHRyaW5nLmRyYXcoKTtcblx0XHQvLyB1bmJpbmQgdGhlIHJpbmcgYnVmZmVyXG5cdFx0cmluZy51bmJpbmQoKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlZ21lbnRlZFJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNsYW1wID0gcmVxdWlyZSgnbG9kYXNoL2NsYW1wJyk7XG5cbmNvbnN0IFNJR01PSURfU0NBTEUgPSAwLjE1O1xuXG4vLyBsb2cxMFxuXG5mdW5jdGlvbiBsb2cxMFRyYW5zZm9ybSh2YWwsIG1pbiwgbWF4KSB7XG5cdGNvbnN0IGxvZ01pbiA9IE1hdGgubG9nMTAobWluIHx8IDEpO1xuXHRjb25zdCBsb2dNYXggPSBNYXRoLmxvZzEwKG1heCB8fCAxKTtcblx0Y29uc3QgbG9nVmFsID0gTWF0aC5sb2cxMCh2YWwgfHwgMSk7XG5cdHJldHVybiAobG9nVmFsIC0gbG9nTWluKSAvICgobG9nTWF4IC0gbG9nTWluKSB8fCAxKTtcbn1cblxuZnVuY3Rpb24gaW52ZXJzZUxvZzEwVHJhbnNmb3JtKG52YWwsIG1pbiwgbWF4KSB7XG5cdGNvbnN0IGxvZ01pbiA9IE1hdGgubG9nMTAobWluIHx8IDEpO1xuXHRjb25zdCBsb2dNYXggPSBNYXRoLmxvZzEwKG1heCB8fCAxKTtcblx0cmV0dXJuIE1hdGgucG93KDEwLCAobnZhbCAqIGxvZ01heCAtIG52YWwgKiBsb2dNaW4pICsgbG9nTWluKTtcbn1cblxuLy8gc2lnbW9pZFxuXG5mdW5jdGlvbiBzaWdtb2lkVHJhbnNmb3JtKHZhbCwgbWluLCBtYXgpIHtcblx0Y29uc3QgYWJzTWluID0gTWF0aC5hYnMobWluKTtcblx0Y29uc3QgYWJzTWF4ID0gTWF0aC5hYnMobWF4KTtcblx0Y29uc3QgZGlzdGFuY2UgPSBNYXRoLm1heChhYnNNaW4sIGFic01heCk7XG5cdGNvbnN0IHNjYWxlZFZhbCA9IHZhbCAvIChTSUdNT0lEX1NDQUxFICogZGlzdGFuY2UpO1xuXHRyZXR1cm4gMSAvICgxICsgTWF0aC5leHAoLXNjYWxlZFZhbCkpO1xufVxuXG5mdW5jdGlvbiBpbnZlcnNlU2lnbW9pZFRyYW5zZm9ybShudmFsLCBtaW4sIG1heCkge1xuXHRjb25zdCBhYnNNaW4gPSBNYXRoLmFicyhtaW4pO1xuXHRjb25zdCBhYnNNYXggPSBNYXRoLmFicyhtYXgpO1xuXHRjb25zdCBkaXN0YW5jZSA9IE1hdGgubWF4KGFic01pbiwgYWJzTWF4KTtcblx0aWYgKG52YWwgPT09IDApIHtcblx0XHRyZXR1cm4gLWRpc3RhbmNlO1xuXHR9XG5cdGlmIChudmFsID09PSAxKSB7XG5cdFx0cmV0dXJuIGRpc3RhbmNlO1xuXHR9XG5cdHJldHVybiBNYXRoLmxvZygoMS9udmFsKSAtIDEpICogLShTSUdNT0lEX1NDQUxFICogZGlzdGFuY2UpO1xufVxuXG4vLyBsaW5lYXJcblxuZnVuY3Rpb24gbGluZWFyVHJhbnNmb3JtKHZhbCwgbWluLCBtYXgpIHtcblx0Y29uc3QgcmFuZ2UgPSBtYXggLSBtaW47XG5cdGlmIChyYW5nZSA9PT0gMCkge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cdHJldHVybiAodmFsIC0gbWluKSAvIHJhbmdlO1xufVxuXG5mdW5jdGlvbiBpbnZlcnNlTGluZWFyVHJhbnNmb3JtKG52YWwsIG1pbiwgbWF4KSB7XG5cdGNvbnN0IHJhbmdlID0gbWF4IC0gbWluO1xuXHRpZiAocmFuZ2UgPT09IDApIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXHRyZXR1cm4gbWluICsgbnZhbCAqIHJhbmdlO1xufVxuXG5jb25zdCBUcmFuc2Zvcm0gPSB7XG5cdGxpbmVhcjogbGluZWFyVHJhbnNmb3JtLFxuXHRsb2cxMDogbG9nMTBUcmFuc2Zvcm0sXG5cdHNpZ21vaWQ6IHNpZ21vaWRUcmFuc2Zvcm1cbn07XG5cbmNvbnN0IEludmVyc2UgPSB7XG5cdGxpbmVhcjogaW52ZXJzZUxpbmVhclRyYW5zZm9ybSxcblx0bG9nMTA6IGludmVyc2VMb2cxMFRyYW5zZm9ybSxcblx0c2lnbW9pZDogaW52ZXJzZVNpZ21vaWRUcmFuc2Zvcm1cbn07XG5cbmNvbnN0IGludGVycG9sYXRlID0gZnVuY3Rpb24obnZhbCwgcmFuZ2UpIHtcblx0Ly8gaW50ZXJwb2xhdGUgYmV0d2VlbiB0aGUgZmlsdGVyIHJhbmdlXG5cdGNvbnN0IHJNaW4gPSByYW5nZS5taW47XG5cdGNvbnN0IHJNYXggPSByYW5nZS5tYXg7XG5cdGNvbnN0IHJ2YWwgPSAobnZhbCAtIHJNaW4pIC8gKHJNYXggLSByTWluKTtcblx0Ly8gZW5zdXJlIG91dHB1dCBpcyBbMDoxXVxuXHRyZXR1cm4gY2xhbXAocnZhbCwgMCwgMSk7XG59O1xuXG5jb25zdCB0cmFuc2Zvcm0gPSBmdW5jdGlvbih2YWwsIHR5cGUsIGV4dHJlbWEpIHtcblx0Ly8gY2xhbXAgdGhlIHZhbHVlIGJldHdlZW4gdGhlIGV4dHJlbWUgKHNob3VsZG4ndCBiZSBuZWNlc3NhcnkpXG5cdGNvbnN0IG1pbiA9IGV4dHJlbWEubWluO1xuXHRjb25zdCBtYXggPSBleHRyZW1hLm1heDtcblx0Y29uc3QgY2xhbXBlZCA9IGNsYW1wKHZhbCwgbWluLCBtYXgpO1xuXHQvLyBub3JtYWxpemUgdGhlIHZhbHVlXG5cdGlmIChtaW4gIT09IG1heCkge1xuXHRcdHJldHVybiBUcmFuc2Zvcm1bdHlwZV0oY2xhbXBlZCwgbWluLCBtYXgpO1xuXHR9XG5cdC8vIGlmIG1pbiA9PT0gbWF4LCBhbHdheXMgcmV0dXJuIDFcblx0cmV0dXJuIDE7XG59O1xuXG5jb25zdCB1bnRyYW5zZm9ybSA9IGZ1bmN0aW9uKG52YWwsIHR5cGUsIGV4dHJlbWEpIHtcblx0Y29uc3QgbWluID0gZXh0cmVtYS5taW47XG5cdGNvbnN0IG1heCA9IGV4dHJlbWEubWF4O1xuXHQvLyBjbGFtcCB0aGUgdmFsdWUgYmV0d2VlbiB0aGUgZXh0cmVtZSAoc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSlcblx0Y29uc3QgY2xhbXBlZCA9IGNsYW1wKG52YWwsIG1pbiwgbWF4KTtcblx0Ly8gdW5ub3JtYWxpemUgdGhlIHZhbHVlXG5cdGlmIChtaW4gIT09IG1heCkge1xuXHRcdHJldHVybiBJbnZlcnNlW3R5cGVdKGNsYW1wZWQsIG1pbiwgbWF4KTtcblx0fVxuXHQvLyBpZiBtaW4gPT09IG1heCwgYWx3YXlzIHJldHVybiAxXG5cdHJldHVybiAxO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuXHR1bnRyYW5zZm9ybTogdW50cmFuc2Zvcm0sXG5cdGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ2V0ID0gcmVxdWlyZSgnbG9kYXNoL2dldCcpO1xuY29uc3QgZGVmYXVsdFRvID0gcmVxdWlyZSgnbG9kYXNoL2RlZmF1bHRUbycpO1xuY29uc3QgbHVtbyA9IHJlcXVpcmUoJ2x1bW8nKTtcbmNvbnN0IFJpbmcgPSByZXF1aXJlKCcuLi9zaGFwZS9SaW5nJyk7XG5cbmNsYXNzIENvbW11bml0eSBleHRlbmRzIGx1bW8uV2ViR0xJbnRlcmFjdGl2ZVJlbmRlcmVyIHtcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0XHR0aGlzLmF0bGFzID0gbnVsbDtcblx0XHR0aGlzLnJpbmdGaWxsID0gbnVsbDtcblx0XHR0aGlzLnJpbmdPdXRsaW5lID0gbnVsbDtcblx0XHR0aGlzLmNvbG9yID0gZGVmYXVsdFRvKG9wdGlvbnMuY29sb3IsIFsgMS4wLCAxLjAsIDEuMCwgMS4wIF0pO1xuXHRcdHRoaXMub3V0bGluZUNvbG9yID0gZGVmYXVsdFRvKG9wdGlvbnMub3V0bGluZUNvbG9yLCBbIDAuMCwgMC4wLCAwLjAsIDEuMCBdKTtcblx0XHR0aGlzLmhpZ2hsaWdodGVkQ29sb3IgPSBkZWZhdWx0VG8ob3B0aW9ucy5oaWdobGlnaHRlZENvbG9yLCBbIDEuMCwgMC41LCAxLjAsIDEuMCBdKTtcblx0XHR0aGlzLnNlbGVjdGVkQ29sb3IgPSBkZWZhdWx0VG8ob3B0aW9ucy5zZWxlY3RlZENvbG9yLCBbIDEuMCwgMC41LCAxLjAsIDEuMCBdKTtcblx0XHR0aGlzLnJpbmdXaWR0aCA9IGRlZmF1bHRUbyhvcHRpb25zLnJpbmdXaWR0aCwgMik7XG5cdFx0dGhpcy5yaW5nT2Zmc2V0ID0gZGVmYXVsdFRvKG9wdGlvbnMucmluZ09mZnNldCwgMCk7XG5cdFx0dGhpcy5vdXRsaW5lV2lkdGggPSBkZWZhdWx0VG8ob3B0aW9ucy5vdXRsaW5lV2lkdGgsIDEpO1xuXHRcdHRoaXMucmFkaXVzRmllbGQgPSBkZWZhdWx0VG8ob3B0aW9ucy5yYWRpdXNGaWVsZCwgJ3JhZGl1cycpO1xuXHR9XG5cblx0b25BZGQobGF5ZXIpIHtcblx0XHRzdXBlci5vbkFkZChsYXllcik7XG5cdFx0Ly8gcmluZyBmaWxsXG5cdFx0dGhpcy5yaW5nRmlsbCA9IG5ldyBSaW5nKHRoaXMsIHRoaXMucmluZ1dpZHRoKTtcblx0XHQvLyByaW5nIG91dGxpbmVcblx0XHR0aGlzLnJpbmdPdXRsaW5lID0gbmV3IFJpbmcodGhpcywgdGhpcy5yaW5nV2lkdGggKyAodGhpcy5vdXRsaW5lV2lkdGggKiAyKSk7XG5cdFx0Ly8gb2Zmc2V0IGF0bGFzXG5cdFx0dGhpcy5hdGxhcyA9IHRoaXMuY3JlYXRlVmVydGV4QXRsYXMoe1xuXHRcdFx0Ly8gb2Zmc2V0XG5cdFx0XHQxOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCdcblx0XHRcdH0sXG5cdFx0XHQvLyByYWRpdXNcblx0XHRcdDI6IHtcblx0XHRcdFx0c2l6ZTogMSxcblx0XHRcdFx0dHlwZTogJ0ZMT0FUJ1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0b25SZW1vdmUobGF5ZXIpIHtcblx0XHR0aGlzLmRlc3Ryb3lWZXJ0ZXhBdGxhcyh0aGlzLmF0bGFzKTtcblx0XHR0aGlzLmF0bGFzID0gbnVsbDtcblx0XHR0aGlzLnJpbmdGaWxsID0gbnVsbDtcblx0XHR0aGlzLnJpbmdPdXRsaW5lID0gbnVsbDtcblx0XHRzdXBlci5vblJlbW92ZShsYXllcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRhZGRUaWxlKGF0bGFzLCB0aWxlKSB7XG5cdFx0Y29uc3QgY29vcmQgPSB0aWxlLmNvb3JkO1xuXHRcdGNvbnN0IGRhdGEgPSB0aWxlLmRhdGE7XG5cdFx0Y29uc3QgaGl0cyA9IGRhdGEuaGl0cztcblx0XHRjb25zdCBwb3NpdGlvbnMgPSBkYXRhLnBvaW50cztcblxuXHRcdGNvbnN0IHRpbGVTaXplID0gdGhpcy5sYXllci5wbG90LnRpbGVTaXplO1xuXHRcdGNvbnN0IHhPZmZzZXQgPSBjb29yZC54ICogdGlsZVNpemU7XG5cdFx0Y29uc3QgeU9mZnNldCA9IGNvb3JkLnkgKiB0aWxlU2l6ZTtcblx0XHRjb25zdCByYWRpdXNGaWVsZCA9IHRoaXMucmFkaXVzRmllbGQ7XG5cblx0XHRjb25zdCByYWRpdXNTY2FsZSA9IE1hdGgucG93KDIsIGNvb3JkLnopO1xuXHRcdGNvbnN0IHJpbmdPZmZzZXQgPSB0aGlzLnJpbmdPZmZzZXQ7XG5cdFx0Y29uc3QgdG90YWxPZmZzZXQgPVxuXHRcdFx0KHRoaXMucmluZ1dpZHRoIC8gMikgKyAvLyB3aWR0aFxuXHRcdFx0dGhpcy5vdXRsaW5lV2lkdGggKyAvLyBvdXRsaW5lXG5cdFx0XHR0aGlzLnJpbmdPZmZzZXQ7IC8vIG9mZnNldFxuXG5cdFx0Y29uc3QgcG9pbnRzID0gbmV3IEFycmF5KHBvc2l0aW9ucy5sZW5ndGggLyAyKTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoKHBvc2l0aW9ucy5sZW5ndGggLyAyKSAqIDMpO1xuXG5cdFx0Zm9yIChsZXQgaT0wOyBpPHBvc2l0aW9ucy5sZW5ndGgvMjsgaSsrKSB7XG5cblx0XHRcdGNvbnN0IGhpdCA9IGhpdHNbaV07XG5cdFx0XHRjb25zdCB4ID0gcG9zaXRpb25zW2kqMl07XG5cdFx0XHRjb25zdCB5ID0gcG9zaXRpb25zW2kqMisxXTtcblx0XHRcdGNvbnN0IHJhZGl1cyA9IGdldChoaXQsIHJhZGl1c0ZpZWxkKSAqIHJhZGl1c1NjYWxlICsgcmluZ09mZnNldDtcblxuXHRcdFx0Ly8gcGxvdCBwaXhlbCBjb29yZHNcblx0XHRcdGNvbnN0IHB4ID0geCArIHhPZmZzZXQ7XG5cdFx0XHRjb25zdCBweSA9IHkgKyB5T2Zmc2V0O1xuXG5cdFx0XHRwb2ludHNbaV0gPSB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHksXG5cdFx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0XHRtaW5YOiBweCAtIChyYWRpdXMgKyB0b3RhbE9mZnNldCksXG5cdFx0XHRcdG1heFg6IHB4ICsgKHJhZGl1cyArIHRvdGFsT2Zmc2V0KSxcblx0XHRcdFx0bWluWTogcHkgLSAocmFkaXVzICsgdG90YWxPZmZzZXQpLFxuXHRcdFx0XHRtYXhZOiBweSArIChyYWRpdXMgKyB0b3RhbE9mZnNldCksXG5cdFx0XHRcdHRpbGU6IHRpbGUsXG5cdFx0XHRcdGRhdGE6IGhpdFxuXHRcdFx0fTtcblxuXHRcdFx0dmVydGljZXNbaSozXSA9IHg7XG5cdFx0XHR2ZXJ0aWNlc1tpKjMrMV0gPSB5O1xuXHRcdFx0dmVydGljZXNbaSozKzJdID0gcmFkaXVzO1xuXHRcdH1cblxuXHRcdHRoaXMuYWRkUG9pbnRzKGNvb3JkLCBwb2ludHMpO1xuXHRcdGF0bGFzLnNldChjb29yZC5oYXNoLCB2ZXJ0aWNlcywgcG9pbnRzLmxlbmd0aCk7XG5cdH1cblxuXHRyZW1vdmVUaWxlKGF0bGFzLCB0aWxlKSB7XG5cdFx0Y29uc3QgY29vcmQgPSB0aWxlLmNvb3JkO1xuXHRcdGF0bGFzLmRlbGV0ZShjb29yZC5oYXNoKTtcblx0XHR0aGlzLnJlbW92ZVBvaW50cyhjb29yZCk7XG5cdH1cblxuXHRkcmF3KCkge1xuXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdGNvbnN0IG9wYWNpdHkgPSB0aGlzLmxheWVyLm9wYWNpdHk7XG5cblx0XHQvLyBzZXQgYmxlbmRpbmcgZnVuY1xuXHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0Z2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cblx0XHQvLyBkcmF3IG91dGxpbmVcblx0XHR0aGlzLnJpbmdPdXRsaW5lLmRyYXdJbnN0YW5jZWQoXG5cdFx0XHR0aGlzLmF0bGFzLFxuXHRcdFx0dGhpcy5vdXRsaW5lQ29sb3IsXG5cdFx0XHRvcGFjaXR5KTtcblxuXHRcdC8vIGRyYXcgZmlsbFxuXHRcdHRoaXMucmluZ0ZpbGwuZHJhd0luc3RhbmNlZChcblx0XHRcdHRoaXMuYXRsYXMsXG5cdFx0XHR0aGlzLmNvbG9yLFxuXHRcdFx0b3BhY2l0eSk7XG5cblx0XHQvLyByZW5kZXIgc2VsZWN0ZWRcblx0XHR0aGlzLnNlbGVjdGVkLmZvckVhY2goc2VsZWN0ZWQgPT4ge1xuXHRcdFx0dGhpcy5yaW5nRmlsbC5kcmF3SW5kaXZpZHVhbChcblx0XHRcdFx0c2VsZWN0ZWQsXG5cdFx0XHRcdHRoaXMuc2VsZWN0ZWRDb2xvcixcblx0XHRcdFx0b3BhY2l0eSk7XG5cdFx0fSk7XG5cblx0XHQvLyByZW5kZXIgaGlnaGxpZ2h0ZWRcblx0XHRpZiAodGhpcy5oaWdobGlnaHRlZCAmJlxuXHRcdFx0dGhpcy5zZWxlY3RlZC5pbmRleE9mKHRoaXMuaGlnaGxpZ2h0ZWQpID09PSAtMSkge1xuXHRcdFx0dGhpcy5yaW5nRmlsbC5kcmF3SW5kaXZpZHVhbChcblx0XHRcdFx0dGhpcy5oaWdobGlnaHRlZCxcblx0XHRcdFx0dGhpcy5oaWdobGlnaHRlZENvbG9yLFxuXHRcdFx0XHRvcGFjaXR5KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbXVuaXR5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBnZXQgPSByZXF1aXJlKCdsb2Rhc2gvZ2V0Jyk7XG5jb25zdCBmbGF0dGVuID0gcmVxdWlyZSgnbG9kYXNoL2ZsYXR0ZW4nKTtcbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IGx1bW8gPSByZXF1aXJlKCdsdW1vJyk7XG5jb25zdCBSaW5nID0gcmVxdWlyZSgnLi4vc2hhcGUvUmluZycpO1xuY29uc3QgQ29sb3JSYW1wID0gcmVxdWlyZSgnLi4vY29sb3IvQ29sb3JSYW1wJyk7XG5jb25zdCBSYWRpYWxRdWFkID0gcmVxdWlyZSgnLi4vc2hhcGUvUmFkaWFsUXVhZCcpO1xuY29uc3QgU2VnbWVudGVkUmluZyA9IHJlcXVpcmUoJy4uL3NoYXBlL1NlZ21lbnRlZFJpbmcnKTtcblxuY2xhc3MgQ29tbXVuaXR5QnVja2V0IGV4dGVuZHMgbHVtby5XZWJHTEludGVyYWN0aXZlUmVuZGVyZXIge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHRcdHRoaXMucmluZ0ZpbGwgPSBudWxsO1xuXHRcdHRoaXMucmluZ091dGxpbmUgPSBudWxsO1xuXHRcdHRoaXMucXVhZCA9IG51bGw7XG5cdFx0dGhpcy5hdGxhcyA9IG51bGw7XG5cdFx0dGhpcy5vdXRsaW5lV2lkdGggPSBkZWZhdWx0VG8ob3B0aW9ucy5vdXRsaW5lV2lkdGgsIDEpO1xuXHRcdHRoaXMub3V0bGluZUNvbG9yID0gZGVmYXVsdFRvKG9wdGlvbnMub3V0bGluZUNvbG9yLCBbMC4wLCAwLjAsIDAuMCwgMS4wXSk7XG5cdFx0dGhpcy5yaW5nV2lkdGggPSBkZWZhdWx0VG8ob3B0aW9ucy5yaW5nV2lkdGgsIDMpO1xuXHRcdHRoaXMucmluZ09mZnNldCA9IGRlZmF1bHRUbyhvcHRpb25zLnJpbmdPZmZzZXQsIDApO1xuXHRcdHRoaXMudGlja1dpZHRoID0gZGVmYXVsdFRvKG9wdGlvbnMudGlja1dpZHRoLCAyKTtcblx0XHR0aGlzLnRpY2tIZWlnaHQgPSBkZWZhdWx0VG8ob3B0aW9ucy50aWNrSGVpZ2h0LCA4KTtcblx0XHR0aGlzLnJhZGl1c0ZpZWxkID0gZGVmYXVsdFRvKG9wdGlvbnMucmFkaXVzRmllbGQsICdyYWRpdXMnKTtcblx0XHR0aGlzLm51bUJ1Y2tldHMgPSBkZWZhdWx0VG8ob3B0aW9ucy5udW1CdWNrZXRzLCA0KTtcblx0XHR0aGlzLmJ1Y2tldHNGaWVsZCA9IGRlZmF1bHRUbyhvcHRpb25zLmJ1Y2tldHNGaWVsZCwgJ2J1Y2tldHMnKTtcblx0XHR0aGlzLmNvbG9yUmFtcCA9IGRlZmF1bHRUbyhvcHRpb25zLmNvbG9yUmFtcCwgJ3ZlcmRhbnQnKTtcblx0XHRjb25zdCBidWNrZXRzID0gQ29sb3JSYW1wLmdldEJ1Y2tldHModGhpcy5jb2xvclJhbXAsIHRoaXMubnVtQnVja2V0cyArIDIpO1xuXHRcdHRoaXMuY29sb3JzID0gZmxhdHRlbihidWNrZXRzLnNsaWNlKDAsIHRoaXMubnVtQnVja2V0cykpO1xuXHRcdHRoaXMuaGlnaGxpZ2h0ZWRDb2xvcnMgPSBmbGF0dGVuKGJ1Y2tldHMuc2xpY2UoMSwgdGhpcy5udW1CdWNrZXRzKzEpKTtcblx0XHR0aGlzLnNlbGVjdGVkQ29sb3JzID0gZmxhdHRlbihidWNrZXRzLnNsaWNlKDIsIHRoaXMubnVtQnVja2V0cysyKSk7XG5cdH1cblxuXHRvbkFkZChsYXllcikge1xuXHRcdHN1cGVyLm9uQWRkKGxheWVyKTtcblx0XHRjb25zdCBmdWxsV2lkdGggPSB0aGlzLnJpbmdXaWR0aCArICh0aGlzLm91dGxpbmVXaWR0aCAqIDIpO1xuXHRcdHRoaXMucmluZ0ZpbGwgPSBuZXcgU2VnbWVudGVkUmluZyh0aGlzLCB0aGlzLnJpbmdXaWR0aCwgdGhpcy5udW1CdWNrZXRzKTtcblx0XHR0aGlzLnJpbmdPdXRsaW5lID0gbmV3IFJpbmcodGhpcywgZnVsbFdpZHRoKTtcblx0XHR0aGlzLnF1YWQgPSBuZXcgUmFkaWFsUXVhZChcblx0XHRcdHRoaXMsXG5cdFx0XHQtdGhpcy50aWNrV2lkdGgvMixcblx0XHRcdHRoaXMudGlja1dpZHRoLzIsXG5cdFx0XHQtZnVsbFdpZHRoLzIsXG5cdFx0XHR0aGlzLnRpY2tIZWlnaHQpO1xuXHRcdC8vIHZlcnRleCBhdGxhcyBmb3IgYWxsIHRpbGVzXG5cdFx0dGhpcy5hdGxhcyA9IHRoaXMuY3JlYXRlVmVydGV4QXRsYXMoe1xuXHRcdFx0Ly8gb2Zmc2V0XG5cdFx0XHQxOiB7XG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdHNpemU6IDJcblx0XHRcdH0sXG5cdFx0XHQvLyByYWRpdXNcblx0XHRcdDI6IHtcblx0XHRcdFx0dHlwZTogJ0ZMT0FUJyxcblx0XHRcdFx0c2l6ZTogMVxuXHRcdFx0fSxcblx0XHRcdC8vIHBlcmNlbnRhZ2VzXG5cdFx0XHQzOiB7XG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdHNpemU6IDRcblx0XHRcdH0sXG5cdFx0XHQ0OiB7XG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdHNpemU6IDRcblx0XHRcdH0sXG5cdFx0XHQ1OiB7XG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdHNpemU6IDRcblx0XHRcdH0sXG5cdFx0XHQ2OiB7XG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdHNpemU6IDRcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG9uUmVtb3ZlKGxheWVyKSB7XG5cdFx0dGhpcy5kZXN0cm95VmVydGV4QXRsYXModGhpcy5hdGxhcyk7XG5cdFx0dGhpcy5yaW5nRmlsbCA9IG51bGw7XG5cdFx0dGhpcy5yaW5nT3V0bGluZSA9IG51bGw7XG5cdFx0dGhpcy5xdWFkID0gbnVsbDtcblx0XHR0aGlzLmF0bGFzID0gbnVsbDtcblx0XHRzdXBlci5vblJlbW92ZShsYXllcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRhZGRUaWxlKGF0bGFzLCB0aWxlKSB7XG5cdFx0Y29uc3QgY29vcmQgPSB0aWxlLmNvb3JkO1xuXHRcdGNvbnN0IGRhdGEgPSB0aWxlLmRhdGE7XG5cdFx0Y29uc3QgaGl0cyA9IGRhdGEuaGl0cztcblx0XHRjb25zdCBwb3NpdGlvbnMgPSBkYXRhLnBvaW50cztcblxuXHRcdGNvbnN0IHRpbGVTaXplID0gdGhpcy5sYXllci5wbG90LnRpbGVTaXplO1xuXHRcdGNvbnN0IHhPZmZzZXQgPSBjb29yZC54ICogdGlsZVNpemU7XG5cdFx0Y29uc3QgeU9mZnNldCA9IGNvb3JkLnkgKiB0aWxlU2l6ZTtcblx0XHRjb25zdCByYWRpdXNGaWVsZCA9IHRoaXMucmFkaXVzRmllbGQ7XG5cdFx0Y29uc3QgYnVja2V0c0ZpZWxkID0gdGhpcy5idWNrZXRzRmllbGQ7XG5cblx0XHRjb25zdCByYWRpdXNTY2FsZSA9IE1hdGgucG93KDIsIGNvb3JkLnopO1xuXHRcdGNvbnN0IHJpbmdPZmZzZXQgPSB0aGlzLnJpbmdPZmZzZXQ7XG5cdFx0Y29uc3QgdG90YWxPZmZzZXQgPVxuXHRcdFx0KHRoaXMucmluZ1dpZHRoIC8gMikgKyAvLyB3aWR0aFxuXHRcdFx0dGhpcy5vdXRsaW5lV2lkdGggKyAvLyBvdXRsaW5lXG5cdFx0XHR0aGlzLnJpbmdPZmZzZXQ7IC8vIG9mZnNldFxuXG5cdFx0Y29uc3Qgc3RyaWRlID0gYXRsYXMuc3RyaWRlO1xuXHRcdGNvbnN0IHBvaW50cyA9IG5ldyBBcnJheShwb3NpdGlvbnMubGVuZ3RoIC8gMik7XG5cdFx0Y29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KChwb3NpdGlvbnMubGVuZ3RoIC8gMikgKiBzdHJpZGUpO1xuXG5cdFx0Zm9yIChsZXQgaT0wOyBpPHBvc2l0aW9ucy5sZW5ndGgvMjsgaSsrKSB7XG5cblx0XHRcdGNvbnN0IGhpdCA9IGhpdHNbaV07XG5cdFx0XHRjb25zdCB4ID0gcG9zaXRpb25zW2kqMl07XG5cdFx0XHRjb25zdCB5ID0gcG9zaXRpb25zW2kqMisxXTtcblx0XHRcdGNvbnN0IHJhZGl1cyA9IGdldChoaXQsIHJhZGl1c0ZpZWxkKSAqIHJhZGl1c1NjYWxlICsgcmluZ09mZnNldDtcblx0XHRcdGNvbnN0IGJ1Y2tldHMgPSBnZXQoaGl0LCBidWNrZXRzRmllbGQpO1xuXG5cdFx0XHQvLyBwbG90IHBpeGVsIGNvb3Jkc1xuXHRcdFx0Y29uc3QgcHggPSB4ICsgeE9mZnNldDtcblx0XHRcdGNvbnN0IHB5ID0geSArIHlPZmZzZXQ7XG5cblx0XHRcdC8vIHN1bSBidWNrZXRzXG5cdFx0XHRsZXQgc3VtID0gMDtcblx0XHRcdGZvciAobGV0IGo9MDsgajxidWNrZXRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHN1bSArPSBidWNrZXRzW2pdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBnZXQgY3VtdWxhdGl2ZSBwZXJjZW50YWdlc1xuXHRcdFx0Y29uc3QgcGVyY2VudGFnZXMgPSBbXG5cdFx0XHRcdDAsIDAsIDAsIDAsXG5cdFx0XHRcdDAsIDAsIDAsIDAsXG5cdFx0XHRcdDAsIDAsIDAsIDAsXG5cdFx0XHRcdDAsIDAsIDAsIDBcblx0XHRcdF07XG5cdFx0XHRsZXQgY3VycmVudCA9IDA7XG5cdFx0XHRmb3IgKGxldCBqPTA7IGo8YnVja2V0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwZXJjZW50YWdlc1tqXSA9IChjdXJyZW50ICsgYnVja2V0c1tqXSkgLyBzdW07XG5cdFx0XHRcdGN1cnJlbnQgKz0gYnVja2V0c1tqXTtcblx0XHRcdH1cblxuXHRcdFx0cG9pbnRzW2ldID0ge1xuXHRcdFx0XHR4OiB4LFxuXHRcdFx0XHR5OiB5LFxuXHRcdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdFx0bWluWDogcHggLSAocmFkaXVzICsgdG90YWxPZmZzZXQpLFxuXHRcdFx0XHRtYXhYOiBweCArIChyYWRpdXMgKyB0b3RhbE9mZnNldCksXG5cdFx0XHRcdG1pblk6IHB5IC0gKHJhZGl1cyArIHRvdGFsT2Zmc2V0KSxcblx0XHRcdFx0bWF4WTogcHkgKyAocmFkaXVzICsgdG90YWxPZmZzZXQpLFxuXHRcdFx0XHR0aWxlOiB0aWxlLFxuXHRcdFx0XHRkYXRhOiBoaXQsXG5cdFx0XHRcdGJ1Y2tldHM6IGJ1Y2tldHMsXG5cdFx0XHRcdHBlcmNlbnRhZ2VzOiBwZXJjZW50YWdlc1xuXHRcdFx0fTtcblxuXHRcdFx0dmVydGljZXNbaSpzdHJpZGVdID0geDtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzFdID0geTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzJdID0gcmFkaXVzO1xuXHRcdFx0dmVydGljZXNbaSpzdHJpZGUrM10gPSBwZXJjZW50YWdlc1swXTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzRdID0gcGVyY2VudGFnZXNbMV07XG5cdFx0XHR2ZXJ0aWNlc1tpKnN0cmlkZSs1XSA9IHBlcmNlbnRhZ2VzWzJdO1xuXHRcdFx0dmVydGljZXNbaSpzdHJpZGUrNl0gPSBwZXJjZW50YWdlc1szXTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzddID0gcGVyY2VudGFnZXNbNF07XG5cdFx0XHR2ZXJ0aWNlc1tpKnN0cmlkZSs4XSA9IHBlcmNlbnRhZ2VzWzVdO1xuXHRcdFx0dmVydGljZXNbaSpzdHJpZGUrOV0gPSBwZXJjZW50YWdlc1s2XTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzEwXSA9IHBlcmNlbnRhZ2VzWzddO1xuXHRcdFx0dmVydGljZXNbaSpzdHJpZGUrMTFdID0gcGVyY2VudGFnZXNbOF07XG5cdFx0XHR2ZXJ0aWNlc1tpKnN0cmlkZSsxMl0gPSBwZXJjZW50YWdlc1s5XTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzEzXSA9IHBlcmNlbnRhZ2VzWzEwXTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzE0XSA9IHBlcmNlbnRhZ2VzWzExXTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzE1XSA9IHBlcmNlbnRhZ2VzWzEyXTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzE2XSA9IHBlcmNlbnRhZ2VzWzEzXTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzE3XSA9IHBlcmNlbnRhZ2VzWzE0XTtcblx0XHRcdHZlcnRpY2VzW2kqc3RyaWRlKzE4XSA9IHBlcmNlbnRhZ2VzWzE1XTtcblx0XHR9XG5cblx0XHR0aGlzLmFkZFBvaW50cyhjb29yZCwgcG9pbnRzKTtcblx0XHRhdGxhcy5zZXQoY29vcmQuaGFzaCwgdmVydGljZXMsIHBvaW50cy5sZW5ndGgpO1xuXHR9XG5cblx0cmVtb3ZlVGlsZShhdGxhcywgdGlsZSkge1xuXHRcdGNvbnN0IGNvb3JkID0gdGlsZS5jb29yZDtcblx0XHRhdGxhcy5kZWxldGUoY29vcmQuaGFzaCk7XG5cdFx0dGhpcy5yZW1vdmVQb2ludHMoY29vcmQpO1xuXHR9XG5cblx0ZHJhdygpIHtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRjb25zdCBvcGFjaXR5ID0gdGhpcy5sYXllci5vcGFjaXR5O1xuXG5cdFx0Ly8gc2V0IGJsZW5kaW5nIGZ1bmNcblx0XHRnbC5lbmFibGUoZ2wuQkxFTkQpO1xuXHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG5cdFx0Ly8gZHJhdyBvdXRsaW5lXG5cdFx0dGhpcy5yaW5nT3V0bGluZS5kcmF3SW5zdGFuY2VkKFxuXHRcdFx0dGhpcy5hdGxhcyxcblx0XHRcdHRoaXMub3V0bGluZUNvbG9yLFxuXHRcdFx0b3BhY2l0eSk7XG5cblx0XHQvLyBkcmF3IGZpbGxcblx0XHR0aGlzLnJpbmdGaWxsLmRyYXdJbnN0YW5jZWQoXG5cdFx0XHR0aGlzLmF0bGFzLFxuXHRcdFx0dGhpcy5jb2xvcnMsXG5cdFx0XHRvcGFjaXR5KTtcblxuXHRcdC8vIHJlbmRlciBzZWxlY3RlZFxuXHRcdHRoaXMuc2VsZWN0ZWQuZm9yRWFjaChzZWxlY3RlZCA9PiB7XG5cdFx0XHR0aGlzLnJpbmdGaWxsLmRyYXdJbmRpdmlkdWFsKFxuXHRcdFx0XHRzZWxlY3RlZCxcblx0XHRcdFx0dGhpcy5zZWxlY3RlZENvbG9yLFxuXHRcdFx0XHRvcGFjaXR5KTtcblx0XHR9KTtcblxuXHRcdC8vIHJlbmRlciBoaWdobGlnaHRlZFxuXHRcdGlmICh0aGlzLmhpZ2hsaWdodGVkICYmXG5cdFx0XHR0aGlzLnNlbGVjdGVkLmluZGV4T2YodGhpcy5oaWdobGlnaHRlZCkgPT09IC0xKSB7XG5cdFx0XHR0aGlzLnJpbmdGaWxsLmRyYXdJbmRpdmlkdWFsKFxuXHRcdFx0XHR0aGlzLmhpZ2hsaWdodGVkLFxuXHRcdFx0XHR0aGlzLmhpZ2hsaWdodGVkQ29sb3JzLFxuXHRcdFx0XHRvcGFjaXR5KTtcblx0XHR9XG5cblx0XHQvLyBkcmF3IHJhZGlhbCB0aWNrc1xuXHRcdHRoaXMucXVhZC5kcmF3SW5zdGFuY2VkKFxuXHRcdFx0dGhpcy5hdGxhcyxcblx0XHRcdHRoaXMub3V0bGluZUNvbG9yLFxuXHRcdFx0MC4wLFxuXHRcdFx0b3BhY2l0eSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW11bml0eUJ1Y2tldDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY2xhbXAgPSByZXF1aXJlKCdsb2Rhc2gvY2xhbXAnKTtcbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IGx1bW8gPSByZXF1aXJlKCdsdW1vJyk7XG5jb25zdCBDb2xvclJhbXAgPSByZXF1aXJlKCcuLi9jb2xvci9Db2xvclJhbXAnKTtcblxuY29uc3QgU0hBREVSID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cblx0XHRhdHRyaWJ1dGUgdmVjMiBhUG9zaXRpb247XG5cdFx0YXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDtcblx0XHR1bmlmb3JtIHZlYzIgdVRpbGVPZmZzZXQ7XG5cdFx0dW5pZm9ybSBmbG9hdCB1U2NhbGU7XG5cdFx0dW5pZm9ybSBtYXQ0IHVQcm9qZWN0aW9uTWF0cml4O1xuXG5cdFx0dmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XG5cblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2VGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDtcblx0XHRcdHZlYzIgd1Bvc2l0aW9uID0gKGFQb3NpdGlvbiAqIHVTY2FsZSkgKyB1VGlsZU9mZnNldDtcblx0XHRcdGdsX1Bvc2l0aW9uID0gdVByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHdQb3NpdGlvbiwgMC4wLCAxLjApO1xuXHRcdH1cblx0XHRgLFxuXHRmcmFnOlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cblx0XHR1bmlmb3JtIGZsb2F0IHVPcGFjaXR5O1xuXHRcdHVuaWZvcm0gZmxvYXQgdVJhbmdlTWluO1xuXHRcdHVuaWZvcm0gZmxvYXQgdVJhbmdlTWF4O1xuXHRcdHVuaWZvcm0gZmxvYXQgdU1pbjtcblx0XHR1bmlmb3JtIGZsb2F0IHVNYXg7XG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmVTYW1wbGVyO1xuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHVDb2xvclJhbXBTYW1wbGVyO1xuXHRcdHVuaWZvcm0gZmxvYXQgdUNvbG9yUmFtcFNpemU7XG5cblx0XHR2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcblxuXHRcdGZsb2F0IGRlY29kZVJHQkFUb0Zsb2F0KHZlYzQgdikge1xuXHRcdFx0cmV0dXJuXG5cdFx0XHRcdCh2LnggKiAyNTUuMCkgK1xuXHRcdFx0XHQodi55ICogMjU1LjAgKiAyNTYuMCkgK1xuXHRcdFx0XHQodi56ICogMjU1LjAgKiA2NTUzNi4wKSArXG5cdFx0XHRcdCh2LncgKiAyNTUuMCAqIDE2Nzc3MjE2LjApO1xuXHRcdH1cblxuXHRcdGZsb2F0IGxvZzEwKGZsb2F0IHZhbCkge1xuXHRcdFx0cmV0dXJuIGxvZyh2YWwpIC8gbG9nKDEwLjApO1xuXHRcdH1cblxuXHRcdGZsb2F0IGxvZzEwVHJhbnNmb3JtKGZsb2F0IHZhbCwgZmxvYXQgbWluVmFsLCBmbG9hdCBtYXhWYWwpIHtcblx0XHRcdGlmIChtaW5WYWwgPCAxLjApIHsgbWluVmFsID0gMS4wOyB9XG5cdFx0XHRpZiAobWF4VmFsIDwgMS4wKSB7IG1heFZhbCA9IDEuMDsgfVxuXHRcdFx0aWYgKHZhbCA8IDEuMCkgeyB2YWwgPSAxLjA7IH1cblx0XHRcdGZsb2F0IGxvZ01pbiA9IGxvZzEwKG1pblZhbCk7XG5cdFx0XHRmbG9hdCBsb2dNYXggPSBsb2cxMChtYXhWYWwpO1xuXHRcdFx0ZmxvYXQgbG9nVmFsID0gbG9nMTAodmFsKTtcblx0XHRcdGZsb2F0IHJhbmdlID0gbG9nTWF4IC0gbG9nTWluO1xuXHRcdFx0aWYgKHJhbmdlID09IDAuMCkgeyByYW5nZSA9IDEuMDsgfVxuXHRcdFx0cmV0dXJuIChsb2dWYWwgLSBsb2dNaW4pIC8gcmFuZ2U7XG5cdFx0fVxuXG5cdFx0ZmxvYXQgc2lnbW9pZFRyYW5zZm9ybShmbG9hdCB2YWwsIGZsb2F0IG1pblZhbCwgZmxvYXQgbWF4VmFsKSB7XG5cdFx0XHRtaW5WYWwgPSBhYnMobWluVmFsKTtcblx0XHRcdG1heFZhbCA9IGFicyhtYXhWYWwpO1xuXHRcdFx0ZmxvYXQgZGlzdCA9IG1heChtaW5WYWwsIG1heFZhbCk7XG5cdFx0XHRmbG9hdCBTSUdNT0lEX1NDQUxFID0gMC4xNTtcblx0XHRcdGZsb2F0IHNjYWxlZFZhbCA9IHZhbCAvIChTSUdNT0lEX1NDQUxFICogZGlzdCk7XG5cdFx0XHRyZXR1cm4gMS4wIC8gKDEuMCArIGV4cCgtc2NhbGVkVmFsKSk7XG5cdFx0fVxuXG5cdFx0ZmxvYXQgbGluZWFyVHJhbnNmb3JtKGZsb2F0IHZhbCwgZmxvYXQgbWluVmFsLCBmbG9hdCBtYXhWYWwpIHtcblx0XHRcdGZsb2F0IHJhbmdlID0gbWF4VmFsIC0gbWluVmFsO1xuXHRcdFx0aWYgKHJhbmdlID09IDAuMCkgeyByYW5nZSA9IDEuMDsgfVxuXHRcdFx0cmV0dXJuICh2YWwgLSBtaW5WYWwpIC8gcmFuZ2U7XG5cdFx0fVxuXG5cdFx0ZmxvYXQgdHJhbnNmb3JtKGZsb2F0IHZhbCkge1xuXHRcdFx0dmFsID0gY2xhbXAodmFsLCB1TWluLCB1TWF4KTtcblx0XHRcdCNpZmRlZiBMSU5FQVJfVFJBTlNGT1JNXG5cdFx0XHRcdHJldHVybiBsaW5lYXJUcmFuc2Zvcm0odmFsLCB1TWluLCB1TWF4KTtcblx0XHRcdCNlbHNlXG5cdFx0XHRcdCNpZmRlZiBTSUdNT0lEX1RSQU5TRk9STVxuXHRcdFx0XHRcdHJldHVybiBzaWdtb2lkVHJhbnNmb3JtKHZhbCwgdU1pbiwgdU1heCk7XG5cdFx0XHRcdCNlbHNlXG5cdFx0XHRcdFx0cmV0dXJuIGxvZzEwVHJhbnNmb3JtKHZhbCwgdU1pbiwgdU1heCk7XG5cdFx0XHRcdCNlbmRpZlxuXHRcdFx0I2VuZGlmXG5cdFx0fVxuXG5cdFx0ZmxvYXQgaW50ZXJwb2xhdGVUb1JhbmdlKGZsb2F0IG52YWwpIHtcblx0XHRcdGZsb2F0IHJ2YWwgPSAobnZhbCAtIHVSYW5nZU1pbikgLyAodVJhbmdlTWF4IC0gdVJhbmdlTWluKTtcblx0XHRcdHJldHVybiBjbGFtcChydmFsLCAwLjAsIDEuMCk7XG5cdFx0fVxuXG5cdFx0dmVjNCBjb2xvclJhbXAoZmxvYXQgdmFsdWUpIHtcblx0XHRcdGZsb2F0IG1heEluZGV4ID0gdUNvbG9yUmFtcFNpemUgKiB1Q29sb3JSYW1wU2l6ZSAtIDEuMDtcblx0XHRcdGZsb2F0IGxvb2t1cCA9IHZhbHVlICogbWF4SW5kZXg7XG5cdFx0XHRmbG9hdCB4ID0gbW9kKGxvb2t1cCwgdUNvbG9yUmFtcFNpemUpO1xuXHRcdFx0ZmxvYXQgeSA9IGZsb29yKGxvb2t1cCAvIHVDb2xvclJhbXBTaXplKTtcblx0XHRcdGZsb2F0IHBpeGVsID0gMS4wIC8gdUNvbG9yUmFtcFNpemU7XG5cdFx0XHRmbG9hdCB0eCA9ICh4IC8gdUNvbG9yUmFtcFNpemUpICsgKHBpeGVsICogMC41KTtcblx0XHRcdGZsb2F0IHR5ID0gKHkgLyB1Q29sb3JSYW1wU2l6ZSkgKyAocGl4ZWwgKiAwLjUpO1xuXHRcdFx0cmV0dXJuIHRleHR1cmUyRCh1Q29sb3JSYW1wU2FtcGxlciwgdmVjMih0eCwgdHkpKTtcblx0XHR9XG5cblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWM0IGVuYyA9IHRleHR1cmUyRCh1VGV4dHVyZVNhbXBsZXIsIHZUZXh0dXJlQ29vcmQpO1xuXHRcdFx0ZmxvYXQgY291bnQgPSBkZWNvZGVSR0JBVG9GbG9hdChlbmMpO1xuXHRcdFx0aWYgKGNvdW50ID09IDAuMCkge1xuXHRcdFx0XHRkaXNjYXJkO1xuXHRcdFx0fVxuXHRcdFx0ZmxvYXQgbnZhbCA9IHRyYW5zZm9ybShjb3VudCk7XG5cdFx0XHRmbG9hdCBydmFsID0gaW50ZXJwb2xhdGVUb1JhbmdlKG52YWwpO1xuXHRcdFx0dmVjNCBjb2xvciA9IGNvbG9yUmFtcChydmFsKTtcblx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IucmdiLCBjb2xvci5hICogdU9wYWNpdHkpO1xuXHRcdH1cblx0XHRgXG59O1xuXG5jb25zdCBjcmVhdGVRdWFkID0gZnVuY3Rpb24oZ2wsIG1pbiwgbWF4KSB7XG5cdGNvbnN0IHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSgyNCk7XG5cdC8vIHBvc2l0aW9uc1xuXHR2ZXJ0aWNlc1swXSA9IG1pbjtcdHZlcnRpY2VzWzFdID0gbWluO1xuXHR2ZXJ0aWNlc1syXSA9IG1heDtcdHZlcnRpY2VzWzNdID0gbWluO1xuXHR2ZXJ0aWNlc1s0XSA9IG1heDtcdHZlcnRpY2VzWzVdID0gbWF4O1xuXHR2ZXJ0aWNlc1s2XSA9IG1pbjtcdHZlcnRpY2VzWzddID0gbWluO1xuXHR2ZXJ0aWNlc1s4XSA9IG1heDtcdHZlcnRpY2VzWzldID0gbWF4O1xuXHR2ZXJ0aWNlc1sxMF0gPSBtaW47XHR2ZXJ0aWNlc1sxMV0gPSBtYXg7XG5cdC8vIHV2c1xuXHR2ZXJ0aWNlc1sxMl0gPSAwO1x0dmVydGljZXNbMTNdID0gMDtcblx0dmVydGljZXNbMTRdID0gMTtcdHZlcnRpY2VzWzE1XSA9IDA7XG5cdHZlcnRpY2VzWzE2XSA9IDE7XHR2ZXJ0aWNlc1sxN10gPSAxO1xuXHR2ZXJ0aWNlc1sxOF0gPSAwO1x0dmVydGljZXNbMTldID0gMDtcblx0dmVydGljZXNbMjBdID0gMTtcdHZlcnRpY2VzWzIxXSA9IDE7XG5cdHZlcnRpY2VzWzIyXSA9IDA7XHR2ZXJ0aWNlc1syM10gPSAxO1xuXHQvLyBjcmVhdGUgcXVhZCBidWZmZXJcblx0cmV0dXJuIG5ldyBsdW1vLlZlcnRleEJ1ZmZlcihcblx0XHRnbCxcblx0XHR2ZXJ0aWNlcyxcblx0XHR7XG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdGJ5dGVPZmZzZXQ6IDBcblx0XHRcdH0sXG5cdFx0XHQxOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdGJ5dGVPZmZzZXQ6IDIgKiA2ICogNFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0Y291bnQ6IDYsXG5cdFx0fSk7XG59O1xuXG5jb25zdCBhZGRUcmFuc2Zvcm1EZWZpbmUgPSBmdW5jdGlvbihzaGFkZXIgLHRyYW5zZm9ybSkge1xuXHRjb25zdCBkZWZpbmUgPSB7fTtcblx0c3dpdGNoICh0cmFuc2Zvcm0pIHtcblx0XHRjYXNlICdsaW5lYXInOlxuXHRcdFx0ZGVmaW5lLkxJTkVBUl9UUkFOU0ZPUk0gPSAxO1xuXG5cdFx0Y2FzZSAnc2lnbW9pZCc6XG5cdFx0XHRkZWZpbmUuU0lHTU9JRF9UUkFOU0ZPUk0gPSAxO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGRlZmluZS5MT0dfVFJBTlNGT1JNID0gMTtcblx0fVxuXHRzaGFkZXIuZGVmaW5lID0gZGVmaW5lO1xuXHRyZXR1cm4gc2hhZGVyO1xufTtcblxuY29uc3QgY3JlYXRlUmFtcFRleHR1cmUgPSBmdW5jdGlvbihnbCwgdHlwZSkge1xuXHRjb25zdCB0YWJsZSA9IENvbG9yUmFtcC5nZXRUYWJsZSh0eXBlKTtcblx0Y29uc3Qgc2l6ZSA9IE1hdGguc3FydCh0YWJsZS5sZW5ndGggLyA0KTtcblx0Y29uc3QgdGV4dHVyZSA9IG5ldyBsdW1vLlRleHR1cmUoZ2wsIG51bGwsIHtcblx0XHRmaWx0ZXI6ICdORUFSRVNUJ1xuXHR9KTtcblx0dGV4dHVyZS5idWZmZXJEYXRhKHRhYmxlLCBzaXplLCBzaXplKTtcblx0cmV0dXJuIHRleHR1cmU7XG59O1xuXG5jbGFzcyBIZWF0bWFwIGV4dGVuZHMgbHVtby5XZWJHTFRleHR1cmVSZW5kZXJlciB7XG5cblx0Y29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG5cdFx0b3B0aW9ucy5maWx0ZXIgPSAnTkVBUkVTVCc7XG5cdFx0c3VwZXIob3B0aW9ucyk7XG5cdFx0dGhpcy50cmFuc2Zvcm0gPSBkZWZhdWx0VG8ob3B0aW9ucy50cmFuc2Zvcm0sICdsb2cxMCcpO1xuXHRcdHRoaXMucmFuZ2UgPSBkZWZhdWx0VG8ob3B0aW9ucy5yYW5nZSwgWzAsIDFdKTtcblx0XHR0aGlzLmNvbG9yUmFtcCA9IGRlZmF1bHRUbyhvcHRpb25zLmNvbG9yUmFtcCwgJ3ZlcmRhbnQnKTtcblx0XHR0aGlzLnF1YWQgPSBudWxsO1xuXHRcdHRoaXMuc2hhZGVyID0gbnVsbDtcblx0XHR0aGlzLmFycmF5ID0gbnVsbDtcblx0XHR0aGlzLnJhbXAgPSBudWxsO1xuXHR9XG5cblx0YWRkVGlsZShhcnJheSwgdGlsZSkge1xuXHRcdC8vIHVwZGF0ZSBjaHVua3NpemUgaWYgbGF5ZXIgcmVzb2x1dGlvbiBjaGFuZ2VzXG5cdFx0aWYgKHRoaXMuYXJyYXkuY2h1bmtTaXplICE9PSB0aGlzLmxheWVyLnJlc29sdXRpb24pIHtcblx0XHRcdHRoaXMuYXJyYXkuY2h1bmtTaXplID0gdGhpcy5sYXllci5yZXNvbHV0aW9uO1xuXHRcdH1cblx0XHRhcnJheS5zZXQodGlsZS5jb29yZC5oYXNoLCBuZXcgVWludDhBcnJheSh0aWxlLmRhdGEpKTtcblx0fVxuXG5cdHJlbW92ZVRpbGUoYXJyYXksIHRpbGUpIHtcblx0XHRhcnJheS5kZWxldGUodGlsZS5jb29yZC5oYXNoKTtcblx0fVxuXG5cdG9uQWRkKGxheWVyKSB7XG5cdFx0c3VwZXIub25BZGQobGF5ZXIpO1xuXHRcdHRoaXMucXVhZCA9IGNyZWF0ZVF1YWQodGhpcy5nbCwgMCwgbGF5ZXIucGxvdC50aWxlU2l6ZSk7XG5cdFx0dGhpcy5zaGFkZXIgPSB0aGlzLmNyZWF0ZVNoYWRlcihcblx0XHRcdGFkZFRyYW5zZm9ybURlZmluZShTSEFERVIsIHRoaXMudHJhbnNmb3JtKSk7XG5cdFx0dGhpcy5hcnJheSA9IHRoaXMuY3JlYXRlVGV4dHVyZUFycmF5KGxheWVyLnJlc29sdXRpb24pO1xuXHRcdHRoaXMucmFtcCA9IGNyZWF0ZVJhbXBUZXh0dXJlKHRoaXMuZ2wsIHRoaXMuY29sb3JSYW1wKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG9uUmVtb3ZlKGxheWVyKSB7XG5cdFx0dGhpcy5kZXN0cm95VGV4dHVyZUFycmF5KHRoaXMuYXJyYXkpO1xuXHRcdHRoaXMucXVhZCA9IG51bGw7XG5cdFx0dGhpcy5zaGFkZXIgPSBudWxsO1xuXHRcdHRoaXMuYXJyYXkgPSBudWxsO1xuXHRcdHN1cGVyLm9uUmVtb3ZlKGxheWVyKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHNldFRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcblx0XHR0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcblx0XHQvLyByZS1jb21waWxlIHNoYWRlclxuXHRcdHRoaXMuc2hhZGVyID0gdGhpcy5jcmVhdGVTaGFkZXIoXG5cdFx0XHRhZGRUcmFuc2Zvcm1EZWZpbmUoU0hBREVSLCB0aGlzLnRyYW5zZm9ybSkpO1xuXHR9XG5cblx0Z2V0VHJhbnNmb3JtKCkge1xuXHRcdHJldHVybiB0aGlzLnRyYW5zZm9ybTtcblx0fVxuXG5cdHNldFZhbHVlUmFuZ2UobWluLCBtYXgpIHtcblx0XHR0aGlzLnJhbmdlID0gW1xuXHRcdFx0Y2xhbXAobWluLCAwLCAxKSxcblx0XHRcdGNsYW1wKG1heCwgMCwgMSlcblx0XHRdO1xuXHR9XG5cblx0Z2V0VmFsdWVSYW5nZSgpIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0dGhpcy5yYW5nZVswXSxcblx0XHRcdHRoaXMucmFuZ2VbMV1cblx0XHRdO1xuXHR9XG5cblx0c2V0Q29sb3JSYW1wKGNvbG9yUmFtcCkge1xuXHRcdHRoaXMuY29sb3JSYW1wID0gY29sb3JSYW1wO1xuXHRcdHRoaXMucmFtcCA9IGNyZWF0ZVJhbXBUZXh0dXJlKHRoaXMuZ2wsIHRoaXMuY29sb3JSYW1wKTtcblx0fVxuXG5cdGdldENvbG9yUmFtcCgpIHtcblx0XHRyZXR1cm4gdGhpcy5jb2xvclJhbXA7XG5cdH1cblxuXHRnZXRDb2xvclJhbXBGdW5jKCkge1xuXHRcdHJldHVybiBDb2xvclJhbXAuZ2V0RnVuYyh0aGlzLmNvbG9yUmFtcCk7XG5cdH1cblxuXHRkcmF3KCkge1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRjb25zdCBzaGFkZXIgPSB0aGlzLnNoYWRlcjtcblx0XHRjb25zdCBhcnJheSA9IHRoaXMuYXJyYXk7XG5cdFx0Y29uc3QgcXVhZCA9IHRoaXMucXVhZDtcblx0XHRjb25zdCByYW1wID0gdGhpcy5yYW1wO1xuXHRcdGNvbnN0IHJlbmRlcmFibGVzID0gdGhpcy5nZXRSZW5kZXJhYmxlcygpO1xuXHRcdGNvbnN0IHByb2ogPSB0aGlzLmdldE9ydGhvTWF0cml4KCk7XG5cdFx0Y29uc3QgZXh0cmVtYSA9IHRoaXMubGF5ZXIuZ2V0RXh0cmVtYSgpO1xuXG5cdFx0Ly8gYmluZCBzaGFkZXJcblx0XHRzaGFkZXIudXNlKCk7XG5cblx0XHQvLyBzZXQgdW5pZm9ybXNcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVByb2plY3Rpb25NYXRyaXgnLCBwcm9qKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVRleHR1cmVTYW1wbGVyJywgMCk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VDb2xvclJhbXBTYW1wbGVyJywgMSk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VDb2xvclJhbXBTaXplJywgcmFtcC53aWR0aCk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VPcGFjaXR5JywgdGhpcy5sYXllci5vcGFjaXR5KTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVJhbmdlTWluJywgdGhpcy5yYW5nZVswXSk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VSYW5nZU1heCcsIHRoaXMucmFuZ2VbMV0pO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1TWluJywgZXh0cmVtYS5taW4pO1xuXHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1TWF4JywgZXh0cmVtYS5tYXgpO1xuXG5cdFx0Ly8gc2V0IGJsZW5kaW5nIGZ1bmNcblx0XHRnbC5lbmFibGUoZ2wuQkxFTkQpO1xuXHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG5cdFx0Ly8gYmluZCBxdWFkXG5cdFx0cXVhZC5iaW5kKCk7XG5cblx0XHQvLyBiaW5kIGNvbG8gcmFtcFxuXHRcdHJhbXAuYmluZCgxKTtcblxuXHRcdGxldCBsYXN0O1xuXHRcdC8vIGZvciBlYWNoIHJlbmRlcmFibGVcblx0XHRyZW5kZXJhYmxlcy5mb3JFYWNoKHJlbmRlcmFibGUgPT4ge1xuXHRcdFx0Y29uc3QgaGFzaCA9IHJlbmRlcmFibGUuaGFzaDtcblx0XHRcdGlmIChsYXN0ICE9PSBoYXNoKSB7XG5cdFx0XHRcdC8vIGJpbmQgdGV4dHVyZVxuXHRcdFx0XHRhcnJheS5iaW5kKGhhc2gsIDApO1xuXHRcdFx0XHRsYXN0ID0gaGFzaDtcblx0XHRcdH1cblx0XHRcdC8vIHNldCB0aWxlIHVuaWZvcm1zXG5cdFx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVNjYWxlJywgcmVuZGVyYWJsZS5zY2FsZSk7XG5cdFx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVRpbGVPZmZzZXQnLCByZW5kZXJhYmxlLnRpbGVPZmZzZXQpO1xuXHRcdFx0Ly8gZHJhd1xuXHRcdFx0cXVhZC5kcmF3KCk7XG5cdFx0XHQvLyBubyBuZWVkIHRvIHVuYmluZCB0ZXh0dXJlXG5cdFx0fSk7XG5cblx0XHQvLyB1bmJpbmQgcXVhZFxuXHRcdHF1YWQudW5iaW5kKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIZWF0bWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsdW1vID0gcmVxdWlyZSgnbHVtbycpO1xuXG5jbGFzcyBJbWFnZSBleHRlbmRzIGx1bW8uVGV4dHVyZVJlbmRlcmVyIHtcblx0YWRkVGlsZShhcnJheSwgdGlsZSkge1xuXHRcdGFycmF5LnNldCh0aWxlLmNvb3JkLmhhc2gsIG5ldyBVaW50OEFycmF5KHRpbGUuZGF0YSkpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW1hZ2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IGx1bW8gPSByZXF1aXJlKCdsdW1vJyk7XG5jb25zdCBQb2ludCA9IHJlcXVpcmUoJy4uL3NoYXBlL1BvaW50Jyk7XG5cbmNsYXNzIE1hY3JvIGV4dGVuZHMgbHVtby5XZWJHTFZlcnRleFJlbmRlcmVyIHtcblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcblx0XHRzdXBlcihvcHRpb25zKTtcblx0XHR0aGlzLmF0bGFzID0gbnVsbDtcblx0XHR0aGlzLnBvaW50ID0gbnVsbDtcblx0XHR0aGlzLmNvbG9yID0gZGVmYXVsdFRvKG9wdGlvbnMuY29sb3IsIFsgMS4wLCAwLjQsIDAuMSwgMC44IF0pO1xuXHRcdHRoaXMucmFkaXVzID0gZGVmYXVsdFRvKG9wdGlvbnMucmFkaXVzLCAyKTtcblx0fVxuXG5cdGFkZFRpbGUoYXRsYXMsIHRpbGUpIHtcblx0XHRjb25zdCBiaW5zID0gKHRoaXMubGF5ZXIubG9kID4gMCkgPyB0aWxlLmRhdGEucG9pbnRzIDogdGlsZS5kYXRhO1xuXHRcdGF0bGFzLnNldChcblx0XHRcdHRpbGUuY29vcmQuaGFzaCxcblx0XHRcdGJpbnMsXG5cdFx0XHRiaW5zLmxlbmd0aCAvIGF0bGFzLnN0cmlkZSk7XG5cdH1cblxuXHRvbkFkZChsYXllcikge1xuXHRcdHN1cGVyLm9uQWRkKGxheWVyKTtcblx0XHR0aGlzLnBvaW50ID0gbmV3IFBvaW50KHRoaXMpO1xuXHRcdHRoaXMuYXRsYXMgPSB0aGlzLmNyZWF0ZVZlcnRleEF0bGFzKHtcblx0XHRcdC8vIHBvc2l0aW9uXG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCdcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG9uUmVtb3ZlKGxheWVyKSB7XG5cdFx0dGhpcy5kZXN0cm95VmVydGV4QXRsYXModGhpcy5hdGxhcyk7XG5cdFx0dGhpcy5wb2ludCA9IG51bGw7XG5cdFx0dGhpcy5hdGxhcyA9IG51bGw7XG5cdFx0c3VwZXIub25SZW1vdmUobGF5ZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0ZHJhdygpIHtcblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cdFx0Y29uc3QgbGF5ZXIgPSB0aGlzLmxheWVyO1xuXHRcdGNvbnN0IHBsb3QgPSBsYXllci5wbG90O1xuXG5cdFx0Ly8gYmluZCByZW5kZXIgdGFyZ2V0XG5cdFx0cGxvdC5yZW5kZXJCdWZmZXIuYmluZCgpO1xuXHRcdHBsb3QucmVuZGVyQnVmZmVyLmNsZWFyKCk7XG5cblx0XHQvLyBzZXQgYmxlbmRpbmcgZnVuY1xuXHRcdGdsLmVuYWJsZShnbC5CTEVORCk7XG5cdFx0Z2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FKTtcblxuXHRcdC8vIGRyYXcgaW5zdGFuY2VkIHBvaW50c1xuXHRcdHRoaXMucG9pbnQuZHJhd0luc3RhbmNlZChcblx0XHRcdHRoaXMuYXRsYXMsXG5cdFx0XHR0aGlzLnJhZGl1cyxcblx0XHRcdHRoaXMuY29sb3IpO1xuXG5cdFx0Ly8gdW5iaW5kIHJlbmRlciB0YXJnZXRcblx0XHRwbG90LnJlbmRlckJ1ZmZlci51bmJpbmQoKTtcblxuXHRcdC8vIHJlbmRlciBmcmFtZWJ1ZmZlciB0byB0aGUgYmFja2J1ZmZlclxuXHRcdHBsb3QucmVuZGVyQnVmZmVyLmJsaXRUb1NjcmVlbihsYXllci5vcGFjaXR5KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFjcm87XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IGx1bW8gPSByZXF1aXJlKCdsdW1vJyk7XG5jb25zdCBMaW5lID0gcmVxdWlyZSgnLi4vc2hhcGUvTGluZScpO1xuXG5jbGFzcyBNYWNyb0VkZ2UgZXh0ZW5kcyBsdW1vLldlYkdMVmVydGV4UmVuZGVyZXIge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHRcdHRoaXMubGluZSA9IG51bGw7XG5cdFx0dGhpcy5hdGxhcyA9IG51bGw7XG5cdFx0dGhpcy5jb2xvciA9IGRlZmF1bHRUbyhvcHRpb25zLmNvbG9yLCBbIDEuMCwgMC40LCAwLjEsIDAuOCBdKTtcblx0fVxuXG5cdGFkZFRpbGUoYXRsYXMsIHRpbGUpIHtcblx0XHRjb25zdCBlZGdlcyA9ICh0aGlzLmxheWVyLmxvZCA+IDApID8gdGlsZS5kYXRhLmVkZ2VzIDogdGlsZS5kYXRhO1xuXHRcdGF0bGFzLnNldChcblx0XHRcdHRpbGUuY29vcmQuaGFzaCxcblx0XHRcdGVkZ2VzLFxuXHRcdFx0ZWRnZXMubGVuZ3RoIC8gKGF0bGFzLnN0cmlkZSAqIDIpKTtcblx0fVxuXG5cdG9uQWRkKGxheWVyKSB7XG5cdFx0c3VwZXIub25BZGQobGF5ZXIpO1xuXHRcdHRoaXMubGluZSA9IG5ldyBMaW5lKHRoaXMpO1xuXHRcdHRoaXMuYXRsYXMgPSB0aGlzLmNyZWF0ZVZlcnRleEF0bGFzKHtcblx0XHRcdC8vIHBvc2l0aW9uXG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCdcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG9uUmVtb3ZlKGxheWVyKSB7XG5cdFx0dGhpcy5kZXN0cm95VmVydGV4QXRsYXModGhpcy5hdGxhcyk7XG5cdFx0dGhpcy5hdGxhcyA9IG51bGw7XG5cdFx0dGhpcy5saW5lID0gbnVsbDtcblx0XHRzdXBlci5vblJlbW92ZShsYXllcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRkcmF3KCkge1xuXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdGNvbnN0IGxheWVyID0gdGhpcy5sYXllcjtcblx0XHRjb25zdCBwbG90ID0gbGF5ZXIucGxvdDtcblxuXHRcdC8vIGJpbmQgcmVuZGVyIHRhcmdldFxuXHRcdHBsb3QucmVuZGVyQnVmZmVyLmJpbmQoKTtcblx0XHRwbG90LnJlbmRlckJ1ZmZlci5jbGVhcigpO1xuXG5cdFx0Ly8gc2V0IGJsZW5kaW5nIGZ1bmNcblx0XHRnbC5lbmFibGUoZ2wuQkxFTkQpO1xuXHRcdGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORSk7XG5cblx0XHQvLyBkcmF3IGluc3RhbmNlc1xuXHRcdHRoaXMubGluZS5kcmF3SW5zdGFuY2VkKFxuXHRcdFx0dGhpcy5hdGxhcyxcblx0XHRcdHRoaXMuY29sb3IpO1xuXG5cdFx0Ly8gdW5iaW5kIHJlbmRlciB0YXJnZXRcblx0XHRwbG90LnJlbmRlckJ1ZmZlci51bmJpbmQoKTtcblxuXHRcdC8vIHJlbmRlciBmcmFtZWJ1ZmZlciB0byB0aGUgYmFja2J1ZmZlclxuXHRcdHBsb3QucmVuZGVyQnVmZmVyLmJsaXRUb1NjcmVlbih0aGlzLmxheWVyLm9wYWNpdHkpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNYWNyb0VkZ2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmF1bHRUbyA9IHJlcXVpcmUoJ2xvZGFzaC9kZWZhdWx0VG8nKTtcbmNvbnN0IGx1bW8gPSByZXF1aXJlKCdsdW1vJyk7XG5jb25zdCBQb2ludCA9IHJlcXVpcmUoJy4uL3NoYXBlL1BvaW50Jyk7XG5cbmNvbnN0IFBPSU5UX1JBRElVUyA9IDg7XG5jb25zdCBQT0lOVF9SQURJVVNfSU5DID0gNDtcblxuLy8gY29uc3QgYXBwbHlKaXR0ZXIgPSBmdW5jdGlvbihwb2ludCwgbWF4RGlzdCkge1xuLy8gXHRjb25zdCBhbmdsZSA9IE1hdGgucmFuZG9tKCkgKiAoTWF0aC5QSSAqIDIpO1xuLy8gXHRjb25zdCBkaXN0ID0gTWF0aC5yYW5kb20oKSAqIG1heERpc3Q7XG4vLyBcdHBvaW50LnggKz0gTWF0aC5mbG9vcihNYXRoLmNvcyhhbmdsZSkgKiBkaXN0KTtcbi8vIFx0cG9pbnQueSArPSBNYXRoLmZsb29yKE1hdGguc2luKGFuZ2xlKSAqIGRpc3QpO1xuLy8gfTtcblxuY2xhc3MgTWljcm8gZXh0ZW5kcyBsdW1vLldlYkdMSW50ZXJhY3RpdmVSZW5kZXJlciB7XG5cblx0Y29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG5cdFx0c3VwZXIob3B0aW9ucyk7XG5cdFx0dGhpcy5wb2ludCA9IG51bGw7XG5cdFx0dGhpcy5hdGxhcyA9IG51bGw7XG5cdFx0dGhpcy5jb2xvciA9IGRlZmF1bHRUbyhvcHRpb25zLmNvbG9yLCBbIDEuMCwgMC40LCAwLjEsIDAuOCBdKTtcblx0XHR0aGlzLnJhZGl1cyA9IGRlZmF1bHRUbyhvcHRpb25zLnJhZGl1cywgUE9JTlRfUkFESVVTKTtcblx0XHQvLyB0aGlzLmppdHRlciA9IGRlZmF1bHRUbyhvcHRpb25zLnJhZGl1cywgdHJ1ZSk7XG5cdFx0Ly8gdGhpcy5qaXR0ZXJEaXN0YW5jZSA9IGRlZmF1bHRUbyhvcHRpb25zLmppdHRlckRpc3RhbmNlLCAxMCk7XG5cdH1cblxuXHRhZGRUaWxlKGF0bGFzLCB0aWxlKSB7XG5cdFx0Y29uc3QgY29vcmQgPSB0aWxlLmNvb3JkO1xuXHRcdGNvbnN0IGRhdGEgPSB0aWxlLmRhdGE7XG5cdFx0Y29uc3QgaGl0cyA9IGRhdGEuaGl0cztcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IGRhdGEucG9pbnRzO1xuXG5cdFx0Y29uc3QgdGlsZVNpemUgPSB0aGlzLmxheWVyLnBsb3QudGlsZVNpemU7XG5cdFx0Y29uc3QgeE9mZnNldCA9IGNvb3JkLnggKiB0aWxlU2l6ZTtcblx0XHRjb25zdCB5T2Zmc2V0ID0gY29vcmQueSAqIHRpbGVTaXplO1xuXHRcdGNvbnN0IHJhZGl1cyA9IHRoaXMucmFkaXVzO1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gbmV3IEFycmF5KHZlcnRpY2VzLmxlbmd0aCAvIDIpO1xuXG5cdFx0Ly8gY29uc3QgY29sbGlzaW9ucyA9IHt9O1xuXG5cdFx0Zm9yIChsZXQgaT0wOyBpPHZlcnRpY2VzLmxlbmd0aCAvIDI7IGkrKykge1xuXG5cdFx0XHRjb25zdCB4ID0gdmVydGljZXNbaSoyXTtcblx0XHRcdGNvbnN0IHkgPSB2ZXJ0aWNlc1tpKjIrMV07XG5cblx0XHRcdC8vIGFkZCBqaXR0ZXIgaWYgc3BlY2lmaWVkXG5cdFx0XHQvLyBpZiAodGhpcy5qaXR0ZXIpIHtcblx0XHRcdC8vIFx0Y29uc3QgaGFzaCA9IGAke3B4Lnh9OiR7cHgueX1gO1xuXHRcdFx0Ly8gXHRpZiAoY29sbGlzaW9uc1toYXNoXSkge1xuXHRcdFx0Ly8gXHRcdGFwcGx5Sml0dGVyKHB4LCB0aGlzLmppdHRlckRpc3RhbmNlKTtcblx0XHRcdC8vIFx0fVxuXHRcdFx0Ly8gXHRjb2xsaXNpb25zW2hhc2hdID0gdHJ1ZTtcblx0XHRcdC8vIH1cblxuXHRcdFx0Ly8gcGxvdCBwaXhlbCBjb29yZHNcblx0XHRcdGNvbnN0IHB4ID0geCArIHhPZmZzZXQ7XG5cdFx0XHRjb25zdCBweSA9IHkgKyB5T2Zmc2V0O1xuXG5cdFx0XHRwb2ludHNbaV0gPSB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHksXG5cdFx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0XHRtaW5YOiBweCAtIHJhZGl1cyxcblx0XHRcdFx0bWF4WDogcHggKyByYWRpdXMsXG5cdFx0XHRcdG1pblk6IHB5IC0gcmFkaXVzLFxuXHRcdFx0XHRtYXhZOiBweSArIHJhZGl1cyxcblx0XHRcdFx0dGlsZTogdGlsZSxcblx0XHRcdFx0ZGF0YTogaGl0cyA/IGhpdHNbaV0gOiBudWxsXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHRoaXMuYWRkUG9pbnRzKGNvb3JkLCBwb2ludHMpO1xuXHRcdGF0bGFzLnNldChjb29yZC5oYXNoLCB2ZXJ0aWNlcywgcG9pbnRzLmxlbmd0aCk7XG5cdH1cblxuXHRyZW1vdmVUaWxlKGF0bGFzLCB0aWxlKSB7XG5cdFx0Y29uc3QgY29vcmQgPSB0aWxlLmNvb3JkO1xuXHRcdGF0bGFzLmRlbGV0ZShjb29yZC5oYXNoKTtcblx0XHR0aGlzLnJlbW92ZVBvaW50cyhjb29yZCk7XG5cdH1cblxuXHRvbkFkZChsYXllcikge1xuXHRcdHN1cGVyLm9uQWRkKGxheWVyKTtcblx0XHR0aGlzLnBvaW50ID0gbmV3IFBvaW50KHRoaXMpO1xuXHRcdHRoaXMuYXRsYXMgPSB0aGlzLmNyZWF0ZVZlcnRleEF0bGFzKHtcblx0XHRcdC8vIHBvc2l0aW9uXG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCdcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG9uUmVtb3ZlKGxheWVyKSB7XG5cdFx0dGhpcy5kZXN0cm95VmVydGV4QXRsYXModGhpcy5hdGxhcyk7XG5cdFx0dGhpcy5hdGxhcyA9IG51bGw7XG5cdFx0dGhpcy5wb2ludCA9IG51bGw7XG5cdFx0c3VwZXIub25SZW1vdmUobGF5ZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0ZHJhdygpIHtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRjb25zdCBsYXllciA9IHRoaXMubGF5ZXI7XG5cdFx0Y29uc3QgcGxvdCA9IGxheWVyLnBsb3Q7XG5cblx0XHQvLyBiaW5kIHJlbmRlciB0YXJnZXRcblx0XHRwbG90LnJlbmRlckJ1ZmZlci5iaW5kKCk7XG5cdFx0cGxvdC5yZW5kZXJCdWZmZXIuY2xlYXIoKTtcblxuXHRcdC8vIHNldCBibGVuZGluZyBmdW5jXG5cdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcblx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkUpO1xuXG5cdFx0Ly8gZHJhdyBpbnN0YW5jZXNcblx0XHR0aGlzLnBvaW50LmRyYXdJbnN0YW5jZWQoXG5cdFx0XHR0aGlzLmF0bGFzLFxuXHRcdFx0dGhpcy5yYWRpdXMsXG5cdFx0XHR0aGlzLmNvbG9yKTtcblxuXHRcdC8vIHJlbmRlciBzZWxlY3RlZFxuXHRcdHRoaXMuc2VsZWN0ZWQuZm9yRWFjaChzZWxlY3RlZCA9PiB7XG5cdFx0XHR0aGlzLnBvaW50LmRyYXdJbmRpdmlkdWFsKFxuXHRcdFx0XHRzZWxlY3RlZCxcblx0XHRcdFx0dGhpcy5yYWRpdXMgKyBQT0lOVF9SQURJVVNfSU5DICogMixcblx0XHRcdFx0dGhpcy5jb2xvcik7XG5cdFx0fSk7XG5cblx0XHQvLyByZW5kZXIgaGlnaGxpZ2h0ZWRcblx0XHRpZiAodGhpcy5oaWdobGlnaHRlZCAmJlxuXHRcdFx0dGhpcy5zZWxlY3RlZC5pbmRleE9mKHRoaXMuaGlnaGxpZ2h0ZWQpID09PSAtMSkge1xuXHRcdFx0dGhpcy5wb2ludC5kcmF3SW5kaXZpZHVhbChcblx0XHRcdFx0dGhpcy5oaWdobGlnaHRlZCxcblx0XHRcdFx0dGhpcy5yYWRpdXMgKyBQT0lOVF9SQURJVVNfSU5DLFxuXHRcdFx0XHR0aGlzLmNvbG9yKTtcblx0XHR9XG5cblx0XHQvLyB1bmJpbmQgcmVuZGVyIHRhcmdldFxuXHRcdHBsb3QucmVuZGVyQnVmZmVyLnVuYmluZCgpO1xuXG5cdFx0Ly8gcmVuZGVyIGZyYW1lYnVmZmVyIHRvIHRoZSBiYWNrYnVmZmVyXG5cdFx0cGxvdC5yZW5kZXJCdWZmZXIuYmxpdFRvU2NyZWVuKHRoaXMubGF5ZXIub3BhY2l0eSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1pY3JvO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsdW1vID0gcmVxdWlyZSgnbHVtbycpO1xuXG5jb25zdCBUSUxFX0FERCA9IFN5bWJvbCgpO1xuY29uc3QgVElMRV9SRU1PVkUgPSBTeW1ib2woKTtcbmNvbnN0IFNIQURFUl9HTFNMID0ge1xuXHR2ZXJ0OlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0YXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xuXHRcdGF0dHJpYnV0ZSB2ZWMyIGFUZXh0dXJlQ29vcmQ7XG5cdFx0dW5pZm9ybSBmbG9hdCB1U2NhbGU7XG5cdFx0dW5pZm9ybSB2ZWMyIHVUaWxlT2Zmc2V0O1xuXHRcdHVuaWZvcm0gbWF0NCB1UHJvamVjdGlvbk1hdHJpeDtcblx0XHR2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2VGV4dHVyZUNvb3JkID0gYVRleHR1cmVDb29yZDtcblx0XHRcdHZlYzIgd1Bvc2l0aW9uID0gKGFQb3NpdGlvbiAqIHVTY2FsZSkgKyB1VGlsZU9mZnNldDtcblx0XHRcdGdsX1Bvc2l0aW9uID0gdVByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHdQb3NpdGlvbiwgMC4wLCAxLjApO1xuXHRcdH1cblx0XHRgLFxuXHRmcmFnOlxuXHRcdGBcblx0XHRwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmVTYW1wbGVyO1xuXHRcdHVuaWZvcm0gZmxvYXQgdU9wYWNpdHk7XG5cdFx0dmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0dmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZVNhbXBsZXIsIHZlYzIodlRleHR1cmVDb29yZC54LCAxLjAgLSB2VGV4dHVyZUNvb3JkLnkpKTtcblx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IucmdiLCBjb2xvci5hICogdU9wYWNpdHkpO1xuXHRcdH1cblx0XHRgXG59O1xuXG5jb25zdCBjcmVhdGVRdWFkID0gZnVuY3Rpb24oZ2wsIG1pbiwgbWF4KSB7XG5cdGNvbnN0IHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSgyNCk7XG5cdC8vIHBvc2l0aW9uc1xuXHR2ZXJ0aWNlc1swXSA9IG1pbjtcdCAgIHZlcnRpY2VzWzFdID0gbWluO1xuXHR2ZXJ0aWNlc1syXSA9IG1heDtcdCAgIHZlcnRpY2VzWzNdID0gbWluO1xuXHR2ZXJ0aWNlc1s0XSA9IG1heDtcdCAgIHZlcnRpY2VzWzVdID0gbWF4O1xuXHR2ZXJ0aWNlc1s2XSA9IG1pbjtcdCAgIHZlcnRpY2VzWzddID0gbWluO1xuXHR2ZXJ0aWNlc1s4XSA9IG1heDtcdCAgIHZlcnRpY2VzWzldID0gbWF4O1xuXHR2ZXJ0aWNlc1sxMF0gPSBtaW47XHQgICB2ZXJ0aWNlc1sxMV0gPSBtYXg7XG5cdC8vIHV2c1xuXHR2ZXJ0aWNlc1sxMl0gPSAwO1x0ICAgdmVydGljZXNbMTNdID0gMDtcblx0dmVydGljZXNbMTRdID0gMTtcdCAgIHZlcnRpY2VzWzE1XSA9IDA7XG5cdHZlcnRpY2VzWzE2XSA9IDE7XHQgICB2ZXJ0aWNlc1sxN10gPSAxO1xuXHR2ZXJ0aWNlc1sxOF0gPSAwO1x0ICAgdmVydGljZXNbMTldID0gMDtcblx0dmVydGljZXNbMjBdID0gMTtcdCAgIHZlcnRpY2VzWzIxXSA9IDE7XG5cdHZlcnRpY2VzWzIyXSA9IDA7XHQgICB2ZXJ0aWNlc1syM10gPSAxO1xuXHQvLyBjcmVhdGUgcXVhZCBidWZmZXJcblx0cmV0dXJuIG5ldyBsdW1vLlZlcnRleEJ1ZmZlcihcblx0XHRnbCxcblx0XHR2ZXJ0aWNlcyxcblx0XHR7XG5cdFx0XHQwOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdGJ5dGVPZmZzZXQ6IDBcblx0XHRcdH0sXG5cdFx0XHQxOiB7XG5cdFx0XHRcdHNpemU6IDIsXG5cdFx0XHRcdHR5cGU6ICdGTE9BVCcsXG5cdFx0XHRcdGJ5dGVPZmZzZXQ6IDIgKiA2ICogNFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0Y291bnQ6IDYsXG5cdFx0fSk7XG59O1xuXG5jbGFzcyBSZXBlYXQgZXh0ZW5kcyBsdW1vLldlYkdMUmVuZGVyZXIge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHRcdHRoaXMucXVhZCA9IG51bGw7XG5cdFx0dGhpcy50ZXh0dXJlID0gbnVsbDtcblx0XHR0aGlzLmhhbmRsZXJzID0gbmV3IE1hcCgpO1xuXHR9XG5cblx0b25BZGQobGF5ZXIpIHtcblx0XHRzdXBlci5vbkFkZChsYXllcik7XG5cdFx0dGhpcy5xdWFkID0gY3JlYXRlUXVhZCh0aGlzLmdsLCAwLCBsYXllci5wbG90LnRpbGVTaXplKTtcblx0XHR0aGlzLnNoYWRlciA9IHRoaXMuY3JlYXRlU2hhZGVyKFNIQURFUl9HTFNMKTtcblx0XHQvLyBjcmVhdGUgaGFuZGxlcnNcblx0IFx0Y29uc3QgYWRkID0gZXZlbnQgPT4ge1xuXHRcdFx0aWYgKCF0aGlzLnRleHR1cmUpIHtcblx0XHRcdFx0dGhpcy50ZXh0dXJlID0gbmV3IGx1bW8uVGV4dHVyZSh0aGlzLmdsLCBldmVudC50aWxlLmRhdGEpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0Y29uc3QgcmVtb3ZlID0gKCkgPT4ge1xuXHRcdFx0dGhpcy50ZXh0dXJlID0gbnVsbDtcblx0XHR9O1xuXHRcdC8vIGF0dGFjaCBoYW5kbGVyc1xuXHRcdHRoaXMubGF5ZXIub24obHVtby5USUxFX0FERCwgYWRkKTtcblx0XHR0aGlzLmxheWVyLm9uKGx1bW8uVElMRV9SRU1PVkUsIHJlbW92ZSk7XG5cdFx0Ly8gc3RvcmUgaGFuZGxlcnNcblx0XHR0aGlzLmhhbmRsZXJzLnNldChUSUxFX0FERCwgYWRkKTtcblx0XHR0aGlzLmhhbmRsZXJzLnNldChUSUxFX1JFTU9WRSwgcmVtb3ZlKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG9uUmVtb3ZlKGxheWVyKSB7XG5cdFx0Ly8gZGV0YWNoIGhhbmRsZXJzXG5cdFx0dGhpcy5sYXllci5yZW1vdmVMaXN0ZW5lcihsdW1vLlRJTEVfQURELCB0aGlzLmhhbmRsZXJzLmdldChUSUxFX0FERCkpO1xuXHRcdHRoaXMubGF5ZXIucmVtb3ZlTGlzdGVuZXIobHVtby5USUxFX1JFTU9WRSwgdGhpcy5oYW5kbGVycy5nZXQoVElMRV9SRU1PVkUpKTtcblx0XHQvLyBkZWxldGUgaGFuZGxlcnNcblx0XHR0aGlzLmhhbmRsZXJzLmRlbGV0ZShUSUxFX0FERCk7XG5cdFx0dGhpcy5oYW5kbGVycy5kZWxldGUoVElMRV9SRU1PVkUpO1xuXHRcdHRoaXMudGV4dHVyZSA9IG51bGw7XG5cdFx0dGhpcy5xdWFkID0gbnVsbDtcblx0XHR0aGlzLnNoYWRlciA9IG51bGw7XG5cdFx0c3VwZXIub25SZW1vdmUobGF5ZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0ZHJhdygpIHtcblx0XHRpZiAoIXRoaXMudGV4dHVyZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCB0ZXh0dXJlID0gdGhpcy50ZXh0dXJlO1xuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRjb25zdCBzaGFkZXIgPSB0aGlzLnNoYWRlcjtcblx0XHRjb25zdCBxdWFkID0gdGhpcy5xdWFkO1xuXHRcdGNvbnN0IHByb2ogPSB0aGlzLmdldE9ydGhvTWF0cml4KCk7XG5cdFx0Y29uc3QgcGxvdCA9IHRoaXMubGF5ZXIucGxvdDtcblxuXHRcdC8vIGJpbmQgc2hhZGVyXG5cdFx0c2hhZGVyLnVzZSgpO1xuXHRcdC8vIHNldCBnbG9iYWwgdW5pZm9ybXNcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVByb2plY3Rpb25NYXRyaXgnLCBwcm9qKTtcblx0XHRzaGFkZXIuc2V0VW5pZm9ybSgndVRleHR1cmVTYW1wbGVyJywgMCk7XG5cdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VPcGFjaXR5JywgdGhpcy5sYXllci5vcGFjaXR5KTtcblxuXHRcdC8vIHNldCBibGVuZGluZyBmdW5jXG5cdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcblx0XHRnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblxuXHRcdC8vIGJpbmQgdGV4dHVyZVxuXHRcdHRleHR1cmUuYmluZCgwKTtcblxuXHRcdC8vIGJpbmQgcXVhZFxuXHRcdHF1YWQuYmluZCgpO1xuXG5cdFx0Ly8gZ2V0IGFsbCBjdXJyZW50bHkgdmlzaWJsZSB0aWxlIGNvb3Jkc1xuXHRcdGNvbnN0IGNvb3JkcyA9IHBsb3Qudmlld3BvcnQuZ2V0VmlzaWJsZUNvb3Jkcyhcblx0XHRcdHBsb3QudGlsZVNpemUsXG5cdFx0XHRwbG90Lnpvb20sXG5cdFx0XHRNYXRoLnJvdW5kKHBsb3Quem9vbSksIC8vIGdldCB0aWxlcyBjbG9zZXN0IHRvIGN1cnJlbnQgem9vbVxuXHRcdFx0cGxvdC53cmFwYXJvdW5kKTtcblxuXHRcdC8vIGRyYXcgdGhlIHRpbGVcblx0XHRjb29yZHMuZm9yRWFjaChjb29yZCA9PiB7XG5cdFx0XHRjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIHBsb3Quem9vbSAtIGNvb3JkLnopO1xuXHRcdFx0Y29uc3QgdGlsZU9mZnNldCA9IFtcblx0XHRcdFx0KGNvb3JkLnggKiBzY2FsZSAqIHBsb3QudGlsZVNpemUpIC0gcGxvdC52aWV3cG9ydC54LFxuXHRcdFx0XHQoY29vcmQueSAqIHNjYWxlICogcGxvdC50aWxlU2l6ZSkgLSBwbG90LnZpZXdwb3J0Lnlcblx0XHRcdF07XG5cdFx0XHQvLyBzZXQgdGlsZSB1bmlmb3Jtc1xuXHRcdFx0c2hhZGVyLnNldFVuaWZvcm0oJ3VTY2FsZScsIHNjYWxlKTtcblx0XHRcdHNoYWRlci5zZXRVbmlmb3JtKCd1VGlsZU9mZnNldCcsIHRpbGVPZmZzZXQpO1xuXHRcdFx0Ly8gZHJhd1xuXHRcdFx0cXVhZC5kcmF3KCk7XG5cdFx0fSk7XG5cblx0XHQvLyB1bmJpbmQgcXVhZFxuXHRcdHF1YWQudW5iaW5kKCk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXBlYXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbmNvbnN0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJ2pzb24tc3RhYmxlLXN0cmluZ2lmeScpO1xuXG5jb25zdCBSRVRSWV9JTlRFUlZBTCA9IDUwMDA7XG5cbmZ1bmN0aW9uIGdldEhvc3QoKSB7XG5cdGNvbnN0IGxvYyA9IHdpbmRvdy5sb2NhdGlvbjtcblx0Y29uc3QgbmV3X3VyaSA9IChsb2MucHJvdG9jb2wgPT09ICdodHRwczonKSA/ICd3c3M6JyA6ICd3czonO1xuXHRyZXR1cm4gYCR7bmV3X3VyaX0vLyR7bG9jLmhvc3R9JHtsb2MucGF0aG5hbWV9YDtcbn1cblxuZnVuY3Rpb24gZXN0YWJsaXNoQ29ubmVjdGlvbihyZXF1ZXN0b3IsIGNhbGxiYWNrKSB7XG5cdHJlcXVlc3Rvci5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KGAke2dldEhvc3QoKX13cy8ke3JlcXVlc3Rvci51cmx9YCk7XG5cdC8vIG9uIG9wZW5cblx0cmVxdWVzdG9yLnNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbigpIHtcblx0XHRyZXF1ZXN0b3IuaXNPcGVuID0gdHJ1ZTtcblx0XHRjb25zb2xlLmxvZygnV2Vic29ja2V0IGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQnKTtcblx0XHRjYWxsYmFjayhudWxsLCByZXF1ZXN0b3IpO1xuXHR9O1xuXHQvLyBvbiBtZXNzYWdlXG5cdHJlcXVlc3Rvci5zb2NrZXQub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRjb25zdCByZXMgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuXHRcdC8vIHNhdmUgc3VjY2VzcyBhbmQgZXJyb3IgaGVyZSwgYXMgd2UgbmVlZCB0byByZW1vdmUgdGhlbSB0byBoYXNoXG5cdFx0Ly8gY29ycmVjdGx5XG5cdFx0Y29uc3Qgc3VjY2VzcyA9IHJlcy5zdWNjZXNzO1xuXHRcdGNvbnN0IGVycm9yID0gcmVzLmVycm9yO1xuXHRcdGNvbnN0IGhhc2ggPSByZXF1ZXN0b3IuZ2V0SGFzaChyZXMpO1xuXHRcdGNvbnN0IHJlcXVlc3QgPSByZXF1ZXN0b3IucmVxdWVzdHMuZ2V0KGhhc2gpO1xuXHRcdHJlcXVlc3Rvci5yZXF1ZXN0cy5kZWxldGUoaGFzaCk7XG5cdFx0aWYgKHN1Y2Nlc3MpIHtcblx0XHRcdHJlcXVlc3QucmVzb2x2ZShyZXF1ZXN0b3IuZ2V0VVJMKCkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXF1ZXN0LnJlamVjdChuZXcgRXJyb3IoZXJyb3IpKTtcblx0XHR9XG5cdH07XG5cdC8vIG9uIGNsb3NlXG5cdHJlcXVlc3Rvci5zb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIGxvZyBjbG9zZSBvbmx5IGlmIGNvbm5lY3Rpb24gd2FzIGV2ZXIgb3BlblxuXHRcdGlmIChyZXF1ZXN0b3IuaXNPcGVuKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oJ1dlYnNvY2tldCBjb25uZWN0aW9uIGNsb3NlZCwgYXR0ZW1wdGluZyB0byByZS1jb25uZWN0IGluJywgUkVUUllfSU5URVJWQUwpO1xuXHRcdH1cblx0XHRyZXF1ZXN0b3Iuc29ja2V0ID0gbnVsbDtcblx0XHRyZXF1ZXN0b3IuaXNPcGVuID0gZmFsc2U7XG5cdFx0Ly8gcmVqZWN0IGFsbCBjdXJyZW50IHJlcXVlc3RzXG5cdFx0cmVxdWVzdG9yLnJlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24oa2V5LCByZXF1ZXN0KSB7XG5cdFx0XHRyZXF1ZXN0LnJlamVjdCgpO1xuXHRcdH0pO1xuXHRcdC8vIGNsZWFyIHJlcXVlc3QgbWFwXG5cdFx0cmVxdWVzdG9yLnJlcXVlc3RzID0gbmV3IE1hcCgpO1xuXHRcdC8vIGF0dGVtcHQgdG8gcmUtZXN0YWJsaXNoIGNvbm5lY3Rpb25cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0ZXN0YWJsaXNoQ29ubmVjdGlvbihyZXF1ZXN0b3IsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBvbmNlIGNvbm5lY3Rpb24gaXMgcmUtZXN0YWJsaXNoZWQsIHNlbmQgcGVuZGluZyByZXF1ZXN0c1xuXHRcdFx0XHRyZXF1ZXN0b3IucGVuZGluZy5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgcGVuZGluZykge1xuXHRcdFx0XHRcdGNvbnN0IHJlcXVlc3QgPSBwZW5kaW5nLnJlcXVlc3Q7XG5cdFx0XHRcdFx0Y29uc3QgZGVmZXJyZWQgPSBwZW5kaW5nLmRlZmVycmVkO1xuXHRcdFx0XHRcdGNvbnN0IGhhc2ggPSBwZW5kaW5nLmhhc2g7XG5cdFx0XHRcdFx0cmVxdWVzdG9yLnJlcXVlc3RzLnNldChoYXNoLCBkZWZlcnJlZCk7XG5cdFx0XHRcdFx0cmVxdWVzdG9yLnNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdC8vIGNsZWFyIHBlbmRpbmcgbWFwXG5cdFx0XHRcdHJlcXVlc3Rvci5wZW5kaW5nID0gbmV3IE1hcCgpO1xuXHRcdFx0fSk7XG5cdFx0fSwgUkVUUllfSU5URVJWQUwpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBwcnVuZShjdXJyZW50KSB7XG5cdF8uZm9yT3duKGN1cnJlbnQsICh2YWx1ZSwga2V5KSA9PiB7XG5cdFx0aWYgKF8uaXNVbmRlZmluZWQodmFsdWUpIHx8XG5cdFx0XHRfLmlzTnVsbCh2YWx1ZSkgfHxcblx0XHRcdF8uaXNOYU4odmFsdWUpIHx8XG5cdFx0XHQoXy5pc1N0cmluZyh2YWx1ZSkgJiYgXy5pc0VtcHR5KHZhbHVlKSkgfHxcblx0XHRcdChfLmlzT2JqZWN0KHZhbHVlKSAmJiBfLmlzRW1wdHkocHJ1bmUodmFsdWUpKSkpIHtcblx0XHRcdGRlbGV0ZSBjdXJyZW50W2tleV07XG5cdFx0fVxuXHR9KTtcblx0Ly8gcmVtb3ZlIGFueSBsZWZ0b3ZlciB1bmRlZmluZWQgdmFsdWVzIGZyb20gdGhlIGRlbGV0ZVxuXHQvLyBvcGVyYXRpb24gb24gYW4gYXJyYXlcblx0aWYgKF8uaXNBcnJheShjdXJyZW50KSkge1xuXHRcdF8ucHVsbChjdXJyZW50LCB1bmRlZmluZWQpO1xuXHR9XG5cdHJldHVybiBjdXJyZW50O1xufVxuXG5mdW5jdGlvbiBwcnVuZUVtcHR5KG9iaikge1xuXHQvLyBkbyBub3QgbW9kaWZ5IHRoZSBvcmlnaW5hbCBvYmplY3QsIGNyZWF0ZSBhIGNsb25lIGluc3RlYWRcblx0cmV0dXJuIHBydW5lKF8uY2xvbmVEZWVwKG9iaikpO1xufVxuXG5mdW5jdGlvbiBoYXNoUmVxKHJlcSkge1xuXHRyZXEuZXJyb3IgPSB1bmRlZmluZWQ7XG5cdHJlcS5zdWNjZXNzID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gc3RyaW5naWZ5KHBydW5lRW1wdHkocmVxKSk7XG59XG5cbmNsYXNzIFJlcXVlc3RvciB7XG5cdGNvbnN0cnVjdG9yKHVybCwgY2FsbGJhY2spIHtcblx0XHR0aGlzLnVybCA9IHVybDtcblx0XHR0aGlzLnJlcXVlc3RzID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMucGVuZGluZyA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLmlzT3BlbiA9IGZhbHNlO1xuXHRcdGVzdGFibGlzaENvbm5lY3Rpb24odGhpcywgY2FsbGJhY2spO1xuXHR9XG5cdGdldEhhc2gocmVxKSB7XG5cdFx0cmV0dXJuIGhhc2hSZXEocmVxKTtcblx0fVxuXHRnZXRVUkwoKSB7XG5cdFx0cmV0dXJuIHRoaXMudXJsO1xuXHR9XG5cdGdldChyZXEpIHtcblx0XHRjb25zdCBoYXNoID0gdGhpcy5nZXRIYXNoKHJlcSk7XG5cdFx0aWYgKCF0aGlzLmlzT3Blbikge1xuXHRcdFx0bGV0IHBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuZ2V0KGhhc2gpO1xuXHRcdFx0aWYgKHBlbmRpbmcpIHtcblx0XHRcdFx0cmV0dXJuIHBlbmRpbmcuZGVmZXJyZWQucHJvbWlzZSgpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gaWYgbm8gY29ubmVjdGlvbiwgYWRkIHJlcXVlc3QgdG8gcGVuZGluZyBxdWV1ZVxuXHRcdFx0Y29uc3QgZGVmZXJyZWQgPSBuZXcgJC5EZWZlcnJlZCgpO1xuXHRcdFx0cGVuZGluZyA9IHtcblx0XHRcdFx0aGFzaDogaGFzaCxcblx0XHRcdFx0cmVxdWVzdDogcmVxLFxuXHRcdFx0XHRkZWZlcnJlZDogZGVmZXJyZWRcblx0XHRcdH07XG5cdFx0XHR0aGlzLnBlbmRpbmcuc2V0KGhhc2gsIHBlbmRpbmcpO1xuXHRcdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcblx0XHR9XG5cdFx0bGV0IGRlZmVycmVkID0gdGhpcy5yZXF1ZXN0cy5nZXQoaGFzaCk7XG5cdFx0aWYgKGRlZmVycmVkKSB7XG5cdFx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHRcdH1cblx0XHRkZWZlcnJlZCA9IG5ldyAkLkRlZmVycmVkKCk7XG5cdFx0dGhpcy5yZXF1ZXN0cy5zZXQoaGFzaCwgZGVmZXJyZWQpO1xuXHRcdHRoaXMuc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkocmVxKSk7XG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcblx0fVxuXHRjbG9zZSgpIHtcblx0XHR0aGlzLnNvY2tldC5vbmNsb3NlID0gbnVsbDtcblx0XHR0aGlzLnNvY2tldC5jbG9zZSgpO1xuXHRcdHRoaXMuc29ja2V0ID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlcXVlc3RvcjtcbiJdfQ==
